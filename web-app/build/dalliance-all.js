(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// bam.js: indexed binary alignments
//

"use strict";

if (typeof(require) !== 'undefined') {
    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;
    var intersection = spans.intersection;

    var bin = require('./bin');
    var readInt = bin.readInt;
    var readShort = bin.readShort;
    var readByte = bin.readByte;
    var readInt64 = bin.readInt64;
    var readFloat = bin.readFloat;

    var lh3utils = require('./lh3utils');
    var readVob = lh3utils.readVob;
    var unbgzf = lh3utils.unbgzf;
    var reg2bins = lh3utils.reg2bins;
    var Chunk = lh3utils.Chunk;
}


var BAM_MAGIC = 0x14d4142;
var BAI_MAGIC = 0x1494142;

var BamFlags = {
    MULTIPLE_SEGMENTS:       0x1,
    ALL_SEGMENTS_ALIGN:      0x2,
    SEGMENT_UNMAPPED:        0x4,
    NEXT_SEGMENT_UNMAPPED:   0x8,
    REVERSE_COMPLEMENT:      0x10,
    NEXT_REVERSE_COMPLEMENT: 0x20,
    FIRST_SEGMENT:           0x40,
    LAST_SEGMENT:            0x80,
    SECONDARY_ALIGNMENT:     0x100,
    QC_FAIL:                 0x200,
    DUPLICATE:               0x400,
    SUPPLEMENTARY:           0x800
};

function BamFile() {
}

function makeBam(data, bai, callback) {
    var bam = new BamFile();
    bam.data = data;
    bam.bai = bai;

    bam.bai.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(
        if (!header) {
            return callback(null, "Couldn't access BAI");
        }

        var uncba = new Uint8Array(header);
        var baiMagic = readInt(uncba, 0);
        if (baiMagic != BAI_MAGIC) {
            return callback(null, 'Not a BAI file, magic=0x' + baiMagic.toString(16));
        }

        var nref = readInt(uncba, 4);

        bam.indices = [];

        var p = 8;
        var minBlockIndex = 1000000000;
        for (var ref = 0; ref < nref; ++ref) {
            var blockStart = p;
            var nbin = readInt(uncba, p); p += 4;
            for (var b = 0; b < nbin; ++b) {
                var bin = readInt(uncba, p);
                var nchnk = readInt(uncba, p+4);
                p += 8 + (nchnk * 16);
            }
            var nintv = readInt(uncba, p); p += 4;
            
            var q = p;
            for (var i = 0; i < nintv; ++i) {
                var v = readVob(uncba, q); q += 8;
                if (v) {
                    var bi = v.block;
                    if (v.offset > 0)
                        bi += 65536;

                    if (bi < minBlockIndex)
                        minBlockIndex = bi;
                    break;
                }
            }
            p += (nintv * 8);


            if (nbin > 0) {
                bam.indices[ref] = new Uint8Array(header, blockStart, p - blockStart);
            }                     
        }

        bam.data.slice(0, minBlockIndex).fetch(function(r) {
            if (!r) {
                return callback(null, "Couldn't access BAM");
            }
            
            var unc = unbgzf(r, r.byteLength);
            var uncba = new Uint8Array(unc);

            var magic = readInt(uncba, 0);
            if (magic != BAM_MAGIC) {
                return callback(null, "Not a BAM file, magic=0x" + magic.toString(16));
            }
            var headLen = readInt(uncba, 4);
            var header = '';
            for (var i = 0; i < headLen; ++i) {
                header += String.fromCharCode(uncba[i + 8]);
            }

            var nRef = readInt(uncba, headLen + 8);
            var p = headLen + 12;

            bam.chrToIndex = {};
            bam.indexToChr = [];
            for (var i = 0; i < nRef; ++i) {
                var lName = readInt(uncba, p);
                var name = '';
                for (var j = 0; j < lName-1; ++j) {
                    name += String.fromCharCode(uncba[p + 4 + j]);
                }
                var lRef = readInt(uncba, p + lName + 4);
                bam.chrToIndex[name] = i;
                if (name.indexOf('chr') == 0) {
                    bam.chrToIndex[name.substring(3)] = i;
                } else {
                    bam.chrToIndex['chr' + name] = i;
                }
                bam.indexToChr.push(name);

                p = p + 8 + lName;
            }

            if (bam.indices) {
                return callback(bam);
            }
        });
    });
}



BamFile.prototype.blocksForRange = function(refId, min, max) {
    var index = this.indices[refId];
    if (!index) {
        return [];
    }

    var intBinsL = reg2bins(min, max);
    var intBins = [];
    for (var i = 0; i < intBinsL.length; ++i) {
        intBins[intBinsL[i]] = true;
    }
    var leafChunks = [], otherChunks = [];

    var nbin = readInt(index, 0);
    var p = 4;
    for (var b = 0; b < nbin; ++b) {
        var bin = readInt(index, p);
        var nchnk = readInt(index, p+4);
//        dlog('bin=' + bin + '; nchnk=' + nchnk);
        p += 8;
        if (intBins[bin]) {
            for (var c = 0; c < nchnk; ++c) {
                var cs = readVob(index, p);
                var ce = readVob(index, p + 8);
                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));
                p += 16;
            }
        } else {
            p +=  (nchnk * 16);
        }
    }
//    dlog('leafChunks = ' + miniJSONify(leafChunks));
//    dlog('otherChunks = ' + miniJSONify(otherChunks));

    var nintv = readInt(index, p);
    var lowest = null;
    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);
    for (var i = minLin; i <= maxLin; ++i) {
        var lb =  readVob(index, p + 4 + (i * 8));
        if (!lb) {
            continue;
        }
        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {
            lowest = lb;
        }
    }
    // dlog('Lowest LB = ' + lowest);
    
    var prunedOtherChunks = [];
    if (lowest != null) {
        for (var i = 0; i < otherChunks.length; ++i) {
            var chnk = otherChunks[i];
            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {
                prunedOtherChunks.push(chnk);
            }
        }
    }
    // dlog('prunedOtherChunks = ' + miniJSONify(prunedOtherChunks));
    otherChunks = prunedOtherChunks;

    var intChunks = [];
    for (var i = 0; i < otherChunks.length; ++i) {
        intChunks.push(otherChunks[i]);
    }
    for (var i = 0; i < leafChunks.length; ++i) {
        intChunks.push(leafChunks[i]);
    }

    intChunks.sort(function(c0, c1) {
        var dif = c0.minv.block - c1.minv.block;
        if (dif != 0) {
            return dif;
        } else {
            return c0.minv.offset - c1.minv.offset;
        }
    });
    var mergedChunks = [];
    if (intChunks.length > 0) {
        var cur = intChunks[0];
        for (var i = 1; i < intChunks.length; ++i) {
            var nc = intChunks[i];
            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block
                cur = new Chunk(cur.minv, nc.maxv);
            } else {
                mergedChunks.push(cur);
                cur = nc;
            }
        }
        mergedChunks.push(cur);
    }
    // dlog('mergedChunks = ' + miniJSONify(mergedChunks));

    return mergedChunks;
}

BamFile.prototype.fetch = function(chr, min, max, callback, opts) {
    var thisB = this;
    opts = opts || {};

    var chrId = this.chrToIndex[chr];
    var chunks;
    if (chrId === undefined) {
        chunks = [];
    } else {
        chunks = this.blocksForRange(chrId, min, max);
        if (!chunks) {
            callback(null, 'Error in index fetch');
        }
    }
    
    var records = [];
    var index = 0;
    var data;

    function tramp() {
        if (index >= chunks.length) {
            return callback(records);
        } else if (!data) {
            // dlog('fetching ' + index);
            var c = chunks[index];
            var fetchMin = c.minv.block;
            var fetchMax = c.maxv.block + (1<<16); // *sigh*
            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) {
                data = unbgzf(r, c.maxv.block - c.minv.block + 1);
                return tramp();
            });
        } else {
            var ba = new Uint8Array(data);
            thisB.readBamRecords(ba, chunks[index].minv.offset, records, min, max, chrId, opts);
            data = null;
            ++index;
            return tramp();
        }
    }
    tramp();
}

var SEQRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];
var CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];

function BamRecord() {
}

BamFile.prototype.readBamRecords = function(ba, offset, sink, min, max, chrId, opts) {
    while (true) {
        var blockSize = readInt(ba, offset);
        var blockEnd = offset + blockSize + 4;
        if (blockEnd >= ba.length) {
            return sink;
        }

        var record = new BamRecord();

        var refID = readInt(ba, offset + 4);
        var pos = readInt(ba, offset + 8);
        
        var bmn = readInt(ba, offset + 12);
        var bin = (bmn & 0xffff0000) >> 16;
        var mq = (bmn & 0xff00) >> 8;
        var nl = bmn & 0xff;

        var flag_nc = readInt(ba, offset + 16);
        var flag = (flag_nc & 0xffff0000) >> 16;
        var nc = flag_nc & 0xffff;
    
        var lseq = readInt(ba, offset + 20);
        
        var nextRef  = readInt(ba, offset + 24);
        var nextPos = readInt(ba, offset + 28);
        
        var tlen = readInt(ba, offset + 32);
    
        record.segment = this.indexToChr[refID];
        record.flag = flag;
        record.pos = pos;
        record.mq = mq;
        if (opts.light)
            record.seqLength = lseq;

        if (!opts.light) {
            if (nextRef >= 0) {
                record.nextSegment = this.indexToChr[nextRef];
                record.nextPos = nextPos;
            }

            var readName = '';
            for (var j = 0; j < nl-1; ++j) {
                readName += String.fromCharCode(ba[offset + 36 + j]);
            }
            record.readName = readName;
        
            var p = offset + 36 + nl;

            var cigar = '';
            for (var c = 0; c < nc; ++c) {
                var cigop = readInt(ba, p);
                cigar = cigar + (cigop>>4) + CIGAR_DECODER[cigop & 0xf];
                p += 4;
            }
            record.cigar = cigar;
        
            var seq = '';
            var seqBytes = (lseq + 1) >> 1;
            for (var j = 0; j < seqBytes; ++j) {
                var sb = ba[p + j];
                seq += SEQRET_DECODER[(sb & 0xf0) >> 4];
                seq += SEQRET_DECODER[(sb & 0x0f)];
            }
            p += seqBytes;
            record.seq = seq;

            var qseq = '';
            for (var j = 0; j < lseq; ++j) {
                qseq += String.fromCharCode(ba[p + j] + 33);
            }
            p += lseq;
            record.quals = qseq;

            while (p < blockEnd) {
                var tag = String.fromCharCode(ba[p], ba[p + 1]);
                var type = String.fromCharCode(ba[p + 2]);
                var value;

                if (type == 'A') {
                    value = String.fromCharCode(ba[p + 3]);
                    p += 4;
                } else if (type == 'i' || type == 'I') {
                    value = readInt(ba, p + 3);
                    p += 7;
                } else if (type == 'c' || type == 'C') {
                    value = ba[p + 3];
                    p += 4;
                } else if (type == 's' || type == 'S') {
                    value = readShort(ba, p + 3);
                    p += 5;
                } else if (type == 'f') {
                    value = readFloat(ba, p + 3);
                    p += 7;
                } else if (type == 'Z' || type == 'H') {
                    p += 3;
                    value = '';
                    for (;;) {
                        var cc = ba[p++];
                        if (cc == 0) {
                            break;
                        } else {
                            value += String.fromCharCode(cc);
                        }
                    }
                } else if (type == 'B') {
                    var atype = String.fromCharCode(ba[p + 3]);
                    var alen = readInt(ba, p + 4);
                    var elen;
                    var reader;
                    if (atype == 'i' || atype == 'I' || atype == 'f') {
                        elen = 4;
                        if (atype == 'f')
                            reader = readFloat;
                        else
                            reader = readInt;
                    } else if (atype == 's' || atype == 'S') {
                        elen = 2;
                        reader = readShort;
                    } else if (atype == 'c' || atype == 'C') {
                        elen = 1;
                        reader = readByte;
                    } else {
                        throw 'Unknown array type ' + atype;
                    }

                    p += 8;
                    value = [];
                    for (var i = 0; i < alen; ++i) {
                        value.push(reader(ba, p));
                        p += elen;
                    }
                } else {
                    throw 'Unknown type '+ type;
                }
                record[tag] = value;
            }
        }

        if (!min || record.pos <= max && record.pos + lseq >= min) {
            if (chrId === undefined || refID == chrId) {
                sink.push(record);
            }
        }
        offset = blockEnd;
    }

    // Exits via top of loop.
};

if (typeof(module) !== 'undefined') {
    module.exports = {
        makeBam: makeBam,
        BAM_MAGIC: BAM_MAGIC,
        BAI_MAGIC: BAI_MAGIC,
        BamFlags: BamFlags
    };
}
},{"./bin":4,"./lh3utils":22,"./spans":33}],2:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// bedwig.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sa = require('./sourceadapters');
    var dalliance_registerParserFactory = sa.registerParserFactory;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;
}


function BedWigParser(type) {
    this.type = type;
}

BedWigParser.prototype.createSession = function(sink) {
    if (this.type == 'wig')
        return new WigParseSession(this, sink);
    else
        return new BedParseSession(this, sink);
}

var __KV_REGEXP=/([^=]+)=(.+)/;
var __SPACE_REGEXP=/\s/;


function BedParseSession(parser, sink) {
    this.parser = parser;
    this.sink = sink;
}

BedParseSession.prototype.parse = function(line) {
    var toks = line.split(__SPACE_REGEXP);
    if (toks.length < 3)
        return;

    var start = parseInt(toks[1]) + 1;
    var end = parseInt(toks[2]);

    var f = {segment: toks[0], 
             min: start,
             max: end};

    if (toks.length > 3 && toks[3] !== '.') {
        f.label = toks[3];
    }

    if (toks.length > 4) {
        f.score = parseFloat(toks[4])
    }

    if (toks.length > 5) {
        f.orientation = toks[5];
    }

    if (toks.length > 8) {
        var color = toks[8];
        if (BED_COLOR_REGEXP.test(color)) {
            f.itemRgb = 'rgb(' + color + ')';
        }
    }

    if (toks.length >= 12) {
        var thickStart = parseInt(toks[6]);
        var thickEnd   = parseInt(toks[7]);
        var blockCount = parseInt(toks[9]);
        var blockSizes = toks[10].split(',').map(function(x) {return parseInt(x)});
        var blockStarts = toks[11].split(',').map(function(x) {return parseInt(x)});

        f.type = 'transcript'
        var grp = new DASGroup();
        grp.id = toks[3];
        grp.type = 'transcript'
        grp.notes = [];
        f.groups = [grp];

        if (toks.length > 12) {
            var geneId = toks[12];
            var geneName = geneId;
            if (toks.length > 13) {
                geneName = toks[13];
            }
            var gg = new DASGroup();
            gg.id = geneId;
            gg.label = geneName;
            gg.type = 'gene';
            f.groups.push(gg);
        }  

        var spans = null;
        for (var b = 0; b < blockCount; ++b) {
            var bmin = blockStarts[b] + start;
            var bmax = bmin + blockSizes[b];
            var span = new Range(bmin, bmax);
            if (spans) {
                spans = union(spans, span);
            } else {
                spans = span;
            }
        }
                    
        var tsList = spans.ranges();
        for (var s = 0; s < tsList.length; ++s) {
            var ts = tsList[s];
            var bf = shallowCopy(f);
            bf.min = ts.min();
            bf.max = ts.max();
            this.sink(bf);
        }

        if (thickEnd > thickStart) {
            var tl = intersection(spans, new Range(thickStart, thickEnd));
            if (tl) {
                f.type = 'translation';
                var tlList = tl.ranges();
                for (var s = 0; s < tlList.length; ++s) {
                    var ts = tlList[s];
                    var bf = shallowCopy(f);
                    bf.min = ts.min();
                    bf.max = ts.max();
                    this.sink(bf);
                }
            }
        }
    } else {
        this.sink(f);
    }
}

BedParseSession.prototype.flush = function() {};

function WigParseSession(parser, sink) {
    this.parser = parser;
    this.sink = sink;
    this.wigState = null;
}

WigParseSession.prototype.parse = function(line) {
    var toks = line.split(__SPACE_REGEXP);

    if (toks[0] == 'fixedStep') {
        this.wigState = 'fixedStep';
        this.chr = this.pos = this.step = null;
        this.span = 1;

        for (var ti = 1; ti < toks.length; ++ti) {
            var m = __KV_REGEXP.exec(toks[ti]);
            if (m) {
                if (m[1] == 'chrom') {
                    this.chr = m[2];
                } else if (m[1] == 'start') {
                    this.pos = parseInt(m[2]);
                } else if (m[1] == 'step') {
                    this.step = parseInt(m[2]);
                } else if (m[1] == 'span') {
                    this.span = parseInt(m[2]);
                }
            }
        }
    } else if (toks[0] == 'variableStep') {
        this.wigState = 'variableStep';
        this.chr = null;
        this.span = 1;

        for (var ti = 1; ti < toks.length; ++ti) {
            var m = __KV_REGEXP.exec(toks[ti]);
            if (m[1] == 'chrom') {
                this.chr = m[2];
            } else if (m[1] == 'span') {
                this.span = parseInt(m[2]);
            }
        }
    } else {
        if (!this.wigState) {
            if (toks.length < 4)
                return;

            var f = {segment: toks[0], 
                     min: parseInt(toks[1]) + 1, 
                     max: parseInt(toks[2]),
                     score: parseFloat(toks[3])};

            this.sink(f);
        } else if (this.wigState == 'fixedStep') {
            if (toks.length != 1)
                return;
            var score = parseFloat(toks[0]);
            var f = {segment: this.chr, min: this.pos, max: this.pos + this.span - 1, score: score};
            this.pos += this.step;
            this.sink(f);
        } else if (this.wigState == 'variableStep') {
            if (toks.length != 2)
                return;
            var pos = parseInt(toks[0]);
            var score = parseFloat(toks[1]);
            var f = {segment: this.chr, min: pos, max: pos + this.span - 1, score: score};
            this.sink(f);
        }
    }
}

WigParseSession.prototype.flush = function() {};

BedWigParser.prototype.getStyleSheet = function(callback) {
    var thisB = this;
    var stylesheet = new DASStylesheet();

    if (this.type == 'wig') {
        var wigStyle = new DASStyle();
        wigStyle.glyph = 'HISTOGRAM';
        wigStyle.BGCOLOR = 'blue';
        wigStyle.HEIGHT=30;
        stylesheet.pushStyle({type: 'default'}, null, wigStyle);
    } else {
        var wigStyle = new DASStyle();
        wigStyle.glyph = 'BOX';
        wigStyle.FGCOLOR = 'black';
        wigStyle.BGCOLOR = 'blue'
        wigStyle.HEIGHT = 8;
        wigStyle.BUMP = true;
        wigStyle.LABEL = true;
        wigStyle.ZINDEX = 20;
        stylesheet.pushStyle({type: 'default'}, null, wigStyle);

        var wigStyle = new DASStyle();
        wigStyle.glyph = 'BOX';
        wigStyle.FGCOLOR = 'black';
        wigStyle.BGCOLOR = 'red'
        wigStyle.HEIGHT = 10;
        wigStyle.BUMP = true;
        wigStyle.ZINDEX = 20;
        stylesheet.pushStyle({type: 'translation'}, null, wigStyle);
                
        var tsStyle = new DASStyle();
        tsStyle.glyph = 'BOX';
        tsStyle.FGCOLOR = 'black';
        tsStyle.BGCOLOR = 'white';
        tsStyle.HEIGHT = 10;
        tsStyle.ZINDEX = 10;
        tsStyle.BUMP = true;
        tsStyle.LABEL = true;
        stylesheet.pushStyle({type: 'transcript'}, null, tsStyle);

        var densStyle = new DASStyle();
        densStyle.glyph = 'HISTOGRAM';
        densStyle.COLOR1 = 'white';
        densStyle.COLOR2 = 'black';
        densStyle.HEIGHT=30;
        stylesheet.pushStyle({type: 'density'}, null, densStyle);
    }

    return callback(stylesheet);
}

dalliance_registerParserFactory('bed', function(t) {return new BedWigParser(t)});
dalliance_registerParserFactory('wig', function(t) {return new BedWigParser(t)});
},{"./das":10,"./sourceadapters":32}],3:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// bigwig.js: indexed binary WIG (and BED) files
//

"use strict";


if (typeof(require) !== 'undefined') {
    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;
    var intersection = spans.intersection;

    var das = require('./das');
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;

    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;

    var bin = require('./bin');
    var readInt = bin.readInt;

    var jszlib = require('jszlib');
    var jszlib_inflate_buffer = jszlib.inflateBuffer;
    var arrayCopy = jszlib.arrayCopy;
}

var BIG_WIG_MAGIC = 0x888FFC26;
var BIG_WIG_MAGIC_BE = 0x26FC8F88;
var BIG_BED_MAGIC = 0x8789F2EB;
var BIG_BED_MAGIC_BE = 0xEBF28987;


var BIG_WIG_TYPE_GRAPH = 1;
var BIG_WIG_TYPE_VSTEP = 2;
var BIG_WIG_TYPE_FSTEP = 3;
  
var M1 = 256;
var M2 = 256*256;
var M3 = 256*256*256;
var M4 = 256*256*256*256;

var BED_COLOR_REGEXP = new RegExp("^[0-9]+,[0-9]+,[0-9]+");

function bwg_readOffset(ba, o) {
    var offset = ba[o] + ba[o+1]*M1 + ba[o+2]*M2 + ba[o+3]*M3 + ba[o+4]*M4;
    return offset;
}

function BigWig() {
}

BigWig.prototype.readChromTree = function(callback) {
    var thisB = this;
    this.chromsToIDs = {};
    this.idsToChroms = {};
    this.maxID = 0;

    var udo = this.unzoomedDataOffset;
    var eb = (udo - this.chromTreeOffset) & 3;
    udo = udo + 4 - eb;

    this.data.slice(this.chromTreeOffset, udo - this.chromTreeOffset).fetch(function(bpt) {
        var ba = new Uint8Array(bpt);
        var sa = new Int16Array(bpt);
        var la = new Int32Array(bpt);
        var bptMagic = la[0];
        var blockSize = la[1];
        var keySize = la[2];
        var valSize = la[3];
        var itemCount = bwg_readOffset(ba, 16);
        var rootNodeOffset = 32;

        var bptReadNode = function(offset) {
            var nodeType = ba[offset];
            var cnt = sa[(offset/2) + 1];
            offset += 4;
            for (var n = 0; n < cnt; ++n) {
                if (nodeType == 0) {
                    offset += keySize;
                    var childOffset = bwg_readOffset(ba, offset);
                    offset += 8;
                    childOffset -= thisB.chromTreeOffset;
                    bptReadNode(childOffset);
                } else {
                    var key = '';
                    for (var ki = 0; ki < keySize; ++ki) {
                        var charCode = ba[offset++];
                        if (charCode != 0) {
                            key += String.fromCharCode(charCode);
                        }
                    }
                    var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);
                    var chromSize = (ba[offset + 7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);
                    offset += 8;

                    thisB.chromsToIDs[key] = chromId;
                    if (key.indexOf('chr') == 0) {
                        thisB.chromsToIDs[key.substr(3)] = chromId;
                    }
                    thisB.idsToChroms[chromId] = key;
                    thisB.maxID = Math.max(thisB.maxID, chromId);
                }
            }
        };
        bptReadNode(rootNodeOffset);

        callback(thisB);
    });
}

function BigWigView(bwg, cirTreeOffset, cirTreeLength, isSummary) {
    this.bwg = bwg;
    this.cirTreeOffset = cirTreeOffset;
    this.cirTreeLength = cirTreeLength;
    this.isSummary = isSummary;
}



BigWigView.prototype.readWigData = function(chrName, min, max, callback) {
    var chr = this.bwg.chromsToIDs[chrName];
    if (chr === undefined) {
        // Not an error because some .bwgs won't have data for all chromosomes.

        // dlog("Couldn't find chr " + chrName);
        // dlog('Chroms=' + miniJSONify(this.bwg.chromsToIDs));
        return callback([]);
    } else {
        this.readWigDataById(chr, min, max, callback);
    }
}

BigWigView.prototype.readWigDataById = function(chr, min, max, callback) {
    var thisB = this;
    if (!this.cirHeader) {
        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {
            thisB.cirHeader = result;
            var la = new Int32Array(thisB.cirHeader);
            thisB.cirBlockSize = la[1];
            thisB.readWigDataById(chr, min, max, callback);
        });
        return;
    }

    var blocksToFetch = [];
    var outstanding = 0;

    var beforeBWG = Date.now();

    var filter = function(chromId, fmin, fmax, toks) {
        return ((chr < 0 || chromId == chr) && fmin <= max && fmax >= min);
    }

    var cirFobRecur = function(offset, level) {
        if (thisB.bwg.instrument)
            console.log('level=' + level + '; offset=' + offset + '; time=' + (Date.now()|0));

        outstanding += offset.length;

        if (offset.length == 1 && offset[0] - thisB.cirTreeOffset == 48 && thisB.cachedCirRoot) {
            cirFobRecur2(thisB.cachedCirRoot, 0, level);
            --outstanding;
            if (outstanding == 0) {
                thisB.fetchFeatures(filter, blocksToFetch, callback);
            }
            return;
        }

        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.
        var spans;
        for (var i = 0; i < offset.length; ++i) {
            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);
            spans = spans ? union(spans, blockSpan) : blockSpan;
        }
        
        var fetchRanges = spans.ranges();
        for (var r = 0; r < fetchRanges.length; ++r) {
            var fr = fetchRanges[r];
            cirFobStartFetch(offset, fr, level);
        }
    }

    var cirFobStartFetch = function(offset, fr, level, attempts) {
        var length = fr.max() - fr.min();
        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {
            for (var i = 0; i < offset.length; ++i) {
                if (fr.contains(offset[i])) {
                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);

                    if (offset[i] - thisB.cirTreeOffset == 48 && offset[i] - fr.min() == 0)
                        thisB.cachedCirRoot = resultBuffer;

                    --outstanding;
                    if (outstanding == 0) {
                        thisB.fetchFeatures(filter, blocksToFetch, callback);
                    }
                }
            }
        });
    }

    var cirFobRecur2 = function(cirBlockData, offset, level) {
        var ba = new Uint8Array(cirBlockData);
        var sa = new Int16Array(cirBlockData);
        var la = new Int32Array(cirBlockData);

        var isLeaf = ba[offset];
        var cnt = sa[offset/2 + 1];
        offset += 4;

        if (isLeaf != 0) {
            for (var i = 0; i < cnt; ++i) {
                var lo = offset/4;
                var startChrom = la[lo];
                var startBase = la[lo + 1];
                var endChrom = la[lo + 2];
                var endBase = la[lo + 3];
                var blockOffset = bwg_readOffset(ba, offset+16);
                var blockSize = bwg_readOffset(ba, offset+24);
                if (((chr < 0 || startChrom < chr) || (startChrom == chr && startBase <= max)) &&
                    ((chr < 0 || endChrom   > chr) || (endChrom == chr && endBase >= min)))
                {
                    blocksToFetch.push({offset: blockOffset, size: blockSize});
                }
                offset += 32;
            }
        } else {
            var recurOffsets = [];
            for (var i = 0; i < cnt; ++i) {
                var lo = offset/4;
                var startChrom = la[lo];
                var startBase = la[lo + 1];
                var endChrom = la[lo + 2];
                var endBase = la[lo + 3];
                var blockOffset = bwg_readOffset(ba, offset+16);
                if ((chr < 0 || startChrom < chr || (startChrom == chr && startBase <= max)) &&
                    (chr < 0 || endChrom   > chr || (endChrom == chr && endBase >= min)))
                {
                    recurOffsets.push(blockOffset);
                }
                offset += 24;
            }
            if (recurOffsets.length > 0) {
                cirFobRecur(recurOffsets, level + 1);
            }
        }
    };

    cirFobRecur([thisB.cirTreeOffset + 48], 1);
}


BigWigView.prototype.fetchFeatures = function(filter, blocksToFetch, callback) {
    var thisB = this;

    blocksToFetch.sort(function(b0, b1) {
        return (b0.offset|0) - (b1.offset|0);
    });

    if (blocksToFetch.length == 0) {
        callback([]);
    } else {
        var features = [];
        var createFeature = function(chr, fmin, fmax, opts) {
            if (!opts) {
                opts = {};
            }
        
            var f = new DASFeature();
            f._chromId = chr;
            f.segment = thisB.bwg.idsToChroms[chr];
            f.min = fmin;
            f.max = fmax;
            f.type = 'bigwig';
            
            for (var k in opts) {
                f[k] = opts[k];
            }
            
            features.push(f);
        };

        var tramp = function() {
            if (blocksToFetch.length == 0) {
                var afterBWG = Date.now();
                // dlog('BWG fetch took ' + (afterBWG - beforeBWG) + 'ms');
                callback(features);
                return;  // just in case...
            } else {
                var block = blocksToFetch[0];
                if (block.data) {
                    thisB.parseFeatures(block.data, createFeature, filter);
                    blocksToFetch.splice(0, 1);
                    tramp();
                } else {
                    var fetchStart = block.offset;
                    var fetchSize = block.size;
                    var bi = 1;
                    while (bi < blocksToFetch.length && blocksToFetch[bi].offset == (fetchStart + fetchSize)) {
                        fetchSize += blocksToFetch[bi].size;
                        ++bi;
                    }

                    thisB.bwg.data.slice(fetchStart, fetchSize).fetch(function(result) {
                        var offset = 0;
                        var bi = 0;
                        while (offset < fetchSize) {
                            var fb = blocksToFetch[bi];
                        
                            var data;
                            if (thisB.bwg.uncompressBufSize > 0) {
                                data = jszlib_inflate_buffer(result, offset + 2, fb.size - 2);
                            } else {
                                var tmp = new Uint8Array(fb.size);    // FIXME is this really the best we can do?
                                arrayCopy(new Uint8Array(result, offset, fb.size), 0, tmp, 0, fb.size);
                                data = tmp.buffer;
                            }
                            fb.data = data;
                            
                            offset += fb.size;
                            ++bi;
                        }
                        tramp();
                    });
                }
            }
        }
        tramp();
    }
}

BigWigView.prototype.parseFeatures = function(data, createFeature, filter) {
    var ba = new Uint8Array(data);

    if (this.isSummary) {
        var sa = new Int16Array(data);
        var la = new Int32Array(data);
        var fa = new Float32Array(data);

        var itemCount = data.byteLength/32;
        for (var i = 0; i < itemCount; ++i) {
            var chromId =   la[(i*8)];
            var start =     la[(i*8)+1];
            var end =       la[(i*8)+2];
            var validCnt =  la[(i*8)+3];
            var minVal    = fa[(i*8)+4];
            var maxVal    = fa[(i*8)+5];
            var sumData   = fa[(i*8)+6];
            var sumSqData = fa[(i*8)+7];
            
            if (filter(chromId, start + 1, end)) {
                var summaryOpts = {type: 'bigwig', score: sumData/validCnt, maxScore: maxVal};
                if (this.bwg.type == 'bigbed') {
                    summaryOpts.type = 'density';
                }
                createFeature(chromId, start + 1, end, summaryOpts);
            }
        }
    } else if (this.bwg.type == 'bigwig') {
        var sa = new Int16Array(data);
        var la = new Int32Array(data);
        var fa = new Float32Array(data);

        var chromId = la[0];
        var blockStart = la[1];
        var blockEnd = la[2];
        var itemStep = la[3];
        var itemSpan = la[4];
        var blockType = ba[20];
        var itemCount = sa[11];
        
        if (blockType == BIG_WIG_TYPE_FSTEP) {
            for (var i = 0; i < itemCount; ++i) {
                var score = fa[i + 6];
                var fmin = blockStart + (i*itemStep) + 1, fmax = blockStart + (i*itemStep) + itemSpan;
                if (filter(chromId, fmin, fmax))
                    createFeature(chromId, fmin, fmax, {score: score});
            }
        } else if (blockType == BIG_WIG_TYPE_VSTEP) {
            for (var i = 0; i < itemCount; ++i) {
                var start = la[(i*2) + 6] + 1;
                var end = start + itemSpan - 1;
                var score = fa[(i*2) + 7];
                if (filter(chromId, start, end))
                    createFeature(chromId, start, end, {score: score});
            }
        } else if (blockType == BIG_WIG_TYPE_GRAPH) {
            for (var i = 0; i < itemCount; ++i) {
                var start = la[(i*3) + 6] + 1;
                var end   = la[(i*3) + 7];
                var score = fa[(i*3) + 8];
                if (start > end) {
                    start = end;
                }
                if (filter(chromId, start, end))
                    createFeature(chromId, start, end, {score: score});
            }
        } else {
            console.log('Currently not handling bwgType=' + blockType);
        }
    } else if (this.bwg.type == 'bigbed') {
        var offset = 0;
        var dfc = this.bwg.definedFieldCount;
        var schema = this.bwg.schema;

        while (offset < ba.length) {
            var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);
            var start = (ba[offset+7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);
            var end = (ba[offset+11]<<24) | (ba[offset+10]<<16) | (ba[offset+9]<<8) | (ba[offset+8]);
            offset += 12;
            var rest = '';
            while (true) {
                var ch = ba[offset++];
                if (ch != 0) {
                    rest += String.fromCharCode(ch);
                } else {
                    break;
                }
            }

            var featureOpts = {};
            
            var bedColumns;
            if (rest.length > 0) {
                bedColumns = rest.split('\t');
            } else {
                bedColumns = [];
            }
            if (bedColumns.length > 0 && dfc > 3) {
                featureOpts.label = bedColumns[0];
            }
            if (bedColumns.length > 1 && dfc > 4) {
                var score = parseInt(bedColumns[1]);
                if (!isNaN(score))
                    featureOpts.score = score;
            }
            if (bedColumns.length > 2 && dfc > 5) {
                featureOpts.orientation = bedColumns[2];
            }
            if (bedColumns.length > 5 && dfc > 8) {
                var color = bedColumns[5];
                if (BED_COLOR_REGEXP.test(color)) {
                    featureOpts.itemRgb = 'rgb(' + color + ')';
                }
            }

            if (bedColumns.length > dfc-3 && schema) {
                for (var col = dfc - 3; col < bedColumns.length; ++col) {
                    featureOpts[schema.fields[col+3].name] = bedColumns[col];
                }
            }

            if (filter(chromId, start + 1, end, bedColumns)) {
                if (dfc < 12) {
                    createFeature(chromId, start + 1, end, featureOpts);
                } else {
                    var thickStart = bedColumns[3]|0;
                    var thickEnd   = bedColumns[4]|0;
                    var blockCount = bedColumns[6]|0;
                    var blockSizes = bedColumns[7].split(',');
                    var blockStarts = bedColumns[8].split(',');
                    
                    featureOpts.type = 'transcript'
                    var grp = new DASGroup();
                    for (var k in featureOpts) {
                        grp[k] = featureOpts[k];
                    }
                    grp.id = bedColumns[0];
                    grp.segment = this.bwg.idsToChroms[chromId];
                    grp.min = start + 1;
                    grp.max = end;
                    grp.notes = [];
                    featureOpts.groups = [grp];

                    if (bedColumns.length > 9) {
                        var geneId = bedColumns[9];
                        var geneName = geneId;
                        if (bedColumns.length > 10) {
                            geneName = bedColumns[10];
                        }
                        var gg = shallowCopy(grp);
                        gg.id = geneId;
                        gg.label = geneName;
                        gg.type = 'gene';
                        featureOpts.groups.push(gg);
                    }

                    var spanList = [];
                    for (var b = 0; b < blockCount; ++b) {
                        var bmin = (blockStarts[b]|0) + start;
                        var bmax = bmin + (blockSizes[b]|0);
                        var span = new Range(bmin, bmax);
                        spanList.push(span);
                    }
                    var spans = union(spanList);
                    
                    var tsList = spans.ranges();
                    for (var s = 0; s < tsList.length; ++s) {
                        var ts = tsList[s];
                        createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);
                    }

                    if (thickEnd > thickStart) {
                        var tl = intersection(spans, new Range(thickStart, thickEnd));
                        if (tl) {
                            featureOpts.type = 'translation';
                            var tlList = tl.ranges();
                            for (var s = 0; s < tlList.length; ++s) {
                                var ts = tlList[s];
                                createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);
                            }
                        }
                    }
                }
            }
        }
    } else {
        dlog("Don't know what to do with " + this.bwg.type);
    }
}

//
// nasty cut/paste, should roll back in!
//

BigWigView.prototype.getFirstAdjacent = function(chrName, pos, dir, callback) {
    var chr = this.bwg.chromsToIDs[chrName];
    if (chr === undefined) {
        // Not an error because some .bwgs won't have data for all chromosomes.

        // dlog("Couldn't find chr " + chrName);
        // dlog('Chroms=' + miniJSONify(this.bwg.chromsToIDs));
        return callback([]);
    } else {
        this.getFirstAdjacentById(chr, pos, dir, callback);
    }
}

BigWigView.prototype.getFirstAdjacentById = function(chr, pos, dir, callback) {
    var thisB = this;
    if (!this.cirHeader) {
        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {
            thisB.cirHeader = result;
            var la = new Int32Array(thisB.cirHeader);
            thisB.cirBlockSize = la[1];
            thisB.getFirstAdjacentById(chr, pos, dir, callback);
        });
        return;
    }

    var blockToFetch = null;
    var bestBlockChr = -1;
    var bestBlockOffset = -1;

    var outstanding = 0;

    var beforeBWG = Date.now();

    var cirFobRecur = function(offset, level) {
        outstanding += offset.length;

        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.
        var spans;
        for (var i = 0; i < offset.length; ++i) {
            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);
            spans = spans ? union(spans, blockSpan) : blockSpan;
        }
        
        var fetchRanges = spans.ranges();
        for (var r = 0; r < fetchRanges.length; ++r) {
            var fr = fetchRanges[r];
            cirFobStartFetch(offset, fr, level);
        }
    }

    var cirFobStartFetch = function(offset, fr, level, attempts) {
        var length = fr.max() - fr.min();
        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {
            for (var i = 0; i < offset.length; ++i) {
                if (fr.contains(offset[i])) {
                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);
                    --outstanding;
                    if (outstanding == 0) {
                        if (!blockToFetch) {
                            if (dir > 0 && (chr != 0 || pos > 0)) {
                                return thisB.getFirstAdjacentById(0, 0, dir, callback);
                            } else if (dir < 0 && (chr != thisB.bwg.maxID || pos < 1000000000)) {
                                return thisB.getFirstAdjacentById(thisB.bwg.maxID, 1000000000, dir, callback);
                            }
                            return callback([]);
                        }

                        thisB.fetchFeatures(function(chrx, fmin, fmax, toks) {
                            return (dir < 0 && (chrx < chr || fmax < pos)) || (dir > 0 && (chrx > chr || fmin > pos));
                        }, [blockToFetch], function(features) {
                            var bestFeature = null;
                            var bestChr = -1;
                            var bestPos = -1;
                            for (var fi = 0; fi < features.length; ++fi) {
                                var f = features[fi];
                                var chrx = f._chromId, fmin = f.min, fmax = f.max;
                                if (bestFeature == null || ((dir < 0) && (chrx > bestChr || fmax > bestPos)) || ((dir > 0) && (chrx < bestChr || fmin < bestPos))) {
                                    bestFeature = f;
                                    bestPos = (dir < 0) ? fmax : fmin;
                                    bestChr = chrx;
                                }
                            }

                            if (bestFeature != null) 
                                return callback([bestFeature]);
                            else
                                return callback([]);
                        });
                    }
                }
            }
        });
    }

    var cirFobRecur2 = function(cirBlockData, offset, level) {
        var ba = new Uint8Array(cirBlockData);
        var sa = new Int16Array(cirBlockData);
        var la = new Int32Array(cirBlockData);

        var isLeaf = ba[offset];
        var cnt = sa[offset/2 + 1];
        offset += 4;

        if (isLeaf != 0) {
            for (var i = 0; i < cnt; ++i) {
                var lo = offset/4;
                var startChrom = la[lo];
                var startBase = la[lo + 1];
                var endChrom = la[lo + 2];
                var endBase = la[lo + 3];
                var blockOffset = bwg_readOffset(ba, offset+16);
                var blockSize = bwg_readOffset(ba, offset+24);
                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)))) ||
                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)))))
                {
                    // console.log('Got an interesting block: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);
                    if (/_random/.exec(thisB.bwg.idsToChroms[startChrom])) {
                        // dlog('skipping random: ' + thisB.bwg.idsToChroms[startChrom]);
                    } else if (blockToFetch == null || ((dir < 0) && (endChrom > bestBlockChr || (endChrom == bestBlockChr && endBase > bestBlockOffset)) ||
                                                 (dir > 0) && (startChrom < bestBlockChr || (startChrom == bestBlockChr && startBase < bestBlockOffset))))
                    {
                        //                        dlog('best is: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);
                        blockToFetch = {offset: blockOffset, size: blockSize};
                        bestBlockOffset = (dir < 0) ? endBase : startBase;
                        bestBlockChr = (dir < 0) ? endChrom : startChrom;
                    }
                }
                offset += 32;
            }
        } else {
            var bestRecur = -1;
            var bestPos = -1;
            var bestChr = -1;
            for (var i = 0; i < cnt; ++i) {
                var lo = offset/4;
                var startChrom = la[lo];
                var startBase = la[lo + 1];
                var endChrom = la[lo + 2];
                var endBase = la[lo + 3];
                var blockOffset = (la[lo + 4]<<32) | (la[lo + 5]);
                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)) &&
                                 (endChrom   >= chr))) ||
                     (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)) &&
                                  (startChrom <= chr))))
                {
                    if (bestRecur < 0 || endBase > bestPos) {
                        bestRecur = blockOffset;
                        bestPos = (dir < 0) ? endBase : startBase;
                        bestChr = (dir < 0) ? endChrom : startChrom;
                    }
                }
                offset += 24;
            }
            if (bestRecur >= 0) {
                cirFobRecur([bestRecur], level + 1);
            }
        }
    };
    

    cirFobRecur([thisB.cirTreeOffset + 48], 1);
}

BigWig.prototype.readWigData = function(chrName, min, max, callback) {
    this.getUnzoomedView().readWigData(chrName, min, max, callback);
}

BigWig.prototype.getUnzoomedView = function() {
    if (!this.unzoomedView) {
        var cirLen = 4000;
        var nzl = this.zoomLevels[0];
        if (nzl) {
            cirLen = this.zoomLevels[0].dataOffset - this.unzoomedIndexOffset;
        }
        this.unzoomedView = new BigWigView(this, this.unzoomedIndexOffset, cirLen, false);
    }
    return this.unzoomedView;
}

BigWig.prototype.getZoomedView = function(z) {
    var zh = this.zoomLevels[z];
    if (!zh.view) {
        zh.view = new BigWigView(this, zh.indexOffset, /* this.zoomLevels[z + 1].dataOffset - zh.indexOffset */ 4000, true);
    }
    return zh.view;
}

function makeBwg(data, callback, name) {
    var bwg = new BigWig();
    bwg.data = data;
    bwg.name = name;
    bwg.data.slice(0, 512).salted().fetch(function(result) {
        if (!result) {
            return callback(null, "Couldn't fetch file");
        }

        var header = result;
        var ba = new Uint8Array(header);
        var sa = new Int16Array(header);
        var la = new Int32Array(header);
        var magic = ba[0] + (M1 * ba[1]) + (M2 * ba[2]) + (M3 * ba[3]);
        if (magic == BIG_WIG_MAGIC) {
            bwg.type = 'bigwig';
        } else if (magic == BIG_BED_MAGIC) {
            bwg.type = 'bigbed';
        } else if (magic == BIG_WIG_MAGIC_BE || magic == BIG_BED_MAGIC_BE) {
            callback(null, "Currently don't support big-endian BBI files");
        } else {
            callback(null, "Not a supported format, magic=0x" + magic.toString(16));
        }

        bwg.version = sa[2];             // 4
        bwg.numZoomLevels = sa[3];       // 6
        bwg.chromTreeOffset = bwg_readOffset(ba, 8);
        bwg.unzoomedDataOffset = bwg_readOffset(ba, 16);
        bwg.unzoomedIndexOffset = bwg_readOffset(ba, 24);
        bwg.fieldCount = sa[16];         // 32
        bwg.definedFieldCount = sa[17];  // 34
        bwg.asOffset = bwg_readOffset(ba, 36);
        bwg.totalSummaryOffset = bwg_readOffset(ba, 44);
        bwg.uncompressBufSize = la[13];  // 52
        bwg.extHeaderOffset = bwg_readOffset(ba, 56);

        bwg.zoomLevels = [];
        for (var zl = 0; zl < bwg.numZoomLevels; ++zl) {
            var zlReduction = la[zl*6 + 16]
            var zlData = bwg_readOffset(ba, zl*24 + 72);
            var zlIndex = bwg_readOffset(ba, zl*24 + 80);
            bwg.zoomLevels.push({reduction: zlReduction, dataOffset: zlData, indexOffset: zlIndex});
        }

        bwg.readChromTree(function() {
            bwg.getAutoSQL(function(as) {
                bwg.schema = as;
                return callback(bwg);
            });
        });
    });
}


BigWig.prototype._tsFetch = function(zoom, chr, min, max, callback) {
    var bwg = this;
    if (zoom >= this.zoomLevels.length - 1) {
        if (!this.topLevelReductionCache) {
            this.getZoomedView(this.zoomLevels.length - 1).readWigDataById(-1, 0, 300000000, function(feats) {
                bwg.topLevelReductionCache = feats;
                return bwg._tsFetch(zoom, chr, min, max, callback);
            });
        } else {
            var f = [];
            var c = this.topLevelReductionCache;
            for (var fi = 0; fi < c.length; ++fi) {
                if (c[fi]._chromId == chr) {
                    f.push(c[fi]);
                }
            }
            return callback(f);
        }
    } else {
        var view;
        if (zoom < 0) {
            view = this.getUnzoomedView();
        } else {
            view = this.getZoomedView(zoom);
        }
        return view.readWigDataById(chr, min, max, callback);
    }
}

BigWig.prototype.thresholdSearch = function(chrName, referencePoint, dir, threshold, callback) {
    dir = (dir<0) ? -1 : 1;
    var bwg = this;
    var initialChr = this.chromsToIDs[chrName];
    var candidates = [{chrOrd: 0, chr: initialChr, zoom: bwg.zoomLevels.length - 4, min: 0, max: 300000000, fromRef: true}]
    for (var i = 1; i <= this.maxID + 1; ++i) {
        var chrId = (initialChr + (dir*i)) % (this.maxID + 1);
        if (chrId < 0) 
            chrId += (this.maxID + 1);
        candidates.push({chrOrd: i, chr: chrId, zoom: bwg.zoomLevels.length - 1, min: 0, max: 300000000})
    }
       
    function fbThresholdSearchRecur() {
    	if (candidates.length == 0) {
    	    return callback(null);
    	}
    	candidates.sort(function(c1, c2) {
    	    var d = c1.zoom - c2.zoom;
    	    if (d != 0)
    		    return d;

            d = c1.chrOrd - c2.chrOrd;
            if (d != 0)
                return d;
    	    else
    		    return c1.min - c2.min * dir;
    	});

	    var candidate = candidates.splice(0, 1)[0];
        bwg._tsFetch(candidate.zoom, candidate.chr, candidate.min, candidate.max, function(feats) {
            var rp = dir > 0 ? 0 : 300000000;
            if (candidate.fromRef)
                rp = referencePoint;
            
            for (var fi = 0; fi < feats.length; ++fi) {
    	        var f = feats[fi];
                var score;
                if (f.maxScore != undefined)
                    score = f.maxScore;
                else
                    score = f.score;

                if (dir > 0) {
    	            if (score > threshold) {
        		        if (candidate.zoom < 0) {
        		            if (f.min > rp)
                                return callback(f);
        		        } else if (f.max > rp) {
        		            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});
        		        }
                    }
                } else {
                    if (score > threshold) {
            		    if (candidate.zoom < 0) {
                	        if (f.max < rp)
                			    return callback(f);
                        } else if (f.min < rp) {
                            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});
                        }
    	            }
                }
    	    }
            fbThresholdSearchRecur();
        });
    }
    
    fbThresholdSearchRecur();
}

BigWig.prototype.getAutoSQL = function(callback) {
    var thisB = this;
    if (!this.asOffset)
        return callback(null);


    this.data.slice(this.asOffset, 2048).fetch(function(result) {
        var ba = new Uint8Array(result);
        var s = '';
        for (var i = 0; i < ba.length; ++i) {
            if (ba[i] == 0)
                break;
            s += String.fromCharCode(ba[i]);
        }
        
        /* 
         * Quick'n'dirty attempt to parse autoSql format.
         * See: http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/059/5949/5949l2.html
         */

        var header_re = /(\w+)\s+(\w+)\s+("([^"]+)")?\s+\(\s*/;
        var field_re = /([\w\[\]]+)\s+(\w+)\s*;\s*("([^"]+)")?\s*/g;

        var headerMatch = header_re.exec(s);
        if (headerMatch) {
            var as = {
                declType: headerMatch[1],
                name: headerMatch[2],
                comment: headerMatch[4],

                fields: []
            };

            s = s.substring(headerMatch[0]);
            for (var m = field_re.exec(s); m != null; m = field_re.exec(s)) {
                as.fields.push({type: m[1],
                             name: m[2],
                             comment: m[4]});
            }

            return callback(as);
        }
    });
}

BigWig.prototype.getExtraIndices = function(callback) {
    var thisB = this;
    if (this.version < 4 || this.extHeaderOffset == 0 || this.type != 'bigbed') {
        return callback(null);
    } else {
        this.data.slice(this.extHeaderOffset, 64).fetch(function(result) {
            if (!result) {
                return callback(null, "Couldn't fetch extension header");
            }

            var ba = new Uint8Array(result);
            var sa = new Int16Array(result);
            var la = new Int32Array(result);
            
            var extHeaderSize = sa[0];
            var extraIndexCount = sa[1];
            var extraIndexListOffset = bwg_readOffset(ba, 4);

            if (extraIndexCount == 0) {
                return callback(null);
            }

            // FIXME 20byte records only make sense for single-field indices.
            // Right now, these seem to be the only things around, but the format
            // is actually more general.
            thisB.data.slice(extraIndexListOffset, extraIndexCount * 20).fetch(function(eil) {
                if (!eil) {
                    return callback(null, "Couldn't fetch index info");
                }

                var ba = new Uint8Array(eil);
                var sa = new Int16Array(eil);
                var la = new Int32Array(eil);

                var indices = [];
                for (var ii = 0; ii < extraIndexCount; ++ii) {
                    var eiType = sa[ii*10];
                    var eiFieldCount = sa[ii*10 + 1];
                    var eiOffset = bwg_readOffset(ba, ii*20 + 4);
                    var eiField = sa[ii*10 + 8]
                    var index = new BBIExtraIndex(thisB, eiType, eiFieldCount, eiOffset, eiField);
                    indices.push(index);
                }
                callback(indices);
            });
        });
    }
}

function BBIExtraIndex(bbi, type, fieldCount, offset, field) {
    this.bbi = bbi;
    this.type = type;
    this.fieldCount = fieldCount;
    this.offset = offset;
    this.field = field;
}

BBIExtraIndex.prototype.lookup = function(name, callback) {
    var thisB = this;

    this.bbi.data.slice(this.offset, 32).fetch(function(bpt) {
        var ba = new Uint8Array(bpt);
        var sa = new Int16Array(bpt);
        var la = new Int32Array(bpt);
        var bptMagic = la[0];
        var blockSize = la[1];
        var keySize = la[2];
        var valSize = la[3];
        var itemCount = bwg_readOffset(ba, 16);
        var rootNodeOffset = 32;

        function bptReadNode(nodeOffset) {
            thisB.bbi.data.slice(nodeOffset, 4 + (blockSize * (keySize + valSize))).fetch(function(node) {
                var ba = new Uint8Array(node);
                var sa = new Uint16Array(node);
                var la = new Uint32Array(node);

                var nodeType = ba[0];
                var cnt = sa[1];

                var offset = 4;
                if (nodeType == 0) {
                    var lastChildOffset = null;
                    for (var n = 0; n < cnt; ++n) {
                        var key = '';
                        for (var ki = 0; ki < keySize; ++ki) {
                            var charCode = ba[offset++];
                            if (charCode != 0) {
                                key += String.fromCharCode(charCode);
                            }
                        }

                        var childOffset = bwg_readOffset(ba, offset);
                        offset += 8;
                        
                        if (name.localeCompare(key) < 0 && lastChildOffset) {
                            bptReadNode(lastChildOffset);
                            return;
                        }
                        lastChildOffset = childOffset;
                    }
                    bptReadNode(lastChildOffset);
                } else {
                    for (var n = 0; n < cnt; ++n) {
                        var key = '';
                        for (var ki = 0; ki < keySize; ++ki) {
                            var charCode = ba[offset++];
                            if (charCode != 0) {
                                key += String.fromCharCode(charCode);
                            }
                        }
                        
                        // Specific for EI case.
                        if (key == name) {
                            var start = bwg_readOffset(ba, offset);
                            var length = readInt(ba, offset + 8);

                            return thisB.bbi.getUnzoomedView().fetchFeatures(
                                function(chr, min, max, toks) {
                                    if (toks && toks.length > thisB.field - 3)
                                        return toks[thisB.field - 3] == name;
                                }, 
                                [{offset: start, size: length}], 
                                callback);
                        }
                        offset += valSize;
                    }
                    return callback([]);
                }
            });
        }

        bptReadNode(thisB.offset + rootNodeOffset);
    });
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        makeBwg: makeBwg,
        BIG_BED_MAGIC: BIG_BED_MAGIC,
        BIG_WIG_MAGIC: BIG_WIG_MAGIC
    }
}

},{"./bin":4,"./das":10,"./spans":33,"./utils":47,"jszlib":62}],4:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// bin.js general binary data support
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;

    var sha1 = require('./sha1');
    var b64_sha1 = sha1.b64_sha1;
}

function BlobFetchable(b) {
    this.blob = b;
}

BlobFetchable.prototype.slice = function(start, length) {
    var b;

    if (this.blob.slice) {
        if (length) {
            b = this.blob.slice(start, start + length);
        } else {
            b = this.blob.slice(start);
        }
    } else {
        if (length) {
            b = this.blob.webkitSlice(start, start + length);
        } else {
            b = this.blob.webkitSlice(start);
        }
    }
    return new BlobFetchable(b);
}

BlobFetchable.prototype.salted = function() {return this;}

if (typeof(FileReader) !== 'undefined') {
    // console.log('defining async BlobFetchable.fetch');

    BlobFetchable.prototype.fetch = function(callback) {
        var reader = new FileReader();
        reader.onloadend = function(ev) {
            callback(bstringToBuffer(reader.result));
        };
        reader.readAsBinaryString(this.blob);
    }

} else {
    // if (console && console.log)
    //    console.log('defining sync BlobFetchable.fetch');

    BlobFetchable.prototype.fetch = function(callback) {
        var reader = new FileReaderSync();
        try {
            var res = reader.readAsArrayBuffer(this.blob);
            callback(res);
        } catch (e) {
            callback(null, e);
        }
    }
}

function URLFetchable(url, start, end, opts) {
    if (!opts) {
        if (typeof start === 'object') {
            opts = start;
            start = undefined;
        } else {
            opts = {};
        }
    }

    this.url = url;
    this.start = start || 0;
    if (end) {
        this.end = end;
    }
    this.opts = opts;
}

URLFetchable.prototype.slice = function(s, l) {
    if (s < 0) {
        throw 'Bad slice ' + s;
    }

    var ns = this.start, ne = this.end;
    if (ns && s) {
        ns = ns + s;
    } else {
        ns = s || ns;
    }
    if (l && ns) {
        ne = ns + l - 1;
    } else {
        ne = ne || l - 1;
    }
    return new URLFetchable(this.url, ns, ne, this.opts);
}

var seed=0;
var isSafari = navigator.userAgent.indexOf('Safari') >= 0 && navigator.userAgent.indexOf('Chrome') < 0 ;

URLFetchable.prototype.fetchAsText = function(callback) {
    var req = new XMLHttpRequest();
    var length;
    var url = this.url;
    if (isSafari || this.opts.salt) {
        url = saltURL(url);
        url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));
    }
    req.open('GET', url, true);

    if (this.end) {
        if (this.end - this.start > 100000000) {
            throw 'Monster fetch!';
        }
        req.setRequestHeader('Range', 'bytes=' + this.start + '-' + this.end);
        length = this.end - this.start + 1;
    }

    req.onreadystatechange = function() {
        if (req.readyState == 4) {
            if (req.status == 200 || req.status == 206) {
                return callback(req.responseText);
            } else {
                return callback(null);
            }
        }
    };
    if (this.opts.credentials) {
        req.withCredentials = true;
    }
    req.send('');
}

URLFetchable.prototype.salted = function() {
    var o = shallowCopy(this.opts);
    o.salt = true;
    return new URLFetchable(this.url, this.start, this.end, o);
}

URLFetchable.prototype.fetch = function(callback, attempt, truncatedLength) {
    var thisB = this;

    attempt = attempt || 1;
    if (attempt > 3) {
        return callback(null);
    }

    var req = new XMLHttpRequest();
    var length;
    var url = this.url;
    if (isSafari || this.opts.salt) {
        url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));
    }
    req.open('GET', url, true);
    req.overrideMimeType('text/plain; charset=x-user-defined');
    if (this.end) {
        if (this.end - this.start > 100000000) {
            throw 'Monster fetch!';
        }
        req.setRequestHeader('Range', 'bytes=' + this.start + '-' + this.end);
        length = this.end - this.start + 1;
    }
    req.responseType = 'arraybuffer';
    req.onreadystatechange = function() {
        if (req.readyState == 4) {
            if (req.status == 200 || req.status == 206) {
                if (req.response) {
                    var bl = req.response.byteLength;
                    if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {
                        return thisB.fetch(callback, attempt + 1, bl);
                    } else {
                        return callback(req.response);
                    }
                } else if (req.mozResponseArrayBuffer) {
                    return callback(req.mozResponseArrayBuffer);
                } else {
                    var r = req.responseText;
                    if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {
                        return thisB.fetch(callback, attempt + 1, r.length);
                    } else {
                        return callback(bstringToBuffer(req.responseText));
                    }
                }
            } else {
                return thisB.fetch(callback, attempt + 1);
            }
        }
    };
    if (this.opts.credentials) {
        req.withCredentials = true;
    }
    req.send('');
}

function bstringToBuffer(result) {
    if (!result) {
        return null;
    }

    var ba = new Uint8Array(result.length);
    for (var i = 0; i < ba.length; ++i) {
        ba[i] = result.charCodeAt(i);
    }
    return ba.buffer;
}

// Read from Uint8Array

(function(global) {
    var convertBuffer = new ArrayBuffer(8);
    var ba = new Uint8Array(convertBuffer);
    var fa = new Float32Array(convertBuffer);


    global.readFloat = function(buf, offset) {
        ba[0] = buf[offset];
        ba[1] = buf[offset+1];
        ba[2] = buf[offset+2];
        ba[3] = buf[offset+3];
        return fa[0];
    };
 }(this));

function readInt64(ba, offset) {
    return (ba[offset + 7] << 24) | (ba[offset + 6] << 16) | (ba[offset + 5] << 8) | (ba[offset + 4]);
}

function readInt(ba, offset) {
    return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);
}

function readShort(ba, offset) {
    return (ba[offset + 1] << 8) | (ba[offset]);
}

function readByte(ba, offset) {
    return ba[offset];
}

function readIntBE(ba, offset) {
    return (ba[offset] << 24) | (ba[offset + 1] << 16) | (ba[offset + 2] << 8) | (ba[offset + 3]);
}

// Exports if we are being used as a module

if (typeof(module) !== 'undefined') {
    module.exports = {
        BlobFetchable: BlobFetchable,
        URLFetchable: URLFetchable,

        readInt: readInt,
        readIntBE: readIntBE,
        readInt64: readInt64,
        readShort: readShort,
        readByte: readByte,
        readFloat: this.readFloat
    }
}

},{"./sha1":31,"./utils":47}],5:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// browser-us.js: standard UI wiring
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;

    var nf = require('./numformats');
    var formatLongInt = nf.formatLongInt;

    // For side effects

    require('./tier-edit');
    require('./export-config');
    require('./export-ui');
    require('./svg-export');
    require('./session');
}

/*
 * Quite a bit of this ought to be done using a templating system, but
 * since web-components isn't quite ready for prime time yet we'll stick
 * with constructing it all in Javascript for now...
 */

Browser.prototype.initUI = function(holder, genomePanel) {
    document.head.appendChild(makeElement('link', '', {rel: 'stylesheet', href: this.resolveURL('$$css/bootstrap-scoped.css')}));
    document.head.appendChild(makeElement('link', '', {rel: 'stylesheet', href: this.resolveURL('$$css/dalliance-scoped.css')}));
    document.head.appendChild(makeElement('link', '', {rel: 'stylesheet', href: this.resolveURL('$$css/font-awesome.min.css')}));

    var b = this;

    if (!b.disableDefaultFeaturePopup) {
        this.addFeatureListener(function(ev, feature, hit, tier) {
            b.featurePopup(ev, feature, hit, tier);
        });
    }

    holder.classList.add('dalliance');
    var toolbar = b.toolbar = makeElement('div', null, {className: 'btn-toolbar toolbar'});

    var title = b.coordSystem.speciesName + ' ' + b.nameForCoordSystem(b.coordSystem);
    if (this.setDocumentTitle) {
        document.title = title + ' :: dalliance';
    }
    
    var locField = makeElement('input', '', {className: 'loc-field'});
    b.makeTooltip(locField, 'Enter a genomic location or gene name');
    var locStatusField = makeElement('p', '', {className: 'loc-status'});


    var zoomInBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-search-plus'})], {className: 'btn'});
    var zoomSlider = makeElement('input', '', {type: 'range', min: 100, max: 250}, {className: 'zoom-slider'}, {width: '150px'});  // NB min and max get overwritten.
    var zoomOutBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-search-minus'})], {className: 'btn'});

    var clearHighlightsButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-eraser'})], {className: 'btn'});

    var addTrackBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-plus'})], {className: 'btn'});
    var favBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-bookmark'})], {className: 'btn'});
    var svgBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-print'})], {className: 'btn'});
    var resetBtn = makeElement('a', [makeElement('i', null, {className: 'fa fa-refresh'})], {className: 'btn'});
    var optsButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-cogs'})], {className: 'btn'});
    var helpButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-question'})], {className: 'btn'});

    var tierEditButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-road'})], {className: 'btn'});
    b.makeTooltip(tierEditButton, 'Configure currently selected track(s) (E)')

    var leapLeftButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-chevron-left'})], {className: 'btn'});
    var leapRightButton = makeElement('a', [makeElement('i', null, {className: 'fa fa-chevron-right'})], {className: 'btn pull-right'});

    var modeButtons = makeElement('div', null, {className: 'btn-group pull-right'});
    if (!this.noTrackAdder)
        modeButtons.appendChild(addTrackBtn);
    if (!this.noTrackEditor)
        modeButtons.appendChild(tierEditButton);
    if (!this.noExport)
        modeButtons.appendChild(svgBtn);
    if (!this.noOptions)
        modeButtons.appendChild(optsButton);
    if (!this.noHelp)
        modeButtons.appendChild(helpButton);

    this.setUiMode = function(m) {
        this.uiMode = m;
        var mb = {help: helpButton, add: addTrackBtn, opts: optsButton, 'export': svgBtn, tier: tierEditButton};
        for (var x in mb) {
            if (x == m)
                mb[x].classList.add('active');
            else
                mb[x].classList.remove('active');
        }
    }


    if (!this.noLeapButtons)
        toolbar.appendChild(leapRightButton);

    if (modeButtons.firstChild)
        toolbar.appendChild(modeButtons);
    
    if (!this.noLeapButtons)
        toolbar.appendChild(leapLeftButton);
    if (!this.noTitle) {
        toolbar.appendChild(makeElement('div', makeElement('h4', title, {}, {margin: '0px'}), {className: 'btn-group title'}));
    }
    if (!this.noLocationField)
        toolbar.appendChild(makeElement('div', [locField, locStatusField], {className: 'btn-group loc-group'}));
    if (!this.noClearHighlightsButton)
        toolbar.appendChild(clearHighlightsButton);

    if (!this.noZoomSlider) {
        toolbar.appendChild(makeElement('div', [zoomInBtn,
                                                makeElement('span', zoomSlider, {className: 'btn'}),
                                                zoomOutBtn], {className: 'btn-group'}));
    }
    

    holder.appendChild(toolbar);
    holder.appendChild(genomePanel);

    this.addViewListener(function(chr, min, max, _oldZoom, zoom) {
        locField.value = (chr + ':' + formatLongInt(min) + '..' + formatLongInt(max));
        zoomSlider.min = zoom.min|0;
        zoomSlider.max = zoom.max|0;
        zoomSlider.value = zoom.current|0;
        if (b.storeStatus) {
            b.storeViewStatus();
        }

        if (b.highlights.length > 0) {
            clearHighlightsButton.style.display = 'inline-block';
        } else {
            clearHighlightsButton.style.display = 'none';
        }
    });

    this.addTierListener(function() {
        if (b.storeStatus) {
            b.storeTierStatus();
        }
    });

    locField.addEventListener('keydown', function(ev) {
        if (ev.keyCode == 40) {
            ev.preventDefault(); ev.stopPropagation();
            b.setSelectedTier(0);
        } if (ev.keyCode == 10 || ev.keyCode == 13) {
            ev.preventDefault();


            var g = locField.value;
            b.search(g, function(err) {
                if (err) {
                    locStatusField.textContent = '' + err;
                } else {
                    locStatusField.textContent = '';
                }
            });
        }
    }, false);
    
    var trackAddPopup;
    addTrackBtn.addEventListener('click', function(ev) {
        if (trackAddPopup && trackAddPopup.displayed) {
            b.removeAllPopups();
        } else {
            trackAddPopup = b.showTrackAdder(ev);
        }
    }, false);
    b.makeTooltip(addTrackBtn, 'Add a new track from the registry or an indexed file. (A)');

    zoomInBtn.addEventListener('click', function(ev) {
      ev.stopPropagation(); ev.preventDefault();

      b.zoomStep(-10);
    }, false);
    b.makeTooltip(zoomInBtn, 'Zoom in (+)');

    zoomOutBtn.addEventListener('click', function(ev) {
      ev.stopPropagation(); ev.preventDefault();

      b.zoomStep(10);
    }, false);
    b.makeTooltip(zoomOutBtn, 'Zoom out (-)');

    zoomSlider.addEventListener('change', function(ev) {
    	b.zoomSliderValue = (1.0 * zoomSlider.value);
    	b.zoom(Math.exp((1.0 * zoomSlider.value) / b.zoomExpt));
    }, false);

    favBtn.addEventListener('click', function(ev) {
       ev.stopPropagation(); ev.preventDefault();
    }, false);
    b.makeTooltip(favBtn, 'Favourite regions');

    svgBtn.addEventListener('click', function(ev) {
       ev.stopPropagation(); ev.preventDefault();
        b.openExportPanel();
    }, false);
    b.makeTooltip(svgBtn, 'Export publication-quality SVG. (X)');

    var optsPopup;
    optsButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();

        b.toggleOptsPopup(ev);
    }, false);
    b.makeTooltip(optsButton, 'Configure options.');

    helpButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        b.toggleHelpPopup(ev);
    });
    b.makeTooltip(helpButton, 'Help; Keyboard shortcuts. (H)');

    tierEditButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        if (b.selectedTiers.length == 1) {
            b.openTierPanel(b.tiers[b.selectedTiers[0]]);
        }
    }, false);

    leapLeftButton.addEventListener('click', function(ev) {
        b.leap(b.reverseKeyScrolling ? -1 : 1, false);
    }, false);
    b.makeTooltip(leapLeftButton, function(ev) {
        var st = b.getSelectedTier();
        var tier;
        if (st >= 0)
            tier = b.tiers[st];

        if (tier && tier.featureSource && b.sourceAdapterIsCapable(tier.featureSource, 'quantLeap') && typeof(tier.quantLeapThreshold) == 'number') {
            return 'Jump to the next region with a score above the threshold in the selected track "' + (tier.config.name || tier.dasSource.name) + '"" (ctrl+LEFT)';
        } else if (tier && tier.featureSource && b.sourceAdapterIsCapable(tier.featureSource, 'leap')) {
            return 'Jump to the next feature in the selected track "' + (tier.config.name || tier.dasSource.name) + '" (ctrl+LEFT)';
        } else {
            return 'Jump left (shift+LEFT)';
        }
    });

    leapRightButton.addEventListener('click', function(ev) {
        b.leap(b.reverseKeyScrolling ? 1 : -1, false);
    }, false);
    b.makeTooltip(leapRightButton, function(ev) {
        var st = b.getSelectedTier();
        var tier;
        if (st >= 0)
            tier = b.tiers[st];

        if (tier && tier.featureSource && b.sourceAdapterIsCapable(tier.featureSource, 'quantLeap') && typeof(tier.quantLeapThreshold) == 'number') {
            return 'Jump to the next region with a score above the threshold in the selected track "' + (tier.config.name || tier.dasSource.name) + '"" (ctrl+RIGHT)';
        } else if (tier && tier.featureSource && b.sourceAdapterIsCapable(tier.featureSource, 'leap')) {
            return 'Jump to the next feature in the selected track "' + (tier.config.name || tier.dasSource.name) + '" (ctrl+RIGHT)';
        } else {
            return 'Jump right (shift+RIGHT)';
        }
    });

    clearHighlightsButton.addEventListener('click', function(ev) {
        b.clearHighlights();
    }, false);
    b.makeTooltip(clearHighlightsButton, 'Clear highlights (C)');

    b.addTierSelectionWrapListener(function(dir) {
        if (dir < 0) {
            b.setSelectedTier(null);
            locField.focus();
        }
    });

    b.addTierSelectionListener(function(sel) {
        if (b.uiMode === 'tier') {
            if (sel.length == 0) {
                b.hideToolPanel();
                b.manipulatingTier = null;
                b.uiMode = 'none';
            } else {
                var ft = b.tiers[sel[0]];
                if (ft != b.manipulatingTier) {
                    b.openTierPanel(ft);
                }
            }
        }
    });

    var uiKeyHandler = function(ev) {
        // console.log('bukh: ' + ev.keyCode);
        if (ev.keyCode == 65 || ev.keyCode == 97) {  // a
            ev.preventDefault(); ev.stopPropagation();
            b.showTrackAdder();
        } else if (ev.keyCode == 72 || ev.keyCode == 104) { // h
            ev.stopPropagation(); ev.preventDefault();
            b.toggleHelpPopup(ev);
        } else if (ev.keyCode == 69 || ev.keyCode == 101) { //e
            ev.stopPropagation(); ev.preventDefault();
            if (b.selectedTiers.length == 1) {
                b.openTierPanel(b.tiers[b.selectedTiers[0]]);
            }
        } else if (ev.keyCode == 88 || ev.keyCode == 120) { // x
            ev.stopPropagation(); ev.preventDefault();
            b.openExportPanel();
        } else if (ev.keyCode == 67 || ev.keyCode == 99) { // c
            ev.stopPropagation(); ev.preventDefault();
            b.clearHighlights();
        }
    };

    holder.addEventListener('focus', function(ev) {
        holder.addEventListener('keydown', uiKeyHandler, false);
    }, false);
    holder.addEventListener('blur', function(ev) {
        holder.removeEventListener('keydown', uiKeyHandler, false);
    }, false);

    holder.addEventListener('keydown', function(ev) {
        if (ev.keyCode === 27) {
            ev.preventDefault();
            ev.stopPropagation();
            b.uiMode = 'none';
            b.hideToolPanel();

            if (b.selectedTiers && b.selectedTiers.length > 0) {
                b.browserHolder.focus();
            }
        }
    }, false);
}

Browser.prototype.showToolPanel = function(panel, nowrap) {
    var thisB = this;

    if (this.activeToolPanel) {
        this.activeToolPanel.parentElement.removeChild(this.activeToolPanel);
    }

    var content;
    if (nowrap)
        content = panel;
    else
        content = makeElement('div', panel, {}, {overflowY: 'auto', width: '100%'});


    var divider = makeElement('div', makeElement('i', null, {className: 'fa fa-caret-right'}), {className: 'tool-divider'});
    divider.addEventListener('click', function(ev) {
        thisB.hideToolPanel();
        thisB.setUiMode('none');
    }, false);
    this.makeTooltip(divider, 'Close tool panel (ESC)');
    this.activeToolPanel = makeElement('div', [divider, content], {className: 'tool-holder'});
    this.svgHolder.appendChild(this.activeToolPanel);
    this.resizeViewer();

    var thisB = this;
}

Browser.prototype.hideToolPanel = function() {
    if (this.activeToolPanel) {
        this.activeToolPanel.parentElement.removeChild(this.activeToolPanel);
    }
    this.svgHolder.style.width = '100%';
    this.activeToolPanel = null;
    this.resizeViewer();
}

Browser.prototype.toggleHelpPopup = function(ev) {
    if (this.uiMode === 'help') {
        this.hideToolPanel();
        this.setUiMode('none');
    } else {
        var helpFrame = makeElement('iframe', null, {scrolling: 'yes', seamless: 'seamless', src: this.resolveURL('$$help/index.html'), className: 'help-panel'});
        this.showToolPanel(helpFrame, false);
        this.setUiMode('help');
    }
}

Browser.prototype.toggleOptsPopup = function(ev) {
    var b = this;

    if (this.uiMode === 'opts') {
        this.hideToolPanel();
        this.setUiMode('none');
    } else {
        var optsForm = makeElement('div', null, {className: 'form-horizontal'}, {boxSizing: 'border-box', MozBoxSizing: 'border-box', display: 'inline-block', verticalAlign: 'top'});
        var optsTable = makeElement('table');
        optsTable.cellPadding = 5;

        var scrollModeButton = makeElement('input', '', {type: 'checkbox', checked: b.reverseScrolling});
        scrollModeButton.addEventListener('change', function(ev) {
            b.reverseScrolling = scrollModeButton.checked;
            b.storeStatus();
        }, false);
        optsTable.appendChild(makeElement('tr', [makeElement('td', 'Reverse trackpad scrolling', {align: 'right'}), makeElement('td', scrollModeButton)]));

        var scrollKeyButton = makeElement('input', '', {type: 'checkbox', checked: b.reverseKeyScrolling});
        scrollKeyButton.addEventListener('change', function(ev) {
            b.reverseKeyScrolling = scrollKeyButton.checked;
            b.storeStatus();
        }, false);
        optsTable.appendChild(makeElement('tr', [makeElement('td', 'Reverse scrolling buttons and keys', {align: 'right'}), makeElement('td', scrollKeyButton)]));


        var rulerSelect = makeElement('select');
        rulerSelect.appendChild(makeElement('option', 'Left', {value: 'left'}));
        rulerSelect.appendChild(makeElement('option', 'Center', {value: 'center'}));
        rulerSelect.appendChild(makeElement('option', 'Right', {value: 'right'}));
        rulerSelect.appendChild(makeElement('option', 'None', {value: 'none'}));
        rulerSelect.value = b.rulerLocation;
        rulerSelect.addEventListener('change', function(ev) {
            b.rulerLocation = rulerSelect.value;
            b.positionRuler();
            for (var ti = 0; ti < b.tiers.length; ++ti) {
                b.tiers[ti].paintQuant();
            }
            b.storeStatus();
        }, false);
        optsTable.appendChild(makeElement('tr', [makeElement('td', 'Vertical guideline', {align: 'right'}), makeElement('td', rulerSelect)]));

        optsForm.appendChild(optsTable);

        var resetButton = makeElement('button', 'Reset browser', {className: 'btn'}, {marginLeft: 'auto', marginRight: 'auto', display: 'block'});
        resetButton.addEventListener('click', function(ev) {
            b.reset();
        }, false);
        optsForm.appendChild(resetButton);

        this.showToolPanel(optsForm);
        this.setUiMode('opts');
    }
}
},{"./cbrowser":6,"./export-config":13,"./export-ui":14,"./numformats":24,"./session":30,"./svg-export":34,"./tier-edit":40,"./utils":47}],6:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// cbrowser.js: canvas browser container
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var Observed = utils.Observed;
    var Awaited = utils.Awaited;
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;
    var miniJSONify = utils.miniJSONify;
    var shallowCopy = utils.shallowCopy;

    var tier = require('./tier');
    var DasTier = tier.DasTier;

    var sha1 = require('./sha1');
    var hex_sha1 = sha1.hex_sha1;

    var thub = require('./thub');
    var connectTrackHub = thub.connectTrackHub;

    var VERSION = require('./version');

    var nf = require('./numformats');
    var formatQuantLabel = nf.formatQuantLabel;

    var Chainset = require('./chainset').Chainset;

    var Promise = require('es6-promise').Promise;
}

function Region(chr, min, max) {
    this.min = min;
    this.max = max;
    this.chr = chr;
}

function Browser(opts) {
    if (!opts) {
        opts = {};
    }

    this.prefix = '//www.biodalliance.org/release-0.12/';

    this.sources = [];
    this.tiers = [];

    this.featureListeners = [];
    this.featureHoverListeners = [];
    this.viewListeners = [];
    this.regionSelectListeners = [];
    this.tierListeners = [];
    this.tierSelectionListeners = [];
    this.tierSelectionWrapListeners = [];

    this.cookieKey = 'browser';
    this.registry = '//www.dasregistry.org/das/sources';
    this.chains = {};

    this.pageName = 'svgHolder'
    this.maxExtra = 2.5;
    this.minExtra = 0.5;
    this.zoomFactor = 1.0;
    this.zoomMin = 10.0;
    // this.zoomMax;       // Allow configuration for compatibility, but otherwise clobber.
    this.origin = 0;
    this.targetQuantRes = 1.0;
    this.featurePanelWidth = 750;
    this.zoomBase = 100;
    this.zoomExpt = 30.0; // Back to being fixed....
    this.zoomSliderValue = 100;
    this.entryPoints = null;
    this.currentSeqMax = -1; // init once EPs are fetched.

    this.highlights = [];
    this.selectedTiers = [1];

    this.maxViewWidth = 500000;

    // Options.
    
    this.reverseScrolling = false;
    this.rulerLocation = 'center';
    this.defaultHighlightFill = 'red';
    this.defaultHighlightAlpha = 0.3;
    this.exportHighlights = true;
    this.exportRuler = true;

    // Visual config.

    // this.tierBackgroundColors = ["rgb(245,245,245)", "rgb(230,230,250)" /* 'white' */];
    this.tierBackgroundColors = ["rgb(245,245,245)", 'white'];
    this.minTierHeight = 20;
    this.noDefaultLabels = false;
    this.baseColors = {
        A: 'green', 
        C: 'blue', 
        G: 'black', 
        T: 'red'
    };

    // Registry

    this.availableSources = new Observed();
    this.defaultSources = [];
    this.mappableSources = {};

    this.hubs = [];
    this.hubObjects = [];

    this.sourceCache = new SourceCache();
    
    this.retina = true;

    this.useFetchWorkers = true;
    this.maxWorkers = 2;
    this.workerPath = '$$worker-all.js';

    this.assemblyNamePrimary = true;
    this.assemblyNameUcsc = true;

    this.initListeners = [];

    if (opts.viewStart !== undefined && typeof(opts.viewStart) !== 'number') {
        throw Error('viewStart must be an integer');
    }
    if (opts.viewEnd !== undefined && typeof(opts.viewEnd) !== 'number') {
        throw Error('viewEnd must be an integer');
    }

    for (var k in opts) {
        this[k] = opts[k];
    }
    if (typeof(opts.uiPrefix) === 'string' && typeof(opts.prefix) !== 'string') {
        this.prefix = opts.uiPrefix;
    }
    if (this.prefix.indexOf('//') === 0) {
        if (window.location.prototol === 'http:' || window.location.protocol === 'https:') {
            // Protocol-relative URLs okay.
        } else {
            this.prefix = 'http:' + this.prefix;
        }
    }

    if (!this.coordSystem) {
        throw Error('Coordinate system must be configured');
    }

    if (this.chr === undefined || this.viewStart === undefined || this.viewEnd === undefined) {
        throw Error('Viewed region (chr:start..end) must be defined');
    }

    var thisB = this;

    if (document.readyState === 'complete') {
        thisB.realInit();
    } else {
        window.addEventListener('load', function(ev) {thisB.realInit();}, false);
    }
}

Browser.prototype.resolveURL = function(url) {
    return url.replace('$$', this.prefix);
}

Browser.prototype.realInit = function() {
    if (this.wasInitialized) {
        console.log('Attemping to call realInit on an already-initialized Dalliance instance');
        return;
    }

    this.wasInitialized = true;

    this.defaultChr = this.chr;
    this.defaultStart = this.viewStart;
    this.defaultEnd = this.viewEnd;
    this.defaultSources = [];
    for (var i = 0; i < this.sources.length; ++i) {
        this.defaultSources.push(this.sources[i]);
    }

    if (this.restoreStatus) {
        this.statusRestored = this.restoreStatus();
    }

    var helpPopup;
    var thisB = this;
    this.browserHolderHolder = document.getElementById(this.pageName);
    this.browserHolderHolder.classList.add('dalliance-injection-point');
    this.browserHolder = makeElement('div', null, {className: 'dalliance dalliance-root', tabIndex: -1});
    if (this.maxHeight) {
        this.browserHolder.style.maxHeight = this.maxHeight + 'px';
    } else if (this.maxHeight != undefined) {
        this.browserHolder.style.maxHeight = null;
    }
    removeChildren(this.browserHolderHolder);
    this.browserHolderHolder.appendChild(this.browserHolder);
    this.svgHolder = makeElement('div', null, {className: 'main-holder'});

    this.initUI(this.browserHolder, this.svgHolder);

    this.pinnedTierHolder = makeElement('div', null, {className: 'tier-holder tier-holder-pinned'});
    this.tierHolder = makeElement('div', this.makeLoader(24), {className: 'tier-holder tier-holder-rest'});

    this.tierHolderHolder = makeElement('div', [this.pinnedTierHolder, this.tierHolder], {className: 'tier-holder-holder'});
    this.svgHolder.appendChild(this.tierHolderHolder);

    this.bhtmlRoot = makeElement('div');
    if (!this.disablePoweredBy) {
        this.bhtmlRoot.appendChild(makeElement('span', ['Powered by ', makeElement('a', 'Biodalliance', {href: 'http://www.biodalliance.org/'}), ' ' + VERSION], {className: 'powered-by'}));
        this.bhtmlRoot.appendChild(makeElement('span', [' | ', makeElement('a', 'Link to Ensembl', {href: 'http://www.ensembl.org/', id: 'enslink', target: '_newtab'}), ' ' ], {className: 'powered-by'}));
    }
    this.browserHolder.appendChild(this.bhtmlRoot);

    window.addEventListener('resize', function(ev) {
        thisB.resizeViewer();
    }, false);

    this.ruler = makeElement('div', null, {className: 'guideline'})
    this.ruler2 = makeElement('div', null, {className: 'guideline'}, {backgroundColor: 'gray', opacity: '0.5', zIndex: 899});
    this.tierHolderHolder.appendChild(this.ruler);
    this.tierHolderHolder.appendChild(this.ruler2);

    this.chainConfigs = this.chains || {};
    this.chains = {};
    for (var k in this.chainConfigs) {
        var cc = this.chainConfigs[k];
        if (cc instanceof Chainset) {
            console.log('WARNING: Should no longer use "new Chainset" in Biodalliance configurations.');
        }
        this.chains[k] = new Chainset(cc);
    }

    var promisedWorkers;
    if (this.maxWorkers > 0) {
        var pw = [];
        for (var fi = 0; fi < this.maxWorkers; ++fi)
            pw.push(makeFetchWorker(this));
        promisedWorkers = Promise.all(pw);
    } else {
        promisedWorkers = Promise.resolve([]);
    }

    this.fetchWorkers = null;
    this.nextWorker = 0;
    promisedWorkers.then(function(v) {
        console.log('Booted ' + v.length + ' workers');
        thisB.fetchWorkers = v; 
    }, function(v) {
        console.log('Failed to boot workers', v);
    }).then(function() {
        if (window.getComputedStyle(thisB.browserHolderHolder).display != 'none') {
            setTimeout(function() {thisB.realInit2()}, 1);
        } else {
            var pollInterval = setInterval(function() {
                if (window.getComputedStyle(thisB.browserHolderHolder).display != 'none') {
                    clearInterval(pollInterval);
                    thisB.realInit2();
                } 
            }, 300);
        }
    });
}

Browser.prototype.realInit2 = function() {
    var thisB = this;

    // Remove the loader icon, if needed
    removeChildren(this.tierHolder);
    removeChildren(this.pinnedTierHolder);

    this.featurePanelWidth = this.tierHolder.getBoundingClientRect().width | 0;
    this.scale = this.featurePanelWidth / (this.viewEnd - this.viewStart);
    if (!this.zoomMax) {
        this.zoomMax = this.zoomExpt * Math.log(this.maxViewWidth / this.zoomBase);
        this.zoomMin = this.zoomExpt * Math.log(this.featurePanelWidth / 10 / this.zoomBase);
    }
    this.zoomSliderValue = this.zoomExpt * Math.log((this.viewEnd - this.viewStart + 1) / this.zoomBase);

    // Event handlers

    this.tierHolderHolder.addEventListener('mousewheel', function(ev) {
        ev.stopPropagation(); ev.preventDefault();

        if (ev.wheelDeltaX) {
            var delta = ev.wheelDeltaX/5;
            if (!thisB.reverseScrolling) {
                delta = -delta;
            }
            thisB.move(delta);
        }

        if (ev.wheelDeltaY) {
            var delta = ev.wheelDeltaY;
            if (thisB.reverseScrolling) {
                delta = -delta;
            }
            thisB.tierHolder.scrollTop += delta;
        }
    }, false); 

    this.tierHolderHolder.addEventListener('MozMousePixelScroll', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        if (ev.axis == 1) {
            if (ev.detail != 0) {
                var delta = ev.detail/4;
                if (thisB.reverseScrolling) {
                    delta = -delta;
                }
                thisB.move(delta);
            }
        } else {
            var delta = ev.detail;
            if (!thisB.reverseScrolling) {
              delta = -delta;
            }

            thisB.tierHolder.scrollTop += delta;
        }
    }, false); 

    this.tierHolderHolder.addEventListener('touchstart', function(ev) {return thisB.touchStartHandler(ev)}, false);
    this.tierHolderHolder.addEventListener('touchmove', function(ev) {return thisB.touchMoveHandler(ev)}, false);
    this.tierHolderHolder.addEventListener('touchend', function(ev) {return thisB.touchEndHandler(ev)}, false);
    this.tierHolderHolder.addEventListener('touchcancel', function(ev) {return thisB.touchCancelHandler(ev)}, false);

    var keyHandler = function(ev) {
        // console.log('cbkh: ' + ev.keyCode);
        if (ev.keyCode == 13) { // enter
            var layoutsChanged = false;
            for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                var t = thisB.tiers[ti];
                if (t.wantedLayoutHeight && t.wantedLayoutHeight != t.layoutHeight) {
                    t.layoutHeight = t.wantedLayoutHeight;
                    t.clipTier();
                    layoutsChanged = true;
                }
            }
            if (layoutsChanged) {
                thisB.arrangeTiers();
            }
        } else if (ev.keyCode == 32 || ev.charCode == 32) { // space
            if (!thisB.isSnapZooming) {
                thisB.isSnapZooming = true;
                var newZoom = (thisB.savedZoom || 0.0) + thisB.zoomMin;
                thisB.savedZoom = thisB.zoomSliderValue - thisB.zoomMin;
                thisB.zoomSliderValue = newZoom;
                thisB.zoom(Math.exp((1.0 * newZoom) / thisB.zoomExpt));
            } else {
                thisB.isSnapZooming = false;
                var newZoom = (thisB.savedZoom || 20.0) + thisB.zoomMin;
                thisB.savedZoom = thisB.zoomSliderValue - thisB.zoomMin;
                thisB.zoomSliderValue = newZoom;
                thisB.zoom(Math.exp((1.0 * newZoom) / thisB.zoomExpt));
            }
            thisB.snapZoomLockout = true;
            ev.stopPropagation(); ev.preventDefault();      
        } else if (ev.keyCode == 39) { // right arrow
            ev.stopPropagation(); ev.preventDefault();
            thisB.scrollArrowKey(ev, -1);
        } else if (ev.keyCode == 37) { // left arrow
            ev.stopPropagation(); ev.preventDefault();
            thisB.scrollArrowKey(ev, 1);
        } else if (ev.keyCode == 38 || ev.keyCode == 87) { // up arrow | w
            ev.stopPropagation(); ev.preventDefault();

            if (ev.shiftKey) {
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                var tt = thisB.tiers[st];
                var ch = tt.forceHeight || tt.subtiers[0].height;
                if (ch >= 40) {
                    tt.mergeConfig({height: ch-10});
                }
            } else if (ev.ctrlKey || ev.metaKey) {
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                var tt = thisB.tiers[st];
  
                if (tt.quantLeapThreshold) {
                    var th = tt.subtiers[0].height;
                    var tq = tt.subtiers[0].quant;
                    if (!tq)
                        return;

                    var qmin = 1.0 * tq.min;
                    var qmax = 1.0 * tq.max;

                    var qscale = (qmax - qmin) / th;
                    tt.mergeConfig({quantLeapThreshold: qmin + ((Math.round((tt.quantLeapThreshold - qmin)/qscale)|0)+1)*qscale});

                    tt.notify('Threshold: ' + formatQuantLabel(tt.quantLeapThreshold));
                }                
            } else if (ev.altKey) {
                var cnt = thisB.selectedTiers.length;
                if (cnt == 0)
                    return;

                var st = thisB.selectedTiers[0];
                var contiguous = true;
                var mt = [];
                for (var si = 0; si < thisB.selectedTiers.length; ++si) {
                    mt.push(thisB.tiers[thisB.selectedTiers[si]]);
                    if (si > 0 && thisB.selectedTiers[si] - thisB.selectedTiers[si - 1] != 1)
                        contiguous = false;
                }

                if (contiguous && st <= 0)
                    return;

                for (var si = thisB.selectedTiers.length - 1; si >= 0; --si)
                    thisB.tiers.splice(thisB.selectedTiers[si], 1);

                thisB.selectedTiers.splice(0, cnt);

                var ip = contiguous ? st - 1 : st;
                for (var si = 0; si < mt.length; ++si) {
                    thisB.tiers.splice(ip+si, 0, mt[si]);
                    thisB.selectedTiers.push(ip + si);
                }

                thisB.markSelectedTiers();
                thisB.notifyTierSelection();
                thisB.reorderTiers();
                thisB.notifyTier();
            } else {
                var st = thisB.getSelectedTier();
                if (st > 0) {
                    thisB.setSelectedTier(st - 1);
                    var nst = thisB.tiers[thisB.getSelectedTier()];
                    var top = nst.row.offsetTop, bottom = top + nst.row.offsetHeight;
                    if (top < thisB.tierHolder.scrollTop || bottom > thisB.tierHolder.scrollTop + thisB.tierHolder.offsetHeight) {
                        thisB.tierHolder.scrollTop = top;
                    }
                } else {
                    thisB.notifyTierSelectionWrap(-1);
                }
            }
        } else if (ev.keyCode == 40 || ev.keyCode == 83) { // down arrow | s
            ev.stopPropagation(); ev.preventDefault();

            if (ev.shiftKey) {
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                var tt = thisB.tiers[st];
                var ch = tt.forceHeight || tt.subtiers[0].height;
                tt.mergeConfig({height: ch+10});
            } else if (ev.ctrlKey || ev.metaKey) {
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                var tt = thisB.tiers[st];

                if (tt.quantLeapThreshold) {
                    var th = tt.subtiers[0].height;
                    var tq = tt.subtiers[0].quant;
                    if (!tq)
                        return;

                    var qmin = 1.0 * tq.min;
                    var qmax = 1.0 * tq.max;
                    var qscale = (qmax - qmin) / th;

                    var it = Math.round((tt.quantLeapThreshold - qmin)/qscale)|0;
                    if (it > 1) {
                        tt.mergeConfig({quantLeapThreshold: qmin + (it-1)*qscale});
                        tt.notify('Threshold: ' + formatQuantLabel(tt.quantLeapThreshold));
                    }
                }
            } else if (ev.altKey) {
                var cnt = thisB.selectedTiers.length;
                if (cnt == 0)
                    return;

                var st = thisB.selectedTiers[0];
                var discontig = 0;
                var mt = [];
                for (var si = 0; si < thisB.selectedTiers.length; ++si) {
                    mt.push(thisB.tiers[thisB.selectedTiers[si]]);
                    if (si > 0)
                        discontig += (thisB.selectedTiers[si] - thisB.selectedTiers[si - 1] - 1);
                }
                var contiguous = discontig == 0;

                if (contiguous && st + cnt >= thisB.tiers.length)
                    return;

                for (var si = thisB.selectedTiers.length - 1; si >= 0; --si)
                    thisB.tiers.splice(thisB.selectedTiers[si], 1);

                thisB.selectedTiers.splice(0, cnt);

                var ip = contiguous ? st + 1 : st + discontig;
                for (var si = 0; si < mt.length; ++si) {
                    thisB.tiers.splice(ip+si, 0, mt[si]);
                    thisB.selectedTiers.push(ip + si);
                }

                thisB.markSelectedTiers();
                thisB.notifyTierSelection();
                thisB.reorderTiers();
                thisB.notifyTier();
            } else {
                var st = thisB.getSelectedTier();
                if (st < thisB.tiers.length -1) {
                    thisB.setSelectedTier(st + 1);
                    var nst = thisB.tiers[thisB.getSelectedTier()];
                    var top = nst.row.offsetTop, bottom = top + nst.row.offsetHeight;
                    if (top < thisB.tierHolder.scrollTop || bottom > thisB.tierHolder.scrollTop + thisB.tierHolder.offsetHeight) {
                        thisB.tierHolder.scrollTop = Math.min(top, bottom - thisB.tierHolder.offsetHeight);
                    }
                }
            }
        } else if (ev.keyCode == 187 || ev.keyCode == 61) { // +
            ev.stopPropagation(); ev.preventDefault();
            thisB.zoomStep(-10);
        } else if (ev.keyCode == 189 || ev.keyCode == 173) { // -
            ev.stopPropagation(); ev.preventDefault();
            thisB.zoomStep(10);
        } else if (ev.keyCode == 73 || ev.keyCode == 105) { // i
            ev.stopPropagation(); ev.preventDefault();
            var st = thisB.getSelectedTier();
            if (st < 0) return;
            var t = thisB.tiers[st];
            if (!t.infoVisible) {
                t.infoElement.style.display = 'block';
                t.updateHeight();
                t.infoVisible = true;
            } else {
                t.infoElement.style.display = 'none';
                t.updateHeight();
                t.infoVisible = false;
            }
        } else if (ev.keyCode == 84 || ev.keyCode == 116) { // t
            var bumpStatus;
            if( ev.shiftKey ){
                ev.stopPropagation(); ev.preventDefault();
                for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                    var t = thisB.tiers[ti];
                    if (t.dasSource.collapseSuperGroups) {
                        if (bumpStatus === undefined) {
                            bumpStatus = !t.bumped;
                        }
                        t.bumped = bumpStatus;
                        t.layoutWasDone = false;
                        t.draw();
                        t.updateLabel();
                    }
                }
            } else if (!ev.ctrlKey && !ev.metaKey) {
                ev.stopPropagation(); ev.preventDefault();
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                var t = thisB.tiers[st];
                if (t.dasSource.collapseSuperGroups) {
                    if (bumpStatus === undefined) {
                        bumpStatus = !t.bumped;
                    }
                    t.bumped = bumpStatus;
                    t.layoutWasDone = false;
                    t.draw();
                    t.updateLabel();
                }
            }
        } else if (ev.keyCode == 77 || ev.keyCode == 109) { // m
            ev.stopPropagation(); ev.preventDefault();
            if ((ev.ctrlKey || ev.metaKey) && thisB.selectedTiers.length > 1) {
                thisB.mergeSelectedTiers();
            }
        } else if (ev.keyCode == 68 || ev.keyCode == 100) { // d
            ev.stopPropagation(); ev.preventDefault();
            if (ev.ctrlKey || ev.metaKey) {
                var st = thisB.getSelectedTier();
                if (st < 0) return;
                thisB.addTier(thisB.tiers[st].dasSource);
            }
        } else if (ev.keyCode == 80 || ev.keyCode == 112) { // p
            if (ev.ctrlKey || ev.metaKey) {
                // Need to be careful because order of tiers could change
                // once we start updating pinning.
                var tt = [];
                for (var st = 0; st < thisB.selectedTiers.length; ++st) {
                    tt.push(thisB.tiers[thisB.selectedTiers[st]]);
                }
                for (var ti = 0; ti < tt.length; ++ti) {
                    tt[ti].mergeConfig({pinned: !tt[ti].pinned});
                }
            }
        } else {
            // console.log('key: ' + ev.keyCode + '; char: ' + ev.charCode);
        }
    };
    var keyUpHandler = function(ev) {
        thisB.snapZoomLockout = false;
    }

    this.browserHolder.addEventListener('focus', function(ev) {
        thisB.browserHolder.addEventListener('keydown', keyHandler, false);
    }, false);
    this.browserHolder.addEventListener('blur', function(ev) {
        thisB.browserHolder.removeEventListener('keydown', keyHandler, false);
    }, false);

    // Popup support (does this really belong here? FIXME)
    this.hPopupHolder = makeElement('div');
    this.hPopupHolder.style['font-family'] = 'helvetica';
    this.hPopupHolder.style['font-size'] = '12pt';
    this.hPopupHolder.classList.add('dalliance');
    document.body.appendChild(this.hPopupHolder);

    for (var t = 0; t < this.sources.length; ++t) {
        var source = this.sources[t];
        var config = {};
        if (this.restoredConfigs) {
            config = this.restoredConfigs[t];
        }

        if (!source.disabled) {
            this.makeTier(source, config);
        }
    }

    thisB.arrangeTiers();
    thisB.refresh();
    thisB.setSelectedTier(1);

    thisB.positionRuler();


    var ss = this.getSequenceSource();
    if (ss) {
        ss.getSeqInfo(this.chr, function(si) {
            thisB.currentSeqMax = si.length;
        });
    }

    this.queryRegistry();
    for (var m in this.chains) {
        this.queryRegistry(m, true);
    }

    if (this.hubs) {
        for (var hi = 0; hi < this.hubs.length; ++hi) {
            var hc = this.hubs[hi];
            if (typeof hc == 'string') {
                hc = {url: hc};
            };

            (function(hc) {
                connectTrackHub(hc.url, function(hub, err) {
                    if (err) {
                        console.log(err);
                    } else {
                        var tdb;
                        if (hc.genome)
                            tdb = hub.genomes[hc.genome];
                        else 
                            tdb = hub.genomes[thisB.coordSystem.ucscName];

                        if (tdb) {
                            if (hc.mapping) 
                                tdb.mapping = hc.mapping;
                            thisB.hubObjects.push(tdb);
                        }
                    }
                }, hc);
            })(hc);
        }
    }

    if (this.fullScreen) {
        this.setFullScreenHeight();
    }

    if (!this.statusRestored && this.storeStatus) {
        this.storeStatus();
    }

    // Ping any init listeners.
    for (var ii = 0; ii < this.initListeners.length; ++ii) {
        try {
            this.initListeners[ii].call(this);
        } catch (e) {
            console.log(e);
        }
    }
}

// 
// iOS touch support

Browser.prototype.touchStartHandler = function(ev) {
    ev.stopPropagation(); ev.preventDefault();
    
    this.touchOriginX = ev.touches[0].pageX;
    this.touchOriginY = ev.touches[0].pageY;
    if (ev.touches.length == 2) {
        var sep = Math.abs(ev.touches[0].pageX - ev.touches[1].pageX);
        this.zooming = true;
        this.zoomLastSep = this.zoomInitialSep = sep;
        this.zoomInitialScale = this.scale;
    }
}

Browser.prototype.touchMoveHandler = function(ev) {
    ev.stopPropagation(); ev.preventDefault();
    
    if (ev.touches.length == 1) {
        var touchX = ev.touches[0].pageX;
        var touchY = ev.touches[0].pageY;
        if (this.touchOriginX && touchX != this.touchOriginX) {
            this.move(touchX - this.touchOriginX);
        }
        if (this.touchOriginY && touchY != this.touchOriginY) {
            this.tierHolder.scrollTop -= (touchY - this.touchOriginY);
        }
        this.touchOriginX = touchX;
        this.touchOriginY = touchY;
    } else if (this.zooming && ev.touches.length == 2) {
        var sep = Math.abs(ev.touches[0].pageX - ev.touches[1].pageX);
        if (sep != this.zoomLastSep) {
            var cp = (ev.touches[0].pageX + ev.touches[1].pageX)/2;
            var scp = this.viewStart + (cp/this.scale)|0
            this.scale = this.zoomInitialScale * (sep/this.zoomInitialSep);
            this.viewStart = scp - (cp/this.scale)|0;
            for (var i = 0; i < this.tiers.length; ++i) {
	           this.tiers[i].draw();
            }
        }
        this.zoomLastSep = sep;
    }
}

Browser.prototype.touchEndHandler = function(ev) {
    ev.stopPropagation(); ev.preventDefault();
}

Browser.prototype.touchCancelHandler = function(ev) {
}


Browser.prototype.makeTier = function(source, config) {
    try {
        return this.realMakeTier(source, config);
    } catch (e) {
        console.log(e.stack || e);
    }
}

Browser.prototype.realMakeTier = function(source, config) {
    var thisB = this;
    var background = null;
    if (this.tierBackgroundColors) {
        background = this.tierBackgroundColors[this.tiers.length % this.tierBackgroundColors.length];
    }

    var tier = new DasTier(this, source, config, background);
    tier.oorigin = this.viewStart

    var isDragging = false;
    var dragOrigin, dragMoveOrigin;
    var hoverTimeout;

    var featureLookup = function(rx, ry) {
        var st = tier.subtiers;
        if (!st) {
            return;
        }

        var sti = 0;
        ry -= tier.padding;;
        while (sti < st.length && ry > st[sti].height && sti < (st.length - 1)) {
            ry = ry - st[sti].height - tier.padding;
            ++sti;
        }
        if (sti >= st.length) {
            return;
        }

        var glyphs = st[sti].glyphs;
        var viewCenter = (thisB.viewStart + thisB.viewEnd)/2;
        var offset = (tier.glyphCacheOrigin - thisB.viewStart)*thisB.scale;
        rx -= offset;
       
        return glyphLookup(glyphs, rx, ry);
    }

    var dragMoveHandler = function(ev) {
        ev.preventDefault(); ev.stopPropagation();
        var rx = ev.clientX;
        if (tier.dasSource.tier_type !== 'sequence' && rx != dragMoveOrigin) {
            thisB.move((rx - dragMoveOrigin));
            dragMoveOrigin = rx;
        }
        thisB.isDragging = true;
    }

    var dragUpHandler = function(ev) {
        window.removeEventListener('mousemove', dragMoveHandler, true);
        window.removeEventListener('mouseup', dragUpHandler, true);
    }
        

    tier.viewport.addEventListener('mousedown', function(ev) {
        thisB.browserHolder.focus();
        ev.preventDefault();
        var br = tier.row.getBoundingClientRect();
        var rx = ev.clientX, ry = ev.clientY;

        window.addEventListener('mousemove', dragMoveHandler, true);
        window.addEventListener('mouseup', dragUpHandler, true);
        dragOrigin = dragMoveOrigin = rx;
        thisB.isDragging = false; // Not dragging until a movement event arrives.
    }, false);

    tier.viewport.addEventListener('mousemove', function(ev) {
        var br = tier.row.getBoundingClientRect();
        var rx = ev.clientX - br.left, ry = ev.clientY - br.top;

        if (hoverTimeout) {
            clearTimeout(hoverTimeout);
        }

        if (isDragging) {
            // if (tier.dasSource.tier_type !== 'sequence' && rx != dragMoveOrigin) {
            //    thisB.move((rx - dragMoveOrigin));
            //    dragMoveOrigin = rx;
            // }
        } else {
            hoverTimeout = setTimeout(function() {
                var hit = featureLookup(rx, ry);
                if (hit && hit.length > 0) {
                    thisB.notifyFeatureHover(ev, hit[hit.length - 1], hit, tier);
                }
            }, 1000);
        }
    });

    var doubleClickTimeout = null;
    tier.viewport.addEventListener('mouseup', function(ev) {
        var br = tier.row.getBoundingClientRect();
        var rx = ev.clientX - br.left, ry = ev.clientY - br.top;

        var hit = featureLookup(rx, ry);
        if (hit && hit.length > 0 && !thisB.isDragging) {
            if (doubleClickTimeout) {
                clearTimeout(doubleClickTimeout);
                doubleClickTimeout = null;
                thisB.featureDoubleClick(hit, rx, ry);
            } else {
                doubleClickTimeout = setTimeout(function() {
                    doubleClickTimeout = null;
                    thisB.notifyFeature(ev, hit[hit.length-1], hit, tier);
                }, 500);
            }
        }

        if (thisB.isDragging && rx != dragOrigin && tier.dasSource.tier_type === 'sequence') {
            var a = thisB.viewStart + (rx/thisB.scale);
            var b = thisB.viewStart + (dragOrigin/thisB.scale);

            var min, max;
            if (a < b) {
                min = a|0; max = b|0;
            } else {
                min = b|0; max = a|0;
            }

            thisB.notifyRegionSelect(thisB.chr, min, max);
        }
        thisB.isDragging = false;
    }, false);

    tier.viewport.addEventListener('mouseout', function(ev) {
        isDragging = false;
    });

    tier.removeButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        for (var ti = 0; ti < thisB.tiers.length; ++ti) {
            if (thisB.tiers[ti] === tier) {
                thisB.removeTier({index: ti});
                break;
            }
        }
    }, false);
    tier.nameButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();

        if (ev.shiftKey) {
            var hitTier = -1;
            for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                if (thisB.tiers[ti] === tier) {
                    hitTier = ti;
                    break;
                }
            }
            if (hitTier >= 0) {
                var i = thisB.selectedTiers.indexOf(hitTier);
                if (i >= 0) {
                    thisB.selectedTiers.splice(i, 1);
                } else {
                    thisB.selectedTiers.push(hitTier);
                    thisB.selectedTiers.sort();
                }
                thisB.markSelectedTiers();
                thisB.notifyTierSelection();

                if (thisB.selectedTiers.length > 0) {
                    thisB.browserHolder.focus();
                } else {
                    thisB.notifyTierSelectionWrap(-1);
                }
            }
        } else {
            for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                if (thisB.tiers[ti] === tier) {
                    thisB.browserHolder.focus();
                    if (thisB.selectedTiers.length != 1 || thisB.selectedTiers[0] != ti) {
                        thisB.setSelectedTier(ti);
                        return;
                    }
                }
            }

            if (!tier.infoVisible) {
                tier.infoElement.style.display = 'block';
                tier.updateHeight();
                tier.infoVisible = true;
            } else {
                tier.infoElement.style.display = 'none';
                tier.updateHeight();
                tier.infoVisible = false;
            }
        }
    }, false);
    tier.bumpButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        var bumpStatus;
        var t = tier;
        if (t.dasSource.collapseSuperGroups) {
            
            if (bumpStatus === undefined) {
                bumpStatus = !t.bumped;
            }
            t.bumped = bumpStatus;
            t.layoutWasDone = false;
            t.draw();
            
            t.updateLabel();
        }
    }, false);

    
    var dragLabel;
    var dragTierHolder;
    var dragTierHolderScrollLimit;
    var tierOrdinal;
    var yAtLastReorder;
    var tiersWereReordered = false;

    var labelDragHandler = function(ev) {
        var label = tier.label;

        ev.stopPropagation(); ev.preventDefault();
        if (!dragLabel) {
            if (tier.pinned) {
                dragTierHolder = thisB.pinnedTierHolder;
            } else {
                dragTierHolder = thisB.tierHolder;
            }
            dragTierHolderScrollLimit = dragTierHolder.scrollHeight - dragTierHolder.offsetHeight;

            dragLabel = label.cloneNode(true);
            dragLabel.style.cursor = 'pointer';
            dragTierHolder.appendChild(dragLabel);
            label.style.visibility = 'hidden';

            for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                if (thisB.tiers[ti] === tier) {
                    tierOrdinal = ti;
                    break;
                }
            }

            yAtLastReorder = ev.clientY;
        }
        
        var holderBCR = dragTierHolder.getBoundingClientRect();
        dragLabel.style.left = (label.getBoundingClientRect().left - holderBCR.left) + 'px'; 
        dragLabel.style.top = (ev.clientY - holderBCR.top + dragTierHolder.scrollTop - 10) + 'px';

        var pty = ev.clientY - holderBCR.top + dragTierHolder.scrollTop;
        for (var ti = 0; ti < thisB.tiers.length; ++ti) {
            var tt = thisB.tiers[ti];
            if (tt.pinned ^ tier.pinned)
                continue; 

            var ttr = tt.row.getBoundingClientRect();
            pty -= (ttr.bottom - ttr.top);
            if (pty < 0) {
                if (ti < tierOrdinal && ev.clientY < yAtLastReorder || ti > tierOrdinal && ev.clientY > yAtLastReorder) {
                    thisB.withPreservedSelection(function() {
                        thisB.tiers.splice(tierOrdinal, 1);
                        thisB.tiers.splice(ti, 0, tier);
                    });

                    tierOrdinal = ti;
                    yAtLastReorder = ev.clientY;
                    thisB.reorderTiers();
                    dragTierHolder.appendChild(dragLabel); // Because reorderTiers removes all children.
                    tiersWereReordered = true;
                }
                break;
            }
        }

        if (dragLabel.offsetTop < dragTierHolder.scrollTop) {
            dragTierHolder.scrollTop -= (dragTierHolder.scrollTop - dragLabel.offsetTop);
        } else if ((dragLabel.offsetTop + dragLabel.offsetHeight) > (dragTierHolder.scrollTop + dragTierHolder.offsetHeight)) {
            dragTierHolder.scrollTop = Math.min(dragTierHolder.scrollTop + 
                                                   (dragLabel.offsetTop + dragLabel.offsetHeight) - 
                                                   (dragTierHolder.scrollTop + dragTierHolder.offsetHeight),
                                                dragTierHolderScrollLimit);
        }
    };

    var labelReleaseHandler = function(ev) {
        var label = tier.label;

        ev.stopPropagation(); ev.preventDefault();
        if (dragLabel) {
            dragLabel.style.cursor = 'auto';
            dragTierHolder.removeChild(dragLabel);
            dragLabel = null;
            label.style.visibility = null;
        }
        document.removeEventListener('mousemove', labelDragHandler, false);
        document.removeEventListener('mouseup', labelReleaseHandler, false);

        if (tiersWereReordered) {
            for (var ti = 0; ti < thisB.tiers.length; ++ti) {
                if (thisB.tiers[ti] == tier) {
                    thisB.setSelectedTier(ti);
                    break;
                }
            }
            thisB.notifyTier();
        }
    };

    tier.label.addEventListener('mousedown', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        tiersWereReordered = false;
        document.addEventListener('mousemove', labelDragHandler, false);
        document.addEventListener('mouseup', labelReleaseHandler, false);
    }, false);

    this.tiers.push(tier);  // NB this currently tells any extant knownSpace about the new tier.
    
    tier.init(); // fetches stylesheet
    tier.currentlyHeight = 50;
    this.updateHeight();
    tier.updateLabel();

    if (tier.featureSource && tier.featureSource.addActivityListener) {
        tier.featureSource.addActivityListener(function(busy) {
            if (busy > 0) {
                tier.loaderButton.style.display = 'inline-block';
            } else {
                tier.loaderButton.style.display = 'none';
            }
            thisB.pingActivity();
        });
    }

    tier._updateFromConfig();
    this.reorderTiers();

    return tier;
}

Browser.prototype.reorderTiers = function() {
    removeChildren(this.tierHolder);
    removeChildren(this.pinnedTierHolder);
    var hasPinned = false;
    var pinnedTiers = [], unpinnedTiers = [];
    for (var i = 0; i < this.tiers.length; ++i) {
        var t = this.tiers[i];
        if (t.pinned) {
            pinnedTiers.push(t);
            this.pinnedTierHolder.appendChild(this.tiers[i].row);
            hasPinned = true;
        } else {
            unpinnedTiers.push(t);
            this.tierHolder.appendChild(this.tiers[i].row);
        }
    }

    this.withPreservedSelection(function() {
        this.tiers.splice(0, this.tiers.length);
        for (var i = 0; i < pinnedTiers.length; ++i)
            this.tiers.push(pinnedTiers[i]);
        for (var i = 0; i < unpinnedTiers.length; ++i)
            this.tiers.push(unpinnedTiers[i]);
    });

    if (hasPinned)
        this.pinnedTierHolder.classList.add('tier-holder-pinned-full');
    else
        this.pinnedTierHolder.classList.remove('tier-holder-pinned-full');

    this.arrangeTiers();
}

Browser.prototype.withPreservedSelection = function(f) {
    var st = [];
    for (var xi = 0; xi < this.selectedTiers.length; ++xi) {
        st.push(this.tiers[this.selectedTiers[xi]]);
    }

    f.call(this);

    this.selectedTiers = [];
    for (var sti = 0; sti < this.tiers.length; ++sti) {
        if (st.indexOf(this.tiers[sti]) >= 0)
            this.selectedTiers.push(sti);
    }
}

Browser.prototype.refreshTier = function(tier) {
    if (this.knownSpace) {
        this.knownSpace.invalidate(tier);
    }
}

Browser.prototype.arrangeTiers = function() {
    var arrangedTiers = [];
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var t = this.tiers[ti];
        if (t.pinned) {
            arrangedTiers.push(t);
        }
    }
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var t = this.tiers[ti];
        if (!t.pinned) {
            arrangedTiers.push(t);
        }
    }

    if (this.tierBackgroundColors) {
        for (var ti = 0; ti < arrangedTiers.length; ++ti) {
            var t = arrangedTiers[ti];
            t.background = this.tierBackgroundColors[ti % this.tierBackgroundColors.length];
        }
    }
}

Browser.prototype.refresh = function() {
    this.notifyLocation();
    var width = (this.viewEnd - this.viewStart) + 1;
    var minExtraW = (100.0/this.scale)|0;
    var maxExtraW = (1000.0/this.scale)|0;

    var newOrigin = (this.viewStart + this.viewEnd) / 2;
    var oh = newOrigin - this.origin;
    this.origin = newOrigin;
    this.scaleAtLastRedraw = this.scale;
    for (var t = 0; t < this.tiers.length; ++t) {
        var od = oh;
        if (this.tiers[t].originHaxx) {
            od += this.tiers[t].originHaxx;
        }
        this.tiers[t].originHaxx = od;
    }

    var scaledQuantRes = this.targetQuantRes / this.scale;

    var innerDrawnStart = Math.max(1, (this.viewStart|0) - minExtraW);
    var innerDrawnEnd = Math.min((this.viewEnd|0) + minExtraW, ((this.currentSeqMax|0) > 0 ? (this.currentSeqMax|0) : 1000000000))
    var outerDrawnStart = Math.max(1, (this.viewStart|0) - maxExtraW);
    var outerDrawnEnd = Math.min((this.viewEnd|0) + maxExtraW, ((this.currentSeqMax|0) > 0 ? (this.currentSeqMax|0) : 1000000000));

    if (!this.knownSpace || this.knownSpace.chr !== this.chr) {
        var ss = this.getSequenceSource();
        this.knownSpace = new KnownSpace(this.tiers, this.chr, outerDrawnStart, outerDrawnEnd, scaledQuantRes, ss);
    }
    
    var seg = this.knownSpace.bestCacheOverlapping(this.chr, innerDrawnStart, innerDrawnEnd);
    if (seg && seg.min <= innerDrawnStart && seg.max >= innerDrawnEnd) {
        this.drawnStart = Math.max(seg.min, outerDrawnStart);
        this.drawnEnd = Math.min(seg.max, outerDrawnEnd);
    } else {
        this.drawnStart = outerDrawnStart;
        this.drawnEnd = outerDrawnEnd;
    }
    
    this.knownSpace.viewFeatures(this.chr, this.drawnStart, this.drawnEnd, scaledQuantRes);
    this.drawOverlays();
}

function setSources(msh, availableSources, maybeMapping) {
    if (maybeMapping) {
        for (var s = 0; s < availableSources.length; ++s) {
            availableSources[s].mapping = maybeMapping;
        }
    }
    msh.set(availableSources);
}

Browser.prototype.queryRegistry = function(maybeMapping, tryCache) {
    var thisB = this;
    var coords, msh;
    if (maybeMapping) {
        coords = this.chains[maybeMapping].coords;
        if (!thisB.mappableSources[maybeMapping]) {
            thisB.mappableSources[maybeMapping] = new Observed();
        }
        msh = thisB.mappableSources[maybeMapping];
    } else {
        coords = this.coordSystem;
        msh = this.availableSources;
    }
    var cacheHash = hex_sha1(miniJSONify(coords));
    if (tryCache) {
        var cacheTime = localStorage['dalliance.registry.' + cacheHash + '.last_queried'];
        if (cacheTime) {
            try {
                setSources(msh, JSON.parse(localStorage['dalliance.registry.' + cacheHash + '.sources']), maybeMapping);
                var cacheAge = (Date.now()|0) - (cacheTime|0);
                if (cacheAge < (12 * 60 * 60 * 1000)) {
                    return;
                }
            } catch (rex) {
                console.log('Bad registry cache: ' + rex);
            }
        }
    }
            
    new DASRegistry(this.registry).sources(function(sources) {
        var availableSources = [];
        for (var s = 0; s < sources.length; ++s) {
            var source = sources[s];
            if (!source.coords || source.coords.length == 0) {
                continue;
            }
            var scoords = source.coords[0];
            if (scoords.taxon != coords.taxon || scoords.auth != coords.auth || scoords.version != coords.version) {
                continue;
            }   
            availableSources.push(source);
        }

        localStorage['dalliance.registry.' + cacheHash + '.sources'] = JSON.stringify(availableSources);
        localStorage['dalliance.registry.' + cacheHash + '.last_queried'] = '' + Date.now();
        
        setSources(msh, availableSources, maybeMapping);
    }, function(error) {
        // msh.set(null);
    }, coords);
}

//
// Navigation
//

Browser.prototype.move = function(pos)
{
    var wid = this.viewEnd - this.viewStart;
    this.viewStart -= pos / this.scale;
    this.viewEnd = this.viewStart + wid;
    if (this.currentSeqMax > 0 && this.viewEnd > this.currentSeqMax) {
        this.viewEnd = this.currentSeqMax;
        this.viewStart = this.viewEnd - wid;
    }
    if (this.viewStart < 1) {
        this.viewStart = 1;
        this.viewEnd = this.viewStart + wid;
    }
    this.notifyLocation();
    
    var viewCenter = (this.viewStart + this.viewEnd)/2;
    
    for (var i = 0; i < this.tiers.length; ++i) {
        var offset = (this.viewStart - this.tiers[i].norigin)*this.scale;
	this.tiers[i].viewport.style.left = '' + ((-offset|0) - 1000) + 'px';
        var ooffset = (this.viewStart - this.tiers[i].oorigin)*this.scale;
        this.tiers[i].overlay.style.left = '' + ((-ooffset|0) - 1000) + 'px';
    }

    this.spaceCheck();
}

Browser.prototype.zoomStep = function(delta) {
    var oz = 1.0 * this.zoomSliderValue;
    var nz = oz + delta;
    if (nz < this.zoomMin) {
        nz= this.zoomMin;
    }
    if (nz > this.zoomMax) {
        nz = this.zoomMax;
    }

    if (nz != oz) {
        this.zoomSliderValue = nz; // FIXME maybe ought to set inside zoom!
        this.zoom(Math.exp((1.0 * nz) / this.zoomExpt));
    }
}

Browser.prototype.zoom = function(factor) {
    this.zoomFactor = factor;
    var viewCenter = Math.round((this.viewStart + this.viewEnd) / 2.0)|0;
    this.viewStart = viewCenter - this.zoomBase * this.zoomFactor / 2;
    this.viewEnd = viewCenter + this.zoomBase * this.zoomFactor / 2;
    if (this.currentSeqMax > 0 && (this.viewEnd > this.currentSeqMax + 5)) {
        var len = this.viewEnd - this.viewStart + 1;
        this.viewEnd = this.currentSeqMax;
        this.viewStart = this.viewEnd - len + 1;
    }
    if (this.viewStart < 1) {
        var len = this.viewEnd - this.viewStart + 1;
        this.viewStart = 1;
        this.viewEnd = this.viewStart + len - 1;
    }
    this.scale = this.featurePanelWidth / (this.viewEnd - this.viewStart)
    var width = this.viewEnd - this.viewStart + 1;
    
    var scaleRat = (this.scale / this.scaleAtLastRedraw);

    this.refresh();
}

Browser.prototype.spaceCheck = function(dontRefresh) {
    if (!this.knownSpace || this.knownSpace.chr !== this.chr) {
        this.refresh();
        return;
    } 

    var width = ((this.viewEnd - this.viewStart)|0) + 1;
    var minExtraW = (100.0/this.scale)|0;
    var maxExtraW = (1000.0/this.scale)|0;

    if ((this.drawnStart|0) > Math.max(1, ((this.viewStart|0) - minExtraW)|0)  || (this.drawnEnd|0) < Math.min((this.viewEnd|0) + minExtraW, ((this.currentSeqMax|0) > 0 ? (this.currentSeqMax|0) : 1000000000)))  {
        this.refresh();
    }
}

Browser.prototype.resizeViewer = function(skipRefresh) {
    var width = this.tierHolder.getBoundingClientRect().width | 0;
    if (width == 0)
        return;

    var oldFPW = Math.max(this.featurePanelWidth, 300); // Can get silly values stored
                                                        // when the browser is hidden.
    this.featurePanelWidth = width|0;

    if (oldFPW != this.featurePanelWidth) {
        this.zoomMax = this.zoomExpt * Math.log(this.maxViewWidth / this.zoomBase);
        this.zoomMin = this.zoomExpt * Math.log(this.featurePanelWidth / 10 / this.zoomBase);
        this.zoomSliderValue = this.zoomExpt * Math.log((this.viewEnd - this.viewStart + 1) / this.zoomBase);

        var viewWidth = this.viewEnd - this.viewStart;
        var nve = this.viewStart + (viewWidth * this.featurePanelWidth) / oldFPW;

        this.viewEnd = nve;

        var wid = this.viewEnd - this.viewStart + 1;
        if (this.currentSeqMax > 0 && this.viewEnd > this.currentSeqMax) {
            this.viewEnd = this.currentSeqMax;
            this.viewStart = this.viewEnd - wid + 1;
        }
        if (this.viewStart < 1) {
            this.viewStart = 1;
            this.viewEnd = this.viewStart + wid - 1;
        }

        this.positionRuler();

        if (!skipRefresh) {
            this.spaceCheck();
        }
        this.notifyLocation();
    }

    if (this.fullScreen) {
        this.setFullScreenHeight();
    }
}

Browser.prototype.setFullScreenHeight = function() {
    var rest = document.body.offsetHeight - this.browserHolder.offsetHeight;
    this.browserHolder.style.maxHeight = Math.max(1000, window.innerHeight - rest - 20) + 'px'
}

Browser.prototype.addTier = function(conf) {
    conf = shallowCopy(conf);
    conf.disabled = false;
    
    var tier = this.makeTier(conf);
    this.markSelectedTiers();
    this.positionRuler();
    this.notifyTier();
    return tier;
}

function sourceDataURI(conf) {
    if (conf.uri) {
        return conf.uri;
    } else if (conf.blob) {
        return 'file:' + conf.blob.name;
    } else if (conf.bwgBlob) {
        return 'file:' + conf.bwgBlob.name;
    } else if (conf.bamBlob) {
        return 'file:' + conf.bamBlob.name;
    }

    return conf.bwgURI || conf.bamURI || conf.jbURI || conf.twoBitURI || 'http://www.biodalliance.org/magic/no_uri';
}

function sourceStyleURI(conf) {
    if (conf.stylesheet_uri)
        return conf.stylesheet_uri;
    else if (conf.tier_type == 'sequence')
        return 'http://www.biodalliance.org/magic/sequence'
    else
        return sourceDataURI(conf);
}

function sourcesAreEqual(a, b) {
    if (sourceDataURI(a) != sourceDataURI(b) ||
        sourceStyleURI(a) != sourceStyleURI(b))
        return false;

    if (a.mapping != b.mapping)
        return false;

    if (a.tier_type != b.tier_type)
        return false;

    if (a.overlay) {
        if (!b.overlay || b.overlay.length != a.overlay.length)
            return false;
        for (var oi = 0; oi < a.overlay.length; ++oi) {
            if (!sourcesAreEqual(a.overlay[oi], b.overlay[oi]))
                return false;
        }
    } else {
        if (b.overlay)
            return false;
    }

    return true;
}

Browser.prototype.removeTier = function(conf, force) {
    var target = -1;

    if (typeof conf.index !== 'undefined' && conf.index >=0 && conf.index < this.tiers.length) {
        target = conf.index;
    } else {
        for (var ti = 0; ti < this.tiers.length; ++ti) {
            var ts = this.tiers[ti].dasSource;
            
            if (sourcesAreEqual(conf, ts)) {
                target = ti; break;
            }
        }
    }

    if (target < 0) {
        throw "Couldn't find requested tier";
    }

    this.tiers.splice(target, 1);

    var nst = [];
    for (var sti = 0; sti < this.selectedTiers.length; ++sti) {
        var st = this.selectedTiers[sti];
        if (st < target) {
            nst.push(st);
        } else if (st > target) {
            nst.push(st - 1);
        }
    }
    this.selectedTiers = nst;
    this.markSelectedTiers();

    this.reorderTiers();
    this.notifyTier();
}

Browser.prototype.getSequenceSource = function() {
    if (this._sequenceSource === undefined)
        this._sequenceSource = this._getSequenceSource();
    return this._sequenceSource;
}

Browser.prototype._getSequenceSource = function() {
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        if (this.tiers[ti].sequenceSource) {
            return this.tiers[ti].sequenceSource;
        }
    }

    for (var si = 0; si < this.defaultSources.length; ++si) {
        var s = this.defaultSources[si];
        if (s.provides_entrypoints || s.tier_type == 'sequence' || s.twoBitURI) {
            if (s.twoBitURI) {
                return new TwoBitSequenceSource(s);
            } else {
                return new DASSequenceSource(s);
            }
        }
    }
}

Browser.prototype.setLocation = function(newChr, newMin, newMax, callback) {
    if (typeof(newMin) !== 'number') {
        throw Error('minimum must be a number (got ' + JSON.stringify(newMin) + ')');
    }
    if (typeof(newMax) !== 'number') {
        throw Error('maximum must be a number (got ' + JSON.stringify(newMax) + ')');
    }

    if (!callback) {
        callback = function(err) {
            if (err) {
                throw err;
            }
        }
    }
    var thisB = this;

    if (!newChr || newChr == this.chr) {
        return this._setLocation(null, newMin, newMax, null, callback);
    } else {
        var ss = this.getSequenceSource();
        if (!ss) {
            return callback('Need a sequence source');
        }

        ss.getSeqInfo(newChr, function(si) {
            if (!si) {
                var altChr;
                if (newChr.indexOf('chr') == 0) {
                    altChr = newChr.substr(3);
                } else {
                    altChr = 'chr' + newChr;
                }
                ss.getSeqInfo(altChr, function(si2) {
                    if (!si2) {
                        return callback("Couldn't find sequence '" + newChr + "'");
                    } else {
                        return thisB._setLocation(altChr, newMin, newMax, si2, callback);
                    }
                });
            } else {
                return thisB._setLocation(newChr, newMin, newMax, si, callback);
            }
        });
    }
}

Browser.prototype._setLocation = function(newChr, newMin, newMax, newChrInfo, callback) {
    var chrChanged = false;
    if (newChr) {
        if (newChr.indexOf('chr') == 0)
            newChr = newChr.substring(3);

        if (this.chr != newChr)
            chrChanged = true;
        this.chr = newChr;
        this.currentSeqMax = newChrInfo.length;
    }

    newMin|=0; newMax|=0;
    var newWidth = Math.max(10, newMax-newMin+1);
    if (newMin < 1) {
        newMin = 1; newMax = newMin + newWidth - 1;
    }
    if (newMax > this.currentSeqMax) {
        newMax = this.currentSeqMax;
        newMin = Math.max(1, newMax - newWidth + 1);
    }

    this.viewStart = newMin;
    this.viewEnd = newMax;
    var newScale = Math.max(this.featurePanelWidth, 50) / (this.viewEnd - this.viewStart);
    var oldScale = this.scale;
    var scaleChanged = (Math.abs(newScale - oldScale)) > 0.0001;
    this.scale = newScale;

    var newZS, oldZS;
    oldZS = this.zoomSliderValue;
    this.zoomSliderValue = newZS = this.zoomExpt * Math.log((this.viewEnd - this.viewStart + 1) / this.zoomBase);
    
    if (scaleChanged || chrChanged) {
        for (var i = 0; i < this.tiers.length; ++i) {
            this.tiers[i].viewport.style.left = '5000px';
            this.tiers[i].overlay.style.left = '5000px';
        }

        this.refresh();

        if (this.savedZoom) {
            newZS -= this.zoomMin;
            oldZS -= this.zoomMin;
            var difToActive = newZS - oldZS;
            var difToSaved = newZS - this.savedZoom;
            if (Math.abs(difToActive) > Math.abs(difToSaved)) {
                this.isSnapZooming = !this.isSnapZooming;
                this.savedZoom = oldZS;
            }
        } else {
            this.isSnapZooming = false;
            this.savedZoom = null;
        }
    } else {
        var viewCenter = (this.viewStart + this.viewEnd)/2;
    
        for (var i = 0; i < this.tiers.length; ++i) {
            var offset = (this.viewStart - this.tiers[i].norigin)*this.scale;
	        this.tiers[i].viewport.style.left = '' + ((-offset|0) - 1000) + 'px';
            var ooffset = (this.viewStart - this.tiers[i].oorigin)*this.scale;
            this.tiers[i].overlay.style.left = '' + ((-ooffset|0) - 1000) + 'px';
        }
    }
    this.notifyLocation();

    this.spaceCheck();
    if (this.instrumentActivity)
        this.activityStartTime = Date.now()|0;
    return callback();
}

Browser.prototype.pingActivity = function() {
    if (!this.instrumentActivity || !this.activityStartTime)
        return;

    var activity = 0;
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        if (this.tiers[ti].loaderButton.style.display !== 'none')
            ++activity;
    }

    if (activity == 0) {
        var now = Date.now()|0;
        console.log('Loading took ' + (now-this.activityStartTime) + 'ms');
        this.activityStartTime = null;
    }
}

Browser.prototype.addInitListener = function(handler) {
    this.initListeners.push(handler);
}

Browser.prototype.addFeatureListener = function(handler, opts) {
    opts = opts || {};
    this.featureListeners.push(handler);
}

Browser.prototype.notifyFeature = function(ev, feature, hit, tier) {
  for (var fli = 0; fli < this.featureListeners.length; ++fli) {
      try {
          if (this.featureListeners[fli](ev, feature, hit, tier))
            return;
      } catch (ex) {
          console.log(ex.stack);
      }
  }
}

Browser.prototype.addFeatureHoverListener = function(handler, opts) {
    opts = opts || {};
    this.featureHoverListeners.push(handler);
}

Browser.prototype.notifyFeatureHover = function(ev, feature, hit, tier) {
    for (var fli = 0; fli < this.featureHoverListeners.length; ++fli) {
        try {
            this.featureHoverListeners[fli](ev, feature, hit, tier);
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}

Browser.prototype.addViewListener = function(handler, opts) {
    opts = opts || {};
    this.viewListeners.push(handler);
}

Browser.prototype.notifyLocation = function() {
    for (var lli = 0; lli < this.viewListeners.length; ++lli) {
        try {
            this.viewListeners[lli](this.chr, this.viewStart|0, this.viewEnd|0, this.zoomSliderValue, {current: this.zoomSliderValue, min: this.zoomMin, max: this.zoomMax});
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}

Browser.prototype.addTierListener = function(handler) {
    this.tierListeners.push(handler);
}

Browser.prototype.notifyTier = function() {
    for (var tli = 0; tli < this.tierListeners.length; ++tli) {
        try {
            this.tierListeners[tli]();
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}

Browser.prototype.addRegionSelectListener = function(handler) {
    this.regionSelectListeners.push(handler);
}

Browser.prototype.notifyRegionSelect = function(chr, min, max) {
    for (var rli = 0; rli < this.regionSelectListeners.length; ++rli) {
        try {
            this.regionSelectListeners[rli](chr, min, max);
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}


Browser.prototype.highlightRegion = function(chr, min, max) {
    var thisB = this;
    
    if (chr == this.chr) {
        return this._highlightRegion(chr, min, max);
    }

    var ss = this.getSequenceSource();
    if (!ss) {
        throw 'Need a sequence source';
    }

    ss.getSeqInfo(chr, function(si) {
        if (!si) {
            var altChr;
            if (chr.indexOf('chr') == 0) {
                altChr = chr.substr(3);
            } else {
                altChr = 'chr' + chr;
            }
            ss.getSeqInfo(altChr, function(si2) {
                if (!si2) {
                    // Fail silently.
                } else {
                    return thisB._highlightRegion(altChr, min, max);
                }
            });
        } else {
            return thisB._highlightRegion(chr, min, max);
        }
    });
}

Browser.prototype._highlightRegion = function(chr, min, max) {
    for (var hi = 0; hi < this.highlights.length; ++hi) {
        var h = this.highlights[hi];
        if (h.chr == chr && h.min == min && h.max == max)
            return;
    }

    this.highlights.push(new Region(chr, min, max));
    var visStart = this.viewStart - (1000/this.scale);
    var visEnd = this.viewEnd + (1000/this.scale);
    if ((chr == this.chr || chr == ('chr'+this.chr)) && min < visEnd && max > visStart) {
        this.drawOverlays();
    }

    this.notifyLocation();
}

Browser.prototype.clearHighlights = function() {
    this.highlights = [];
    this.drawOverlays();
    this.notifyLocation();
}

Browser.prototype.drawOverlays = function() {
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        this.tiers[ti].drawOverlay();
    }
}

Browser.prototype.featuresInRegion = function(chr, min, max) {
    var features = [];
    if (chr !== this.chr) {
        return [];
    }

    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var fl = this.tiers[ti].currentFeatures || [];
        for (var fi = 0; fi < fl.length; ++fi) {
            var f = fl[fi];
            if (f.min <= max && f.max >= min) {
                features.push(f);
            }
        }
    }
    return features;
}


Browser.prototype.getSelectedTier = function() {
    if (this.selectedTiers.length > 0) 
        return this.selectedTiers[0];
    else
        return -1;
}

Browser.prototype.setSelectedTier = function(t) {
    if (t == null) {
        this.selectedTiers = [];
    } else {
        this.selectedTiers = [t];
    }
    this.markSelectedTiers();
    this.notifyTierSelection();
}

Browser.prototype.markSelectedTiers = function() {
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var button = this.tiers[ti].nameButton;

        if (this.selectedTiers.indexOf(ti) >= 0) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    }
    if (this.selectedTiers.length > 0) {
        this.browserHolder.focus();
    }
}

Browser.prototype.addTierSelectionListener = function(f) {
    this.tierSelectionListeners.push(f);
}

Browser.prototype.notifyTierSelection = function() {
    for (var fli = 0; fli < this.tierSelectionListeners.length; ++fli) {
        try {
            this.tierSelectionListeners[fli](this.selectedTiers);
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}

Browser.prototype.addTierSelectionWrapListener = function(f) {
    this.tierSelectionWrapListeners.push(f);
}

Browser.prototype.notifyTierSelectionWrap = function(i) {
    for (var fli = 0; fli < this.tierSelectionWrapListeners.length; ++fli) {
        try {
            this.tierSelectionWrapListeners[fli](i);
        } catch (ex) {
            console.log(ex.stack);
        }
    }
}

Browser.prototype.positionRuler = function() {
    var display = 'none';
    var left = '';
    var right = '';

    if (this.rulerLocation == 'center') {
        display = 'block';
        left = '' + ((this.featurePanelWidth/2)|0) + 'px';
    } else if (this.rulerLocation == 'left') {
        display = 'block';
        left = '0px';
    } else if (this.rulerLocation == 'right') {
        display = 'block';
        right = '0px'
    } else {
        display = 'none';
    }

    this.ruler.style.display = display;
    this.ruler.style.left = left;
    this.ruler.style.right = right;

    this.ruler2.style.display = this.rulerLocation == 'center' ? 'none' : 'block';
    this.ruler2.style.left = '' + ((this.featurePanelWidth/2)|0) + 'px';

    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var tier = this.tiers[ti];
        var q = tier.quantOverlay;

        var quant;
        if (tier.subtiers && tier.subtiers.length > 0)
            quant = tier.subtiers[0].quant;

        if (q) {
            q.style.display = quant ? display : 'none';
            q.style.left = left;
            q.style.right = right;
        }
    }
}

Browser.prototype.featureDoubleClick = function(hit, rx, ry) {
    if (!hit || hit.length == 0)
        return;

    var f = hit[hit.length - 1];

    if (!f.min || !f.max) {
        return;
    }

    var fstart = (((f.min|0) - (this.viewStart|0)) * this.scale);
    var fwidth = (((f.max - f.min) + 1) * this.scale);
    
    var newMid = (((f.min|0) + (f.max|0)))/2;
    if (fwidth > 10) {
        var frac = (1.0 * (rx - fstart)) / fwidth;
        if (frac < 0.3) {
            newMid = (f.min|0);
        } else  if (frac > 0.7) {
            newMid = (f.max|0) + 1;
        }
    }

    var width = this.viewEnd - this.viewStart;
    this.setLocation(null, newMid - (width/2), newMid + (width/2));
}

Browser.prototype.zoomForScale = function(scale) {
    var ssScale;
    if (scale > 0.2) {
        ssScale = 'high';
    } else if (scale > 0.01) {
        ssScale = 'medium';
    } else  {
        ssScale = 'low';
    }
    return ssScale;
}

Browser.prototype.zoomForCurrentScale = function() {
    return this.zoomForScale(this.scale);
}

Browser.prototype.updateHeight = function() {
    var tierTotal = 0;
    for (var ti = 0; ti < this.tiers.length; ++ti) 
        tierTotal += (this.tiers[ti].currentHeight || 30);
    this.ruler.style.height = '' + tierTotal + 'px';
    this.ruler2.style.height = '' + tierTotal + 'px';
    // this.svgHolder.style.maxHeight = '' + Math.max(tierTotal, 500) + 'px';
}

Browser.prototype.scrollArrowKey = function(ev, dir) {
    if (this.reverseKeyScrolling)
        dir = -dir;
    
    if (ev.ctrlKey || ev.metaKey) {
        var fedge = false;
        if(ev.shiftKey){
            fedge = true;
        }

        this.leap(dir, fedge);
    } else {
        this.move(ev.shiftKey ? 100*dir : 25*dir);
    }
}

Browser.prototype.leap = function(dir, fedge) {
    var thisB = this;
    var pos=((thisB.viewStart + thisB.viewEnd + 1)/2)|0;

    var st = thisB.getSelectedTier();
    if (st < 0) return;
    var tier = thisB.tiers[st];

    if (tier && ((tier.featureSource && this.sourceAdapterIsCapable(tier.featureSource, 'quantLeap') && typeof(tier.quantLeapThreshold) == 'number')
                 || (tier.featureSource && this.sourceAdapterIsCapable(tier.featureSource, 'leap')))) {
        tier.findNextFeature(
              thisB.chr,
              pos,
              -dir,
              fedge,
              function(nxt) {
                  if (nxt) {
                      var nmin = nxt.min;
                      var nmax = nxt.max;
                      if (fedge) { 
                        if (dir > 0) {
                          if (nmin>pos+1) {
                              nmax=nmin;
                          } else {
                              nmax++;
                              nmin=nmax
                          }
                        } else {
                            if (nmax<pos-1) {
                                nmax++;
                                nmin=nmax;
                            } else {
                                nmax=nmin;
                            }
                        } 
                      }
                      var wid = thisB.viewEnd - thisB.viewStart + 1;
                      if(parseFloat(wid/2) == parseInt(wid/2)){wid--;}
                      var newStart = (nmin + nmax - wid)/2 + 1;
                      var newEnd = newStart + wid - 1;
                      var pos2=pos;
                      thisB.setLocation(nxt.segment, newStart, newEnd);
                  } else {
                      alert('no next feature'); // FIXME better reporting would be nice!
                  }
              });
    } else {
        this.move(100*dir);
    }
}

function glyphLookup(glyphs, rx, ry, matches) {
    matches = matches || [];

    for (var gi = glyphs.length - 1; gi >= 0; --gi) {
        var g = glyphs[gi];
        if (!g.notSelectable && g.min() <= rx && g.max() >= rx) {
            if (g.minY) {
                if (ry < g.minY() || ry > g.maxY())
                    continue;
            }

            if (g.feature) {
                matches.push(g.feature);
            } else if (g.group) {
                matches.push(g.group);
            }
    
            if (g.glyphs) {
                return glyphLookup(g.glyphs, rx, ry, matches);
            } else if (g.glyph) {
                return glyphLookup([g.glyph], rx, ry, matches);
            } else {
                return matches;
            }
        }
    }
    return matches;
}

Browser.prototype.nameForCoordSystem = function(cs) {
    var primary = null, ucsc = null;
    if (this.assemblyNamePrimary) {
        primary = '' + cs.auth;
        if (typeof(cs.version) !== 'undefined')
            primary += cs.version;
    }
    if (this.assemblyNameUcsc) {
        ucsc = cs.ucscName;
    }
    if (primary != null && ucsc != null)
        return primary + '/' + ucsc;
    else 
        return primary || ucsc || 'unknown';
}

Browser.prototype.makeLoader = function(size) {
    size = size || 16;
    var retina = window.devicePixelRatio > 1;
    if (size < 20) {
        return makeElement('img', null, {src: this.resolveURL('$$img/spinner_' + (retina ? 16 : 32) + '.gif'), width: '16', height: '16'});
    } else {
        return makeElement('img', null, {src: this.resolveURL('$$img/spinner_' + (retina ? 24 : 48) + '.gif'), width: '24', height: '24'});
    }
}

Browser.prototype.getWorker = function() {
    if (!this.useFetchWorkers || !this.fetchWorkers || this.fetchWorkers.length==0)
        return null;

    if (this.nextWorker >= this.fetchWorkers.length)
        this.nextWorker = 0;
    return this.fetchWorkers[this.nextWorker++];
}

function FetchWorker(browser, worker) {
    var thisB = this;
    this.tagSeed = 0;
    this.callbacks = {};
    this.browser = browser;
    this.worker = worker;

    this.worker.onmessage = function(ev) {
        var cb = thisB.callbacks[ev.data.tag];
        if (cb) {
            cb(ev.data.result, ev.data.error);
            delete thisB.callbacks[ev.data.tag];
        }
    };
}

function makeFetchWorker(browser) {
    var wurl = browser.resolveURL(browser.workerPath);
    if (wurl.indexOf('//') == 0) {
        if (window.location.prototype === 'https:')
            wurl = 'https:' + wurl;
        else
            wurl = 'http:' + wurl;
    }

    var wscript = 'importScripts("' + wurl + '");';
    var wblob = new Blob([wscript], {type: 'application/javascript'});


    return new Promise(function(resolve, reject) {
        var worker = new Worker(URL.createObjectURL(wblob));

        worker.onmessage = function(ev) {
            if (ev.data.tag === 'init') {
                console.log('Worker initialized');
                resolve(new FetchWorker(browser, worker))
            }
            
        }

        worker.onerror = function(ev) {
            reject(ev.message);
        }
    });    
}

FetchWorker.prototype.postCommand = function(cmd, callback, transfer) {
    var tag = 'x' + (++this.tagSeed);
    cmd.tag = tag;
    this.callbacks[tag] = callback;
    this.worker.postMessage(cmd, transfer);
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        Browser: Browser,
        sourcesAreEqual: sourcesAreEqual,
        sourceDataURI: sourceDataURI
    };

    // Required because they add stuff to Browser.prototype
    require('./browser-ui');
    require('./track-adder');
    require('./track-adder-custom');
    require('./feature-popup');
    require('./tier-actions');
    require('./domui');
    require('./search');

    var sa = require('./sourceadapters');
    var TwoBitSequenceSource = sa.TwoBitSequenceSource;
    var DASSequenceSource = sa.DASSequenceSource;

    var KnownSpace = require('./kspace').KnownSpace;

    var DASRegistry = require('./das').DASRegistry;
}

function SourceCache() {
    this.sourcesByURI = {}
}

SourceCache.prototype.get = function(conf) {
    var scb = this.sourcesByURI[sourceDataURI(conf)];
    if (scb) {
        for (var si = 0; si < scb.configs.length; ++si) {
            if (sourcesAreEqual(scb.configs[si], conf)) {
                return scb.sources[si];
            }
        }
    }
}

SourceCache.prototype.put = function(conf, source) {
    var uri = sourceDataURI(conf);
    var scb = this.sourcesByURI[uri];
    if (!scb) {
        scb = {configs: [], sources: []};
        this.sourcesByURI[uri] = scb;
    }
    scb.configs.push(conf);
    scb.sources.push(source);
}

},{"./browser-ui":5,"./chainset":7,"./das":10,"./domui":11,"./feature-popup":17,"./kspace":21,"./numformats":24,"./search":28,"./sha1":31,"./sourceadapters":32,"./thub":38,"./tier":41,"./tier-actions":39,"./track-adder":43,"./track-adder-custom":42,"./utils":47,"./version":49,"es6-promise":50}],7:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// chainset.js: liftover support
//

"use strict";

if (typeof(require) !== 'undefined') {
    var das = require('./das');
    var DASSource = das.DASSource;
    var DASSegment = das.DASSegment;

    var utils = require('./utils');
    var pusho = utils.pusho;
    var shallowCopy = utils.shallowCopy;

    var parseCigar = require('./cigar').parseCigar;

    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;

    var bbi = require('./bigwig');
    var makeBwg = bbi.makeBwg;

    var Promise = require('es6-promise').Promise;
}

function Chainset(conf, srcTag, destTag, coords) {
    if (typeof(conf) == 'string') {
        this.uri = conf;
        this.srcTag = srcTag;
        this.destTag = destTag;
        this.coords = coords;
    } else {
        this.uri = conf.uri;
        this.srcTag = conf.srcTag;
        this.destTag = conf.destTag;
        this.coords = shallowCopy(conf.coords);
        this.type = conf.type;
        this.credentials = conf.credentials;
    }

    this.chainsBySrc = {};
    this.chainsByDest = {};
    this.postFetchQueues = {};

    if (this.type == 'bigbed') {
        this.chainFetcher = new BBIChainFetcher(this.uri, this.credentials);
    } else {
        this.chainFetcher = new DASChainFetcher(this.uri, this.srcTag, this.destTag);
    }
};

Chainset.prototype.exportConfig = function() {
    return {
        uri: this.uri,
        srcTag: this.srcTag,
        destTag: this.destTag,
        coords: this.coords,
        type: this.type,
        credentials: this.credentials
    };
}

Chainset.prototype.mapPoint = function(chr, pos) {
    var chains = this.chainsBySrc[chr] || [];
    for (var ci = 0; ci < chains.length; ++ci) {
        var c = chains[ci];
        if (pos >= c.srcMin && pos <= c.srcMax) {
            var cpos;
            if (c.srcOri == '-') {
                cpos = c.srcMax - pos;
            } else {
                cpos = pos - c.srcMin;
            }
            var blocks = c.blocks;
            for (var bi = 0; bi < blocks.length; ++bi) {
                var b = blocks[bi];
                var bSrc = b[0];
                var bDest = b[1];
                var bSize = b[2];
                if (cpos >= bSrc && cpos <= (bSrc + bSize)) {
                    var apos = cpos - bSrc;

                    var dpos;
                    if (c.destOri == '-') {
                        dpos = c.destMax - bDest - apos;
                    } else {
                        dpos = apos + bDest + c.destMin;
                    }
                    return {seq: c.destChr, pos: dpos, flipped: (c.srcOri != c.destOri)}
                }
            }
        }
    }
    return null;
}

Chainset.prototype.unmapPoint = function(chr, pos) {
    var chains = this.chainsByDest[chr] || [];
    for (var ci = 0; ci < chains.length; ++ci) {
        var c = chains[ci];
        if (pos >= c.destMin && pos <= c.destMax) {
            var cpos;
            if (c.srcOri == '-') {
                cpos = c.destMax - pos;
            } else {
                cpos = pos - c.destMin;
            }    
            
            var blocks = c.blocks;
            for (var bi = 0; bi < blocks.length; ++bi) {
                var b = blocks[bi];
                var bSrc = b[0];
                var bDest = b[1];
                var bSize = b[2];

                if (cpos >= bDest && cpos <= (bDest + bSize)) {
                    var apos = cpos - bDest;

                    var dpos = apos + bSrc + c.srcMin;
                    var dpos;
                    if (c.destOri == '-') {
                        dpos = c.srcMax - bSrc - apos;
                    } else {
                        dpos = apos + bSrc + c.srcMin;
                    }
                    return {seq: c.srcChr, pos: dpos, flipped: (c.srcOri != c.destOri)}
                }
            }
            // return null;
        }
    }
    return null;
}

Chainset.prototype.sourceBlocksForRange = function(chr, min, max, callback) {
    if (!this.chainsByDest[chr]) {
        var fetchNeeded = !this.postFetchQueues[chr];
        var thisCS = this;
        pusho(this.postFetchQueues, chr, function() {
            thisCS.sourceBlocksForRange(chr, min, max, callback);
        });
        if (fetchNeeded) {
            this.chainFetcher.fetchChains(chr).then(function(chains, err) {
                if (!thisCS.chainsByDest)
                    thisCS.chainsByDest[chr] = [];
                for (var ci = 0; ci < chains.length; ++ci) {
                    var chain = chains[ci];
                    pusho(thisCS.chainsBySrc, chain.srcChr, chain);
                    pusho(thisCS.chainsByDest, chain.destChr, chain);
                }
                if (thisCS.postFetchQueues[chr]) {
                    var pfq = thisCS.postFetchQueues[chr];
                    for (var i = 0; i < pfq.length; ++i) {
                        pfq[i]();
                    }
                    thisCS.postFetchQueues[chr] = null;
                }
            });
        }
    } else {
        var srcBlocks = [];
        var chains = this.chainsByDest[chr] || [];
        for (var ci = 0; ci < chains.length; ++ci) {
            var c = chains[ci];
            if (min <= c.destMax && max >= c.destMin) {
                var cmin, cmax;
                if (c.srcOri == '-') {
                    cmin = c.destMax - max;
                    cmax = c.destMax - min;
                } else {
                    cmin = min - c.destMin;
                    cmax = max - c.destMin;
                }

                var blocks = c.blocks;
                for (var bi = 0; bi < blocks.length; ++bi) {
                    var b = blocks[bi];
                    var bSrc = b[0];
                    var bDest = b[1];
                    var bSize = b[2];

                    if (cmax >= bDest && cmin <= (bDest + bSize)) {
                        var amin = Math.max(cmin, bDest) - bDest;
                        var amax = Math.min(cmax, bDest + bSize) - bDest;

                        if (c.destOri == '-') {
                            srcBlocks.push(new DASSegment(c.srcChr, c.srcMax - bSrc - amax, c.srcMax - bSrc - amin));
                        } else {
                            srcBlocks.push(new DASSegment(c.srcChr, c.srcMin + amin + bSrc, c.srcMin + amax + bSrc));
                        }
                    }
                }
            }
        }
        callback(srcBlocks);
    }
}

function DASChainFetcher(uri, srcTag, destTag) {
    this.source = new DASSource(uri);
    this.srcTag = srcTag;
    this.destTag =destTag;
}

DASChainFetcher.prototype.fetchChains = function(chr, _min, _max) {
    var thisCS = this;

    return new Promise(function(resolve, reject) {
        thisCS.source.alignments(chr, {}, function(aligns) {
            var chains = [];

            for (var ai = 0; ai < aligns.length; ++ai) {
                var aln = aligns[ai];
                for (var bi = 0; bi < aln.blocks.length; ++bi) {
                    var block = aln.blocks[bi];
                    var srcSeg, destSeg;
                    for (var si = 0; si < block.segments.length; ++si) {
                        var seg = block.segments[si];
                        var obj = aln.objects[seg.object];
                        if (obj.dbSource === thisCS.srcTag) {
                            srcSeg = seg;
                        } else if (obj.dbSource === thisCS.destTag) {
                            destSeg = seg;
                        }
                    }
                    if (srcSeg && destSeg) {
                        var chain = {
                            srcChr:     aln.objects[srcSeg.object].accession,
                            srcMin:     srcSeg.min|0,
                            srcMax:     srcSeg.max|0,
                            srcOri:     srcSeg.strand,
                            destChr:    aln.objects[destSeg.object].accession,
                            destMin:    destSeg.min|0,
                            destMax:    destSeg.max|0,
                            destOri:    destSeg.strand,
                            blocks:     []
                        }

                        var srcops = parseCigar(srcSeg.cigar), destops = parseCigar(destSeg.cigar);

                        var srcOffset = 0, destOffset = 0;
                        var srci = 0, desti = 0;
                        while (srci < srcops.length && desti < destops.length) {
                            if (srcops[srci].op == 'M' && destops[desti].op == 'M') {
                                var blockLen = Math.min(srcops[srci].cnt, destops[desti].cnt);
                                chain.blocks.push([srcOffset, destOffset, blockLen]);
                                if (srcops[srci].cnt == blockLen) {
                                    ++srci;
                                } else {
                                    srcops[srci].cnt -= blockLen;
                                }
                                if (destops[desti].cnt == blockLen) {
                                    ++desti;
                                } else {
                                    destops[desti] -= blockLen;
                                }
                                srcOffset += blockLen;
                                destOffset += blockLen;
                            } else if (srcops[srci].op == 'I') {
                                destOffset += srcops[srci++].cnt;
                            } else if (destops[desti].op == 'I') {
                                srcOffset += destops[desti++].cnt;
                            }
                        }

                        chains.push(chain);
                    }
                }
            }
            resolve(chains);
        });
    });
}

function BBIChainFetcher(uri, credentials) {
    var self = this;
    this.uri = uri;
    this.credentials = credentials;

    this.bwg = new Promise(function(resolve, reject) {
        makeBwg(new URLFetchable(self.uri, {credentials: self.credentials}), function(bwg, err) {
            if (bwg) {
                resolve(bwg);
            } else {
                reject(err);
            }
        });
    });

    this.bwg.then(function(bwg, err) {
        if (err)
            console.log(err);
    });
}

function pi(x) {
    return parseInt(x);
}

function bbiFeatureToChain(feature) {
    var chain = {
        srcChr:     feature.srcChrom,
        srcMin:     parseInt(feature.srcStart),
        srcMax:     parseInt(feature.srcEnd),
        srcOri:     feature.srcOri,
        destChr:    feature.segment,
        destMin:    feature.min - 1,     // Convert back from bigbed parser
        destMax:    feature.max,
        destOri:    feature.ori,
        blocks:     []
    };
    var srcStarts = feature.srcStarts.split(',').map(pi);
    var destStarts = feature.destStarts.split(',').map(pi);
    var blockLengths = feature.blockLens.split(',').map(pi);
    for (var bi = 0; bi < srcStarts.length; ++bi) {
        chain.blocks.push([srcStarts[bi], destStarts[bi], blockLengths[bi]]);
    }

    return chain;
}

BBIChainFetcher.prototype.fetchChains = function(chr, _min, _max) {
    return this.bwg.then(function(bwg, err) {
        if (!bwg)
            throw Error("No BWG");

        return new Promise(function(resolve, reject) {
            bwg.getUnzoomedView().readWigData(chr, 1, 30000000000, function(feats) {
                resolve(feats.map(bbiFeatureToChain));
            });
        });
    });
};

if (typeof(module) !== 'undefined') {
    module.exports = {
        Chainset: Chainset
    };
}

},{"./bigwig":3,"./bin":4,"./cigar":8,"./das":10,"./utils":47,"es6-promise":50}],8:[function(require,module,exports){

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// chainset.js: liftover support
//

var CIGAR_REGEXP = new RegExp('([0-9]*)([MIDS])', 'g');

function parseCigar(cigar)
{
    var cigops = [];
    var match;
    while ((match = CIGAR_REGEXP.exec(cigar)) != null) {
        var count = match[1];
        if (count.length == 0) {
            count = 1;
        }
        cigops.push({cnt: count|0, op: match[2]});
    }
    return cigops;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        parseCigar: parseCigar
    };
}
},{}],9:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// color.js
//

"use strict";

function DColour(red, green, blue, name) {
    this.red = red|0;
    this.green = green|0;
    this.blue = blue|0;
    if (name) {
        this.name = name;
    }
}

DColour.prototype.toSvgString = function() {
    if (!this.name) {
        this.name = "rgb(" + this.red + "," + this.green + "," + this.blue + ")";
    }

    return this.name;
}

function hex2(x) {
    var y = '00' + x.toString(16);
    return y.substring(y.length - 2);
}

DColour.prototype.toHexString = function() {
    return '#' + hex2(this.red) + hex2(this.green) + hex2(this.blue);
}

var palette = {
    red: new DColour(255, 0, 0, 'red'),
    green: new DColour(0, 255, 0, 'green'),
    blue: new DColour(0, 0, 255, 'blue'),
    yellow: new DColour(255, 255, 0, 'yellow'),
    white: new DColour(255, 255, 255, 'white'),
    black: new DColour(0, 0, 0, 'black'),
    gray: new DColour(180, 180, 180, 'gray'),
    grey: new DColour(180, 180, 180, 'grey')
};

var COLOR_RE = new RegExp('^#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})$');
var CSS_COLOR_RE = /rgb\(([0-9]+),([0-9]+),([0-9]+)\)/

function dasColourForName(name) {
    var c = palette[name];
    if (!c) {
        var match = COLOR_RE.exec(name);
        if (match) {
            c = new DColour(('0x' + match[1])|0, ('0x' + match[2])|0, ('0x' + match[3])|0, name);
            palette[name] = c;
        } else {
    	    match = CSS_COLOR_RE.exec(name);
    	    if (match) {
        		c = new DColour(match[1]|0, match[2]|0, match[3]|0, name);
        		palette[name] = c;
	       } else {
		      console.log("couldn't handle color: " + name);
		      c = palette.black;
		      palette[name] = c;
	       }
        }
    }
    return c;
}

function makeColourSteps(steps, stops, colours) {
    var dcolours = [];
    for (var ci = 0; ci < colours.length; ++ci) {
        dcolours.push(dasColourForName(colours[ci]));
    }

    var grad = [];
  STEP_LOOP:
    for (var si = 0; si < steps; ++si) {
        var rs = (1.0 * si) / (steps-1);
        var score = stops[0] + (stops[stops.length -1] - stops[0]) * rs;
        for (var i = 0; i < stops.length - 1; ++i) {
            if (score >= stops[i] && score <= stops[i+1]) {
                var frac = (score - stops[i]) / (stops[i+1] - stops[i]);
                var ca = dcolours[i];
                var cb = dcolours[i+1];

                var fill = new DColour(
                    ((ca.red * (1.0 - frac)) + (cb.red * frac))|0,
                    ((ca.green * (1.0 - frac)) + (cb.green * frac))|0,
                    ((ca.blue * (1.0 - frac)) + (cb.blue * frac))|0
                ).toSvgString();
                grad.push(fill);

                continue STEP_LOOP;
            }
        }
        throw 'Bad step';
    }

    return grad;
}

function makeGradient(steps, color1, color2, color3) {
    if (color3) {
        return makeColourSteps(steps, [0, 0.5, 1], [color1, color2, color3]);
    } else {
        return makeColourSteps(steps, [0, 1], [color1, color2]);
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        makeColourSteps: makeColourSteps,
        makeGradient: makeGradient,
        dasColourForName: dasColourForName
    };
}

},{}],10:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// das.js: queries and low-level data model.
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;
    var pusho = utils.pusho;

    var color = require('./color');
    var makeColourSteps = color.makeColourSteps;
}

var dasLibErrorHandler = function(errMsg) {
    alert(errMsg);
}
var dasLibRequestQueue = new Array();



function DASSegment(name, start, end, description) {
    this.name = name;
    this.start = start;
    this.end = end;
    this.description = description;
}
DASSegment.prototype.toString = function() {
    return this.name + ':' + this.start + '..' + this.end;
};
DASSegment.prototype.isBounded = function() {
    return this.start && this.end;
}
DASSegment.prototype.toDASQuery = function() {
    var q = 'segment=' + this.name;
    if (this.start && this.end) {
        q += (':' + this.start + ',' + this.end);
    }
    return q;
}


function DASSource(a1, a2) {
    var options;
    if (typeof a1 == 'string') {
        this.uri = a1;
        options = a2 || {};
    } else {
        options = a1 || {};
    }
    for (var k in options) {
        if (typeof(options[k]) != 'function') {
            this[k] = options[k];
        }
    }


    if (!this.coords) {
        this.coords = [];
    }
    if (!this.props) {
        this.props = {};
    }

    this.dasBaseURI = this.uri;
    if (this.dasBaseURI && this.dasBaseURI.substr(this.uri.length - 1) != '/') {
        this.dasBaseURI = this.dasBaseURI + '/';
    }
}

function DASCoords() {
}

function coordsMatch(c1, c2) {
    return c1.taxon == c2.taxon && c1.auth == c2.auth && c1.version == c2.version;
}

//
// DAS 1.6 entry_points command
//

DASSource.prototype.entryPoints = function(callback) {
    var dasURI = this.dasBaseURI + 'entry_points';
    this.doCrossDomainRequest(dasURI, function(responseXML) {
            if (!responseXML) {
                return callback([]);
            }

                var entryPoints = new Array();
                
                var segs = responseXML.getElementsByTagName('SEGMENT');
                for (var i = 0; i < segs.length; ++i) {
                    var seg = segs[i];
                    var segId = seg.getAttribute('id');
                    
                    var segSize = seg.getAttribute('size');
                    var segMin, segMax;
                    if (segSize) {
                        segMin = 1; segMax = segSize|0;
                    } else {
                        segMin = seg.getAttribute('start');
                        if (segMin) {
                            segMin |= 0;
                        }
                        segMax = seg.getAttribute('stop');
                        if (segMax) {
                            segMax |= 0;
                        }
                    }
                    var segDesc = null;
                    if (seg.firstChild) {
                        segDesc = seg.firstChild.nodeValue;
                    }
                    entryPoints.push(new DASSegment(segId, segMin, segMax, segDesc));
                }          
               callback(entryPoints);
    });         
}

//
// DAS 1.6 sequence command
// Do we need an option to fall back to the dna command?
//

function DASSequence(name, start, end, alpha, seq) {
    this.name = name;
    this.start = start;
    this.end = end;
    this.alphabet = alpha;
    this.seq = seq;
}

DASSource.prototype.sequence = function(segment, callback) {
    var dasURI = this.dasBaseURI + 'sequence?' + segment.toDASQuery();
    this.doCrossDomainRequest(dasURI, function(responseXML) {
        if (!responseXML) {
            callback([]);
            return;
        } else {
                var seqs = new Array();
                
                var segs = responseXML.getElementsByTagName('SEQUENCE');
                for (var i = 0; i < segs.length; ++i) {
                    var seg = segs[i];
                    var segId = seg.getAttribute('id');
                    var segMin = seg.getAttribute('start');
                    var segMax = seg.getAttribute('stop');
                    var segAlpha = 'DNA';
                    var segSeq = null;
                    if (seg.firstChild) {
                        var rawSeq = seg.firstChild.nodeValue;
                        segSeq = '';
                        var idx = 0;
                        while (true) {
                            var space = rawSeq.indexOf('\n', idx);
                            if (space >= 0) {
                                segSeq += rawSeq.substring(idx, space);
                                idx = space + 1;
                            } else {
                                segSeq += rawSeq.substring(idx);
                                break;
                            }
                        }
                    }
                    seqs.push(new DASSequence(segId, segMin, segMax, segAlpha, segSeq));
                }
                
                callback(seqs);
        }
    });
}

//
// DAS 1.6 features command
//

function DASFeature() {
}

function DASGroup(id) {
    if (id)
        this.id = id;
}

function DASLink(desc, uri) {
    this.desc = desc;
    this.uri = uri;
}

DASSource.prototype.features = function(segment, options, callback) {
    options = options || {};
    var thisB = this;

    var dasURI;
    if (this.features_uri) {
        dasURI = this.features_uri;
    } else {
        var filters = [];

        if (segment) {
            filters.push(segment.toDASQuery());
        } else if (options.group) {
            var g = options.group;
            if (typeof g == 'string') {
                filters.push('group_id=' + g);
            } else {
                for (var gi = 0; gi < g.length; ++gi) {
                    filters.push('group_id=' + g[gi]);
                }
            }
        }

        if (options.adjacent) {
            var adj = options.adjacent;
            if (typeof adj == 'string') {
                adj = [adj];
            }
            for (var ai = 0; ai < adj.length; ++ai) {
                filters.push('adjacent=' + adj[ai]);
            }
        }

        if (options.type) {
            if (typeof options.type == 'string') {
                filters.push('type=' + options.type);
            } else {
                for (var ti = 0; ti < options.type.length; ++ti) {
                    filters.push('type=' + options.type[ti]);
                }
            }
        }
        
        if (options.maxbins) {
            filters.push('maxbins=' + options.maxbins);
        }
        
        if (filters.length > 0) {
            dasURI = this.dasBaseURI + 'features?' + filters.join(';');
        } else {
            callback([], 'No filters specified');
        }
    } 
   

    this.doCrossDomainRequest(dasURI, function(responseXML, req) {
        if (!responseXML) {
            var msg;
            if (req.status == 0) {
                msg = 'server may not support CORS';
            } else {
                msg = 'status=' + req.status;
            }
            callback([], 'Failed request: ' + msg);
            return;
        }
/*      if (req) {
            var caps = req.getResponseHeader('X-DAS-Capabilties');
            if (caps) {
                alert(caps);
            }
        } */

        var features = new Array();
        var segmentMap = {};

        var segs = responseXML.getElementsByTagName('SEGMENT');
        for (var si = 0; si < segs.length; ++si) {
            var segmentXML = segs[si];
            var segmentID = segmentXML.getAttribute('id');
            segmentMap[segmentID] = {
                min: segmentXML.getAttribute('start'),
                max: segmentXML.getAttribute('stop')
            };
            
            var featureXMLs = segmentXML.getElementsByTagName('FEATURE');
            for (var i = 0; i < featureXMLs.length; ++i) {
                var feature = featureXMLs[i];
                var dasFeature = new DASFeature();
                
                dasFeature.segment = segmentID;
                dasFeature.id = feature.getAttribute('id');
                dasFeature.label = feature.getAttribute('label');


/*
                var childNodes = feature.childNodes;
                for (var c = 0; c < childNodes.length; ++c) {
                    var cn = childNodes[c];
                    if (cn.nodeType == Node.ELEMENT_NODE) {
                        var key = cn.tagName;
                        //var val = null;
                        //if (cn.firstChild) {
                        //   val = cn.firstChild.nodeValue;
                        //}
                        dasFeature[key] = 'x';
                    }
                } */


                var spos = elementValue(feature, "START");
                var epos = elementValue(feature, "END");
                if ((spos|0) > (epos|0)) {
                    dasFeature.min = epos|0;
                    dasFeature.max = spos|0;
                } else {
                    dasFeature.min = spos|0;
                    dasFeature.max = epos|0;
                }
                {
                    var tec = feature.getElementsByTagName('TYPE');
                    if (tec.length > 0) {
                        var te = tec[0];
                        if (te.firstChild) {
                            dasFeature.type = te.firstChild.nodeValue;
                        }
                        dasFeature.typeId = te.getAttribute('id');
                        dasFeature.typeCv = te.getAttribute('cvId');
                    }
                }
                dasFeature.type = elementValue(feature, "TYPE");
                if (!dasFeature.type && dasFeature.typeId) {
                    dasFeature.type = dasFeature.typeId; // FIXME?
                }
                
                dasFeature.method = elementValue(feature, "METHOD");
                {
                    var ori = elementValue(feature, "ORIENTATION");
                    if (!ori) {
                        ori = '0';
                    }
                    dasFeature.orientation = ori;
                }
                dasFeature.score = elementValue(feature, "SCORE");
                dasFeature.links = dasLinksOf(feature);
                dasFeature.notes = dasNotesOf(feature);
                
                var groups = feature.getElementsByTagName("GROUP");
                for (var gi  = 0; gi < groups.length; ++gi) {
                    var groupXML = groups[gi];
                    var dasGroup = new DASGroup();
                    dasGroup.type = groupXML.getAttribute('type');
                    dasGroup.id = groupXML.getAttribute('id');
                    dasGroup.links = dasLinksOf(groupXML);
                    dasGroup.notes = dasNotesOf(groupXML);
                    if (!dasFeature.groups) {
                        dasFeature.groups = new Array(dasGroup);
                    } else {
                        dasFeature.groups.push(dasGroup);
                    }
                }

                // Magic notes.  Check with TAD before changing this.
                if (dasFeature.notes) {
                    for (var ni = 0; ni < dasFeature.notes.length; ++ni) {
                        var n = dasFeature.notes[ni];
                        if (n.indexOf('Genename=') == 0) {
                            var gg = new DASGroup();
                            gg.type='gene';
                            gg.id = n.substring(9);
                            if (!dasFeature.groups) {
                                dasFeature.groups = new Array(gg);
                            } else {
                                dasFeature.groups.push(gg);
                            }
                        }
                    }
                }
                
                {
                    var pec = feature.getElementsByTagName('PART');
                    if (pec.length > 0) {
                        var parts = [];
                        for (var pi = 0; pi < pec.length; ++pi) {
                            parts.push(pec[pi].getAttribute('id'));
                        }
                        dasFeature.parts = parts;
                    }
                }
                {
                    var pec = feature.getElementsByTagName('PARENT');
                    if (pec.length > 0) {
                        var parents = [];
                        for (var pi = 0; pi < pec.length; ++pi) {
                            parents.push(pec[pi].getAttribute('id'));
                        }
                        dasFeature.parents = parents;
                    }
                }
                
                features.push(dasFeature);
            }
        }
                
        callback(features, undefined, segmentMap);
    },
    function (err) {
        callback([], err);
    });
}

function DASAlignment(type) {
    this.type = type;
    this.objects = {};
    this.blocks = [];
}

DASSource.prototype.alignments = function(segment, options, callback) {
    var dasURI = this.dasBaseURI + 'alignment?query=' + segment;
    this.doCrossDomainRequest(dasURI, function(responseXML) {
        if (!responseXML) {
            callback([], 'Failed request ' + dasURI);
            return;
        }

        var alignments = [];
        var aliXMLs = responseXML.getElementsByTagName('alignment');
        for (var ai = 0; ai < aliXMLs.length; ++ai) {
            var aliXML = aliXMLs[ai];
            var ali = new DASAlignment(aliXML.getAttribute('alignType'));
            var objXMLs = aliXML.getElementsByTagName('alignObject');
            for (var oi = 0; oi < objXMLs.length; ++oi) {
                var objXML = objXMLs[oi];
                var obj = {
                    id:          objXML.getAttribute('intObjectId'),
                    accession:   objXML.getAttribute('dbAccessionId'),
                    version:     objXML.getAttribute('objectVersion'),
                    dbSource:    objXML.getAttribute('dbSource'),
                    dbVersion:   objXML.getAttribute('dbVersion')
                };
                ali.objects[obj.id] = obj;
            }
            
            var blockXMLs = aliXML.getElementsByTagName('block');
            for (var bi = 0; bi < blockXMLs.length; ++bi) {
                var blockXML = blockXMLs[bi];
                var block = {
                    order:      blockXML.getAttribute('blockOrder'),
                    segments:   []
                };
                var segXMLs = blockXML.getElementsByTagName('segment');
                for (var si = 0; si < segXMLs.length; ++si) {
                    var segXML = segXMLs[si];
                    var seg = {
                        object:      segXML.getAttribute('intObjectId'),
                        min:         segXML.getAttribute('start'),
                        max:         segXML.getAttribute('end'),
                        strand:      segXML.getAttribute('strand'),
                        cigar:       elementValue(segXML, 'cigar')
                    };
                    block.segments.push(seg);
                }
                ali.blocks.push(block);
            }       
                    
            alignments.push(ali);
        }
        callback(alignments);
    });
}


function DASStylesheet() {
/*
    this.highZoomStyles = new Object();
    this.mediumZoomStyles = new Object();
    this.lowZoomStyles = new Object();
*/

    this.styles = [];
}

DASStylesheet.prototype.pushStyle = function(filters, zoom, style) {
    /*

    if (!zoom) {
        this.highZoomStyles[type] = style;
        this.mediumZoomStyles[type] = style;
        this.lowZoomStyles[type] = style;
    } else if (zoom == 'high') {
        this.highZoomStyles[type] = style;
    } else if (zoom == 'medium') {
        this.mediumZoomStyles[type] = style;
    } else if (zoom == 'low') {
        this.lowZoomStyles[type] = style;
    }

    */

    if (!filters) {
        filters = {type: 'default'};
    }
    var styleHolder = shallowCopy(filters);
    if (zoom) {
        styleHolder.zoom = zoom;
    }
    styleHolder.style = style;
    this.styles.push(styleHolder);
}

function DASStyle() {
}

function parseGradient(grad) {
    var steps = grad.getAttribute('steps');
    if (steps) {
        steps = steps|0;
    } else {
        steps = 50;
    }


    var stops = [];
    var colors = [];
    var se = grad.getElementsByTagName('STOP');
    for (var si = 0; si < se.length; ++si) {
        var stop = se[si];
        stops.push(1.0 * stop.getAttribute('score'));
        colors.push(stop.firstChild.nodeValue);
    }

    return makeColourSteps(steps, stops, colors);
}

DASSource.prototype.stylesheet = function(successCB, failureCB) {
    var dasURI, creds = this.credentials;
    if (this.stylesheet_uri) {
        dasURI = this.stylesheet_uri;
        creds = false;
    } else {
        dasURI = this.dasBaseURI + 'stylesheet';
    }

    doCrossDomainRequest(dasURI, function(responseXML) {
        if (!responseXML) {
            if (failureCB) {
                failureCB();
            } 
            return;
        }
        var stylesheet = new DASStylesheet();
        var typeXMLs = responseXML.getElementsByTagName('TYPE');
        for (var i = 0; i < typeXMLs.length; ++i) {
            var typeStyle = typeXMLs[i];
            
            var filter = {};
            filter.type = typeStyle.getAttribute('id'); // Am I right in thinking that this makes DASSTYLE XML invalid?  Ugh.
            filter.label = typeStyle.getAttribute('label');
            filter.method = typeStyle.getAttribute('method');
            var glyphXMLs = typeStyle.getElementsByTagName('GLYPH');
            for (var gi = 0; gi < glyphXMLs.length; ++gi) {
                var glyphXML = glyphXMLs[gi];
                var zoom = glyphXML.getAttribute('zoom');
                var glyph = childElementOf(glyphXML);
                var style = new DASStyle();
                style.glyph = glyph.localName;
                var child = glyph.firstChild;
        
                while (child) {
                    if (child.nodeType == Node.ELEMENT_NODE) {
                        // alert(child.localName);
                        if (child.localName == 'BGGRAD') {
                            style[child.localName] = parseGradient(child);
                        } else {      
                            style[child.localName] = child.firstChild.nodeValue;
                        }
                    }
                    child = child.nextSibling;
                }
                stylesheet.pushStyle(filter, zoom, style);
            }
        }
        successCB(stylesheet);
    }, creds);
}

//
// sources command
// 

function DASRegistry(uri, opts)
{
    opts = opts || {};
    this.uri = uri;
    this.opts = opts;   
}

DASRegistry.prototype.sources = function(callback, failure, opts)
{
    if (!opts) {
        opts = {};
    }

    var filters = [];
    if (opts.taxon) {
        filters.push('organism=' + opts.taxon);
    }
    if (opts.auth) {
        filters.push('authority=' + opts.auth);
    }
    if (opts.version) {
        filters.push('version=' + opts.version);
    }
    var quri = this.uri;
    if (filters.length > 0) {
        quri = quri + '?' + filters.join('&');   // '&' as a separator to hack around dasregistry.org bug.
    }

    doCrossDomainRequest(quri, function(responseXML) {
        if (!responseXML && failure) {
            failure();
            return;
        }

        var sources = [];       
        var sourceXMLs = responseXML.getElementsByTagName('SOURCE');
        for (var si = 0; si < sourceXMLs.length; ++si) {
            var sourceXML = sourceXMLs[si];
            var versionXMLs = sourceXML.getElementsByTagName('VERSION');
            if (versionXMLs.length < 1) {
                continue;
            }
            var versionXML = versionXMLs[0];

            var coordXMLs = versionXML.getElementsByTagName('COORDINATES');
            var coords = [];
            for (var ci = 0; ci < coordXMLs.length; ++ci) {
                var coordXML = coordXMLs[ci];
                var coord = new DASCoords();
                coord.auth = coordXML.getAttribute('authority');
                coord.taxon = coordXML.getAttribute('taxid');
                coord.version = coordXML.getAttribute('version');
                coords.push(coord);
            }
            
            var caps = [];
            var capXMLs = versionXML.getElementsByTagName('CAPABILITY');
            var uri;
            for (var ci = 0; ci < capXMLs.length; ++ci) {
                var capXML = capXMLs[ci];
                
                caps.push(capXML.getAttribute('type'));

                if (capXML.getAttribute('type') == 'das1:features') {
                    var fep = capXML.getAttribute('query_uri');
                    uri = fep.substring(0, fep.length - ('features'.length));
                }
            }

            var props = {};
            var propXMLs = versionXML.getElementsByTagName('PROP');
            for (var pi = 0; pi < propXMLs.length; ++pi) {
                pusho(props, propXMLs[pi].getAttribute('name'), propXMLs[pi].getAttribute('value'));
            }
            
            if (uri) {
                var source = new DASSource(uri, {
                    source_uri: sourceXML.getAttribute('uri'),
                    name:  sourceXML.getAttribute('title'),
                    desc:  sourceXML.getAttribute('description'),
                    coords: coords,
                    props: props,
                    capabilities: caps
                });
                sources.push(source);
            }
        }
        
        callback(sources);
    });
}


//
// Utility functions
//

function elementValue(element, tag)
{
    var children = element.getElementsByTagName(tag);
    if (children.length > 0 && children[0].firstChild) {
        var c = children[0];
        if (c.childNodes.length == 1) {
            return c.firstChild.nodeValue;
        } else {
            var s = '';
            for (var ni = 0; ni < c.childNodes.length; ++ni) {
                s += c.childNodes[ni].nodeValue;
            }
            return s;
        }

    } else {
        return null;
    }
}

function childElementOf(element)
{
    if (element.hasChildNodes()) {
        var child = element.firstChild;
        do {
            if (child.nodeType == Node.ELEMENT_NODE) {
                return child;
            } 
            child = child.nextSibling;
        } while (child != null);
    }
    return null;
}


function dasLinksOf(element)
{
    var links = new Array();
    var maybeLinkChilden = element.getElementsByTagName('LINK');
    for (var ci = 0; ci < maybeLinkChilden.length; ++ci) {
        var linkXML = maybeLinkChilden[ci];
        if (linkXML.parentNode == element) {
            links.push(new DASLink(linkXML.firstChild ? linkXML.firstChild.nodeValue : 'Unknown', linkXML.getAttribute('href')));
        }
    }
    
    return links;
}

function dasNotesOf(element)
{
    var notes = [];
    var maybeNotes = element.getElementsByTagName('NOTE');
    for (var ni = 0; ni < maybeNotes.length; ++ni) {
        if (maybeNotes[ni].firstChild) {
            notes.push(maybeNotes[ni].firstChild.nodeValue);
        }
    }
    return notes;
}

function doCrossDomainRequest(url, handler, credentials, custAuth) {
    // TODO: explicit error handlers?

    if (window.XDomainRequest) {
        var req = new XDomainRequest();
        req.onload = function() {
            var dom = new ActiveXObject("Microsoft.XMLDOM");
            dom.async = false;
            dom.loadXML(req.responseText);
            handler(dom);
        }
        req.open("get", url);
        req.send('');
    } else {
        var reqStart = Date.now();
        var req = new XMLHttpRequest();

        req.onreadystatechange = function() {
            if (req.readyState == 4) {
              if (req.status >= 200 || req.status == 0) {
                  handler(req.responseXML, req);
              }
            }
        };
        req.open("get", url, true);
        if (credentials) {
            req.withCredentials = true;
        }
        if (custAuth) {
            req.setRequestHeader('X-DAS-Authorisation', custAuth);
        }
        req.setRequestHeader('Accept', 'application/xml,*/*');
        req.send('');
    }
}

DASSource.prototype.doCrossDomainRequest = function(url, handler, errHandler) {
    var custAuth;
    if (this.xUser) {
        custAuth = 'Basic ' + btoa(this.xUser + ':' + this.xPass);
    }

    try {
        return doCrossDomainRequest(url, handler, this.credentials, custAuth);
    } catch (err) {
        if (errHandler) {
            errHandler(err);
        } else {
            throw err;
        }
    }
}

function isDasBooleanTrue(s) {
    s = ('' + s).toLowerCase();
    return s==='yes' || s==='true';
}

function isDasBooleanNotFalse(s) {
    if (!s)
        return false;

    s = ('' + s).toLowerCase();
    return s!=='no' || s!=='false';
}

function copyStylesheet(ss) {
    var nss = shallowCopy(ss);
    nss.styles = [];
    for (var si = 0; si < ss.styles.length; ++si) {
        var sh = nss.styles[si] = shallowCopy(ss.styles[si]);
        sh._methodRE = sh._labelRE = sh._typeRE = undefined;
        sh.style = shallowCopy(sh.style);
        sh.style.id = undefined;
    }
    return nss;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        DASGroup: DASGroup,
        DASFeature: DASFeature,
        DASStylesheet: DASStylesheet,
        DASStyle: DASStyle,
        DASSource: DASSource,
        DASSegment: DASSegment,
        DASRegistry: DASRegistry,
        DASSequence: DASSequence,

        isDasBooleanTrue: isDasBooleanTrue,
        isDasBooleanNotFalse: isDasBooleanNotFalse,
        copyStylesheet: copyStylesheet
    };
}
},{"./color":9,"./utils":47}],11:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// domui.js: SVG UI components
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;
}

Browser.prototype.removeAllPopups = function() {
    removeChildren(this.hPopupHolder);
    removeChildren(this.popupHolder);
}

Browser.prototype.makeTooltip = function(ele, text)
{
    var isin = false;
    var thisB = this;
    var timer = null;
    var outlistener;
    outlistener = function(ev) {
        isin = false;
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
        ele.removeEventListener('mouseout', outlistener, false);
    };

    var setup = function(ev) {
        var mx = ev.clientX + window.scrollX, my = ev.clientY + window.scrollY;
        if (!timer) {
            timer = setTimeout(function() {
                var ttt;
                if (typeof(text) === 'function') {
                    ttt = text();
                } else {
                    ttt = text;
                }

                var popup = makeElement('div',
                    [makeElement('div', null, {className: 'tooltip-arrow'}),
                     makeElement('div', ttt, {className: 'tooltip-inner'})], 
                    {className: 'tooltip bottom in'}, {
                    display: 'block',
                    top: '' + (my + 20) + 'px',
                    left: '' + Math.max(mx - 30, 20) + 'px'
                });
                thisB.hPopupHolder.appendChild(popup);
                var moveHandler;
                moveHandler = function(ev) {
                    try {
                        thisB.hPopupHolder.removeChild(popup);
                    } catch (e) {
                        // May have been removed by other code which clears the popup layer.
                    }
                    window.removeEventListener('mousemove', moveHandler, false);
                    if (isin) {
                        if (ele.offsetParent == null) {
                            // dlog('Null parent...');
                        } else {
                            setup(ev);
                        }
                    }
                }
                window.addEventListener('mousemove', moveHandler, false);
                timer = null;
            }, 1000);
        }
    };

    ele.addEventListener('mouseover', function(ev) {
        isin = true
        ele.addEventListener('mouseout', outlistener, false);
        setup(ev);
    }, false);
    ele.addEventListener('DOMNodeRemovedFromDocument', function(ev) {
        isin = false;
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    }, false);
}

Browser.prototype.popit = function(ev, name, ele, opts)
{
    var thisB = this;
    if (!opts) 
        opts = {};
    if (!ev) 
        ev = {};

    var width = opts.width || 200;

    var mx, my;

    if (ev.clientX) {
        var mx =  ev.clientX, my = ev.clientY;
    } else {
        mx = 500; my= 50;
    }
    mx +=  document.documentElement.scrollLeft || document.body.scrollLeft;
    my +=  document.documentElement.scrollTop || document.body.scrollTop;
    var winWidth = window.innerWidth;

    var top = my;
    var left = Math.min(mx - (width/2) - 4, (winWidth - width - 30));

    var popup = makeElement('div');
    popup.className = 'popover fade ' + (ev.clientX ? 'bottom ' : '') + 'in';
    popup.style.display = 'block';
    popup.style.position = 'absolute';
    popup.style.top = '' + top + 'px';
    popup.style.left = '' + left + 'px';
    popup.style.width = width + 'px';
    if (width > 276) {
        // HACK Bootstrappification...
        popup.style.maxWidth = width + 'px';
    }

    popup.appendChild(makeElement('div', null, {className: 'arrow'}));

    if (name) {
        var closeButton = makeElement('button', '', {className: 'close'});
        closeButton.innerHTML = '&times;'

        closeButton.addEventListener('mouseover', function(ev) {
            closeButton.style.color = 'red';
        }, false);
        closeButton.addEventListener('mouseout', function(ev) {
            closeButton.style.color = 'black';
        }, false);
        closeButton.addEventListener('click', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            thisB.removeAllPopups();
        }, false);
        var tbar = makeElement('h4', [makeElement('span', name, null, {maxWidth: '200px'}), closeButton], {/*className: 'popover-title' */}, {paddingLeft: '10px', paddingRight: '10px'});

        var dragOX, dragOY;
        var moveHandler, upHandler;
        moveHandler = function(ev) {
            ev.stopPropagation(); ev.preventDefault();
            left = left + (ev.clientX - dragOX);
            if (left < 8) {
                left = 8;
            } if (left > (winWidth - width - 32)) {
                left = (winWidth - width - 26);
            }
            top = top + (ev.clientY - dragOY);
            top = Math.max(10, top);
            popup.style.top = '' + top + 'px';
            popup.style.left = '' + Math.min(left, (winWidth - width - 10)) + 'px';
            dragOX = ev.clientX; dragOY = ev.clientY;
        }
        upHandler = function(ev) {
            ev.stopPropagation(); ev.preventDefault();
            window.removeEventListener('mousemove', moveHandler, false);
            window.removeEventListener('mouseup', upHandler, false);
        }
        tbar.addEventListener('mousedown', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            dragOX = ev.clientX; dragOY = ev.clientY;
            window.addEventListener('mousemove', moveHandler, false);
            window.addEventListener('mouseup', upHandler, false);
        }, false);
                              

        popup.appendChild(tbar);
    }

    popup.appendChild(makeElement('div', ele, {className: 'popover-content'}, {
        padding: '0px'
    }));
    this.hPopupHolder.appendChild(popup);

    var popupHandle = {
        node: popup,
        displayed: true
    };
    popup.addEventListener('DOMNodeRemoved', function(ev) {
        if (ev.target == popup) {
            popupHandle.displayed = false;
        }
    }, false);
    return popupHandle;
}

function makeTreeTableSection(title, content, visible) {
    var ttButton = makeElement('i');
    function update() {
        if (visible) {
            ttButton.className = 'fa fa-caret-down';
            content.style.display = 'table';
        } else {
            ttButton.className = 'fa fa-caret-right';
            content.style.display = 'none';
        }
    }
    update();

    ttButton.addEventListener('click', function(ev) {
        ev.preventDefault(); ev.stopPropagation();
        visible = !visible;
        update();
    }, false);

    var heading = makeElement('h6', [ttButton, ' ', title], {}, {display: 'block', background: 'gray', color: 'white', width: '100%', padding: '5px 2px', margin: '0px'});
    return makeElement('div', [heading, content], {});
}

function dlog(msg) {
    console.log(msg);
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        makeTreeTableSection: makeTreeTableSection
    };
}

},{"./cbrowser":6,"./utils":47}],12:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// ensembljson.js -- query the Ensembl REST API.
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sa = require('./sourceadapters');
    var dalliance_registerSourceAdapterFactory = sa.registerSourceAdapterFactory;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;
}

function EnsemblFeatureSource(source) {
    this.source = source;
    this.base = source.uri || 'http://beta.rest.ensembl.org';
    this.species = source.species || 'human';

    this.activityListeners = [];
    this.busy = 0;

    if (typeof source.type === 'string') {
        this.type = [source.type];
    } else {
        this.type = source.type || ['regulatory'];
    }
}

EnsemblFeatureSource.prototype.addActivityListener = function(listener) {
    this.activityListeners.push(listener);
}

EnsemblFeatureSource.prototype.notifyActivity = function() {
    for (var li = 0; li < this.activityListeners.length; ++li) {
        try {
            this.activityListeners[li](this.busy);
        } catch (e) {
            console.log(e);
        }
    }
}


EnsemblFeatureSource.prototype.getStyleSheet = function(callback) {
    var stylesheet = new DASStylesheet();

    var tsStyle = new DASStyle();
    tsStyle.glyph = '__NONE';
    if (this.type.indexOf('exon') >= 0)
        stylesheet.pushStyle({type: 'transcript'}, null, tsStyle);
    if (this.type.indexOf('exon') >= 0 || this.type.indexOf('transcript') >= 0)
        stylesheet.pushStyle({type: 'gene'}, null, tsStyle);

    var cdsStyle = new DASStyle();
    cdsStyle.glyph = 'BOX';
    cdsStyle.FGCOLOR = 'black';
    cdsStyle.BGCOLOR = 'red'
    cdsStyle.HEIGHT = 8;
    cdsStyle.BUMP = true;
    cdsStyle.LABEL = true;
    cdsStyle.ZINDEX = 10;
    stylesheet.pushStyle({type: 'cds'}, null, cdsStyle);

    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'SQUARE';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        // varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'blue';
        stylesheet.pushStyle({type: 'variation', method: '.+_UTR_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'TRIANGLE';
        varStyle.DIRECTION = 'S';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        // varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'blue';
        stylesheet.pushStyle({type: 'variation', method: 'missense_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'TRIANGLE';
        varStyle.DIRECTION = 'N';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        // varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'blue';
        stylesheet.pushStyle({type: 'variation', method: 'splice_.+_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'STAR';
        varStyle.POINTS = 6;
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        // varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'blue';
        stylesheet.pushStyle({type: 'variation', method: 'regulatory_region_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'PLIMSOLL';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        // varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'rgb(50,80,255)';
        varStyle.STROKECOLOR = 'black';
        stylesheet.pushStyle({type: 'variation'}, null, varStyle);
    }
        {
        var varStyle = new DASStyle();
        varStyle.glyph = 'SQUARE';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'red';
        stylesheet.pushStyle({type: 'indel', method: '.+_UTR_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'TRIANGLE';
        varStyle.DIRECTION = 'S';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'red';
        stylesheet.pushStyle({type: 'indel', method: 'missense_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'TRIANGLE';
        varStyle.DIRECTION = 'N';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'red';
        stylesheet.pushStyle({type: 'indel', method: 'splice_.+_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'STAR';
        varStyle.POINTS = 6;
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'red';
        stylesheet.pushStyle({type: 'indel', method: 'regulatory_region_variant'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'PLIMSOLL';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.BGCOLOR = '#888888';
        varStyle.FGCOLOR = 'red';
        varStyle.STROKECOLOR = 'black';
        stylesheet.pushStyle({type: 'indel'}, null, varStyle);
    }

    var wigStyle = new DASStyle();
    wigStyle.glyph = 'BOX';
    wigStyle.FGCOLOR = 'black';
    wigStyle.BGCOLOR = 'orange'
    wigStyle.HEIGHT = 8;
    wigStyle.BUMP = true;
    wigStyle.LABEL = true;
    wigStyle.ZINDEX = 20;
    stylesheet.pushStyle({type: 'default'}, null, wigStyle);
    return callback(stylesheet);
}


EnsemblFeatureSource.prototype.getScales = function() {
    return [];
}

EnsemblFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var thisB = this;
    var url = this.base + '/feature/region/' + this.species + '/' + chr + ':' + min + '-' + max;

    var filters = [];
    for (var ti = 0; ti < this.type.length; ++ti) {
        filters.push('feature=' + this.type[ti]);
    }
    filters.push('content-type=application/json');
    url = url + '?' + filters.join(';');

    var req = new XMLHttpRequest();
    req.onreadystatechange = function() {
    	if (req.readyState == 4) {
            thisB.busy--;
            thisB.notifyActivity();

    	    if (req.status >= 300) {
                var err = 'Error code ' + req.status;
                try {
                    var jr = JSON.parse(req.response);
                    if (jr.error) {
                        err = jr.error;
                    }
                } catch (ex) {};

    		    callback(err, null);
    	    } else {
        		var jf = JSON.parse(req.response);
        		var features = [];
        		for (var fi = 0; fi < jf.length; ++fi) {
        		    var j = jf[fi];

        		    var notes = [];
        		    var f = new DASFeature();
        		    f.segment = chr;
        		    f.min = j['start'] | 0;
        		    f.max = j['end'] | 0;
        		    f.type = j.feature_type || 'unknown';
        		    f.id = j.ID;

                    if (j.Parent) {
                        var grp = new DASGroup();
                        grp.id = j.Parent;
                        f.groups = [grp];
                    }

                    if (j.strand) {
                        if (j.strand < 0) 
                            f.orientation = '-';
                        else if (j.strand > 0) 
                            f.orientation = '+';
                    }

                    if (j.consequence_type)
                        f.method = j.consequence_type;

                    if (j.alt_alleles) {
                        notes.push('Alleles=' + j.alt_alleles.join('/'));
                        if (j.alt_alleles.length > 1) {
                            if (j.alt_alleles[1].length != j.alt_alleles[0].length || j.alt_alleles[1] == '-') {
                                f.type = 'indel';
                            }
                        }
                    }
        		    
                    if (notes.length > 0) {
                        f.notes = notes;
                    }
        		    features.push(f);
        		}
        		callback(null, features);
    	    }
    	}
	
    };
    
    thisB.busy++;
    thisB.notifyActivity();

    req.open('GET', url, true);
    req.responseType = 'text';
    req.send('');
}

dalliance_registerSourceAdapterFactory('ensembl', function(source) {
    return {features: new EnsemblFeatureSource(source)};
});

},{"./das":10,"./sourceadapters":32}],13:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// export-config.js
//

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;

    var sha1 = require('./sha1');
    var hex_sha1 = sha1.hex_sha1;

    var das = require('./das');
    var copyStylesheet = das.copyStylesheet;
}

Browser.prototype.exportFullConfig = function(opts) {
    opts = opts || {};

    var config = {
        chr: this.chr,
        viewStart: this.viewStart|0,
        viewEnd: this.viewEnd|0,
        cookieKey: 'dalliance_' + hex_sha1(Date.now()),

        coordSystem: this.coordSystem,

        sources: this.exportSourceConfig(),

        chains: this.exportChains()
    };

    if (this.prefix)
        config.prefix = this.prefix;

    return config;
}

Browser.prototype.exportChains = function() {
    var cc = {};
    var cs = this.chains || {};
    for (var k in cs) {
        cc[k] = cs[k].exportConfig();
    }
    return cc;
}

Browser.prototype.exportSourceConfig = function(opts) {
    opts = opts || {};

    var sourceConfig = [];
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        var tier = this.tiers[ti];
        var source = shallowCopy(tier.dasSource);
        source.coords = undefined;
        source.props = undefined;
        if (!source.disabled)
            source.disabled = undefined;

        if (tier.config.stylesheet) {
            source.style = tier.config.stylesheet.styles;
            source.stylesheet_uri = undefined;
        } else if (source.style) {
            source.style = copyStylesheet({styles: source.style}).styles;
        }

        if (typeof(tier.config.name) === 'string') {
            source.name = tier.config.name;
        }

        if (tier.config.height !== undefined) {
            source.forceHeight = tier.config.height;
        }
        if (tier.config.forceMin !== undefined) {
            source.forceMin = tier.config.forceMin;
        }
        if (tier.config.forceMinDynamic)
            source.forceMinDynamic = tier.config.forceMinDynamic;
        if (tier.config.forceMax !== undefined) {
            source.forceMax = tier.config.forceMax;
        }
        if (tier.config.forceMaxDynamic)
            source.forceMaxDynamic = tier.config.forceMaxDynamic;

        sourceConfig.push(source);
    }

    return sourceConfig;
}

Browser.prototype.exportPageTemplate = function(opts) {
    opts = opts || {};
    var template = '<html>\n' +
                   '  <head>\n' +
                   '    <script language="javascript" src="' + this.resolveURL('$$dalliance-compiled.js') + '"></script>\n' +
                   '    <script language="javascript">\n' +
                   '      var dalliance_browser = new Browser(' + JSON.stringify(this.exportFullConfig(opts), null, 2) + ');\n' +
                   '    </script>\n' +  
                   '  </head>\n' +
                   '  <body>\n' +
                   '    <div id="svgHolder">Dalliance goes here</div>\n' +
                   '  </body>\n' +
                   '<html>\n';

    return template;
}
},{"./cbrowser":6,"./das":10,"./sha1":31,"./utils":47}],14:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// export-ui.js
//

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;
}

Browser.prototype.openExportPanel = function() {
    var b = this;
    if (this.uiMode === 'export') {
        this.hideToolPanel();
        this.setUiMode('none');
    } else {
        var exportForm = makeElement('div', null, {className: 'export-form'});
        var exportSelect = makeElement('select');
        exportSelect.appendChild(makeElement('option', 'SVG', {value: 'svg'}));
        exportSelect.appendChild(makeElement('option', 'Dalliance config', {value: 'config'}));
        exportSelect.appendChild(makeElement('option', 'Dalliance sources', {value: 'sources'}));
        exportSelect.appendChild(makeElement('option', 'Dalliance page', {value: 'page'}));
        exportSelect.value = 'svg';
        exportSelect.addEventListener('change', function(ev) {
            removeChildren(exportContent);
        }, false);
        exportForm.appendChild(makeElement('p', ['Export as: ', exportSelect]));

        var exportHighlightsToggle = makeElement('input', null, {type: 'checkbox', checked: this.exportHighlights});
        exportHighlightsToggle.addEventListener('change', function(ev) {
            b.exportHighlights = exportHighlightsToggle.checked;
            b.storeStatus();
        }, false);
        var exportRulerToggle = makeElement('input', null, {type: 'checkbox', checked: this.exportRuler});
        exportRulerToggle.addEventListener('change', function(ev) {
            b.exportRuler = exportRulerToggle.checked;
            b.storeStatus();
        }, false);

        var exportButton = makeElement('button', 'Export', {className: 'btn btn-primary'});
        exportButton.addEventListener('click', function(ev) {
            removeChildren(exportContent);

            var blobURL;
            var note, type, name;
            if (exportSelect.value === 'svg') {
                blobURL = URL.createObjectURL(b.makeSVG({highlights: exportHighlightsToggle.checked,
                                                         ruler: exportRulerToggle.checked ? b.rulerLocation : 'none'}));
                note = 'SVG';
                type = 'image/svg';
                name = 'dalliance-view.svg';
            } else if (exportSelect.value === 'config') {
                var config = JSON.stringify(b.exportFullConfig(), null, 2);
                var blob = new Blob([config], {type: 'text/plain'});
                blobURL = URL.createObjectURL(blob);
                note = 'Configuration';
                type = 'text/plain';
                name = 'dalliance-config.json';
            } else if (exportSelect.value === 'sources') {
                var config = JSON.stringify(b.exportSourceConfig(), null, 2);
                var blob = new Blob([config], {type: 'text/plain'});
                blobURL = URL.createObjectURL(blob);
                note = 'Source array';
                type = 'text/plain';
                name = 'dalliance-sources.json';
            } else if (exportSelect.value === 'page') {
                var page = b.exportPageTemplate();
                var type = 'text/html';
                var blob = new Blob([page], {type: type});
                blobURL = URL.createObjectURL(blob);
                note = 'Page template';
                name = 'dalliance-view.html';
            }

            if (blobURL) {
                var downloadLink = makeElement('a', '[Download]', {
                    href: blobURL,
                    download: 'dalliance-view.svg',
                    type: type
                });

                var previewLink = makeElement('a', '[Preview in browser]', {
                    href: blobURL,
                    type: type,
                    target: '_new'
                });

                exportContent.appendChild(makeElement('p', ['' + note + ' created: ', downloadLink, previewLink]));
            }
        }, false);

        b.addViewListener(function() {
            removeChildren(exportContent);
        });
        b.addTierListener(function() {
            removeChildren(exportContent);
        });

        var exportContent = makeElement('p', '');

        var exportOptsTable = makeElement('table',
            [makeElement('tr',
                [makeElement('th', 'Include highlights', {}, {width: '200px', textAlign: 'right'}),
                 makeElement('td', exportHighlightsToggle)]),
             makeElement('tr',
                [makeElement('th', 'Include vertical guideline'),
                 makeElement('td', exportRulerToggle)])
            ]);

        exportForm.appendChild(exportOptsTable);
        exportForm.appendChild(exportButton);
        exportForm.appendChild(exportContent);

        if (this.uiMode !== 'none')
            this.hideToolPanel();
        this.browserHolder.insertBefore(exportForm, this.svgHolder);
        this.activeToolPanel = exportForm;

        this.setUiMode('export');
    }
}

},{"./cbrowser":6,"./utils":47}],15:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// exports.js: shim to export symbols into global namespace for ease of embedding
//

var browser = require('./cbrowser');
var chainset = require('./chainset');
var sa = require('./sourceadapters');
var utils = require('./utils');
var das = require('./das');

window.Browser = browser.Browser;
window.Chainset = chainset.Chainset;    // Pre-0.12 configurations need this.

// Useful for info plugins.  Should be reconsidered in the future.
window.makeElement = utils.makeElement;

// Allow source plugins to be loaded separately.
window.dalliance_registerSourceAdapterFactory = sa.registerSourceAdapterFactory;
window.dalliance_registerParserFactory = sa.registerParserFactory;
window.dalliance_makeParser = sa.makeParser;

// DAS* objects for some plugins -- remove when plugin API changes...

window.DASFeature = das.DASFeature;
window.DASGroup = das.DASGroup;
window.DASStylesheet = das.DASStylesheet;
window.DASStyle = das.DASStyle;
window.DASSource = das.DASSource;    // Pre-0.8 configurations used this.  Still some around...
},{"./cbrowser":6,"./chainset":7,"./das":10,"./sourceadapters":32,"./utils":47}],16:[function(require,module,exports){
// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// feature-draw.js: new feature-tier renderer
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;
    var pusho = utils.pusho;

    var tier = require('./tier');
    var DasTier = tier.DasTier;

    var sortFeatures = require('./features').sortFeatures;

    var g = require('./glyphs');
    var BoxGlyph = g.BoxGlyph;
    var GroupGlyph = g.GroupGlyph;
    var LineGraphGlyph = g.LineGraphGlyph;
    var LabelledGlyph = g.LabelledGlyph;
    var CrossGlyph = g.CrossGlyph;
    var ExGlyph = g.ExGlyph;
    var TriangleGlyph = g.TriangleGlyph;
    var DotGlyph = g.DotGlyph;
    var PaddedGlyph = g.PaddedGlyph;
    var AArrowGlyph = g.AArrowGlyph;
    var SpanGlyph = g.SpanGlyph;
    var LineGlyph = g.LineGlyph;
    var PrimersGlyph = g.PrimersGlyph;
    var ArrowGlyph = g.ArrowGlyph;
    var TooManyGlyph = g.TooManyGlyph;
    var TextGlyph = g.TextGlyph;
    var SequenceGlyph = g.SequenceGlyph;
    var TranslatedGlyph = g.TranslatedGlyph;
    var PointGlyph = g.PointGlyph;
    var GridGlyph = g.GridGlyph;
    var StarGlyph = g.StarGlyph;
    var PlimsollGlyph = g.PlimsollGlyph;

    var color = require('./color');
    var makeGradient = color.makeGradient;

    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;

    var das = require('./das');
    var DASFeature = das.DASFeature;
    var isDasBooleanTrue = das.isDasBooleanTrue;
    var isDasBooleanNotFalse = das.isDasBooleanNotFalse;

    var parseCigar = require('./cigar').parseCigar;

    var nf = require('./numformats');
    var formatQuantLabel = nf.formatQuantLabel;
}

var MIN_PADDING = 3;
var DEFAULT_SUBTIER_MAX = 100;


function SubTier() {
    this.glyphs = [];
    this.height = 0;
    this.quant = null;
}

SubTier.prototype.indexFor = function(glyph) {
    var gmin = glyph.min();
    var lb = 0, ub = this.glyphs.length;
    while (ub > lb) {
        var mid = ((lb + ub)/2)|0;
        if (mid >= this.glyphs.length)
            return this.glyphs.length;
        var mg = this.glyphs[mid];
        if (gmin < mg.min()) {
            ub = mid;
        } else {
            lb = mid + 1;
        }
    }
    return ub;
}

SubTier.prototype.add = function(glyph) {
    var ind = this.indexFor(glyph);
    this.glyphs.splice(ind, 0, glyph);
    this.height = Math.max(this.height, glyph.height());
    if (glyph.quant && this.quant == null) {
        this.quant = glyph.quant;
    }
}

SubTier.prototype.hasSpaceFor = function(glyph) {
    var ind = this.indexFor(glyph);
    if (ind > 0 && this.glyphs[ind-1].max() >= glyph.min())
        return false;
    if (ind < this.glyphs.length && this.glyphs[ind].min() <= glyph.max())
        return false;

    return true;
}

var GLOBAL_GC;

function drawFeatureTier(tier)
{
    var start = Date.now()|0;
    GLOBAL_GC = tier.viewport.getContext('2d'); // Should only be used for metrics.
    sortFeatures(tier);
    if (typeof(tier.dasSource.padding) === 'number')
        tier.padding = tier.dasSource.padding;
    else
        tier.padding = MIN_PADDING;

    var glyphs = [];
    var specials = false;

    // group by style
    var gbsFeatures = {};
    var gbsStyles = {};

    for (var uft in tier.ungroupedFeatures) {
        var ufl = tier.ungroupedFeatures[uft];
        
        for (var pgid = 0; pgid < ufl.length; ++pgid) {
            var f = ufl[pgid];
            if (f.parts) {  // FIXME shouldn't really be needed
                continue;
            }

            var style = tier.styleForFeature(f);
            if (!style)
                continue;

            if (style.glyph == 'LINEPLOT') {
                pusho(gbsFeatures, style.id, f);
                gbsStyles[style.id] = style;
            } else {
                var g = glyphForFeature(f, 0, style, tier);
                if (g)
                    glyphs.push(g);
            }
        }
    }

    for (var gbs in gbsFeatures) {
        var gf = gbsFeatures[gbs];
        var style = gbsStyles[gbs];
        if (style.glyph == 'LINEPLOT') {
            glyphs.push(makeLineGlyph(gf, style, tier));
            specials = true;
        }
    }

    // Merge supergroups    

    if (tier.dasSource.collapseSuperGroups && !tier.bumped) {
        for (var sg in tier.superGroups) {
            var sgg = tier.superGroups[sg];
            tier.groups[sg] = shallowCopy(tier.groups[sg]);
            tier.groups[sg].isSuperGroup = true;
            var featsByType = {};

            var sgMin = 10000000000, sgMax = -10000000000;
            var sgSeg = null;
            for (var g = 0; g < sgg.length; ++g) {
                var gf = tier.groupedFeatures[sgg[g]];
                if (!gf)
                    continue;

                for (var fi = 0; fi < gf.length; ++fi) {
                    var f = gf[fi];
                    pusho(featsByType, f.type, f);
                    sgMin = Math.min(f.min, sgMin);
                    sgMax = Math.max(f.max, sgMax);
                    if (f.segment && !sgSeg)
                        sgSeg = f.segment;
                }

                if (tier.groups[sg] && !tier.groups[sg].links || tier.groups[sg].links.length == 0) {
                   tier.groups[sg].links = tier.groups[sgg[0]].links;
                }

                delete tier.groupedFeatures[sgg[g]];  // 'cos we don't want to render the unmerged version.
            }

            tier.groups[sg].max = sgMax;
            tier.groups[sg].min = sgMin;
            tier.groups[sg].segment = sgSeg;

            for (var t in featsByType) {
                var feats = featsByType[t];
                var template = feats[0];
                var loc = null;
                for (var fi = 0; fi < feats.length; ++fi) {
                    var f = feats[fi];
                    var fl = new Range(f.min, f.max);
                    if (!loc) {
                        loc = fl;
                    } else {
                        loc = union(loc, fl);
                    }
                }
                var mergedRanges = loc.ranges();
                for (var si = 0; si < mergedRanges.length; ++si) {
                    var r = mergedRanges[si];

                    // begin coverage-counting
                    var posCoverage = ((r.max()|0) - (r.min()|0) + 1) * sgg.length;
                    var actCoverage = 0;
                    for (var fi = 0; fi < feats.length; ++fi) {
                        var f = feats[fi];
                        if ((f.min|0) <= r.max() && (f.max|0) >= r.min()) {
                            var umin = Math.max(f.min|0, r.min());
                            var umax = Math.min(f.max|0, r.max());
                            actCoverage += (umax - umin + 1);
                        }
                    }
                    var visualWeight = ((1.0 * actCoverage) / posCoverage);
                    // end coverage-counting

                    var newf = new DASFeature();
                    for (var k in template) {
                        newf[k] = template[k];
                    }
                    newf.min = r.min();
                    newf.max = r.max();
                    if (newf.label && sgg.length > 1) {
                        newf.label += ' (' + sgg.length + ' vars)';
                    }
                    newf.visualWeight = ((1.0 * actCoverage) / posCoverage);
                    pusho(tier.groupedFeatures, sg, newf);
                    // supergroups are already in tier.groups.
                }
            }

            delete tier.superGroups[sg]; // Do we want this?
        }       
    }

    // Glyphify groups.

    var gl = new Array();
    for (var gid in tier.groupedFeatures) {
        gl.push(gid);
    }
    gl.sort(function(g1, g2) {
        var d = tier.groupedFeatures[g1][0].score - tier.groupedFeatures[g2][0].score;
        if (d > 0) {
            return -1;
        } else if (d == 0) {
            return 0;
        } else {
            return 1;
        }
    });

    var groupGlyphs = {};
    for (var gx = 0; gx < gl.length; ++gx) {
        var gid = gl[gx];
        var g = glyphsForGroup(tier.groupedFeatures[gid], 0, tier.groups[gid], tier,
                               (tier.dasSource.collapseSuperGroups && !tier.bumped) ? 'collapsed_gene' : 'tent');
        if (g) {
            g.group = tier.groups[gid];
            groupGlyphs[gid] = g;
        }
    }

    for (var sg in tier.superGroups) {
        var sgg = tier.superGroups[sg];
        var sgGlyphs = [];
        var sgMin = 10000000000;
        var sgMax = -10000000000;
        for (var sgi = 0; sgi < sgg.length; ++sgi) {
            var gg = groupGlyphs[sgg[sgi]];
            groupGlyphs[sgg[sgi]] = null;
            if (gg) {
                sgGlyphs.push(gg);
                sgMin = Math.min(sgMin, gg.min());
                sgMax = Math.max(sgMax, gg.max());
            }
        }
        for (var sgi = 0; sgi < sgGlyphs.length; ++sgi) {
            var gg = sgGlyphs[sgi];
            glyphs.push(new PaddedGlyph(gg, sgMin, sgMax));
        }
    }
    for (var g in groupGlyphs) {
        var gg = groupGlyphs[g];
        if (gg) {
            glyphs.push(gg);
        }
    }

    // Bumping

    var unbumpedST = new SubTier();
    var bumpedSTs = [];
    var hasBumpedFeatures = false;
    var subtierMax = tier.dasSource.subtierMax || DEFAULT_SUBTIER_MAX;
    
  GLYPH_LOOP:
    for (var i = 0; i < glyphs.length; ++i) {
        var g = glyphs[i];
        if (g.bump) {
            hasBumpedFeatures = true;
        }
        if (g.bump && (tier.bumped || tier.dasSource.collapseSuperGroups)) {       // kind-of nasty.  supergroup collapsing is different from "normal" unbumping
            for (var sti = 0; sti < bumpedSTs.length;  ++sti) {
                var st = bumpedSTs[sti];
                if (st.hasSpaceFor(g)) {
                    st.add(g);
                    continue GLYPH_LOOP;
                }
            }
            if (bumpedSTs.length >= subtierMax) {
                // tier.status = 'Too many overlapping features, truncating at ' + subtierMax;
            } else {
                var st = new SubTier();
                st.add(g);
                bumpedSTs.push(st);
            }
        } else {
            unbumpedST.add(g);
        }
    }

    if (unbumpedST.glyphs.length > 0) {
        bumpedSTs = [unbumpedST].concat(bumpedSTs);
    }

    for (var sti = 0; sti < bumpedSTs.length; ++sti) {
        var st = bumpedSTs[sti];
        if (st.quant) {
            st.glyphs.unshift(new GridGlyph(st.height));
        }
    }

    for (var sti = 0; sti < bumpedSTs.length; ++sti) {
        var st = bumpedSTs[sti];
        st.glyphs.sort(function (g1, g2) {
            var z1 = g1.zindex || 0;
            var z2 = g2.zindex || 0;
            return z1 - z2;
        });
    }

    tier.subtiers = bumpedSTs;
    tier.glyphCacheOrigin = tier.browser.viewStart;

    var end = Date.now()|0;
    // console.log('dft took ' + (end-start) + 'ms');
}



DasTier.prototype.paint = function() {
    var start = Date.now()|0;
    var retina = this.browser.retina && window.devicePixelRatio > 1;

    var subtiers = this.subtiers;
    if (!subtiers) {
	   return;
    }

    var desiredWidth = this.browser.featurePanelWidth + 2000;
    if (retina) {
        desiredWidth *= 2;
    }
    var fpw = this.viewport.width|0;
    if (fpw < desiredWidth - 50) {
        this.viewport.width = fpw = desiredWidth;
    }

    var lh = this.padding;
    for (var s = 0; s < subtiers.length; ++s) {
        lh = lh + subtiers[s].height + this.padding;
    }
    lh += 6
    lh = Math.max(lh, this.browser.minTierHeight);

    var canvasHeight = lh;
    if (retina) {
        canvasHeight *= 2;
    }

    if (canvasHeight != this.viewport.height) {
        this.viewport.height = canvasHeight;
    }
    
    var tierHeight = Math.max(lh, this.browser.minTierHeight);
    this.viewport.style.left = '-1000px';
    this.viewport.style.width = retina ? ('' + (fpw/2) + 'px') : ('' + fpw + 'px');
    this.viewport.style.height = '' + lh + 'px';
    this.layoutHeight =  Math.max(lh, this.browser.minTierHeight);

    this.updateHeight();
    this.drawOverlay();
    this.norigin = this.browser.viewStart;

    var gc = this.viewport.getContext('2d');
    gc.clearRect(0, 0, fpw, canvasHeight);

    gc.save();
    if (retina) {
        gc.scale(2, 2);
    }

    if (this.background) {
        gc.fillStyle = this.background;

        if (this.knownCoverage) {
            var knownRanges = this.knownCoverage.ranges();
            for (var ri = 0; ri < knownRanges.length; ++ri) {
                var r = knownRanges[ri];
                var knownMin = (r.min() - this.browser.viewStart) * this.browser.scale + 1000;
                var knownMax = (r.max() - this.browser.viewStart) * this.browser.scale + 1000;
                gc.fillRect(knownMin, 0, knownMax - knownMin, lh);
            }
        }
    }

    var offset = ((this.glyphCacheOrigin - this.browser.viewStart)*this.browser.scale)+1000;
    gc.translate(offset, this.padding);
   
    for (var s = 0; s < subtiers.length; ++s) {
        var quant = null;
        var glyphs = subtiers[s].glyphs;
        for (var i = 0; i < glyphs.length; ++i) {
            var glyph = glyphs[i];
            if (glyph.min() < fpw-offset && glyph.max() > -offset) { 
                var glyph = glyphs[i];
                glyph.draw(gc);
                if (glyph.quant) {
                    quant = glyph.quant;
                }
            }
        }
        gc.translate(0, subtiers[s].height + this.padding);
    }
    gc.restore();

    if (quant && this.quantLeapThreshold && this.featureSource && this.browser.sourceAdapterIsCapable(this.featureSource, 'quantLeap')) {
        var ry = 3 + subtiers[0].height * (1.0 - ((this.quantLeapThreshold - quant.min) / (quant.max - quant.min)));

        gc.save();
        if (retina)
            gc.scale(2, 2);
        gc.strokeStyle = 'red';
        gc.lineWidth = 0.3;
        gc.beginPath();
        gc.moveTo(0, ry);
        gc.lineTo(5000, ry);
        gc.stroke();
        gc.restore();
    }

    this.paintQuant();

    var end = Date.now()|0;
    // console.log('paint took ' + (end-start) + 'ms');
}

DasTier.prototype.paintQuant = function() {
    if (!this.quantOverlay)
        return;

    var retina = this.browser.retina && window.devicePixelRatio > 1;

    var quant;
    if (this.subtiers && this.subtiers.length > 0)
        quant = this.subtiers[0].quant;

    if (quant) {
        var h = this.subtiers[0].height;
        var w = 50;
        this.quantOverlay.height = this.viewport.height;
        this.quantOverlay.width = retina ? w*2 : w;
        this.quantOverlay.style.height = '' + (retina ? this.quantOverlay.height/2 : this.quantOverlay.height) + 'px';
        this.quantOverlay.style.width = '' + w + 'px';
        this.quantOverlay.style.display = 'block';
        var ctx = this.quantOverlay.getContext('2d');
        if (retina)
            ctx.scale(2, 2);

        var numTics = 2;
        if (h > 40) {
            numTics = 1 + ((h/20) | 0);
        }
        var ticSpacing = (h + this.padding*2) / (numTics - 1);
        var ticInterval = (quant.max - quant.min) / (numTics - 1);

        ctx.fillStyle = 'white'
        ctx.globalAlpha = 0.6;
        if (this.browser.rulerLocation == 'right') {
            ctx.fillRect(w-30, 0, 30, h + this.padding*2);
        } else {
            ctx.fillRect(0, 0, 30, h + this.padding*2);
        }
        ctx.globalAlpha = 1.0;

        ctx.strokeStyle = 'black';
        ctx.lineWidth = 1;
        ctx.beginPath();

        if (this.browser.rulerLocation == 'right') {
            ctx.moveTo(w - 8, this.padding);
            ctx.lineTo(w, this.padding);
            ctx.lineTo(w, h + this.padding);
            ctx.lineTo(w - 8, h + this.padding);
            for (var t = 1; t < numTics-1; ++t) {
                var ty = t*ticSpacing;
                ctx.moveTo(w, ty);
                ctx.lineTo(w - 5, ty);
            }
        } else {
            ctx.moveTo(8, this.padding);
            ctx.lineTo(0, this.padding);
            ctx.lineTo(0, h + this.padding);
            ctx.lineTo(8, h + this.padding);
            for (var t = 1; t < numTics-1; ++t) {
                var ty = t*ticSpacing;
                ctx.moveTo(0, ty);
                ctx.lineTo(5, ty);
            }
        }
        ctx.stroke();

        ctx.fillStyle = 'black';

        if (this.browser.rulerLocation == 'right') {
            ctx.textAlign = 'right';
            ctx.fillText(formatQuantLabel(quant.max), w-9, 8);
            ctx.fillText(formatQuantLabel(quant.min), w-9, h + this.padding);
            for (var t = 1; t < numTics-1; ++t) {
                var ty = t*ticSpacing;
                ctx.fillText(formatQuantLabel((1.0*quant.max) - (t*ticInterval)), w - 9, ty + 3);
            }
        } else {
            ctx.textAlign = 'left';
            ctx.fillText(formatQuantLabel(quant.max), 9, 8);
            ctx.fillText(formatQuantLabel(quant.min), 9, h + this.padding);
            for (var t = 1; t < numTics-1; ++t) {
                var ty = t*ticSpacing;
                ctx.fillText(formatQuantLabel((1.0*quant.max) - (t*ticInterval)), 9, ty + 3);
            }
        }
    } else {
        this.quantOverlay.style.display = 'none';
    }
}

function glyphsForGroup(features, y, groupElement, tier, connectorType) {
    var gstyle = tier.styleForFeature(groupElement);
    var label;
    var labelWanted = false;

    var glyphs = [];
    var strand = null;
    for (var i = 0; i < features.length; ++i) {
        var f = features[i];
        if (f.orientation && strand==null) {
            strand = f.orientation;
        }
         if (!label && f.label) {
            label = f.label;
        }

        var style = tier.styleForFeature(f);
        if (!style) {
            continue;
        }
        if (f.parts) {  // FIXME shouldn't really be needed
            continue;
        }
        if (isDasBooleanTrue(style.LABEL))
            labelWanted = true;

        var g = glyphForFeature(f, 0, style, tier, null, true);
        if (g) {
            glyphs.push(g);
        }
    }

    if (glyphs.length == 0)
        return null;
    
    var connector = 'flat';
    if (gstyle && gstyle.glyph === 'LINE') {
        // Stick with flat...
    } else {
        if (tier.dasSource.collapseSuperGroups && !tier.bumped) {
            if (strand === '+') {
                connector = 'collapsed+';
            } else if (strand === '-') {
                connector = 'collapsed-';
            }
        } else {
            if (strand === '+') {
                connector = 'hat+';
            } else if (strand === '-') {
                connector = 'hat-';
            }
        }
    }   

    var labelText = null;
    if ((label && labelWanted) || (gstyle && (isDasBooleanTrue(gstyle.LABEL) || isDasBooleanTrue(gstyle.LABELS)))) {  // HACK, LABELS should work.
        labelText = groupElement.label || label;
    }

    var gg = new GroupGlyph(glyphs, connector);
    if (labelText) {
        if (strand === '+') {
            labelText = '>' + labelText;
        } else if (strand === '-') {
            labelText = '<' + labelText;
        }
        gg = new LabelledGlyph(GLOBAL_GC, gg, labelText, false);
    }
    gg.bump = true;
    return gg;
}

function glyphForFeature(feature, y, style, tier, forceHeight, noLabel)
{
    var scale = tier.browser.scale, origin = tier.browser.viewStart;
    var gtype = style.glyph || 'BOX';
    var glyph;

    var min = feature.min;
    var max = feature.max;
    var type = feature.type;
    var strand = feature.orientation;
    var score = feature.score;
    var label = feature.label || feature.id;

    var minPos = (min - origin) * scale;
    var rawMaxPos = ((max - origin + 1) * scale);
    var maxPos = Math.max(rawMaxPos, minPos + 1);

    var height = tier.forceHeight || style.HEIGHT || forceHeight || 12;
    var requiredHeight = height = 1.0 * height;
    var bump = style.BUMP && isDasBooleanTrue(style.BUMP);

    var gg, quant;

    if (gtype === 'CROSS' || gtype === 'EX' || gtype === 'TRIANGLE' || gtype === 'DOT' || gtype === 'SQUARE' || gtype === 'STAR' || gtype === 'PLIMSOLL') {
        var stroke = style.FGCOLOR || 'black';
        var fill = style.BGCOLOR || 'none';
        var outline = style.STROKECOLOR;

        if (style.BGITEM && feature.itemRgb) {
            stroke = feature.itemRgb;
        } else if (isDasBooleanTrue(style.COLOR_BY_SCORE2)) {
            var grad = style.BGGRAD || style._gradient;
            if (!grad) {
                grad = makeGradient(50, style.COLOR1, style.COLOR2, style.COLOR3);
                style._gradient = grad;
            }

            var sc2 = feature.score2;
            if (sc2 != undefined || !stroke) {
                sc2 = sc2 || 0;

                var smin2 = style.MIN2 ? (1.0 * style.MIN2) : 0.0;
                var smax2 = style.MAX2 ? (1.0 * style.MAX2) : 1.0;
                var relScore2 = ((1.0 * sc2) - smin2) / (smax2-smin2);

                var step = (relScore2*grad.length)|0;
                if (step < 0) step = 0;
                if (step >= grad.length) step = grad.length - 1;
                stroke = grad[step];
            }
        }



        var height = tier.forceHeight || style.HEIGHT || forceHeight || 12;
        requiredHeight = height = 1.0 * height;

        var size = style.SIZE || height;
        if (style.RSIZE) {
            size = (1.0 * style.RSIZE) * height;
        }

        if (style.STROKETHRESHOLD) {
            if (size < (1.0 * style.STROKETHRESHOLD))
                outline = null;
        }
        
        size = 1.0 * size;

        var mid = (minPos + maxPos)/2;
        var hh = size/2;

        var mark;
        var bMinPos = minPos, bMaxPos = maxPos;

        if (gtype === 'EX') {
            gg = new ExGlyph(mid, size, stroke);
        } else if (gtype === 'TRIANGLE') {
            var dir = style.DIRECTION || 'N';
            var width = style.LINEWIDTH || size;
            gg = new TriangleGlyph(mid, size, dir, width, stroke, outline);
        } else if (gtype === 'DOT') {
            gg = new DotGlyph(mid, size, stroke, outline);
        } else if (gtype === 'PLIMSOLL') {
            gg = new PlimsollGlyph(mid, size, 0.2 * size, stroke, outline);
        } else if (gtype === 'SQUARE') {
            gg = new BoxGlyph(mid - hh, 0, size, size, stroke, outline);
        } else if (gtype === 'STAR') {
            var points = 5;
            if (style.POINTS) 
                points = style.POINTS | 0;
            gg = new StarGlyph(mid, hh, points, stroke, outline);
        } else {
            gg = new CrossGlyph(mid, size, stroke);
        }

        if (fill && fill != 'none' && (maxPos - minPos) > 5) {
            var bgg = new BoxGlyph(minPos, 0, (maxPos - minPos), size, fill);
            gg = new GroupGlyph([bgg, gg]);
        }

        if (isDasBooleanTrue(style.SCATTER)) {
            var smin = tier.quantMin(style);
            var smax = tier.quantMax(style);

            if (!smax) {
                if (smin < 0) {
                    smax = 0;
                } else {
                    smax = 10;
                }
            }
            if (!smin) {
                smin = 0;
            }

            var relScore = ((1.0 * score) - smin) / (smax-smin);
            var relOrigin = (-1.0 * smin) / (smax - smin);

            if (relScore < 0.0 || relScore > 1.0) {
                // Glyph is out of bounds.
                // Should we allow for "partially showing" glyphs?

                return null;
            } else {
                if (relScore >= relOrigin) {
                    height = Math.max(1, (relScore - relOrigin) * requiredHeight);
                    y = y + ((1.0 - relOrigin) * requiredHeight) - height;
                } else {
                    height = Math.max(1, (relScore - relOrigin) * requiredHeight);
                    y = y + ((1.0 - relOrigin) * requiredHeight);
                }
                
                quant = {min: smin, max: smax};

                var heightFudge = 0;
                var featureLabel;
                if (typeof(feature.forceLabel) !== 'undefined')
                    featureLabel = feature.forceLabel;
                else
                    featureLabel = style.LABEL;

                if (isDasBooleanNotFalse(featureLabel) && label && !noLabel) {
                    gg = new LabelledGlyph(GLOBAL_GC, gg, label, true, null, featureLabel == 'above' ? 'above' : 'below');
                    if (featureLabel == 'above') {
                        heightFudge = gg.textHeight + 2;
                    }
                    noLabel = true;
                }
                gg = new TranslatedGlyph(gg, 0, y - hh - heightFudge, requiredHeight);
            }
        }
    } else if (gtype === 'HISTOGRAM' || gtype === 'GRADIENT' && score !== 'undefined') {
        var smin = tier.quantMin(style);
        var smax = tier.quantMax(style);

        if (!smax) {
            if (smin < 0) {
                smax = 0;
            } else {
                smax = 10;
            }
        }
        if (!smin) {
            smin = 0;
        }

        if ((1.0 * score) < (1.0 *smin)) {
            score = smin;
        }
        if ((1.0 * score) > (1.0 * smax)) {
            score = smax;
        }
        var relScore = ((1.0 * score) - smin) / (smax-smin);
        var relOrigin = (-1.0 * smin) / (smax - smin);

        if (gtype === 'HISTOGRAM') {
            if (relScore >= relOrigin) {
                height = Math.max(1, (relScore - relOrigin) * requiredHeight);
                y = y + ((1.0 - relOrigin) * requiredHeight) - height;
            } else {
                height = Math.max(1, (relOrigin - relScore) * requiredHeight);
                y = y + ((1.0 - relOrigin) * requiredHeight);
            }
            quant = {min: smin, max: smax};
        }

        var stroke = style.FGCOLOR || null;
        var fill = style.BGCOLOR || style.COLOR1 || 'green';
        if (style.BGITEM && feature.itemRgb)
            fill = feature.itemRgb;
        var alpha = style.ALPHA ? (1.0 * style.ALPHA) : null;

        if (style.BGGRAD) {
            var grad = style.BGGRAD;
            var step = (relScore*grad.length)|0;
            if (step < 0) step = 0;
            if (step >= grad.length) step = grad.length - 1;
            fill = grad[step];
        }
        if (style.COLOR2) {
            var grad = style._gradient;
            if (!grad) {
                grad = makeGradient(50, style.COLOR1, style.COLOR2, style.COLOR3);
                style._gradient = grad;
            }

            var step = (relScore*grad.length)|0;
            if (step < 0) step = 0;
            if (step >= grad.length) step = grad.length - 1;
            fill = grad[step];
        }

        gg = new BoxGlyph(minPos, y, (maxPos - minPos), height, fill, stroke, alpha);
    } else if (gtype === 'HIDDEN') {
        gg = new PaddedGlyph(null, minPos, maxPos);
        noLabel = true;
    } else if (gtype === 'ARROW') {
        var color = style.FGCOLOR || 'purple';
        var parallel = isDasBooleanTrue(style.PARALLEL);
        var sw = isDasBooleanTrue(style.SOUTHWEST);
        var ne = isDasBooleanTrue(style.NORTHEAST);
        gg = new ArrowGlyph(minPos, maxPos, height, color, parallel, sw, ne);
    } else if (gtype === 'ANCHORED_ARROW') {
        var stroke = style.FGCOLOR || 'none';
        var fill = style.BGCOLOR || 'green';
        gg = new AArrowGlyph(minPos, maxPos, height, fill, stroke, strand);
        gg.bump = true;
    } else if (gtype === 'SPAN') {
        var stroke = style.FGCOLOR || 'black';
        gg = new SpanGlyph(minPos, maxPos, height, stroke);
    } else if (gtype === 'LINE') {
        var stroke = style.FGCOLOR || 'black';
        var lineStyle = style.STYLE || 'solid';
        gg = new LineGlyph(minPos, maxPos, height, lineStyle, strand, stroke);
    } else if (gtype === 'PRIMERS') {
        var stroke = style.FGCOLOR || 'black';
        var fill = style.BGCOLOR || 'red';
        gg = new PrimersGlyph(minPos, maxPos, height, fill, stroke);
    } else if (gtype === 'TEXT') {
        var string = style.STRING || 'text';
        var fill = style.FGCOLOR || 'black';
        gg = new TextGlyph(GLOBAL_GC, minPos, maxPos, height, fill, string);
    } else if (gtype === 'TOOMANY') {
        var stroke = style.FGCOLOR || 'gray';
        var fill = style.BGCOLOR || 'orange';
        gg = new TooManyGlyph(minPos, maxPos, height, fill, stroke);
    } else if (gtype === 'POINT') {
        var height = tier.forceHeight || style.HEIGHT || 30;
        var smin = tier.quantMin(style);
        var smax = tier.quantMax(style);
        var yscale = ((1.0 * height) / (smax - smin));
        var relScore = ((1.0 * score) - smin) / (smax-smin);
        var sc = ((score - (1.0*smin)) * yscale)|0;
        quant = {min: smin, max: smax};

        var fill = style.FGCOLOR || style.COLOR1 || 'black';
        if (style.COLOR2) {
            var grad = style._gradient;
            if (!grad) {
                grad = makeGradient(50, style.COLOR1, style.COLOR2, style.COLOR3);
                style._gradient = grad;
            }

            var step = (relScore*grad.length)|0;
            if (step < 0) step = 0;
            if (step >= grad.length) step = grad.length - 1;
            fill = grad[step];
        } 

        gg = new PointGlyph((minPos + maxPos)/2, height-sc, height, fill);
    } else if (gtype === '__SEQUENCE') {
        var rawseq = feature.seq;
        var seq = rawseq;
        var rawquals = feature.quals;
        var quals = rawquals;
        var insertionLabels = isDasBooleanTrue(style.__INSERTIONS);

        var indels = [];
        if (feature.cigar) {
            var ops = parseCigar(feature.cigar);
            seq = ''
            quals = '';
            var cursor = 0;
            for (var ci = 0; ci < ops.length; ++ci) {
                var co = ops[ci];
                if (co.op == 'M') {
                    seq += rawseq.substr(cursor, co.cnt);
                    quals += rawquals.substr(cursor, co.cnt);
                    cursor += co.cnt;
                } else if (co.op == 'D') {
                    for (var oi = 0; oi < co.cnt; ++oi) {
                        seq += '-';
                        quals += 'Z';
                    }
                } else if (co.op == 'I') {
                    var inseq =  rawseq.substr(cursor, co.cnt);
                    var ig = new TriangleGlyph(minPos + (seq.length*scale), 5, 'S', 5, 'red');
                    if (insertionLabels)
                        ig = new LabelledGlyph(GLOBAL_GC, ig, inseq, false, 'center', 'above', '7px sans-serif');
                    ig.feature = {label: 'Insertion: ' + inseq, type: 'insertion', method: 'insertion'};
                    indels.push(ig);

                    cursor += co.cnt;
                } else if (co.op == 'S') {
                    cursor += co.cnt;
                } else {
                    console.log('unknown cigop' + co.op);
                }
            }
        }

        var refSeq = null;
        if (tier.currentSequence) {
            var csStart = tier.currentSequence.start|0;
            var csEnd = tier.currentSequence.end|0;
            if (csStart <= max && csEnd >= min) {
                var sfMin = Math.max(min, csStart);
                var sfMax = Math.min(max, csEnd);

                refSeq = tier.currentSequence.seq.substr(sfMin - csStart, sfMax - sfMin + 1);
                while (min < sfMin) {
                    refSeq = 'N' + refSeq;
                    sfMin--;
                }
                while (max > sfMax) {
                    refSeq = refSeq + 'N';
                    sfMax++;
                }
            }
        }
        gg = new SequenceGlyph(tier.browser.baseColors, minPos, maxPos, height, seq, refSeq, style.__SEQCOLOR, quals);
        if (insertionLabels)
            gg = new TranslatedGlyph(gg, 0, 7);
        if (indels.length > 0) {
            indels.splice(0, 0, gg);
            gg = new GroupGlyph(indels);
        }
    } else if (gtype === '__INSERTION') {
        var ig = new TriangleGlyph(minPos, 5, 'S', 5, 'red');
        gg = new LabelledGlyph(GLOBAL_GC, ig, feature.insertion || feature.altAlleles[0], false, 'center', 'above', '7px sans-serif');
        if ((maxPos - minPos) > 1) {
            var fill = style.BGCOLOR || style.COLOR1 || 'green';
            var bg = new BoxGlyph(minPos, 5, (maxPos - minPos), height, fill, stroke);
            gg = new GroupGlyph([bg, gg]);
        }
    } else if (gtype === '__NONE') {
        return null;
    } else /* default to BOX */ {
        var stroke = style.FGCOLOR || null;
        var fill = style.BGCOLOR || style.COLOR1 || 'green';
        if (style.BGITEM && feature.itemRgb)
            fill = feature.itemRgb;
        gg = new BoxGlyph(minPos, 0, (maxPos - minPos), height, fill, stroke);
        // gg.bump = true;
    }

    if ((isDasBooleanTrue(style.LABEL) || feature.forceLabel) && label && !noLabel) {
        gg = new LabelledGlyph(GLOBAL_GC, gg, label, false);
    }

    if (bump) {
        gg.bump = true;
    }

    gg.feature = feature;
    if (quant) {
        gg.quant = quant;
    }

    if (style.ZINDEX) {
        gg.zindex = style.ZINDEX | 0;
    }

    return gg;
}

DasTier.prototype.styleForFeature = function(f) {
    var ssScale = this.browser.zoomForCurrentScale();

    if (!this.stylesheet) {
        return null;
    }

    var maybe = null;
    var ss = this.stylesheet.styles;
    for (var si = 0; si < ss.length; ++si) {
        var sh = ss[si];
        if (sh.zoom && sh.zoom != ssScale) {
            continue;
        }

        if (sh.orientation) {
            if (sh.orientation != f.orientation) {
                continue;
            }
        }

        var labelRE = sh._labelRE;
        if (!labelRE || !labelRE.test) {
            labelRE = new RegExp('^' + sh.label + '$');
            sh._labelRE = labelRE;
        }
        if (sh.label && !(labelRE.test(f.label))) {
            continue;
        }
        var methodRE = sh._methodRE;
        if (!methodRE || !methodRE.test) {
            methodRE = new RegExp('^' + sh.method + '$');
            sh._methodRE = methodRE;
        }
        if (sh.method && !(methodRE.test(f.method))) {
            continue;
        }
        if (sh.type) {
            if (sh.type == 'default') {
                if (!maybe) {
                    maybe = sh.style;
                }
                continue;
            } else {
                var typeRE = sh._typeRE;
                if (!typeRE || !typeRE.test) {
                    typeRE = new RegExp('^' + sh.type + '$');
                    sh._typeRE = typeRE;
                }
                if (!typeRE.test(f.type)) 
                    continue;
            }
        }
        return sh.style;
    }
    return maybe;
}

function makeLineGlyph(features, style, tier) {
    var origin = tier.browser.viewStart, scale = tier.browser.scale;
    var height = tier.forceHeight || style.HEIGHT || 30;
    var min = tier.quantMin(style);
    var max = tier.quantMax(style);
    var yscale = ((1.0 * height) / (max - min));
    var width = style.LINEWIDTH || 1;
    var color = style.FGCOLOR || style.COLOR1 || 'black';

    var points = [];
    for (var fi = 0; fi < features.length; ++fi) {
        var f = features[fi];

        var px = ((((f.min|0) + (f.max|0)) / 2) - origin) * scale;
        var sc = ((f.score - (1.0*min)) * yscale)|0;
        var py = (height - sc);  // FIXME y???
        points.push(px);
        points.push(py);
    }
    var lgg = new LineGraphGlyph(points, color, height);
    lgg.quant = {min: min, max: max};

    if (style.ZINDEX) 
        lgg.zindex = style.ZINDEX|0;

    return lgg;
}

DasTier.prototype.quantMin = function(style) {
    if (this.forceMinDynamic) {
        return this.currentFeaturesMinScore || 0;
    } else if (typeof(this.forceMin) === 'number') {
        return this.forceMin;
    } else {
        return style.MIN || this.currentFeaturesMinScore || 0;
    }
}

DasTier.prototype.quantMax = function(style) {
    if (this.forceMaxDynamic) {
        return this.currentFeaturesMaxScore || 0;
    } else if (typeof(this.forceMax) === 'number') {
        return this.forceMax;
    } else {
        return style.MAX || this.currentFeaturesMaxScore || 0;
    }
}



if (typeof(module) !== 'undefined') {
    module.exports = {
        drawFeatureTier: drawFeatureTier
    };
}
},{"./cigar":8,"./color":9,"./das":10,"./features":18,"./glyphs":19,"./numformats":24,"./spans":33,"./tier":41,"./utils":47}],17:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// feature-popup.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var pick = utils.pick;
    var pushnew = utils.pushnew;
    var makeElement = utils.makeElement;
}


var TAGVAL_NOTE_RE = new RegExp('^([A-Za-z]+)=(.+)');

Browser.prototype.addFeatureInfoPlugin = function(handler) {
    if (!this.featureInfoPlugins) {
        this.featureInfoPlugins = [];
    }
    this.featureInfoPlugins.push(handler);
}

function FeatureInfo(hit, feature, group) {
    var name = pick(group.type, feature.type);
    var fid = pick(group.label, feature.label, group.id, feature.id);
    if (fid && fid.indexOf('__dazzle') != 0) {
        name = name + ': ' + fid;
    }

    this.hit = hit;
    this.feature = feature;
    this.group = group;
    this.title = name;
    this.sections = [];
}

FeatureInfo.prototype.setTitle = function(t) {
    this.title = t;
}

FeatureInfo.prototype.add = function(label, info) {
    if (typeof info === 'string') {
        info = makeElement('span', info);
    }
    this.sections.push({label: label, info: info});
}

Browser.prototype.featurePopup = function(ev, __ignored_feature, hit, tier) {
    var hi = hit.length;
    var feature = --hi >= 0 ? hit[hi] : {};
    var group = --hi >= 0 ? hit[hi] : {};

    var featureInfo = new FeatureInfo(hit, feature, group);
    featureInfo.tier = tier;
    var fips = this.featureInfoPlugins || [];
    for (var fipi = 0; fipi < fips.length; ++fipi) {
        try {
            fips[fipi](feature, featureInfo);
        } catch (e) {
            console.log(e.stack || e);
        }
    }
    fips = tier.featureInfoPlugins || [];
    for (fipi = 0; fipi < fips.length; ++fipi) {
        try {
            fips[fipi](feature, featureInfo);
        } catch (e) {
            console.log(e.stack || e);
        }
    }

    this.removeAllPopups();

    var table = makeElement('table', null, {className: 'table table-striped table-condensed'});
    table.style.width = '100%';
    table.style.margin = '0px';

    var idx = 0;
    if (feature.method) {
        var row = makeElement('tr', [
            makeElement('th', 'Method'),
            makeElement('td', feature.method)
        ]);
        table.appendChild(row);
        ++idx;
    }
    {
        var loc;
        if (group.segment) {
            loc = group;
        } else {
            loc = feature;
        }
        var row = makeElement('tr', [
            makeElement('th', 'Location'),
            makeElement('td', loc.segment + ':' + loc.min + '-' + loc.max, {}, {minWidth: '200px'})
        ]);
        table.appendChild(row);
        ++idx;
    }
    if (feature.score !== undefined && feature.score !== null && feature.score != '-') {
        var row = makeElement('tr', [
            makeElement('th', 'Score'),
            makeElement('td', '' + feature.score)
        ]);
        table.appendChild(row);
        ++idx;
    }
    {
        var links = maybeConcat(group.links, feature.links);
        if (links && links.length > 0) {
            var row = makeElement('tr', [
                makeElement('th', 'Links'),
                makeElement('td', links.map(function(l) {
                    return makeElement('div', makeElement('a', l.desc, {href: l.uri, target: '_new'}));
                }))
            ]);
            table.appendChild(row);
            ++idx;
        }
    }
    {
        var notes = maybeConcat(group.notes, feature.notes);
        for (var ni = 0; ni < notes.length; ++ni) {
            var k = 'Note';
            var v = notes[ni];
            var m = v.match(TAGVAL_NOTE_RE);
            if (m) {
                k = m[1];
                v = m[2];
            }

            var row = makeElement('tr', [
                makeElement('th', k),
                makeElement('td', v)
            ]);
            table.appendChild(row);
            ++idx;
        }
    }

    for (var fisi = 0; fisi < featureInfo.sections.length; ++fisi) {
        var section = featureInfo.sections[fisi];
        table.appendChild(makeElement('tr', [
            makeElement('th', section.label),
            makeElement('td', section.info)]));
    }        

    this.popit(ev, featureInfo.title || 'Feature', table, {width: 450});
}

function maybeConcat(a, b) {
    var l = [];
    if (a) {
        for (var i = 0; i < a.length; ++i) {
            pushnew(l, a[i]);
        }
    }
    if (b) {
        for (var i = 0; i < b.length; ++i) {
            pushnew(l, b[i]);
        }
    }
    return l;
}

},{"./cbrowser":6,"./utils":47}],18:[function(require,module,exports){
"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var pusho = utils.pusho;
    var pushnewo = utils.pushnewo;
}

function sortFeatures(tier)
{
    var dmin = tier.browser.drawnStart, dmax = tier.browser.drawnEnd;
    var ungroupedFeatures = {};
    var groupedFeatures = {};
    var drawnGroupedFeatures = {};
    var groupMins = {}, groupMaxes = {};
    var groups = {};
    var superGroups = {};
    var groupsToSupers = {};
    var nonPositional = [];
    var minScore, maxScore;
    var fbid;

    var init_fbid = function() {
        fbid = {};
        for (var fi = 0; fi < tier.currentFeatures.length; ++fi) {
            var f = tier.currentFeatures[fi];
            if (f.id) {
                fbid[f.id] = f;
            }
        }
    };
    
    var superParentsOf = function(f) {
        // FIXME: should recur.
        var spids = [];
        if (f.parents) {
            for (var pi = 0; pi < f.parents.length; ++pi) {
                var pid = f.parents[pi];
                var p = fbid[pid];
                if (!p) {
                    continue;
                }
                // alert(p.type + ':' + p.typeCv);
                if (p.typeCv == 'SO:0000704') {
                    pushnew(spids, pid);
                }
            }
        }
        return spids;
    }

    for (var fi = 0; fi < tier.currentFeatures.length; ++fi) {
        var f = tier.currentFeatures[fi];
        if (f.parts) {
            continue;
        }

        var drawn = f.min <= dmax && f.max >= dmin;

        if (!f.min || !f.max) {
            nonPositional.push(f);
            continue;
        }

        if (f.score && f.score != '.' && f.score != '-') {
            var sc = 1.0 * f.score;
            if (!minScore || sc < minScore) {
                minScore = sc;
            }
            if (!maxScore || sc > maxScore) {
                maxScore = sc;
            }
        }

        var fGroups = [];
        var fSuperGroup = null;
        if (f.groups) {
            for (var gi = 0; gi < f.groups.length; ++gi) {
                var g = f.groups[gi];
                var gid = g.id;
                if (g.type == 'gene') {
                    // Like a super-grouper...
                    fSuperGroup = gid; 
                    groups[gid] = g;
                } else if (g.type == 'translation') {
                    // have to ignore this to get sensible results from bj-e :-(.
                } else {
                    pusho(groupedFeatures, gid, f);
                    groups[gid] = g;
                    fGroups.push(gid);

                    var ogm = groupMins[gid];
                    if (!ogm || f.min < ogm)
                        groupMins[gid] = f.min;

                    ogm = groupMaxes[gid];
                    if (!ogm || f.max > ogm)
                        groupMaxes[gid] = f.max;
                }
            }
        }

        if (f.parents) {
            if (!fbid) {
                init_fbid();
            }
            for (var pi = 0; pi < f.parents.length; ++pi) {
                var pid = f.parents[pi];
                var p = fbid[pid];
                if (!p) {
                    // alert("couldn't find " + pid);
                    continue;
                }
                if (!p.parts) {
                    p.parts = [f];
                }
                pushnewo(groupedFeatures, pid, p);
                pusho(groupedFeatures, pid, f);
                
                if (!groups[pid]) {
                    groups[pid] = {
                        type: p.type,
                        id: p.id,
                        label: p.label || p.id
                    };
                }
                fGroups.push(pid);

                var ogm = groupMins[pid];
                if (!ogm || f.min < ogm)
                    groupMins[pid] = f.min;

                ogm = groupMaxes[pid];
                if (!ogm || f.max > ogm)
                    groupMaxes[pid] = f.max;

                var sgs = superParentsOf(p);
                if (sgs.length > 0) {
                    fSuperGroup = sgs[0];
                    var sp = fbid[sgs[0]];
                    groups[sgs[0]] = {
                        type: sp.type,
                        id: sp.id,
                        label: sp.label || sp.id
                    };
                    if (!tier.dasSource.collapseSuperGroups) {
                        tier.dasSource.collapseSuperGroups = true;
                    }
                }
            }   
        }

        if (fGroups.length == 0) {
            if (drawn)
                pusho(ungroupedFeatures, f.type, f);
        } else if (fSuperGroup) {
            for (var g = 0; g < fGroups.length; ++g) {
                var gid = fGroups[g];
                pushnewo(superGroups, fSuperGroup, gid);
                groupsToSupers[gid] = fSuperGroup;
            } 
        }       
    }

    for (var gid in groupedFeatures) {
        var group = groups[gid];
        if (typeof(group.min) !== 'number') 
            group.min = groupMins[gid];
        if (typeof(group.max) !== 'number') 
            group.max = groupMaxes[gid];

        if (groupMaxes[gid] >= dmin && groupMins[gid] <= dmax)
            drawnGroupedFeatures[gid] = groupedFeatures[gid];
    }

    tier.ungroupedFeatures = ungroupedFeatures;
    tier.groupedFeatures = drawnGroupedFeatures;
    tier.groups = groups;
    tier.superGroups = superGroups;
    tier.groupsToSupers = groupsToSupers;

    if (minScore) {
        if (minScore > 0) {
            minScore = 0;
        } else if (maxScore < 0) {
            maxScore = 0;
        }
        tier.currentFeaturesMinScore = minScore;
        tier.currentFeaturesMaxScore = maxScore;
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        sortFeatures: sortFeatures
    };
}

},{"./utils":47}],19:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// glyphs.js: components which know how to draw themselves
//

"use strict";

if (typeof(require) !== 'undefined') {
    var spans = require('./spans');
    var union = spans.union;
    var Range = spans.Range;

    var utils = require('./utils');
    var makeElementNS = utils.makeElementNS;

    var svgu = require('./svg-utils');
    var NS_SVG = svgu.NS_SVG;
    var NS_XLINK = svgu.NS_XLINK;
    var SVGPath = svgu.SVGPath;
}

function PathGlyphBase(stroke, fill) {
    this._stroke = stroke;
    this._fill = fill;
}

PathGlyphBase.prototype.draw = function(g) {
    g.beginPath();
    this.drawPath(g);

    if (this._fill) {
        g.fillStyle = this._fill;
        g.fill();
    }
    if (this._stroke) {
        g.strokeStyle = this._stroke;
        g.stroke();
    }
}

PathGlyphBase.prototype.toSVG = function() {
    var g = new SVGPath();
    this.drawPath(g);
    
    return makeElementNS(
        NS_SVG, 'path',
        null,
        {d: g.toPathData(),
         fill: this._fill || 'none',
         stroke: this._stroke || 'none'});
}

PathGlyphBase.prototype.drawPath = function(g) {
    throw 'drawPath method on PathGlyphBase must be overridden';
}

function BoxGlyph(x, y, width, height, fill, stroke, alpha, radius) {
    this.x = x;
    this.y = y;
    this._width = width;
    this._height = height;
    this.fill = fill;
    this.stroke = stroke;
    this._alpha = alpha;
    this._radius = radius || 0;
}

BoxGlyph.prototype.draw = function(g) {
    var r = this._radius;

    if (r > 0) {
        g.beginPath();
        g.moveTo(this.x + r, this.y);
        g.lineTo(this.x + this._width - r, this.y);
        g.arcTo(this.x + this._width, this.y, this.x + this._width, this.y + r, r);
        g.lineTo(this.x + this._width, this.y + this._height - r);
        g.arcTo(this.x + this._width, this.y + this._height, this.x + this._width - r, this.y + this._height, r);
        g.lineTo(this.x + r, this.y + this._height);
        g.arcTo(this.x, this.y + this._height, this.x, this.y + this._height - r, r);
        g.lineTo(this.x, this.y + r);
        g.arcTo(this.x, this.y, this.x + r, this.y, r);
        g.closePath();

        if (this._alpha != null) {
            g.save();
            g.globalAlpha = this._alpha;
        }
        
        if (this.fill) {
            g.fillStyle = this.fill;
            g.fill();
        }
        if (this.stroke) {
            g.strokeStyle = this.stroke;
            g.lineWidth = 0.5;
            g.stroke();
        }

        if (this._alpha != null) {
            g.restore();
        }
    } else {
        if (this._alpha != null) {
            g.save();
            g.globalAlpha = this._alpha;
        }

        if (this.fill) {
            g.fillStyle = this.fill;
            g.fillRect(this.x, this.y, this._width, this._height);
        }

        if (this.stroke) {
            g.strokeStyle = this.stroke;
            g.lineWidth = 0.5;
            g.strokeRect(this.x, this.y, this._width, this._height)
        }

        if (this._alpha != null) {
            g.restore();
        }
    }
}

BoxGlyph.prototype.toSVG = function() {
    var s = makeElementNS(NS_SVG, 'rect', null,
                         {x: this.x, 
                          y: this.y, 
                          width: this._width, 
                          height: this._height,
                          stroke: this.stroke || 'none',
                          strokeWidth: 0.5,
                          fill: this.fill || 'none'});
    if (this._alpha != null) {
        s.setAttribute('opacity', this._alpha);
    }

    return s;
}

BoxGlyph.prototype.min = function() {
    return this.x;
}

BoxGlyph.prototype.max = function() {
    return this.x + this._width;
}

BoxGlyph.prototype.height = function() {
    return this.y + this._height;
}


function GroupGlyph(glyphs, connector) {
    this.glyphs = glyphs;
    this.connector = connector;
    this.h = glyphs[0].height();

    var covList = [];
    for (var g = 0; g < glyphs.length; ++g) {
        var gg = glyphs[g];
        covList.push(new Range(gg.min(), gg.max()));
        this.h = Math.max(this.h, gg.height());
    }
    this.coverage = union(covList);
}

GroupGlyph.prototype.drawConnectors = function(g) {
    var ranges = this.coverage.ranges();
    for (var r = 1; r < ranges.length; ++r) {
        var gl = ranges[r];
        var last = ranges[r - 1];
        if (last && gl.min() > last.max()) {
            var start = last.max();
            var end = gl.min();
            var mid = (start+end)/2
            
            if (this.connector === 'hat+') {
                g.moveTo(start, this.h/2);
                g.lineTo(mid, 0);
                g.lineTo(end, this.h/2);
            } else if (this.connector === 'hat-') {
                g.moveTo(start, this.h/2);
                g.lineTo(mid, this.h);
                g.lineTo(end, this.h/2);
            } else if (this.connector === 'collapsed+') {
                g.moveTo(start, this.h/2);
                g.lineTo(end, this.h/2);
                if (end - start > 4) {
                    g.moveTo(mid - 2, (this.h/2) - 3);
                    g.lineTo(mid + 2, this.h/2);
                    g.lineTo(mid - 2, (this.h/2) + 3);
                }
            } else if (this.connector === 'collapsed-') {
                g.moveTo(start, this.h/2);
                g.lineTo(end, this.h/2);
                if (end - start > 4) {
                    g.moveTo(mid + 2, (this.h/2) - 3);
                    g.lineTo(mid - 2, this.h/2);
                    g.lineTo(mid + 2, (this.h/2) + 3);
                }
            } else {
                g.moveTo(start, this.h/2);
                g.lineTo(end, this.h/2);
            }
        }
        last = gl;
    }
}

GroupGlyph.prototype.draw = function(g) {
    for (var i = 0; i < this.glyphs.length; ++i) {
        var gl = this.glyphs[i];
        gl.draw(g);
    }

    g.strokeStyle = 'black';
    g.beginPath();
    this.drawConnectors(g);
    g.stroke();
}

GroupGlyph.prototype.toSVG = function() {
    var g = makeElementNS(NS_SVG, 'g');
    for (var i = 0; i < this.glyphs.length; ++i) {
        g.appendChild(this.glyphs[i].toSVG());
    }

    var p = new SVGPath();
    this.drawConnectors(p);

    var pathData = p.toPathData();
    if (pathData.length > 0) {
        var path = makeElementNS(
            NS_SVG, 'path',
            null,
            {d: p.toPathData(),
             fill: 'none',
             stroke: 'black',
             strokeWidth: 0.5});
        g.appendChild(path);
    }

    return g;
}

GroupGlyph.prototype.min = function() {
    return this.coverage.min();
}

GroupGlyph.prototype.max = function() {
    return this.coverage.max();
}

GroupGlyph.prototype.height = function() {
    return this.h;
}


function LineGraphGlyph(points, color, height) {
    this.points = points;
    this.color = color;
    this._height = height || 50;
}

LineGraphGlyph.prototype.min = function() {
    return this.points[0];
};

LineGraphGlyph.prototype.max = function() {
    return this.points[this.points.length - 2];
};

LineGraphGlyph.prototype.height = function() {
    return this._height;
}

LineGraphGlyph.prototype.draw = function(g) {
    g.save();
    g.strokeStyle = this.color;
    g.lineWidth = 2;
    g.beginPath();
    for (var i = 0; i < this.points.length; i += 2) {
        var x = this.points[i];
        var y = this.points[i + 1];
        if (i == 0) {
            g.moveTo(x, y);
        } else {
            g.lineTo(x, y);
        }
    }
    g.stroke();
    g.restore();
}

LineGraphGlyph.prototype.toSVG = function() {
    var p = new SVGPath();
    for (var i = 0; i < this.points.length; i += 2) {
        var x = this.points[i];
        var y = this.points[i + 1];
        if (i == 0) {
            p.moveTo(x, y);
        } else {
            p.lineTo(x, y);
        }
    }
    
    return makeElementNS(
        NS_SVG, 'path',
        null,
        {d: p.toPathData(),
         fill: 'none',
         stroke: this.color,
         strokeWidth: '2px'});
}

function LabelledGlyph(GLOBAL_GC, glyph, text, unmeasured, anchor, align, font) {
    this.glyph = glyph;
    this.text = text;
    this.anchor = anchor || 'left';
    this.align = align || 'below';
    if (font) {
        this.font = font;
    }
    if (this.font) {
        GLOBAL_GC.save();
        GLOBAL_GC.font = this.font;
    }
    var metrics = GLOBAL_GC.measureText(text);
    if (this.font) {
        GLOBAL_GC.restore();
    }
    this.textLen = metrics.width;
    this.textHeight = 5;
    this.bump = glyph.bump;
    this.measured = !unmeasured;
}

LabelledGlyph.prototype.toSVG = function() {
    var child = this.glyph.toSVG();
    var opts = {};
    
    if (this.align == 'above') {
        child = makeElementNS(NS_SVG, 'g', child, {transform: "translate(0, " + (this.textHeight|0 + 2) + ")"});
        opts.y = this.textHeight;
    } else {
        opts.y = this.glyph.height() + 15;
    }

    if (this.font) {
        opts.fontSize  = 7;
    }

    if ('center' == this.anchor) {
        opts.x = (this.glyph.min() + this.glyph.max() - this.textLen) / 2;
    } else {
        opts.x = this.glyph.min();
    }

    return makeElementNS(NS_SVG, 'g',
        [child,
         makeElementNS(NS_SVG, 'text', this.text, opts)]);
}

LabelledGlyph.prototype.min = function() {
    return this.glyph.min();
}

LabelledGlyph.prototype.max = function() {
    if (this.measured)
        return Math.max(this.glyph.max(), (1.0*this.glyph.min()) + this.textLen + 10);
    else
        return this.glyph.max();
}

LabelledGlyph.prototype.height = function() {
    var h = this.glyph.height();
    if (this.measured) {
        if (this.align == 'above') {
            h += this.textHeight + 2;
        } else {
            h += 20;
        }
    }
    return h;
}

LabelledGlyph.prototype.draw = function(g) {
    if (this.align == 'above') {
        g.save();
        g.translate(0, this.textHeight + 2);
    }
    this.glyph.draw(g);
    if (this.align == 'above') {
        g.restore();
    }

    g.fillStyle = 'black';
    if (this.font) {
        g.save();
        g.font = this.font;
    }
    var p;
    if ('center' == this.anchor) {
        p = (this.glyph.min() + this.glyph.max() - this.textLen) / 2;
    } else {
        p = this.glyph.min();
    }
    g.fillText(this.text, p, this.align == 'above' ? this.textHeight : this.glyph.height() + 15);
    if (this.font) {
        g.restore();
    }
}



function CrossGlyph(x, height, stroke) {
    this._x = x;
    this._height = height;
    this._stroke = stroke;
}

CrossGlyph.prototype.draw = function(g) {
    var hh = this._height/2;
    
    g.beginPath();
    g.moveTo(this._x, 0);
    g.lineTo(this._x, this._height);
    g.moveTo(this._x - hh, hh);
    g.lineTo(this._x + hh, hh);

    g.strokeStyle = this._stroke;
    g.lineWidth = 1;

    g.stroke();
}

CrossGlyph.prototype.toSVG = function() {
    var hh = this._height/2;

    var g = new SVGPath();
    g.moveTo(this._x, 0);
    g.lineTo(this._x, this._height);
    g.moveTo(this._x - hh, hh);
    g.lineTo(this._x + hh, hh);
    
    return makeElementNS(
        NS_SVG, 'path',
        null,
        {d: g.toPathData(),
         fill: 'none',
         stroke: this._stroke,
         strokeWidth: '1px'});
}

CrossGlyph.prototype.min = function() {
    return this._x - this._height/2;
}

CrossGlyph.prototype.max = function() {
    return this._x + this._height/2;
}

CrossGlyph.prototype.height = function() {
    return this._height;
}

function ExGlyph(x, height, stroke) {
    this._x = x;
    this._height = height;
    this._stroke = stroke;
}

ExGlyph.prototype.draw = function(g) {
    var hh = this._height/2;
    
    g.beginPath();
    g.moveTo(this._x - hh, 0);
    g.lineTo(this._x + hh, this._height);
    g.moveTo(this._x - hh, this._height);
    g.lineTo(this._x + hh, 0);

    g.strokeStyle = this._stroke;
    g.lineWidth = 1;

    g.stroke();
}

ExGlyph.prototype.toSVG = function() {
    var hh = this._height/2;

    var g = new SVGPath();
    g.moveTo(this._x - hh, 0);
    g.lineTo(this._x + hh, this._height);
    g.moveTo(this._x - hh, this._height);
    g.lineTo(this._x + hh, 0);
    
    return makeElementNS(
        NS_SVG, 'path',
        null,
        {d: g.toPathData(),
         fill: 'none',
         stroke: this._stroke,
         strokeWidth: '1px'});
}

ExGlyph.prototype.min = function() {
    return this._x - this._height/2;
}

ExGlyph.prototype.max = function() {
    return this._x + this._height/2;
}

ExGlyph.prototype.height = function() {
    return this._height;
}



function TriangleGlyph(x, height, dir, width, fill, stroke) {
    PathGlyphBase.call(this, stroke, fill);

    this._x = x;
    this._height = height;
    this._dir = dir;
    this._width = width;
}

TriangleGlyph.prototype = Object.create(PathGlyphBase.prototype);

TriangleGlyph.prototype.drawPath = function(g) {
    var hh = this._height/2;
    var hw = this._width/2;

    if (this._dir === 'S') {
        g.moveTo(this._x, this._height);
        g.lineTo(this._x - hw, 0);
        g.lineTo(this._x + hw, 0);
    } else if (this._dir === 'W') {
        g.moveTo(this._x + hw, hh);
        g.lineTo(this._x - hw, 0);
        g.lineTo(this._x - hw, this._height);
    } else if (this._dir === 'E') {
        g.moveTo(this._x - hw, hh);
        g.lineTo(this._x + hw, 0);
        g.lineTo(this._x + hw, this._height);
    } else {
        g.moveTo(this._x , 0);
        g.lineTo(this._x + hw, this._height);
        g.lineTo(this._x - hw, this._height);
    }

    g.closePath();
}

TriangleGlyph.prototype.min = function() {
    return this._x - this._height/2;
}

TriangleGlyph.prototype.max = function() {
    return this._x + this._height/2;
}

TriangleGlyph.prototype.height = function() {
    return this._height;
}




function DotGlyph(x, height, fill, stroke) {
    this._x = x;
    this._height = height;
    this._fill = fill;
    this._stroke = stroke;
}

DotGlyph.prototype.draw = function(g) {
    var hh = this._height/2;
    g.fillStyle = this._stroke;
    g.beginPath();
    g.arc(this._x, hh, hh, 0, 6.29);

    if (this._fill) {
        g.fillStyle = this._fill;
        g.fill();
    }

    if (this._stroke) {
        g.strokeStyle = this._stroke;
        g.stroke();
    }
}

DotGlyph.prototype.toSVG = function() {
    var hh = this._height/2;
    return makeElementNS(
        NS_SVG, 'circle',
        null,
        {cx: this._x, cy: hh, r: hh,
         fill: this._fill || 'none',
         stroke: this._stroke || 'none',
         strokeWidth: '1px'});
}

DotGlyph.prototype.min = function() {
    return this._x - this._height/2;
}

DotGlyph.prototype.max = function() {
    return this._x + this._height/2;
}

DotGlyph.prototype.height = function() {
    return this._height;
}


function PaddedGlyph(glyph, minp, maxp) {
    this.glyph = glyph;
    this._min = minp;
    this._max = maxp;
    if (glyph) {
        this.bump = glyph.bump;
    }
}

PaddedGlyph.prototype.draw = function(g) {
    if (this.glyph) 
        this.glyph.draw(g);
}

PaddedGlyph.prototype.toSVG = function() {
    if (this.glyph) {
        return this.glyph.toSVG();
    } else {
        return makeElementNS(NS_SVG, 'g');
    }
}

PaddedGlyph.prototype.min = function() {
    return this._min;
}

PaddedGlyph.prototype.max = function() {
    return this._max;
}

PaddedGlyph.prototype.height = function() {
    if (this.glyph) {
        return this.glyph.height();
    } else {
        return 1;
    }
}


function AArrowGlyph(min, max, height, fill, stroke, ori) {
    PathGlyphBase.call(this, stroke, fill);
    this._min = min;
    this._max = max;
    this._height = height;
    this._ori = ori;
}

AArrowGlyph.prototype = Object.create(PathGlyphBase.prototype);

AArrowGlyph.prototype.min = function() {
    return this._min;
}

AArrowGlyph.prototype.max = function() {
    return this._max;
}

AArrowGlyph.prototype.height = function() {
    return this._height;
}

AArrowGlyph.prototype.drawPath = function(g) {
    var maxPos = this._max;
    var minPos = this._min;
    var height = this._height;
    var lInset = 0;
    var rInset = 0;
    var minLength = this._height + 2;
    var instep = 0.333333 * this._height;
    var y = 0;

    if (this._ori) {
        if (this._ori === '+') {
            rInset = 0.5 * this._height;
        } else if (this._ori === '-') {
            lInset = 0.5 * this._height;
        }
    }

    if (maxPos - minPos < minLength) {
        minPos = (maxPos + minPos - minLength) / 2;
        maxPos = minPos + minLength;
    }

    g.moveTo(minPos + lInset, y+instep);
    g.lineTo(maxPos - rInset, y+instep);
    g.lineTo(maxPos - rInset, y);
    g.lineTo(maxPos, y + this._height/2);
    g.lineTo(maxPos - rInset, y+height);
    g.lineTo(maxPos - rInset, y+instep+instep);
    g.lineTo(minPos + lInset, y+instep+instep);
    g.lineTo(minPos + lInset, y+height);
    g.lineTo(minPos, y+height/2);
    g.lineTo(minPos + lInset, y);
    g.lineTo(minPos + lInset, y+instep);
}

function SpanGlyph(min, max, height, stroke) {
    PathGlyphBase.call(this, stroke, null);
    this._min = min;
    this._max = max;
    this._height = height;
}

SpanGlyph.prototype = Object.create(PathGlyphBase.prototype);

SpanGlyph.prototype.min = function() {return this._min};
SpanGlyph.prototype.max = function() {return this._max};
SpanGlyph.prototype.height = function() {return this._height};

SpanGlyph.prototype.drawPath = function(g) {
    var minPos = this._min, maxPos = this._max;
    var height = this._height, hh = height/2;
    g.moveTo(minPos, hh);
    g.lineTo(maxPos, hh);
    g.moveTo(minPos, 0);
    g.lineTo(minPos, height);
    g.moveTo(maxPos, 0);
    g.lineTo(maxPos, height);
}

function LineGlyph(min, max, height, style, strand, stroke) {
    this._min = min;
    this._max = max;
    this._height = height;
    this._style = style;
    this._strand = strand;
    this._stroke = stroke;
}

LineGlyph.prototype.min = function() {return this._min};
LineGlyph.prototype.max = function() {return this._max};
LineGlyph.prototype.height = function() {return this._height};

LineGlyph.prototype.drawPath = function(g) {
    var minPos = this._min, maxPos = this._max;
    var height = this._height, hh = height/2;

    if (this._style === 'hat') {
        g.moveTo(minPos, hh);
        g.lineTo((minPos + maxPos)/2, this._strand === '-' ? height : 0);
        g.lineTo(maxPos, hh);
    } else {
        g.moveTo(minPos, hh);
        g.lineTo(maxPos, hh);
    }
}


LineGlyph.prototype.draw = function(g) {
    g.beginPath();
    this.drawPath(g);
    g.strokeStyle = this._stroke;
    if (this._style === 'dashed' && g.setLineDash) {
        g.save();
        g.setLineDash([3]);
        g.stroke();
        g.restore();
    } else {
        g.stroke();
    }
}

LineGlyph.prototype.toSVG = function() {
    var g = new SVGPath();
    this.drawPath(g);
    
    var opts = {d: g.toPathData(),
            stroke: this._stroke || 'none'};
    if (this._style === 'dashed') {
        opts['strokeDasharray'] = '3';
    }

    return makeElementNS(
        NS_SVG, 'path',
        null, opts
    );
}





function PrimersGlyph(min, max, height, fill, stroke) {
    this._min = min;
    this._max = max;
    this._height = height;
    this._fill = fill;
    this._stroke = stroke;
}

PrimersGlyph.prototype.min = function() {return this._min};
PrimersGlyph.prototype.max = function() {return this._max};
PrimersGlyph.prototype.height = function() {return this._height};


PrimersGlyph.prototype.drawStemPath = function(g) {
    var minPos = this._min, maxPos = this._max;
    var height = this._height, hh = height/2;
    g.moveTo(minPos, hh);
    g.lineTo(maxPos, hh);
}

PrimersGlyph.prototype.drawTrigsPath = function(g) {
    var minPos = this._min, maxPos = this._max;
    var height = this._height, hh = height/2;
    g.moveTo(minPos, 0);
    g.lineTo(minPos + height, hh);
    g.lineTo(minPos, height);
    g.lineTo(minPos, 0);
    g.moveTo(maxPos, 0);
    g.lineTo(maxPos - height, hh);
    g.lineTo(maxPos, height);
    g.lineTo(maxPos, 0);
}


PrimersGlyph.prototype.draw = function(g) {
    g.beginPath();
    this.drawStemPath(g);
    g.strokeStyle = this._stroke;
    g.stroke();
    g.beginPath();
    this.drawTrigsPath(g);
    g.fillStyle = this._fill;
    g.fill();
}

PrimersGlyph.prototype.toSVG = function() {
    var s = new SVGPath();
    this.drawStemPath(s);
    var t = new SVGPath();
    this.drawTrigsPath(t);
    
    return makeElementNS(
        NS_SVG, 'g',
        [makeElementNS(
            NS_SVG, 'path',
            null,
            {d: s.toPathData(),
             stroke: this._stroke || 'none'}),
         makeElementNS(
             NS_SVG, 'path',
             null,
             {d: t.toPathData(),
              fill: this._fill || 'none'})]);
}

function ArrowGlyph(min, max, height, color, parallel, sw, ne) {
    PathGlyphBase.call(this, null, color);
    this._min = min;
    this._max = max;
    this._height = height;
    this._color = color;
    this._parallel = parallel;
    this._sw = sw;
    this._ne = ne;
}

ArrowGlyph.prototype = Object.create(PathGlyphBase.prototype);

ArrowGlyph.prototype.min = function() {return this._min};
ArrowGlyph.prototype.max = function() {return this._max};
ArrowGlyph.prototype.height = function() {return this._height};

ArrowGlyph.prototype.drawPath = function(g) {
    var min = this._min, max = this._max, height = this._height;
    
    if (this._parallel) {
        var hh = height/2;
        var instep = 0.4 * height;
        if (this._sw) {
            g.moveTo(min + hh, height-instep);
            g.lineTo(min + hh, height);
            g.lineTo(min, hh);
            g.lineTo(min + hh, 0);
            g.lineTo(min + hh, instep);
        } else {
            g.moveTo(min, height-instep);
            g.lineTo(min, instep);
        }
        if (this._ne) {
            g.lineTo(max - hh, instep);
            g.lineTo(max - hh, 0);
            g.lineTo(max, hh);
            g.lineTo(max - hh, height);
            g.lineTo(max - hh, height - instep);
        } else {
            g.lineTo(max, instep);
            g.lineTo(max, height-instep);
        }
        g.closePath();
    } else {
        var mid = (min+max)/2;
        var instep = 0.4*(max-min);
        var th = height/3;

        if (this._ne) {
            g.moveTo(min + instep, th);
            g.lineTo(min, th);
            g.lineTo(mid, 0);
            g.lineTo(max, th);
            g.lineTo(max - instep, th);
        } else {
            g.moveTo(min+instep, 0);
            g.lineTo(max-instep, 0);
        }
        if (this._sw) {
            g.lineTo(max - instep, height-th);
            g.lineTo(max, height-th);
            g.lineTo(mid, height);
            g.lineTo(min, height-th)
            g.lineTo(min + instep, height-th);
        } else {
            g.lineTo(max - instep, height);
            g.lineTo(min + instep, height);
        }
        g.closePath();
    }
}


function TooManyGlyph(min, max, height, fill, stroke) {
    this._min = min;
    this._max = max;
    this._height = height;
    this._fill = fill;
    this._stroke = stroke;
}

TooManyGlyph.prototype.min = function() {return this._min};
TooManyGlyph.prototype.max = function() {return this._max};
TooManyGlyph.prototype.height = function() {return this._height};

TooManyGlyph.prototype.toSVG = function() {
    return makeElementNS(NS_SVG, 'rect', null,
                         {x: this._min, 
                          y: 0, 
                          width: this._max - this._min, 
                          height: this._height,
                          stroke: this._stroke || 'none',
                          fill: this._fill || 'none'});
}

TooManyGlyph.prototype.draw = function(g) {
    if (this._fill) {
        g.fillStyle = this._fill;
        g.fillRect(this._min, 0, this._max - this._min, this._height);
    }
    if (this._stroke) {
        g.strokeStyle = this._stroke;
        g.strokeRect(this._min, 0, this._max - this._min, this._height);
        g.beginPath();
        for (var n = 2; n < this._height; n += 3) {
            g.moveTo(this._min, n);
            g.lineTo(this._max, n);
        }
        g.stroke();
    }
}

function TextGlyph(GLOBAL_GC, min, max, height, fill, string) {
    this._min = min;
    this._max = max;
    this._height = height;
    this._fill = fill;
    this._string = string;
    this._textLen = GLOBAL_GC.measureText(string).width;
}

TextGlyph.prototype.min = function() {return this._min};
TextGlyph.prototype.max = function() {return Math.max(this._max, this._min + this._textLen)};
TextGlyph.prototype.height = function() {return this._height};

TextGlyph.prototype.draw = function(g) {
    g.fillStyle = this._fill;
    g.fillText(this._string, this._min, this._height - 4);
}

TextGlyph.prototype.toSVG = function() {
    return makeElementNS(NS_SVG, 'text', this._string, {x: this._min, y: this._height - 4});
};

(function(scope) {

var isRetina = window.devicePixelRatio > 1;
var __dalliance_SequenceGlyphCache = {};

function SequenceGlyph(baseColors, min, max, height, seq, ref, scheme, quals) {
    this.baseColors = baseColors;
    this._min = min;
    this._max = max;
    this._height = height;
    this._seq = seq;
    this._ref = ref;
    this._scheme = scheme;
    this._quals = quals;
}

SequenceGlyph.prototype.min = function() {return this._min};
SequenceGlyph.prototype.max = function() {return this._max};
SequenceGlyph.prototype.height = function() {return this._height};


SequenceGlyph.prototype.alphaForQual = function(qual) {
    return 0.1 + 0.9*Math.max(0.0, Math.min((1.0 * qual) / 30.0, 1.0));
}

SequenceGlyph.prototype.draw = function(gc) {
    var seq = this._seq;
    if (!seq)
        seq = 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN';    // FIXME       

    var scale = (this._max - this._min + 1) / seq.length;

    for (var p = 0; p < seq.length; ++p) {
        var base = seq.substr(p, 1).toUpperCase();
        var color = this.baseColors[base];
        if (!color) {
            color = 'gray';
        }

        if (this._scheme === 'mismatch' && this._ref) {
            var refbase = this._ref.substr(p, 1).toUpperCase();
            if (refbase === 'N') {
                color = 'gray';
            } else if (refbase === base) {
                color = 'black';
            } else {
                color = 'red';
            }
        }
        
        if (this._quals) {
            var qc = this._quals.charCodeAt(p) - 33;
            var oldAlpha = gc.globalAlpha;            // NB hoisted!
            gc.globalAlpha = this.alphaForQual(qc);
        }

        if (scale >= 8) {
            var key = color + '_' + base
            var img = __dalliance_SequenceGlyphCache[key];
            if (!img) {
                img = document.createElement('canvas');
                if (isRetina) {
                    img.width = 16;
                    img.height = 20;
                } else {
                    img.width = 8;
                    img.height = 10;
                }
                var imgGc = img.getContext('2d');
                if (isRetina) {
                    imgGc.scale(2, 2);
                }
                imgGc.fillStyle = color;
                imgGc.fillText(base, 0, 8);
                __dalliance_SequenceGlyphCache[key] = img;
            }
            if (isRetina)
                gc.drawImage(img, this._min + p*scale, 0, 8, 10);
            else
                gc.drawImage(img, this._min + p*scale, 0);
        } else {
            gc.fillStyle = color;
            gc.fillRect(this._min + p*scale, 0, scale, this._height);
        }

        if (this._quals) {
            gc.globalAlpha = oldAlpha;
        }
    }
}

SequenceGlyph.prototype.toSVG = function() {
    var seq = this._seq;
    var scale = (this._max - this._min + 1) / this._seq.length;
    var  g = makeElementNS(NS_SVG, 'g'); 

    for (var p = 0; p < seq.length; ++p) {
        var base = seq.substr(p, 1).toUpperCase();
        var color = baseColors[base];
        if (!color) {
            color = 'gray';
        }

        if (this._scheme === 'mismatch' && this._ref) {
            var refbase = this._ref.substr(p, 1).toUpperCase();
            if (refbase === 'N') {
                color = 'gray';
            } else if (refbase === base) {
                color = 'black';
            } else {
                color = 'red';
            }
        }

        var alpha = 1.0;
        if (this._quals) {
            var qc = this._quals.charCodeAt(p) - 33;
            alpha = this.alphaForQual(qc);
        }

        if (scale >= 8) {
            g.appendChild(
                    makeElementNS(NS_SVG, 'text', base, {
                        x: this._min + p*scale,
                        y: 8,
                        fill: color,
                        fillOpacity: alpha}));
        } else {
            g.appendChild(
                    makeElementNS(NS_SVG, 'rect', null, {
                        x:this._min + p*scale,
                        y: 0,
                        width: scale,
                        height: this._height,
                        fill: color,
                        fillOpacity: alpha}));

        }
    }

    return g;
}

scope.SequenceGlyph = SequenceGlyph;

}(this));

function TranslatedGlyph(glyph, x, y, height) {
    this.glyph = glyph;
    this._height = height;
    this._x = x;
    this._y = y;
}

TranslatedGlyph.prototype.height = function() {
    if (this._height) {
        return this._height;
    } else {
        return this.glyph.height() + this._y;
    }
}

TranslatedGlyph.prototype.min = function() {
    return this.glyph.min() + this._x;
}

TranslatedGlyph.prototype.max = function() {
    return this.glyph.max() + this._x;
}

TranslatedGlyph.prototype.minY = function() {
    return this._y;
}

TranslatedGlyph.prototype.maxY = function() {
    return this._y + this.glyph.height();
}

TranslatedGlyph.prototype.draw = function(g) {
    g.save();
    g.translate(this._x, this._y);
    this.glyph.draw(g);
    g.restore();
}

TranslatedGlyph.prototype.toSVG = function() {
    var s =  this.glyph.toSVG();
    s.setAttribute('transform', 'translate(' + this._x + ',' + this._y + ')');
    return s;
}

function PointGlyph(x, y, height, fill) {
    this._x = x;
    this._y = y;
    this._height = height;
    this._fill = fill;
}

PointGlyph.prototype.min = function() {
    return this._x - 2;
}

PointGlyph.prototype.max = function() {
    return this._x + 2;
}

PointGlyph.prototype.height = function() {
    return this._height;
}

PointGlyph.prototype.draw = function(g) {
    g.save();
    g.globalAlpha = 0.3;
    g.fillStyle = this._fill;
    g.beginPath();
    g.arc(this._x, this._y, 1.5, 0, 6.29);
    g.fill();
    g.restore();
}

PointGlyph.prototype.toSVG = function() {
    return makeElementNS(
        NS_SVG, 'circle',
        null,
        {cx: this._x, cy: this._y, r: 2,
         fill: this._fill,
         stroke: 'none'});
}


function GridGlyph(height) {
    this._height = height || 50;
}

GridGlyph.prototype.notSelectable = true;

GridGlyph.prototype.min = function() {
    return -100000;
};

GridGlyph.prototype.max = function() {
    return 100000;
};

GridGlyph.prototype.height = function() {
    return this._height;
}

GridGlyph.prototype.draw = function(g) {
    g.save();
    g.strokeStyle = 'black'
    g.lineWidth = 0.1;

    g.beginPath();
    for (var y = 0; y <= this._height; y += 10) {
        g.moveTo(-5000, y);
        g.lineTo(5000, y);
    }
    g.stroke();
    g.restore();
}

GridGlyph.prototype.toSVG = function() {
    var p = new SVGPath();
    for (var y = 0; y <= this._height; y += 10) {
        p.moveTo(-5000, y);
        p.lineTo(5000, y);
    }
    
    return makeElementNS(
        NS_SVG, 'path',
        null,
        {d: p.toPathData(),
         fill: 'none',
         stroke: 'black',
         strokeWidth: '0.1px'});
}

function StarGlyph(x, r, points, fill, stroke) {
    PathGlyphBase.call(this, stroke, fill);
    this._x = x;
    this._r = r;
    this._points = points;
}

StarGlyph.prototype = Object.create(PathGlyphBase.prototype);

StarGlyph.prototype.min = function() {
    return this._x - this._r;
}

StarGlyph.prototype.max = function() {
    return this._x + this._r;
}

StarGlyph.prototype.height = function() {
    return 2 * this._r;
}

StarGlyph.prototype.drawPath = function(g) {
    var midX = this._x, midY = this._r, r = this._r;
    for (var p = 0; p < this._points; ++p) {
        var theta = (p * 6.28) / this._points;
        var px = midX + r*Math.sin(theta);
        var py = midY - r*Math.cos(theta);
        if (p == 0) {
            g.moveTo(px, py);
        } else {
            g.lineTo(px, py);
        }
        theta = ((p+0.5) * 6.28) / this._points;
        px = midX + 0.4*r*Math.sin(theta);
        py = midY - 0.4*r*Math.cos(theta);
        g.lineTo(px, py);
    }
    g.closePath();
}

function PlimsollGlyph(x, height, overhang, fill, stroke) {
    this._x = x;
    this._height = height;
    this._overhang = overhang;
    this._fill = fill;
    this._stroke = stroke;
    this._hh = height / 2;
}

PlimsollGlyph.prototype.draw = function(g) {
    var hh = this._height/2;
    g.fillStyle = this._stroke;
    g.beginPath();
    g.arc(this._x, hh, hh - this._overhang, 0, 6.29);
    g.moveTo(this._x, 0);
    g.lineTo(this._x, this._height);

    if (this._fill) {
        g.fillStyle = this._fill;
        g.fill();
    }

    if (this._stroke) {
        g.strokeStyle = this._stroke;
        g.stroke();
    }
}

PlimsollGlyph.prototype.toSVG = function() {
    var hh = this._hh;
    return makeElementNS(NS_SVG, 'g', 
        [makeElementNS(NS_SVG, 'circle', null, {cx: this._x, cy: hh, r: hh - this._overhang}),
         makeElementNS(NS_SVG, 'line', null, {x1: this._x, y1: 0, x2: this._x, y2: this._height})],
        {fill: this._fill || 'none',
         stroke: this._stroke || 'none',
         strokeWidth: '1px'});
}

PlimsollGlyph.prototype.min = function() {
    return this._x - this._hh;
}

PlimsollGlyph.prototype.max = function() {
    return this._x + this._hh;
}

PlimsollGlyph.prototype.height = function() {
    return this._height;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        BoxGlyph: BoxGlyph,
        GroupGlyph: GroupGlyph,
        LineGraphGlyph: LineGraphGlyph,
        LabelledGlyph: LabelledGlyph,
        CrossGlyph: CrossGlyph,
        ExGlyph: ExGlyph,
        TriangleGlyph: TriangleGlyph,
        DotGlyph: DotGlyph,
        PaddedGlyph: PaddedGlyph,
        AArrowGlyph: AArrowGlyph,
        SpanGlyph: SpanGlyph,
        LineGlyph: LineGlyph,
        PrimersGlyph: PrimersGlyph,
        ArrowGlyph: ArrowGlyph,
        TooManyGlyph: TooManyGlyph,
        TextGlyph: TextGlyph,
        SequenceGlyph: this.SequenceGlyph,
        TranslatedGlyph: TranslatedGlyph,
        GridGlyph: GridGlyph,
        StarGlyph: StarGlyph,
        PointGlyph: PointGlyph,
        PlimsollGlyph: PlimsollGlyph
    }
}

},{"./spans":33,"./svg-utils":35,"./utils":47}],20:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// jbjson.js -- query JBrowse-style REST data stores
//

if (typeof(require) !== 'undefined') {
    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;
}

function JBrowseStore(base, query) {
    this.base = base;
    this.query = query;
}

JBrowseStore.prototype.features = function(segment, opts, callback) {
    opts = opts || {};

    url = this.base + '/features/' + segment.name;

    var filters = [];
    if (this.query) {
	   filters.push(this.query);
    }
    if (segment.isBounded) {
    	filters.push('start=' + segment.start);
    	filters.push('end=' + segment.end);
    }
    if (filters.length > 0) {
	    url = url + '?' + filters.join('&');
    }

    var req = new XMLHttpRequest();
    req.onreadystatechange = function() {
	if (req.readyState == 4) {
	    if (req.status >= 300) {
		    callback(null, 'Error code ' + req.status);
	    } else {
		var jf = JSON.parse(req.response)['features'];
		var features = [];
		for (fi = 0; fi < jf.length; ++fi) {
		    var j = jf[fi];
		    
		    var f = new DASFeature();
		    f.segment = segment;
		    f.min = (j['start'] | 0) + 1;
		    f.max = j['end'] | 0;
		    if (j.name) {
			f.label = j.name;
		    }
		    f.type = j.type || 'unknown';
		    
		    features.push(f);
		}
		callback(features);
	    }
	}
	
    };
    
    req.open('GET', url, true);
    req.responseType = 'text';
    req.send('');
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        JBrowseStore: JBrowseStore
    };
}

},{"./das":10}],21:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// kspace.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var Awaited = utils.Awaited;
    var pusho = utils.pusho;

    var sa = require('./sourceadapters');
    var MappedFeatureSource = sa.MappedFeatureSource;
    var CachingFeatureSource = sa.CachingFeatureSource;
    var BWGFeatureSource = sa.BWGFeatureSource;
    var RemoteBWGFeatureSource = sa.RemoteBWGFeatureSource;
    var BAMFeatureSource = sa.BAMFeatureSource;
    var RemoteBAMFeatureSource = sa.RemoteBAMFeatureSource;
    var DummySequenceSource = sa.DummySequenceSource;
    var DummyFeatureSource = sa.DummyFeatureSource;

    var OverlayFeatureSource = require('./overlay').OverlayFeatureSource;

    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;
    var intersection = spans.intersection;

    var downsample = require('./sample').downsample;

    var das = require('./das');
    var DASSequence = das.DASSequence;
}

function FetchPool() {
    this.reqs = [];
    this.awaitedFeatures = {};
}

FetchPool.prototype.addRequest = function(xhr) {
    this.reqs.push(xhr);
}

FetchPool.prototype.abortAll = function() {
    for (var i = 0; i < this.reqs.length; ++i) {
        this.reqs[i].abort();
    }
}

function KSCacheBaton(chr, min, max, scale, features, status, coverage) {
    this.chr = chr;
    this.min = min;
    this.max = max;
    this.coverage = coverage;
    this.scale = scale;
    this.features = features || [];
    this.status = status;
}

KSCacheBaton.prototype.toString = function() {
    return this.chr + ":" + this.min + ".." + this.max + ";scale=" + this.scale;
}

function KnownSpace(tierMap, chr, min, max, scale, seqSource) {
    this.tierMap = tierMap;
    this.chr = chr;
    this.min = min;
    this.max = max;
    this.scale = scale;
    this.seqSource = seqSource || new DummySequenceSource();
    this.viewCount = 0;

    this.featureCache = {};
    this.latestViews = {};
}

KnownSpace.prototype.bestCacheOverlapping = function(chr, min, max) {
    var baton = this.featureCache[this.tierMap[0]];
    if (baton) {
        return baton;
    } else {
        return null;
    }
}

KnownSpace.prototype.viewFeatures = function(chr, min, max, scale) {
    if (scale != scale) {
        throw "viewFeatures called with silly scale";
    }

    if (chr != this.chr) {
        throw "Can't extend Known Space to a new chromosome";
    }
    if (min < 1) {
        min = 1;
    }

    this.min = min;
    this.max = max;
    this.scale = scale;

    if (this.pool) {
        this.pool.abortAll();
    }
    this.pool = new FetchPool();
    this.awaitedSeq = new Awaited();
    this.seqWasFetched = false;
    this.viewCount++;
    
    this.startFetchesForTiers(this.tierMap);
}
    
function filterFeatures(features, min, max) {
    var ff = [];
    var featuresByGroup = {};

    for (var fi = 0; fi < features.length; ++fi) {
        var f = features[fi];
        if (!f.min || !f.max) {
            ff.push(f);
        } else if (f.groups && f.groups.length > 0) {
            pusho(featuresByGroup, f.groups[0].id, f);
        } else if (f.min <= max && f.max >= min) {
            ff.push(f);
        }
    }

    for (var gid in featuresByGroup) {
        var gf = featuresByGroup[gid];
        var gmin = 100000000000, gmax = -100000000000;
        for (var fi = 0; fi < gf.length; ++fi) {
            var f = gf[fi];
            gmin = Math.min(gmin, f.min);
            gmax = Math.max(gmax, f.max);
        }
        if (gmin <= max || gmax >= min) {
            for (var fi = 0; fi < gf.length; ++fi) {
                ff.push(gf[fi]);
            }
        }
    }

    return ff;
}

KnownSpace.prototype.invalidate = function(tier) {
    if (!this.pool) {
        return;
    }

    this.featureCache[tier] = null;
    this.startFetchesForTiers([tier]);
}

KnownSpace.prototype.startFetchesForTiers = function(tiers) {
    var thisB = this;

    var awaitedSeq = this.awaitedSeq;
    var needSeq = false;

    var gex;

    for (var t = 0; t < tiers.length; ++t) {
        try {
            if (this.startFetchesFor(tiers[t], awaitedSeq)) {
                needSeq = true;
            }
        } catch (ex) {
            tiers[t].updateStatus(ex);
            console.log('Error fetching tier source');
            console.log(ex);
            gex = ex;
        }
    }

    if (needSeq && !this.seqWasFetched) {
        this.seqWasFetched = true;
        var smin = this.min, smax = this.max;

        if (this.cs) {
            if (this.cs.start <= smin && this.cs.end >= smax) {
                var cachedSeq;
                if (this.cs.start == smin && this.cs.end == smax) {
                    cachedSeq = this.cs;
                } else {
                    cachedSeq = new DASSequence(this.cs.name, smin, smax, this.cs.alphabet, 
                                                this.cs.seq.substring(smin - this.cs.start, smax + 1 - this.cs.start));
                }
                return awaitedSeq.provide(cachedSeq);
            }
        }
        
        this.seqSource.fetch(this.chr, smin, smax, this.pool, function(err, seq) {
            if (seq) {
                if (!thisB.cs || (smin <= thisB.cs.start && smax >= thisB.cs.end) || 
                    (smin >= thisB.cs.end) || (smax <= thisB.cs.start) || 
                    ((smax - smin) > (thisB.cs.end - thisB.cs.start))) 
                {
                    thisB.cs = seq;
                }
                awaitedSeq.provide(seq);
            } else {
                console.log('Sequence loading failed', err);
                awaitedSeq.provide(null);
            }
        });
    } 

    if (gex)
        throw gex;
}

KnownSpace.prototype.startFetchesFor = function(tier, awaitedSeq) {
    var thisB = this;

    var viewID = this.viewCount;
    var source = tier.getSource() || new DummyFeatureSource();
    var needsSeq = tier.needsSequence(this.scale);
    var baton = thisB.featureCache[tier];
    var wantedTypes = tier.getDesiredTypes(this.scale);
    var chr = this.chr, min = this.min, max = this.max;


    if (wantedTypes === undefined) {
        return false;
    }
    if (baton && baton.chr === this.chr && baton.min <= min && baton.max >= max) {
        var cachedFeatures = baton.features;
        if (baton.min < min || baton.max > max) {
            cachedFeatures = filterFeatures(cachedFeatures, min, max);
        }
        
        thisB.provision(tier, baton.chr, intersection(baton.coverage, new Range(min, max)), baton.scale, wantedTypes, cachedFeatures, baton.status, needsSeq ? awaitedSeq : null);

        var availableScales = source.getScales();
        if (baton.scale <= this.scale || !availableScales) {
            return needsSeq;
        } else {
        }
    }

    if (source.instrument)
        console.log('Starting  fetch ' + viewID + ' (' + min + ', ' + max + ')');
    source.fetch(chr, min, max, this.scale, wantedTypes, this.pool, function(status, features, scale, coverage) {
    	if (source.instrument)
    	    console.log('Finishing fetch ' + viewID);

    	var latestViewID = thisB.latestViews[tier] || -1;
    	if (latestViewID > viewID) {
    	    return;
    	}

        if (!coverage) {
            coverage = new Range(min, max);
        }

        if (!baton || (min < baton.min) || (max > baton.max)) {         // FIXME should be merging in some cases?
            thisB.featureCache[tier] = new KSCacheBaton(chr, min, max, scale, features, status, coverage);
        }

	    thisB.latestViews[tier] = viewID;
        thisB.provision(tier, chr, coverage, scale, wantedTypes, features, status, needsSeq ? awaitedSeq : null);
    });
    return needsSeq;
}

KnownSpace.prototype.provision = function(tier, chr, coverage, actualScale, wantedTypes, features, status, awaitedSeq) {
    tier.updateStatus(status);
   
    if (!status) {
        var mayDownsample = false;
        var src = tier.getSource();
        while (MappedFeatureSource.prototype.isPrototypeOf(src) || CachingFeatureSource.prototype.isPrototypeOf(src) || OverlayFeatureSource.prototype.isPrototypeOf(src)) {
	        if (OverlayFeatureSource.prototype.isPrototypeOf(src)) {
		        src = src.sources[0];
	        } else {
		        src = src.source;
	        }
        }
        if (BWGFeatureSource.prototype.isPrototypeOf(src) || RemoteBWGFeatureSource.prototype.isPrototypeOf(src) || BAMFeatureSource.prototype.isPrototypeOf(src) || RemoteBAMFeatureSource.prototype.isPrototypeOf(src)) {
            mayDownsample = true;
        }

    	if (!src.opts || (!src.opts.forceReduction && !src.opts.noDownsample)) {
            if ((actualScale < (this.scale/2) && features.length > 200)  ||
		        (mayDownsample && wantedTypes && wantedTypes.length == 1 && wantedTypes.indexOf('density') >= 0))
            {
		        features = downsample(features, this.scale);
            }
    	}

        if (awaitedSeq) {
            awaitedSeq.await(function(seq) {
                tier.viewFeatures(chr, coverage, actualScale, features, seq);
            });
        } else {
            tier.viewFeatures(chr, coverage, actualScale, features);
        }
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        KnownSpace: KnownSpace
    };
}

},{"./das":10,"./overlay":25,"./sample":27,"./sourceadapters":32,"./spans":33,"./utils":47}],22:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// lh3utils.js: common support for lh3's file formats
//

if (typeof(require) !== 'undefined') {
    var jszlib = require('jszlib');
    var jszlib_inflate_buffer = jszlib.inflateBuffer;
    var arrayCopy = jszlib.arrayCopy;
}

function Vob(b, o) {
    this.block = b;
    this.offset = o;
}

Vob.prototype.toString = function() {
    return '' + this.block + ':' + this.offset;
}

function readVob(ba, offset) {
    var block = ((ba[offset+6] & 0xff) * 0x100000000) + ((ba[offset+5] & 0xff) * 0x1000000) + ((ba[offset+4] & 0xff) * 0x10000) + ((ba[offset+3] & 0xff) * 0x100) + ((ba[offset+2] & 0xff));
    var bint = (ba[offset+1] << 8) | (ba[offset]);
    if (block == 0 && bint == 0) {
        return null;  // Should only happen in the linear index?
    } else {
        return new Vob(block, bint);
    }
}

function unbgzf(data, lim) {
    lim = Math.min(lim || 1, data.byteLength - 50);
    var oBlockList = [];
    var ptr = [0];
    var totalSize = 0;

    while (ptr[0] < lim) {
        var ba = new Uint8Array(data, ptr[0], 12); // FIXME is this enough for all credible BGZF block headers?
        var xlen = (ba[11] << 8) | (ba[10]);
        // dlog('xlen[' + (ptr[0]) +']=' + xlen);
        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);
        ptr[0] += 8;
        totalSize += unc.byteLength;
        oBlockList.push(unc);
    }

    if (oBlockList.length == 1) {
        return oBlockList[0];
    } else {
        var out = new Uint8Array(totalSize);
        var cursor = 0;
        for (var i = 0; i < oBlockList.length; ++i) {
            var b = new Uint8Array(oBlockList[i]);
            arrayCopy(b, 0, out, cursor, b.length);
            cursor += b.length;
        }
        return out.buffer;
    }
}

function Chunk(minv, maxv) {
    this.minv = minv; this.maxv = maxv;
}


//
// Binning (transliterated from SAM1.3 spec)
//

/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */
function reg2bin(beg, end)
{
    --end;
    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);
    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);
    if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);
    if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);
    if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);
    return 0;
}

/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */
var MAX_BIN = (((1<<18)-1)/7);
function reg2bins(beg, end) 
{
    var i = 0, k, list = [];
    --end;
    list.push(0);
    for (k = 1 + (beg>>26); k <= 1 + (end>>26); ++k) list.push(k);
    for (k = 9 + (beg>>23); k <= 9 + (end>>23); ++k) list.push(k);
    for (k = 73 + (beg>>20); k <= 73 + (end>>20); ++k) list.push(k);
    for (k = 585 + (beg>>17); k <= 585 + (end>>17); ++k) list.push(k);
    for (k = 4681 + (beg>>14); k <= 4681 + (end>>14); ++k) list.push(k);
    return list;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        unbgzf: unbgzf,
        readVob: readVob,
        reg2bin: reg2bin,
        reg2bins: reg2bins,
        Chunk: Chunk
    };
}
},{"jszlib":62}],23:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// memstore.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sa = require('./sourceadapters');
    var dalliance_registerSourceAdapterFactory = sa.registerSourceAdapterFactory;
    var dalliance_makeParser = sa.makeParser;
    var FeatureSourceBase = sa.FeatureSourceBase;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;

    var utils = require('./utils');
    var Awaited = utils.Awaited;
}

function MemStore() {
    this.featuresByChr = {};
    this.maxLength = 1;
    this.chrRing = null;
}

MemStore.prototype.addFeatures = function(features) {
    var dirty = {};
    for (var fi = 0; fi < features.length; ++fi) {
        var f = features[fi];
        var chr = f.segment || f.chr;
        var fa = this.featuresByChr[chr];
        if (!fa) {
            fa = [];
            this.featuresByChr[chr] = fa;
        }
        fa.push(f);
        dirty[chr] = true;

        var len = f.max - f.min + 1;
        if (len > this.maxLength)
            this.maxLength = len;
    }

    for (chr in dirty) {
        var fa = this.featuresByChr[chr];
        fa.sort(function(f1, f2) {
            var d = f1.min - f2.min;
            if (d != 0)
                return d;
            return f1.max - f2.max;
        });
    }
    this.chrRing = null;
}

MemStore.prototype._indexFor = function(fa, p) {
    var lb = 0, ub = fa.length;
    while (ub > lb) {
        var mid = ((lb + ub)/2)|0;
        if (mid >= fa.length)
            return fa.length;
        var mg = fa[mid];
        if (p < mg.min) {
            ub = mid;
        } else {
            lb = mid + 1;
        }
    }
    return ub;
}

MemStore.prototype.fetch = function(chr, min, max) {
    var fa = this.featuresByChr[chr];
    if (!fa) {
        if (chr.indexOf('chr') == 0)
            fa = this.featuresByChr[chr.substring(3)];
        else
            fa = this.featuresByChr['chr' + chr];
    }
    if (!fa)
        return [];

    var mini = Math.max(0, this._indexFor(fa, min - this.maxLength - 1));
    var maxi = Math.min(fa.length - 1, this._indexFor(fa, max));

    var res = [];
    for (var fi = mini; fi <= maxi; ++fi) {
        var f = fa[fi];
        if (f.min <= max && f.max >= min)
            res.push(f);
    }
    return res;
}

MemStore.prototype.findNextFeature = function(chr, pos, dir) {
    if (this.chrRing == null) {
        this.chrRing = [];
        for (var chr in this.featuresByChr) {
            this.chrRing.push(chr);
        }
        this.chrRing.sort();
    }

    var fa = this.featuresByChr[chr];
    if (!fa) {
        if (chr.indexOf('chr') == 0) {
            chr = chr.substring(3);
            fa = this.featuresByChr[chr];
        } else {
            chr = 'chr' + chr;
            fa = this.featuresByChr[chr];
        }
    }
    if (!fa)
        return null;

    var i = Math.max(0, Math.min(this._indexFor(fa, pos), fa.length - 1));
    if (dir > 0) {
        while (i < fa.length) {
            var f = fa[i++];
            if (f.min > pos)
                return f;
        }
        var chrInd = this.chrRing.indexOf(chr) + 1;
        if (chrInd >= this.chrRing.length)
            chrInd = 0;
        return this.findNextFeature(this.chrRing[chrInd], 0, dir);
    } else {
        while (i >= 0) {
            var f = fa[i--];
            if (f.max < pos)
                return f;
        }
        var chrInd = this.chrRing.indexOf(chr) - 1;
        if (chrInd < 0)
            chrInd = this.chrRing.length - 1;
        return this.findNextFeature(this.chrRing[chrInd], 10000000000, dir);
    }
}

function MemStoreFeatureSource(source) {
    this.source = source;
    FeatureSourceBase.call(this);
    this.storeHolder = new Awaited();
    this.parser = dalliance_makeParser(source.payload);
    if (!this.parser) {
        throw "Unsupported memstore payload: " + source.payload;
    }

    var thisB = this;
    this._load(function(resp, err) {
        if (!resp) {
            thisB.error = err || "No data"
            thisB.storeHolder.provide(null);
        } else {
            var store = new MemStore();
            var features = [];
            var lines = resp.split('\n');

            var session = thisB.parser.createSession(function(f) {features.push(f)});
            for (var li = 0; li < lines.length; ++li) {
                var line = lines[li];
                if (line.length > 0) {
                    session.parse(line);
                }
            }
            session.flush();

            store.addFeatures(features);

            thisB.storeHolder.provide(store);
        }
    });
}

MemStoreFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

MemStoreFeatureSource.prototype._load = function(callback) {
    if (this.source.blob) {
        var r = new FileReader();
        r.onloadend = function() {
            return callback(r.result, r.error);
        }
        r.readAsText(this.source.blob);
    } else {
        textXHR(this.source.uri, callback, {});
    }
}

MemStoreFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, cnt) {
    var thisB = this;
    this.storeHolder.await(function(store) {
        if (store) {
            var f = store.fetch(chr, min, max);
            return cnt(null, f, 100000000);
        } else {
            return cnt(thisB.error)
        }
    });
}

MemStoreFeatureSource.prototype.getStyleSheet = function(callback) {
    if (this.parser && this.parser.getStyleSheet)
        this.parser.getStyleSheet(callback)
}

MemStoreFeatureSource.prototype.getDefaultFIPs = function(callback) {
    if (this.parser && this.parser.getDefaultFIPs)
        this.parser.getDefaultFIPs(callback);
}

MemStoreFeatureSource.prototype.getScales = function() {
    return 100000000;
}

MemStoreFeatureSource.prototype.findNextFeature = function(chr, pos, dir, callback) {
    var thisB = this;
    this.storeHolder.await(function(store) {
        if (store) {
            return callback(store.findNextFeature(chr, pos, dir));
        } else {
            return callback(null, thisB.error);
        }
    });
}


MemStoreFeatureSource.prototype.capabilities = function() {
    var caps = {leap: true};
    return caps;
}

dalliance_registerSourceAdapterFactory('memstore', function(source) {
    return {features: new MemStoreFeatureSource(source)};
});

},{"./das":10,"./sourceadapters":32,"./utils":47}],24:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// memstore.js
//

function formatLongInt(n) {
    return (n|0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')
}

function formatQuantLabel(v) {
    var t = '' + v;
    var dot = t.indexOf('.');
    if (dot < 0) {
        return t;
    } else {
        var dotThreshold = 2;
        if (t.substring(0, 1) == '-') {
            ++dotThreshold;
        }

        if (dot >= dotThreshold) {
            return t.substring(0, dot);
        } else {
            return t.substring(0, dot + 2);
        }
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        formatLongInt: formatLongInt,
        formatQuantLabel: formatQuantLabel
    };
}
},{}],25:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// overlay.js: featuresources composed from multiple underlying sources
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;
}

function OverlayFeatureSource(sources, opts) {
    this.sources = sources;
    this.opts = opts || {};
    this.activityListeners = [];
    this.readinessListeners = [];
    this.changeListeners = [];
    this.business = [];
    this.readiness = [];

    for (var i = 0; i < this.sources.length; ++i) {
        this.initN(i);
    }

    if (opts.merge == 'concat') {
        this.merge = OverlayFeatureSource_merge_concat;
    } else {
        this.merge = OverlayFeatureSource_merge_byKey;
    }
}

OverlayFeatureSource.prototype.initN = function(n) {
    var s = this.sources[n];
    var thisB = this;
    this.business[n] = 0;

    if (s.addActivityListener) {
        s.addActivityListener(function(b) {
            thisB.business[n] = b;
            thisB.notifyActivity();
        });
    }
    if (s.addChangeListener) {
        s.addChangeListener(function() {
            thisB.notifyChange();
        });
    }
    if (s.addReadinessListener) {
        s.addReadinessListener(function(r) {
            thisB.readiness[n] = r;
            thisB.notifyReadiness();
        });
    }
}

OverlayFeatureSource.prototype.addReadinessListener = function(l) {
    this.readinessListeners.push(l);
    this.notifyReadinessListener(l);
}

OverlayFeatureSource.prototype.notifyReadiness = function() {
    for (var i = 0; i < this.readinessListeners.length; ++i) {
        this.notifyReadinessListener(this.readinessListeners[i]);
    }
}

OverlayFeatureSource.prototype.notifyReadinessListener = function(l) {
    var r = null;
    for (var i = 0; i < this.readiness.length; ++i) {
        if (this.readiness[i] != null) {
            r = this.readiness[i]; break;
        }
    }
    try {
        l(r);
    } catch (e) {
        console.log(e);
    }
}

OverlayFeatureSource.prototype.addActivityListener = function(l) {
    this.activityListeners.push(l);
}

OverlayFeatureSource.prototype.notifyActivity = function() {
    var busy = 0;
    for (var i = 0; i < this.business.length; ++i) {
        busy += this.business[i];
    }

    for (var li = 0; li < this.activityListeners.length; ++li) {
        try {
            this.activityListeners[li](busy);
        } catch (e) {
            console.log(e);
        }
    }
}

OverlayFeatureSource.prototype.addChangeListener = function(listener) {
    this.changeListeners.push(listener);
}

OverlayFeatureSource.prototype.notifyChange = function() {
    for (var li = 0; li < this.changeListeners.length; ++li) {
        try {
            this.changeListeners[li](this.busy);
        } catch (e) {
            console.log(e);
        }
    }
}

OverlayFeatureSource.prototype.getScales = function() {
    return this.sources[0].getScales();
}

OverlayFeatureSource.prototype.getStyleSheet = function(callback) {
    return this.sources[0].getStyleSheet(callback);
}

OverlayFeatureSource.prototype.capabilities = function() {
    var caps = {};
    var s0 = this.sources[0];
    if (s0.capabilities) 
        caps = shallowCopy(s0.capabilities());

    for (var i = 1; i < this.sources.length; ++i) {
        var si = this.sources[i];
        if (si.capabilities) {
            var co = si.capabilities();
            if (co.search) {
                caps.search = co.search;
            }
        }
    }

    return caps;
}

OverlayFeatureSource.prototype.search = function(query, callback) {
    for (var i = 0; i < this.sources.length; ++i) {
        if (sourceAdapterIsCapable(this.sources[i], 'search')) {
            return this.sources[i].search(query, callback);
        }
    }
}

OverlayFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var baton = new OverlayBaton(this, callback, this.sources.length);
    for (var si = 0; si < this.sources.length; ++si) {
	this.fetchN(baton, si, chr, min, max, scale, types, pool);
    }
}

OverlayFeatureSource.prototype.fetchN = function(baton, si, chr, min, max, scale, types, pool) {
    this.sources[si].fetch(chr, min, max, scale, types, pool, function(status, features, scale) {
	return baton.completed(si, status, features, scale);
    });
}

OverlayFeatureSource.prototype.quantFindNextFeature = function(chr, pos, dir, threshold, callback) {
    return this.sources[0].quantFindNextFeature(chr, pos, dir, threshold, callback);
}

OverlayFeatureSource.prototype.findNextFeature = function(chr, pos, dir, callback) {
    return this.sources[0].findNextFeature(chr, pos, dir, callback);
}

function OverlayBaton(source, callback, count) {
    this.source = source;
    this.callback = callback;
    this.count = count;

    this.returnCount = 0;
    this.statusCount = 0;
    this.returns = [];
    this.features = []
    this.statuses = [];
    this.scale = null;
}

OverlayBaton.prototype.completed = function(index, status, features, scale) {
    if (this.scale == null || index == 0) 
	   this.scale = scale;

    if (this.returns[index])
	   throw 'Multiple returns for source ' + index;

    this.returns[index] = true;
    this.returnCount++;

    this.features[index] = features;

    if (status) {
    	this.statuses[index] = status;
    	this.statusCount++;
    }


    if (this.returnCount == this.count) {
    	if (this.statusCount > 0) {
    	    var message = '';
    	    for (var si = 0; si < this.count; ++si) {
        		var s = this.statuses[si];
        		if (s) {
        		    if (message.length > 0) 
        			message += ', ';
        		    message += s;
        		}
    	    }
    	    return this.callback(message, null, this.scale);
    	} else {
    	    this.callback(null, this.source.merge(this.features), this.scale);
    	}
    }
}

OverlayFeatureSource.prototype.getDefaultFIPs = function(callback) {
    for (var si = 0; si < this.sources.length; ++si) {
        var s = this.sources[si];
        if (s.getDefaultFIPs)
            s.getDefaultFIPs(callback);
    }
}

OverlayFeatureSource.prototype.keyForFeature = function(feature) {
    return '' + feature.min + '..' + feature.max;
}

function OverlayFeatureSource_merge_byKey(featureSets) {
    var omaps = [];

    for (var fsi = 1; fsi < featureSets.length; ++fsi) {
        var om = {};
        var of = featureSets[fsi];
        for (var fi = 0; fi < of.length; ++fi) {
    	   om[this.keyForFeature(of[fi])] = of[fi];
        }
        omaps.push(om);
    }


    var mf = [];
    var fl = featureSets[0];
    for (var fi = 0; fi < fl.length; ++fi) {
    	var f = fl[fi];

        for (var oi = 0; oi < omaps.length; ++oi) {
            var om = omaps[oi];
        	of = om[this.keyForFeature(f)]
        	if (of) {
                for (var k in of) {
                    if (k === 'score') {
                        f.score2 = of.score;
                    } else if (k === 'min' || k === 'max' || k === 'segment' || k === '_cachedStyle') {
                        // do nothing
                    } else {
                        f[k] = of[k];
                    }
                }
        	}
        }
    	mf.push(f);
    }
    return mf;
}

function OverlayFeatureSource_merge_concat(featureSets) {
    var features = [];
    for (var fsi = 0; fsi < featureSets.length; ++fsi) {
        var fs = featureSets[fsi];
        var name = this.sources[fsi].name;
        for (var fi = 0; fi < fs.length; ++fi) {
            var f = fs[fi];
            f.method = name;
            features.push(f);
        }
    }
    return features;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        OverlayFeatureSource: OverlayFeatureSource
    };
}

},{"./utils":47}],26:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// bedwig.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;
    var BlobFetchable = bin.BlobFetchable;
    var readInt = bin.readInt;

    var bbi = require('./bigwig');
    var BIG_WIG_MAGIC = bbi.BIG_WIG_MAGIC;
    var BIG_BED_MAGIC = bbi.BIG_BED_MAGIC;

    var lh3utils = require('./lh3utils');
    var unbgzf = lh3utils.unbgzf;

    var bam = require('./bam');
    var BAM_MAGIC = bam.BAM_MAGIC;
    var BAI_MAGIC = bam.BAI_MAGIC;

    var tbi = require('./tabix');
    var TABIX_MAGIC = tbi.TABIX_MAGIC;
}

function probeResource(source, listener, retry) {
    var BED_REGEXP = new RegExp('^.+\t[0-9]+\t[0-9]+.*$');
    var KV_REGEXP=/([^=]+)=\"?([^\"]+)\"?/;
    var VCFHEAD_RE = /^##\s*fileformat=VCFv4\..+/;

    var fetchable;
    if (source.blob)
        fetchable = new BlobFetchable(source.blob);
    else 
        fetchable = new URLFetchable(source.uri);

    fetchable.slice(0, 1<<16).salted().fetch(function(result, error) {
        if (!result) {
            if (!retry) {
                source.credentials = true;
                probeResource(source, listener, true)
            }

            return listener(source, "Couldn't fetch data");
        }

        var ba = new Uint8Array(result);
        var la = new Uint32Array(result, 0, 1);
        var magic = la[0];
        if (magic == BIG_WIG_MAGIC || magic == BIG_BED_MAGIC) {
            source.tier_type = 'bwg';
            var nameExtractPattern = new RegExp('/?([^/]+?)(.bw|.bb|.bigWig|.bigBed)?$');
            var match = nameExtractPattern.exec(source.uri || source.blob.name);
            if (match) {
                source.name = match[1];
            }

            return listener(source, null);
        } else if (magic == BAI_MAGIC) {
            source.tier_type = 'bai';
            return listener(source, null);
        } else if (ba[0] == 31 || ba[1] == 139) {
            var unc = unbgzf(result);
            var uncba = new Uint8Array(unc);
            magic = readInt(uncba, 0);
            if (magic == BAM_MAGIC) {
                source.tier_type = 'bam';
                var nameExtractPattern = new RegExp('/?([^/]+?)(.bam)?$');
                var match = nameExtractPattern.exec(source.uri || source.blob.name);
                if (match) {
                    source.name = match[1];
                }

                return listener(source, null);
            } else if (magic == TABIX_MAGIC) {
                source.tier_type = 'tabix-index';
                return listener(source, null);
            } else if (magic == 0x69662323) {
                source.tier_type = 'tabix';
                source.payload = 'vcf';
                var nameExtractPattern = new RegExp('/?([^/]+?)(.vcf)?(.gz)?$');
                var match = nameExtractPattern.exec(source.uri || source.blob.name);
                if (match) {
                    source.name = match[1];
                }

                return listener(source, null);
            } else {
                console.log('magic = ' + magic.toString(16));
               return listener(source, "Unsupported format");
            }
        } else {
            var text = String.fromCharCode.apply(null, ba);
            var lines = text.split("\n");

            if (lines.length > 0 && VCFHEAD_RE.test(lines[0])) {
                source.tier_type = 'memstore';
                source.payload = 'vcf';
                var nameExtractPattern = new RegExp('/?([^/]+?)(\.vcf)?$');
                var match = nameExtractPattern.exec(source.uri || source.blob.name);
                if (match && !source.name) {
                    source.name = match[1];
                }
                return listener(source, null);
            }

            for (var li = 0; li < lines.length; ++li) {
                var line = lines[li].replace('\r', '');
                if (line.length == 0) continue;

                if (line.indexOf('browser') == 0) continue;

                if (line.indexOf('track') == 0) {
                    var maybeType = 'bed';
                    var toks = line.split(/\s/);
                    for (var ti = 1; ti < toks.length; ++ti) {
                        var m = KV_REGEXP.exec(toks[ti]);
                        if (m) {
                            if (m[1] == 'type' && m[2] == 'wiggle_0') {
                                maybeType = 'wig'
                            } else if (m[0] == 'name') {
                                source.name = m[2];
                            }
                        }
                    }

                    finishProbeBedWig(source, maybeType);
                    return listener(source, null);
                }

                if (line.indexOf('fixedStep') == 0) {
                    finishProbeBedWig(source, 'wig');
                    return listener(source, null);
                }

                if (line.indexOf('variableStep') == 0) {
                    finishProbeBedWig(source, 'wig');
                    return listener(source, null);
                }

                if (BED_REGEXP.test(line)) {
                    finishProbeBedWig(source, null);
                    return listener(source, null);
                }

                break;
            }

            return listener(source, "Unsupported format");
        }
    });
}

function finishProbeBedWig(source, maybeType) {
    source.tier_type = 'memstore';
    var nameExtractPattern = new RegExp('/?([^/]+?)(.(bed|wig))?$');
    var match = nameExtractPattern.exec(source.uri || source.blob.name);
    if (match) {
        if (!source.name)
            source.name = match[1];
        if (!maybeType && match[3]) {
            maybeType = match[3];
        }
    }
    source.payload = maybeType || 'bed';
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        probeResource: probeResource
    };
}
},{"./bam":1,"./bigwig":3,"./bin":4,"./lh3utils":22,"./tabix":37}],27:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// sample.js: downsampling of quantitative features
//

"use strict";

if (typeof(require) !== 'undefined') {
    var das = require('./das');
    var DASFeature = das.DASFeature;
}

var __DS_SCALES = [1, 2, 5];

function ds_scale(n) {
    return __DS_SCALES[n % __DS_SCALES.length] * Math.pow(10, (n / __DS_SCALES.length)|0);
}


function DSBin(scale, min, max) {
    this.scale = scale;
    this.tot = 0;
    this.cnt = 0;
    this.hasScore = false;
    this.min = min; this.max = max;
    this.features = [];
}

function _featureOrder(a, b) {
    if (a.min < b.min) {
        return -1;
    } else if (a.min > b.min) {
        return 1;
    } else if (a.max < b.max) {
        return -1;
    } else if (b.max > a.max) {
        return 1;
    } else {
        return 0;
    }
}

DSBin.prototype.score = function() {
    if (this.cnt == 0) {
        return 0;
    } else if (this.hasScore) {
        return this.tot / this.cnt;
    } else {
        var features = this.features;
        features.sort(_featureOrder);

        var maxSeen = -10000000000;
        var cov=0, lap=0;

        for (var fi = 1; fi < features.length; ++fi) {
            var f = features[fi];
            var lMin = Math.max(f.min, this.min);
            var lMax = Math.min(f.max, this.max);
            lap += (lMax - lMin + 1);

            if (lMin > maxSeen) {
                cov += lMax - lMin + 1;
                maxSeen = lMax;
            } else {
                if (lMax > maxSeen) {
                    cov += (lMax - maxSeen);
                    maxSeen = lMax;
                }
            }
        }

        if (cov > 0)
            return (1.0 * lap) / cov;
        else
            return 0;
    }
}

DSBin.prototype.feature = function(f) {
    if (f.score !== undefined) {
        this.tot += f.score;
        this.hasScore = true
    }

    ++this.cnt;
    this.features.push(f);
}

function downsample(features, targetRez) {
    var sn = 0;
    while (ds_scale(sn + 1) < targetRez) {
        ++sn;
    }
    var scale = ds_scale(sn);

    var binTots = [];
    var maxBin = -10000000000;
    var minBin = 10000000000;
    for (var fi = 0; fi < features.length; ++fi) {
        var f = features[fi];
        if (f.groups && f.groups.length > 0) {
            // Don't downsample complex features (?)
            return features;
        }

        var minLap = (f.min / scale)|0;
        var maxLap = (f.max / scale)|0;
        maxBin = Math.max(maxBin, maxLap);
        minBin = Math.min(minBin, minLap);
        for (var b = minLap; b <= maxLap; ++b) {
            var bm = binTots[b];
            if (!bm) {
                bm = new DSBin(scale, b * scale, (b + 1) * scale - 1);
                binTots[b] = bm;
            }
            bm.feature(f);
        }
    }

    var sampledFeatures = [];
    for (var b = minBin; b <= maxBin; ++b) {
        var bm = binTots[b];
        if (bm) {
            var f = new DASFeature();
            f.segment = features[0].segment;
            f.min = (b * scale) + 1;
            f.max = (b + 1) * scale;
            f.score = bm.score();
            f.type = 'density';
            sampledFeatures.push(f);
        }
    }

    var afterDS = Date.now();
    return sampledFeatures;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        downsample: downsample
    };
}

},{"./das":10}],28:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// bin.js general binary data support
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;

    var connectTrix = require('./trix').connectTrix;
}

var REGION_PATTERN = /^([\d+,\w,\.,\_,\-]+):([0-9,\.]+?)([KkMmGg])?((-|\.\.)+([0-9,\.]+)([KkMmGg])?)?$/;

function parseLocCardinal(n, m) {
    var i = parseFloat(n.replace(/,/g, ''));
    if (m === 'k' || m === 'K') {
        return (i * 1000)|0;
    } else if (m == 'm' || m === 'M') {
        return (i * 1000000)|0;
    } else {
        return i|0;
    }
}

Browser.prototype.search = function(g, statusCallback) {
    var thisB = this;
    var m = REGION_PATTERN.exec(g);

    if (m) {
        var chr = m[1], start, end;
        if (m[6]) {
            start = parseLocCardinal(m[2],  m[3]);
            end = parseLocCardinal(m[6], m[7]);
        } else {
            var width = this.viewEnd - this.viewStart + 1;
            start = (parseLocCardinal(m[2], m[3]) - (width/2))|0;
            end = start + width - 1;
        }
        this.setLocation(chr, start, end, statusCallback);
    } else {
        if (!g || g.length == 0) {
            return false;
        }

        var searchCount = 0;
        var foundLatch = false;

        var searchCallback = function(found, err) {
            --searchCount;
            if (err) {
                return statusCallback(err);
            }

            if (!found) found = [];
            var min = 500000000, max = -100000000;
            var nchr = null;
            for (var fi = 0; fi < found.length; ++fi) {
                var f = found[fi];
            
                if (nchr == null) {
                    nchr = f.segment;
                }
                min = Math.min(min, f.min);
                max = Math.max(max, f.max);
            }

            if (!nchr) {
                if (searchCount == 0 && !foundLatch)
                    return statusCallback("no match for '" + g + "'");
            } else {
                foundLatch = true;
                thisB.highlightRegion(nchr, min, max);
            
                var padding = Math.max(2500, (0.3 * (max - min + 1))|0);
                thisB.setLocation(nchr, min - padding, max + padding, statusCallback);
            }
        }

        var doTrixSearch = function(tier, trix) {
            trix.lookup(g, function(result, status) {
                if (result == null || result.length < 2) {
                    return tier.featureSource.search(g, searchCallback);
                } else {
                    var hit = result[1].split(',')[0];
                    return tier.featureSource.search(hit, searchCallback);
                }
            });
        }

        if (this.searchEndpoint) {
            searchCount = 1;
            return this.doDasSearch(thisB.searchEndpoint, g, searchCallback);
        }

        for (var ti = 0; ti < this.tiers.length; ++ti) {
            (function(tier) {
                if (thisB.sourceAdapterIsCapable(tier.featureSource, 'search')) {
                    if (tier.dasSource.trixURI) {
                        ++searchCount;
                        if (tier.trix) {
                            doTrixSearch(tier, tier.trix);
                        } else {
                            connectTrix(new URLFetchable(tier.dasSource.trixURI), new URLFetchable(tier.dasSource.trixURI + 'x'), function(trix) {
                                tier.trix = trix;
                                doTrixSearch(tier, trix);
                            });
                        }
                    } else {
                        ++searchCount;
                        tier.featureSource.search(g, searchCallback);
                    }
                } else if (tier.dasSource.provides_search) {
                    ++searchCount;
                    thisB.doDasSearch(tier.dasSource, g, searchCallback);
                }
            })(this.tiers[ti]);
        }
    }
}

Browser.prototype.doDasSearch = function(source, g, searchCallback) {
    var thisB = this;
    source.features(null, {group: g, type: 'transcript'}, function(found) {
        if (!found) found = [];
        var min = 500000000, max = -100000000;
        var nchr = null;

        var found2 = [];
        for (var fi = 0; fi < found.length; ++fi) {
            var f = found[fi];
            
            if (f.label.toLowerCase() != g.toLowerCase()) {
                // ...because Dazzle can return spurious overlapping features.
                continue;
            }
            found2.push(f);
        }

        return searchCallback(found2);
    }, false);
}
},{"./bin":4,"./cbrowser":6,"./trix":44}],29:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2012
//
// sequence-draw.js: renderers for sequence-related data
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var formatLongInt = utils.formatLongInt;
    var makeElementNS = utils.makeElementNS;

    var svgu = require('./svg-utils');
    var NS_SVG = svgu.NS_SVG;
    var NS_XLINK = svgu.NS_XLINK;
    var SVGPath = svgu.SVGPath;

    var nf = require('./numformats');
    var formatLongInt = nf.formatLongInt;
}

var MIN_TILE = 100;
var rulerTileColors = ['black', 'white'];

var steps = [1,2,5];


var NS_SVG = 'http://www.w3.org/2000/svg';


function tileSizeForScale(scale, min)
{
    if (!min) {
        min = MIN_TILE;
    }

    function ts(p) {
        return steps[p % steps.length] * Math.pow(10, (p / steps.length)|0);
    }
    var pow = steps.length;
    while (scale * ts(pow) < min) {
        ++pow;
    }
    return ts(pow);
}

function drawSeqTier(tier, seq)
{
	var retina = tier.browser.retina && window.devicePixelRatio > 1;
    var scale = tier.browser.scale, knownStart = tier.browser.viewStart - (1000/scale)|0, knownEnd = tier.browser.viewEnd + (2000/scale), currentSeqMax = tier.browser.currentSeqMax;

	var desiredWidth = tier.browser.featurePanelWidth + 2000;
    if (retina) {
        desiredWidth *= 2;
    }
    var fpw = tier.viewport.width|0; // this.browser.featurePanelWidth;
    if (fpw < desiredWidth - 50) {
        tier.viewport.width = fpw = desiredWidth;
    }

    var height = 50;
    if (seq && seq.seq) {
		height += 25;
    }

    var canvasHeight = height;
    if (retina) 
    	canvasHeight *= 2;

    tier.viewport.height = canvasHeight;
    tier.viewport.style.height = '' + height + 'px';
    tier.viewport.style.width = retina ? ('' + (fpw/2) + 'px') : ('' + fpw + 'px');
    tier.layoutHeight = height;
    tier.updateHeight();

    var gc = tier.viewport.getContext('2d');
    if (tier.background) {
        gc.fillStyle = tier.background;
        gc.fillRect(0, 0, fpw, tier.viewport.height);
    }
    if (retina) {
        gc.scale(2, 2);
    }
    gc.translate(1000,0);

    var seqTierMax = knownEnd;
    if (currentSeqMax > 0 && currentSeqMax < knownEnd) {
        seqTierMax = currentSeqMax;
    }
    var tile = tileSizeForScale(scale);
    var pos = Math.max(0, ((knownStart / tile)|0) * tile);
    
    var origin = tier.browser.viewStart;

    while (pos <= seqTierMax) {
		gc.fillStyle = ((pos / tile) % 2 == 0) ? 'white' : 'black';
		gc.strokeStyle = 'black';
		gc.fillRect((pos - origin) * scale,
			    8,
			    tile*scale,
			    3);
		gc.strokeRect((pos - origin) * scale,
			      8,
			      tile*scale,
			      3);

		gc.fillStyle = 'black';
		gc.fillText(formatLongInt(pos), ((pos - origin) * scale), 22);
		

		pos += tile;
    }

    if (seq && seq.seq) {
		for (var p = knownStart; p <= knownEnd; ++p) {
		    if (p >= seq.start && p <= seq.end) {
				var base = seq.seq.substr(p - seq.start, 1).toUpperCase();
				var color = tier.browser.baseColors[base];
				if (!color) {
		            color = 'gray';
				}

				gc.fillStyle = color;

				if (scale >= 8) {
				    gc.fillText(base, (p - origin) * scale, 52);
				} else {
				    gc.fillRect((p - origin) * scale, 42, scale, 12); 
				}
		    }
		}
    } 

    tier.norigin = tier.browser.viewStart;
    tier.viewport.style.left = '-1000px';
}

function svgSeqTier(tier, seq) {
    var scale = tier.browser.scale, knownStart = tier.browser.viewStart - (1000/scale)|0, knownEnd = tier.browser.viewEnd + (2000/scale), currentSeqMax = tier.browser.currentSeqMax;

    var fpw = tier.viewport.width|0; 

    var seqTierMax = knownEnd;
    if (currentSeqMax > 0 && currentSeqMax < knownEnd) {
        seqTierMax = currentSeqMax;
    }
    var tile = tileSizeForScale(scale);
    var pos = Math.max(0, ((knownStart / tile)|0) * tile);
    
    var origin = tier.browser.viewStart;

    var  g = makeElementNS(NS_SVG, 'g', [], {fontSize: '8pt'}); 
    while (pos <= seqTierMax) {
    	g.appendChild(
    	    makeElementNS(
    		NS_SVG, 'rect',
    		null,
    		{x: (pos-origin)*scale,
    		 y: 8,
    		 width: tile*scale,
    		 height: 3,
    		 fill: ((pos / tile) % 2 == 0) ? 'white' : 'black',
    		 stroke: 'black'}));

    	g.appendChild(
    	    makeElementNS(
    		NS_SVG, 'text',
    		formatLongInt(pos),
    		{x: (pos-origin)*scale,
    		 y: 28,
    		 fill: 'black', stroke: 'none'}));
    	
    	pos += tile;
    }

    if (seq && seq.seq) {
    	for (var p = knownStart; p <= knownEnd; ++p) {
    	    if (p >= seq.start && p <= seq.end) {
        		var base = seq.seq.substr(p - seq.start, 1).toUpperCase();
        		var color = baseColors[base];
        		if (!color) {
                    color = 'gray';
        		}

        		if (scale >= 8) {
        		    g.appendChild(
        			makeElementNS(NS_SVG, 'text', base, {
        			    x: (p-origin)*scale,
        			    y: 52,
        			    fill: color}));
        		} else {
        		    g.appendChild(
        			makeElementNS(NS_SVG, 'rect', null, {
        			    x: (p - origin)*scale,
        			    y: 42,
        			    width: scale,
        			    height: 12,
        	            fill: color}));

        		}
    	    }
    	}
    } 

    return g;
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        drawSeqTier: drawSeqTier,
        svgSeqTier: svgSeqTier
    };
}

},{"./numformats":24,"./svg-utils":35,"./utils":47}],30:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// session.js
//

"use strict";

if (typeof(require) != 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;
    var sourceDataURI = browser.sourceDataURI;
    var sourcesAreEqual = browser.sourcesAreEqual;

    var VERSION = require('./version');

    var utils = require('./utils');
    var miniJSONify = utils.miniJSONify;

    var sha1 = require('./sha1');
    var hex_sha1 = sha1.hex_sha1;
}

Browser.prototype.nukeStatus = function() {
    delete localStorage['dalliance.' + this.cookieKey + '.view-chr'];
    delete localStorage['dalliance.' + this.cookieKey + '.view-start'];
    delete localStorage['dalliance.' + this.cookieKey + '.view-end'];
    delete localStorage['dalliance.' + this.cookieKey + '.current-seq-length'];
    delete localStorage['dalliance.' + this.cookieKey + '.showing-alt-zoom'];
    delete localStorage['dalliance.' + this.cookieKey + '.saved-zoom'];

    delete localStorage['dalliance.' + this.cookieKey + '.sources'];
    delete localStorage['dalliance.' + this.cookieKey + '.hubs'];
    delete localStorage['dalliance.' + this.cookieKey + '.version'];

    delete localStorage['dalliance.' + this.cookieKey + '.reverse-scrolling'];
    delete localStorage['dalliance.' + this.cookieKey + '.reverse-key-scrolling'];
    delete localStorage['dalliance.' + this.cookieKey + '.ruler-location'];
}

Browser.prototype.storeStatus = function() {
    this.storeViewStatus();
    this.storeTierStatus();
}

Browser.prototype.storeViewStatus = function() {
    if (!this.cookieKey || this.noPersist || this.noPersistView) {
        return;
    }

    localStorage['dalliance.' + this.cookieKey + '.view-chr'] = this.chr;
    localStorage['dalliance.' + this.cookieKey + '.view-start'] = this.viewStart|0;
    localStorage['dalliance.' + this.cookieKey + '.view-end'] = this.viewEnd|0
    localStorage['dalliance.' + this.cookieKey + '.showing-alt-zoom'] = '' + this.isSnapZooming;
    localStorage['dalliance.' + this.cookieKey + '.saved-zoom'] = this.savedZoom;
    if (this.currentSeqMax) {
	   localStorage['dalliance.' + this.cookieKey + '.current-seq-length'] = this.currentSeqMax;
    }
}


Browser.prototype.storeTierStatus = function() {
    if (!this.cookieKey || this.noPersist) {
        return;
    }

    var currentSourceList = [];
    for (var t = 0; t < this.tiers.length; ++t) {
        var tt = this.tiers[t];
        var ts = tt.dasSource;
        if (!ts.noPersist) {
            currentSourceList.push({source: tt.dasSource, config: tt.config || {}});
        }
    }
    localStorage['dalliance.' + this.cookieKey + '.sources'] = JSON.stringify(currentSourceList);


    var coveredHubURLs = {};
    var currentHubList = [];
    for (var hi = 0; hi < this.hubObjects.length; ++hi) {
        var tdb = this.hubObjects[hi];
        var hc = {url: tdb.hub.url, genome: tdb.genome};
        if (tdb.credentials)
            hc.credentials = tdb.credentials;
        if (tdb.mapping)
            hc.mapping = tdb.mapping;
        coveredHubURLs[hc.url] = true;
        currentHubList.push(hc);
    }

    // Needed to handle hubs that failed to connect, or hubs that haven't
    // connected yet when we're called soon after startup.
    for (var hi = 0; hi < this.hubs.length; ++hi) {
        var hc = this.hubs[hi];
        if (typeof hc === 'string')
            hc = {url: hc};
        if (!coveredHubURLs[hc.url])
            currentHubList.push(hc);
    }

    localStorage['dalliance.' + this.cookieKey + '.hubs'] = JSON.stringify(currentHubList);

    localStorage['dalliance.' + this.cookieKey + '.reverse-scrolling'] = this.reverseScrolling;
    localStorage['dalliance.' + this.cookieKey + '.reverse-key-scrolling'] = this.reverseKeyScrolling;
    localStorage['dalliance.' + this.cookieKey + '.ruler-location'] = this.rulerLocation;

    localStorage['dalliance.' + this.cookieKey + '.export-ruler'] = this.exportRuler;
    localStorage['dalliance.' + this.cookieKey + '.export-highlights'] = this.exportHighlights;
    
    localStorage['dalliance.' + this.cookieKey + '.version'] = VERSION.CONFIG;
}

Browser.prototype.restoreStatus = function() {
    if (this.noPersist)
        return;
    
    var storedConfigVersion = localStorage['dalliance.' + this.cookieKey + '.version'];
    if (storedConfigVersion) {
        storedConfigVersion = storedConfigVersion|0;
    } else {
        storedConfigVersion = -100;
    }
    if (VERSION.CONFIG != storedConfigVersion) {
        return;
    }

    var storedConfigHash = localStorage['dalliance.' + this.cookieKey + '.configHash'] || '';
    var pageConfigHash = hex_sha1(miniJSONify({sources: this.sources, hubs: this.hubs}));
    if (pageConfigHash != storedConfigHash) {
        localStorage['dalliance.' + this.cookieKey + '.configHash'] = pageConfigHash;
        return;
    }

    var defaultSourcesByURI = {};
    for (var si = 0; si < this.sources.length; ++si) {
        var source = this.sources[si];
        var uri = sourceDataURI(source);
        var ul = defaultSourcesByURI[uri];
        if (!ul)
            defaultSourcesByURI[uri] = ul = [];
        ul.push(source);
        
    }

    if (!this.noPersistView) {
        var qChr = localStorage['dalliance.' + this.cookieKey + '.view-chr'];
        var qMin = localStorage['dalliance.' + this.cookieKey + '.view-start']|0;
        var qMax = localStorage['dalliance.' + this.cookieKey + '.view-end']|0;
        if (qChr && qMin && qMax) {
        	this.chr = qChr;
        	this.viewStart = qMin;
        	this.viewEnd = qMax;
        	
        	var csm = localStorage['dalliance.' + this.cookieKey + '.current-seq-length'];
        	if (csm) {
        	    this.currentSeqMax = csm|0;
        	}

            this.isSnapZooming = (localStorage['dalliance.' + this.cookieKey + '.showing-alt-zoom']) == 'true';

            var sz = parseFloat(localStorage['dalliance.' + this.cookieKey + '.saved-zoom']);
            if (typeof sz === 'number' && !isNaN(sz)) {
                this.savedZoom = sz;
            }
        }
    }

    var rs = localStorage['dalliance.' + this.cookieKey + '.reverse-scrolling'];
    this.reverseScrolling = (rs && rs == 'true');
    var rks = localStorage['dalliance.' + this.cookieKey + '.reverse-key-scrolling'];
    this.reverseKeyScrolling = (rks && rks == 'true');

    var rl = localStorage['dalliance.' + this.cookieKey + '.ruler-location'];
    if (rl)
        this.rulerLocation = rl;

    var x = localStorage['dalliance.' + this.cookieKey + '.export-ruler'];
    if (x)
        this.exportRuler = (x === 'true');
    var x = localStorage['dalliance.' + this.cookieKey + '.export-highlights'];
    if (x)
        this.exportHighlights = (x === 'true');

    var sourceStr = localStorage['dalliance.' + this.cookieKey + '.sources'];
    if (sourceStr) {
	    var storedSources = JSON.parse(sourceStr);
        this.sources = [];
        this.restoredConfigs = [];
        for (var si = 0; si < storedSources.length; ++si) {
            var source = this.sources[si] = storedSources[si].source;
            this.restoredConfigs[si] = storedSources[si].config;
            var uri = sourceDataURI(source);
            var ul = defaultSourcesByURI[uri] || [];
            for (var osi = 0; osi < ul.length; ++osi) {    
                var oldSource = ul[osi];
                if (sourcesAreEqual(source, oldSource)) {
                    if (oldSource.featureInfoPlugin) {
                        source.featureInfoPlugin = oldSource.featureInfoPlugin;
                    }
                }
            }
        }
    }

    var hubStr = localStorage['dalliance.' + this.cookieKey + '.hubs'];
    if (hubStr) {
        this.hubs = JSON.parse(hubStr);
    }

    return true;
}

Browser.prototype.reset = function() {
    for (var i = this.tiers.length - 1; i >= 0; --i) {
       this.removeTier({index: i}, true);
    }
    for (var i = 0; i < this.defaultSources.length; ++i) {
        var s = this.defaultSources[i];
        if (!s.disabled) 
            this.addTier(this.defaultSources[i]);
    }

    this.highlights.splice(0, this.highlights.length);

    this.setLocation(this.defaultChr, this.defaultStart, this.defaultEnd);
}
},{"./cbrowser":6,"./sha1":31,"./utils":47,"./version":49}],31:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS 180-1
 * Version 2.2 Copyright Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

 "use strict";

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }
function b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }
function any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }
function hex_hmac_sha1(k, d)
  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_sha1(k, d)
  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_sha1(k, d, e)
  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function sha1_vm_test()
{
  return hex_sha1("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";
}

/*
 * Calculate the SHA1 of a raw string
 */
function rstr_sha1(s)
{
  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
}

/*
 * Calculate the HMAC-SHA1 of a key and some data (raw strings)
 */
function rstr_hmac_sha1(key, data)
{
  var bkey = rstr2binb(key);
  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  // try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var output = "";
  var x;
  for(var i = 0; i < input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x >>> 4) & 0x0F)
           +  hex_tab.charAt( x        & 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  // try { b64pad } catch(e) { b64pad=''; }
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var output = "";
  var len = input.length;
  for(var i = 0; i < len; i += 3)
  {
    var triplet = (input.charCodeAt(i) << 16)
                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > input.length * 8) output += b64pad;
      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var remainders = Array();
  var i, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i < dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. We stop when the dividend is zero.
   * All remainders are stored for later use.
   */
  while(dividend.length > 0)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i < dividend.length; i++)
    {
      x = (x << 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length > 0 || q > 0)
        quotient[quotient.length] = q;
    }
    remainders[remainders.length] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = "";
  for(i = remainders.length - 1; i >= 0; i--)
    output += encoding.charAt(remainders[i]);

  /* Append leading zero equivalents */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)))
  for(i = output.length; i < full_length; i++)
    output = encoding[0] + output;

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = "";
  var i = -1;
  var x, y;

  while(++i < input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
    {
      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x <= 0x7F)
      output += String.fromCharCode(x);
    else if(x <= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                    0x80 | ((x >>> 12) & 0x3F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                  (input.charCodeAt(i) >>> 8) & 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                   input.charCodeAt(i)        & 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of big-endian words
 * Characters >255 have their high-byte silently ignored.
 */
function rstr2binb(input)
{
  var output = Array(input.length >> 2);
  for(var i = 0; i < output.length; i++)
    output[i] = 0;
  for(var i = 0; i < input.length * 8; i += 8)
    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
  return output;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2rstr(input)
{
  var output = "";
  for(var i = 0; i < input.length * 32; i += 8)
    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);
  return output;
}

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function binb_sha1(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << (24 - len % 32);
  x[((len + 64 >> 9) << 4) + 15] = len;

  var w = Array(80);
  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    var olde = e;

    for(var j = 0; j < 80; j++)
    {
      if(j < 16) w[j] = x[i + j];
      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = bit_rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return Array(a, b, c, d, e);

}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d)
{
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

if (typeof(module) !== 'undefined') {
  module.exports = {
    b64_sha1: b64_sha1,
    hex_sha1: hex_sha1
  }
}

},{}],32:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// sourceadapters.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var tier = require('./tier');
    var DasTier = tier.DasTier;

    var utils = require('./utils')
    var Awaited = utils.Awaited;
    var arrayIndexOf = utils.arrayIndexOf;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASSource = das.DASSource;
    var DASSegment = das.DASSegment;
    var DASFeature = das.DASFeature;
    var DASSequence = das.DASSequence;

    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;
    var BlobFetchable = bin.BlobFetchable;

    var twoBit = require('./twoBit');
    var makeTwoBit = twoBit.makeTwoBit;

    var bbi = require('./bigwig');
    var makeBwg = bbi.makeBwg;

    var bam = require('./bam');
    var makeBam = bam.makeBam;
    var BamFlags = bam.BamFlags;

    var spans = require('./spans');
    var Range = spans.Range;

    var parseCigar = require('./cigar').parseCigar;

    var OverlayFeatureSource = require('./overlay').OverlayFeatureSource;

    var JBrowseStore = require('./jbjson').JBrowseStore;
}

var __dalliance_sourceAdapterFactories = {};

function dalliance_registerSourceAdapterFactory(type, factory) {
    __dalliance_sourceAdapterFactories[type] = factory;
};


var __dalliance_parserFactories = {};

function dalliance_registerParserFactory(type, factory) {
    __dalliance_parserFactories[type] = factory;
};

function dalliance_makeParser(type) {
    if (__dalliance_parserFactories[type]) {
        return __dalliance_parserFactories[type](type);
    }
};


DasTier.prototype.initSources = function() {
    var thisTier = this;
    var fs = new DummyFeatureSource(), ss;

    if (this.dasSource.tier_type == 'sequence') {
        if (this.dasSource.twoBitURI) {
            ss = new TwoBitSequenceSource(this.dasSource);
        } else {
            ss = new DASSequenceSource(this.dasSource);
        }
    } else {
        fs = this.browser.createFeatureSource(this.dasSource);
    }

    this.featureSource = fs;
    this.sequenceSource = ss;

    if (this.featureSource && this.featureSource.addChangeListener) {
        this.featureSource.addChangeListener(function() {
            thisTier.browser.refreshTier(thisTier);
        });
    }
}

Browser.prototype.createFeatureSource = function(config) {
    var fs = this.sourceCache.get(config);
    if (fs) {
        return fs;
    }

    if (config.tier_type && __dalliance_sourceAdapterFactories[config.tier_type]) {
        var saf = __dalliance_sourceAdapterFactories[config.tier_type];
        fs = saf(config).features;
    } else if (config.bwgURI || config.bwgBlob) {
        var worker = this.getWorker();
        if (worker)
            fs = new RemoteBWGFeatureSource(config, worker);
        else
            fs = new BWGFeatureSource(config);
    } else if (config.bamURI || config.bamBlob) {
        var worker = this.getWorker();
        if (worker)
            fs = new RemoteBAMFeatureSource(config, worker);
        else
            fs = new BAMFeatureSource(config);
    } else if (config.jbURI) {
        fs = new JBrowseFeatureSource(config);
    } else if (config.uri || config.features_uri) {
        fs = new DASFeatureSource(config);
    }

    if (config.overlay) {
        var sources = [];
        if (fs)
            sources.push(new CachingFeatureSource(fs));

        for (var oi = 0; oi < config.overlay.length; ++oi) {
            sources.push(this.createFeatureSource(config.overlay[oi]));
        }
        fs = new OverlayFeatureSource(sources, config);
    }

    if (config.mapping) {
        fs = new MappedFeatureSource(fs, this.chains[config.mapping]);
    }

    if (config.name && !fs.name) {
        fs.name = config.name;
    }

    if (fs != null) {
        fs = new CachingFeatureSource(fs);
        this.sourceCache.put(config, fs);
    }
    return fs;
}

DasTier.prototype.fetchStylesheet = function(cb) {
    var ssSource;
    if (this.dasSource.stylesheet_uri) {
        ssSource = new DASFeatureSource(this.dasSource);
    } else {
        ssSource = this.getSource();
    }
    
    ssSource.getStyleSheet(cb);
}

var __cfs_id_seed = 0;

function CachingFeatureSource(source) {
    var thisB = this;

    this.source = source;
    this.cfsid = 'cfs' + (++__cfs_id_seed);
    if (source.name) {
        this.name = source.name;
    }
    if (source.addChangeListener) {
        source.addChangeListener(function() {
            thisB.cfsid = 'cfs' + (++__cfs_id_seed);
        });
    }
}

CachingFeatureSource.prototype.addReadinessListener = function(listener) {
    if (this.source.addReadinessListener)
        return this.source.addReadinessListener(listener);
    else
        listener(null);
}

CachingFeatureSource.prototype.search = function(query, callback) {
    if (this.source.search)
        return this.source.search(query, callback);
}

CachingFeatureSource.prototype.getDefaultFIPs = function(callback) {
    if (this.source.getDefaultFIPs)
        return this.source.getDefaultFIPs(callback); 
}

CachingFeatureSource.prototype.getStyleSheet = function(callback) {
    this.source.getStyleSheet(callback);
}

CachingFeatureSource.prototype.getScales = function() {
    return this.source.getScales();
}

CachingFeatureSource.prototype.addActivityListener = function(l) {
    if (this.source.addActivityListener) {
        this.source.addActivityListener(l);
    }
}

CachingFeatureSource.prototype.addChangeListener = function(l) {
    if (this.source.addChangeListener)
        this.source.addChangeListener(l);
}

CachingFeatureSource.prototype.findNextFeature = function(chr, pos, dir, callback) {
    this.source.findNextFeature(chr, pos, dir, callback);
}

CachingFeatureSource.prototype.quantFindNextFeature = function(chr, pos, dir, threshold, callback) {
    this.source.quantFindNextFeature(chr, pos, dir, threshold, callback);
}

CachingFeatureSource.prototype.capabilities = function() {
    if (this.source.capabilities) {
        return this.source.capabilities();
    } else {
        return {};
    }
}

CachingFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    if (pool == null) {
        throw 'pool is null...';
    }

    var awaitedFeatures = pool.awaitedFeatures[this.cfsid];
    if (!awaitedFeatures) {
        var awaitedFeatures = new Awaited();
        pool.awaitedFeatures[this.cfsid] = awaitedFeatures;
        this.source.fetch(chr, min, max, scale, types, pool, function(status, features, scale, coverage) {
            if (!awaitedFeatures.res)
                awaitedFeatures.provide({status: status, features: features, scale: scale, coverage: coverage});
        });
    } 

    awaitedFeatures.await(function(af) {
        callback(af.status, af.features, af.scale, af.coverage);
    });
}
    
function FeatureSourceBase() {
    this.busy = 0;
    this.activityListeners = [];
    this.readinessListeners = [];
    this.readiness = null;
}

FeatureSourceBase.prototype.addReadinessListener = function(listener) {
    this.readinessListeners.push(listener);
    listener(this.readiness);
}

FeatureSourceBase.prototype.notifyReadiness = function() {
    for (var li = 0; li < this.readinessListeners.length; ++li) {
        try {
            this.readinessListeners[li](this.readiness);
        } catch (e) {
            console.log(e);
        }
    }
}

FeatureSourceBase.prototype.addActivityListener = function(listener) {
    this.activityListeners.push(listener);
}

FeatureSourceBase.prototype.notifyActivity = function() {
    for (var li = 0; li < this.activityListeners.length; ++li) {
        try {
            this.activityListeners[li](this.busy);
        } catch (e) {
            console.log(e);
        }
    }
}

FeatureSourceBase.prototype.getScales = function() {
    return null;
}

FeatureSourceBase.prototype.fetch = function(chr, min, max, scale, types, pool, cnt) {
    return cnt(null, [], 1000000000);
}

FeatureSourceBase.prototype.getStyleSheet = function(callback) {
    var stylesheet = new DASStylesheet();
    var defStyle = new DASStyle();
    defStyle.glyph = 'BOX';
    defStyle.BGCOLOR = 'blue';
    defStyle.FGCOLOR = 'black';
    stylesheet.pushStyle({type: 'default'}, null, defStyle);
    return callback(stylesheet);
}



function DASFeatureSource(dasSource) {
    this.dasSource = new DASSource(dasSource);
    this.busy = 0;
    this.activityListeners = [];
}

DASFeatureSource.prototype.addActivityListener = function(listener) {
    this.activityListeners.push(listener);
}

DASFeatureSource.prototype.notifyActivity = function() {
    for (var li = 0; li < this.activityListeners.length; ++li) {
        try {
            this.activityListeners[li](this.busy);
        } catch (e) {
            console.log(e);
        }
    }
}

DASFeatureSource.prototype.getStyleSheet = function(callback) {
    this.dasSource.stylesheet(function(stylesheet) {
	callback(stylesheet);
    }, function() {
	callback(null, "Couldn't fetch DAS stylesheet");
    });
}

DASFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    if (types && types.length == 0) {
        callback(null, [], scale);
        return;
    }

    if (!this.dasSource.uri && !this.dasSource.features_uri) {
        // FIXME should this be making an error callback???
        return;
    }

    if (this.dasSource.dasStaticFeatures && this.cachedStaticFeatures) {
        return callback(null, this.cachedStaticFeatures, this.cachedStaticScale);
    }

    var tryMaxBins = (this.dasSource.maxbins !== false);
    var fops = {
        type: types
    };
    if (tryMaxBins) {
        fops.maxbins = 1 + (((max - min) / scale) | 0);
    }
    
    var thisB = this;
    thisB.busy++;
    thisB.notifyActivity();

    this.dasSource.features(
        new DASSegment(chr, min, max),
        fops,
        function(features, status) {
            
            thisB.busy--;
            thisB.notifyActivity();

            var retScale = scale;
            if (!tryMaxBins) {
                retScale = 0.1;
            }
            if (!status && thisB.dasSource.dasStaticFeatures) {
                thisB.cachedStaticFeatures = features;
                thisB.cachedStaticScale = retScale;
            }
            callback(status, features, retScale);
        }
    );
}

DASFeatureSource.prototype.findNextFeature = this.sourceFindNextFeature = function(chr, pos, dir, callback) {
    if (this.dasSource.capabilities && arrayIndexOf(this.dasSource.capabilities, 'das1:adjacent-feature') >= 0) {
        var thisB = this;
        if (this.dasAdjLock) {
            return dlog('Already looking for a next feature, be patient!');
        }
        this.dasAdjLock = true;
        var fops = {
            adjacent: chr + ':' + (pos|0) + ':' + (dir > 0 ? 'F' : 'B')
        }
        var types = thisTier.getDesiredTypes(thisTier.browser.scale);
        if (types) {
            fops.types = types;
        }
        thisTier.dasSource.features(null, fops, function(res) {
            thisB.dasAdjLock = false;
            if (res.length > 0 && res[0] != null) {
                dlog('DAS adjacent seems to be working...');
                callback(res[0]);
            }
        });
    }
};

function DASSequenceSource(dasSource) {
    this.dasSource = new DASSource(dasSource);
    this.awaitedEntryPoints = new Awaited();

    var thisB = this;
    this.dasSource.entryPoints(
        function(ep) {
            thisB.awaitedEntryPoints.provide(ep);
        });
}


DASSequenceSource.prototype.fetch = function(chr, min, max, pool, callback) {
    this.dasSource.sequence(
        new DASSegment(chr, min, max),
        function(seqs) {
            if (seqs.length == 1) {
                return callback(null, seqs[0]);
            } else {
                return callback("Didn't get sequence");
            }
        }
    );
}

DASSequenceSource.prototype.getSeqInfo = function(chr, cnt) {
    this.awaitedEntryPoints.await(function(ep) {
        for (var epi = 0; epi < ep.length; ++epi) {
            if (ep[epi].name == chr) {
                return cnt({length: ep[epi].end});
            }
        }
        return cnt();
    });
}
    

function TwoBitSequenceSource(source) {
    var thisB = this;
    this.source = source;
    this.twoBit = new Awaited();
    makeTwoBit(new URLFetchable(source.twoBitURI), function(tb, error) {
        if (error) {
            dlog(error);
        } else {
            thisB.twoBit.provide(tb);
        }
    });
}

TwoBitSequenceSource.prototype.fetch = function(chr, min, max, pool, callback) {
        this.twoBit.await(function(tb) {
            tb.fetch(chr, min, max,
                     function(seq, err) {
                         if (err) {
                             return callback(err, null);
                         } else {
                             var sequence = new DASSequence(chr, min, max, 'DNA', seq);
                             return callback(null, sequence);
                         }
                     })
        });
}

TwoBitSequenceSource.prototype.getSeqInfo = function(chr, cnt) {
    this.twoBit.await(function(tb) {
        var seq = tb.getSeq(chr);
        if (seq) {
            tb.getSeq(chr).length(function(l) {
                cnt({length: l});
            });
        } else {
            cnt();
        }
    });
}

DASFeatureSource.prototype.getScales = function() {
    return [];
}

var bwg_preflights = {};

function BWGFeatureSource(bwgSource) {
    FeatureSourceBase.call(this);

    var thisB = this;
    this.readiness = 'Connecting';
    this.bwgSource = this.opts = bwgSource;    
    thisB.bwgHolder = new Awaited();

    if (this.opts.preflight) {
        var pfs = bwg_preflights[this.opts.preflight];
        if (!pfs) {
            pfs = new Awaited();
            bwg_preflights[this.opts.preflight] = pfs;

            var req = new XMLHttpRequest();
            req.onreadystatechange = function() {
                if (req.readyState == 4) {
                    if (req.status == 200) {
                        pfs.provide('success');
                    } else {
                        pfs.provide('failure');
                    }
                }
            };
            req.open('get', this.opts.preflight + '?' + hex_sha1('salt' + Date.now()), true);    // Instead, ensure we always preflight a unique URI.
            if (this.opts.credentials) {
                req.withCredentials = true;
            }
            req.send('');
        }
        pfs.await(function(status) {
            if (status === 'success') {
                thisB.init();
            }
        });
    } else {
        thisB.init();
    }
}

BWGFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

BWGFeatureSource.prototype.init = function() {
    var thisB = this;
    var arg;
    if (this.bwgSource.bwgURI) {
        arg = new URLFetchable(this.bwgSource.bwgURI, {credentials: this.opts.credentials});
    } else {
        arg = new BlobFetchable(this.bwgSource.bwgBlob);
    }

    makeBwg(arg, function(bwg, err) {
        if (err) {
            thisB.error = err;
            thisB.readiness = null;
            thisB.notifyReadiness();
            thisB.bwgHolder.provide(null);
        } else {
            thisB.bwgHolder.provide(bwg);
            thisB.readiness = null;
            thisB.notifyReadiness();
            if (bwg.type == 'bigbed') {
                bwg.getExtraIndices(function(ei) {
                    thisB.extraIndices = ei;
                });
            }
        }
    });
}

BWGFeatureSource.prototype.capabilities = function() {
    var caps = {leap: true};
    if (this.bwgHolder.res && this.bwgHolder.res.type == 'bigwig')
        caps.quantLeap = true;
    if (this.extraIndices && this.extraIndices.length > 0) {
        caps.search = [];
        for (var eii = 0; eii < this.extraIndices.length; ++eii) {
            caps.search.push(this.extraIndices[eii].field);
        }
    }
    return caps;
}

BWGFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var thisB = this;
    this.bwgHolder.await(function(bwg) {
        if (bwg == null) {
            return callback(thisB.error || "Can't access binary file", null, null);
        }

        // dlog('bwg: ' + bwg.name + '; want scale: ' + scale);
        var data;
        // dlog(miniJSONify(types));
        var wantDensity = !types || types.length == 0 || arrayIndexOf(types, 'density') >= 0;
/*        if (wantDensity) {
            dlog('want density; scale=' + scale);
        } */
        if (thisB.opts.clientBin) {
            wantDensity = false;
        }
        if (bwg.type == 'bigwig' || wantDensity || (typeof thisB.opts.forceReduction !== 'undefined')) {
            var zoom = -1;
            for (var z = 0; z < bwg.zoomLevels.length; ++z) {
                if (bwg.zoomLevels[z].reduction <= scale) {
                    zoom = z;
                } else {
                    break;
                }
            }
            if (typeof thisB.opts.forceReduction !== 'undefined') {
                zoom = thisB.opts.forceReduction;
            }
           // dlog('selected zoom: ' + zoom);
            if (zoom < 0) {
                data = bwg.getUnzoomedView();
            } else {
                data = bwg.getZoomedView(zoom);
            }
        } else {
            data = bwg.getUnzoomedView();
        }
        
        thisB.busy++;
        thisB.notifyActivity();
        data.readWigData(chr, min, max, function(features) {
            thisB.busy--;
            thisB.notifyActivity();

            var fs = 1000000000;
            if (bwg.type === 'bigwig') {
                var is = (max - min) / features.length / 2;
                if (is < fs) {
                    fs = is;
                }
            }
            if (thisB.opts.link) {
                for (var fi = 0; fi < features.length; ++fi) {
                    var f = features[fi];
                    if (f.label) {
                        f.links = [new DASLink('Link', thisB.opts.link.replace(/\$\$/, f.label))];
                    }
                }
            }
            callback(null, features, fs);
        });
    });
}

BWGFeatureSource.prototype.quantFindNextFeature = function(chr, pos, dir, threshold, callback) {
    // var beforeQFNF = Date.now()|0;
    var thisB = this;
    thisB.busy++;
    thisB.notifyActivity();
    this.bwgHolder.res.thresholdSearch(chr, pos, dir, threshold, function(a, b) {
        thisB.busy--;
        thisB.notifyActivity();
        // var afterQFNF = Date.now()|0;
        // console.log('QFNF took ' + (afterQFNF - beforeQFNF) + 'ms');
        return callback(a, b);
    });
}

BWGFeatureSource.prototype.findNextFeature = function(chr, pos, dir, callback) {
    var thisB = this;
    thisB.busy++;
    thisB.notifyActivity();
    this.bwgHolder.res.getUnzoomedView().getFirstAdjacent(chr, pos, dir, function(res) {
        thisB.busy--;
        thisB.notifyActivity();
        if (res.length > 0 && res[0] != null) {
            callback(res[0]);
        }
    });
}

BWGFeatureSource.prototype.getScales = function() {
    var bwg = this.bwgHolder.res;
    if (bwg /* && bwg.type == 'bigwig' */) {
        var scales = [1];  // Can we be smarter about inferring baseline scale?
        for (var z = 0; z < bwg.zoomLevels.length; ++z) {
            scales.push(bwg.zoomLevels[z].reduction);
        }
        return scales;
    } else {
        return null;
    }
}

BWGFeatureSource.prototype.search = function(query, callback) {
    if (!this.extraIndices || this.extraIndices.length == 0) {
        return callback(null, 'No indices available');
    }

    var index = this.extraIndices[0];
    return index.lookup(query, callback);
}

BWGFeatureSource.prototype.getDefaultFIPs = function(callback) {
    if (this.opts.noExtraFeatureInfo)
        return true;

    this.bwgHolder.await(function(bwg) {
        if (!bwg) return;

        if (bwg.schema && bwg.definedFieldCount < bwg.schema.fields.length) {
            var fip = function(feature, featureInfo) {
                for (var hi = 0; hi < featureInfo.hit.length; ++hi) {
                    if (featureInfo.hit[hi].isSuperGroup)
                        return;
                }
                for (var fi = bwg.definedFieldCount; fi < bwg.schema.fields.length; ++fi) {
                    var f = bwg.schema.fields[fi];
                    featureInfo.add(f.comment, feature[f.name]);
                }
            };

            callback(fip);
        } else {
            // No need to do anything.
        }
    });
}

BWGFeatureSource.prototype.getStyleSheet = function(callback) {
    var thisB = this;

    this.bwgHolder.await(function(bwg) {
        if (!bwg) {
            return callback(null, 'bbi error');
        }

    	var stylesheet = new DASStylesheet();
        if (bwg.type == 'bigbed') {
            var wigStyle = new DASStyle();
            wigStyle.glyph = 'BOX';
            wigStyle.FGCOLOR = 'black';
            wigStyle.BGCOLOR = 'blue'
            wigStyle.HEIGHT = 8;
            wigStyle.BUMP = true;
            wigStyle.LABEL = true;
            wigStyle.ZINDEX = 20;
            stylesheet.pushStyle({type: 'bigwig'}, null, wigStyle);
	    
            wigStyle.glyph = 'BOX';
            wigStyle.FGCOLOR = 'black';
            wigStyle.BGCOLOR = 'red'
            wigStyle.HEIGHT = 10;
            wigStyle.BUMP = true;
            wigStyle.ZINDEX = 20;
            stylesheet.pushStyle({type: 'translation'}, null, wigStyle);
                    
            var tsStyle = new DASStyle();
            tsStyle.glyph = 'BOX';
            tsStyle.FGCOLOR = 'black';
            tsStyle.BGCOLOR = 'white';
            tsStyle.HEIGHT = 10;
            tsStyle.ZINDEX = 10;
            tsStyle.BUMP = true;
            tsStyle.LABEL = true;
            stylesheet.pushStyle({type: 'transcript'}, null, tsStyle);

            var densStyle = new DASStyle();
            densStyle.glyph = 'HISTOGRAM';
            densStyle.COLOR1 = 'white';
            densStyle.COLOR2 = 'black';
            densStyle.HEIGHT=30;
            stylesheet.pushStyle({type: 'density'}, null, densStyle);
        } else {
            var wigStyle = new DASStyle();
            wigStyle.glyph = 'HISTOGRAM';
            wigStyle.COLOR1 = 'white';
            wigStyle.COLOR2 = 'black';
            wigStyle.HEIGHT=30;
            stylesheet.pushStyle({type: 'default'}, null, wigStyle);
        }

        if (bwg.definedFieldCount == 12 && bwg.fieldCount >= 14) {
            stylesheet.geneHint = true;
        }

    	return callback(stylesheet);
    });
}

function RemoteBWGFeatureSource(bwgSource, worker) {
    FeatureSourceBase.call(this);

    this.worker = worker;
    this.readiness = 'Connecting';
    this.bwgSource = this.opts = bwgSource;
    this.keyHolder = new Awaited();
    this.init();
}

RemoteBWGFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

RemoteBWGFeatureSource.prototype.init = function() {
    var thisB = this;
    var uri = this.bwgSource.uri || this.bwgSource.bwgURI;
    var blob = this.bwgSource.blob || this.bwgSource.bwgBlob;

    var cnt = function(key, err) {
        thisB.readiness = null;
        thisB.notifyReadiness();

        if (key) {
            thisB.worker.postCommand({command: 'meta', connection: key}, function(meta, err) {
                if (err) {
                    thisB.error = err;
                    thisB.keyHolder.provide(null);
                } else {
                    thisB.meta = meta;
                    thisB.keyHolder.provide(key);
                }
            });
        } else {
            thisB.error = err;
            thisB.keyHolder.provide(null);
        }
    };

    if (blob) {
        this.worker.postCommand({command: 'connectBBI', blob: blob}, cnt);
    } else {
        this.worker.postCommand({command: 'connectBBI', uri: uri}, cnt); 
    }
}

RemoteBWGFeatureSource.prototype.capabilities = function() {
    var caps = {leap: true};

    if (this.meta && this.meta.type == 'bigwig')
        caps.quantLeap = true;
    if (this.meta && this.meta.extraIndices && this.meta.extraIndices.length > 0) {
        caps.search = [];
        for (var eii = 0; eii < this.meta.extraIndices.length; ++eii) {
            caps.search.push(this.meta.extraIndices[eii].field);
        }
    }
    return caps;
}

RemoteBWGFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var thisB = this;

    thisB.busy++;
    thisB.notifyActivity();

    this.keyHolder.await(function(key) {
        if (!key) {
            thisB.busy--;
            thisB.notifyActivity();
            return callback(thisB.error || "Can't access binary file", null, null);
        }

        var zoom = -1;
        var wantDensity = !types || types.length == 0 || arrayIndexOf(types, 'density') >= 0;
        if (thisB.opts.clientBin) {
            wantDensity = false;
        }
        if (thisB.meta.type == 'bigwig' || wantDensity || (typeof thisB.opts.forceReduction !== 'undefined')) {
            for (var z = 1; z < thisB.meta.zoomLevels.length; ++z) {
                if (thisB.meta.zoomLevels[z] <= scale) {
                    zoom = z - 1; // Scales returned in metadata start at 1, unlike "real" zoom levels.
                } else {
                    break;
                }
            }
            if (typeof thisB.opts.forceReduction !== 'undefined') {
                zoom = thisB.opts.forceReduction;
            }
        }
        
        thisB.worker.postCommand({command: 'fetch', connection: key, chr: chr, min: min, max: max, zoom: zoom}, function(features, error) {
            thisB.busy--;
            thisB.notifyActivity();

            var fs = 1000000000;
            if (thisB.meta.type === 'bigwig') {
                var is = (max - min) / features.length / 2;
                if (is < fs) {
                    fs = is;
                }
            } 
            if (thisB.opts.link) {
                for (var fi = 0; fi < features.length; ++fi) {
                    var f = features[fi];
                    if (f.label) {
                        f.links = [new DASLink('Link', thisB.opts.link.replace(/\$\$/, f.label))];
                    }
                }
            } 
            callback(error, features, fs);
        });
    });
}


RemoteBWGFeatureSource.prototype.quantFindNextFeature = function(chr, pos, dir, threshold, callback) {
    var thisB = this;
    this.busy++;
    this.notifyActivity();
    this.worker.postCommand({command: 'quantLeap', connection: this.keyHolder.res, chr: chr, pos: pos, dir: dir, threshold: threshold, under: false}, function(result, err) {
        console.log(result, err);
        thisB.busy--;
        thisB.notifyActivity();
        return callback(result, err);
    });
}

RemoteBWGFeatureSource.prototype.findNextFeature = function(chr, pos, dir, callback) {
    var thisB = this;
    this.busy++;
    this.notifyActivity();
    this.worker.postCommand({command: 'leap', connection: this.keyHolder.res, chr: chr, pos: pos, dir: dir}, function(result, err) {
        thisB.busy--;
        thisB.notifyActivity();
        if (result.length > 0 && result[0] != null) {
            callback(result[0]);
        }
    });
}

RemoteBWGFeatureSource.prototype.getScales = function() {
    var meta = this.meta;
    if (meta) {
        return meta.zoomLevels;
    } else {
        return null;
    }
}

RemoteBWGFeatureSource.prototype.search = function(query, callback) {
    if (!this.meta.extraIndices || this.meta.extraIndices.length == 0) {
        return callback(null, 'No indices available');
    }

    var thisB = this;
    this.busy++;
    this.notifyActivity();
    var index = this.meta.extraIndices[0];
    this.worker.postCommand({command: 'search', connection: this.keyHolder.res, query: query, index: index}, function(result, err) {
        thisB.busy--;
        thisB.notifyActivity();

        callback(result, err);
    });
}

RemoteBWGFeatureSource.prototype.getDefaultFIPs = function(callback) {
    if (this.opts.noExtraFeatureInfo)
        return true;

    var thisB = this;
    this.keyHolder.await(function(key) {
        var bwg = thisB.meta;
        if (!bwg) return;

        if (bwg.schema && bwg.definedFieldCount < bwg.schema.fields.length) {
            var fip = function(feature, featureInfo) {
                for (var hi = 0; hi < featureInfo.hit.length; ++hi) {
                    if (featureInfo.hit[hi].isSuperGroup)
                        return;
                }
                for (var fi = bwg.definedFieldCount; fi < bwg.schema.fields.length; ++fi) {
                    var f = bwg.schema.fields[fi];
                    featureInfo.add(f.comment, feature[f.name]);
                }
            };

            callback(fip);
        } else {
            // No need to do anything.
        }
    });
} 

RemoteBWGFeatureSource.prototype.getStyleSheet = function(callback) {
    var thisB = this;

    this.keyHolder.await(function(key) {
        var bwg = thisB.meta;
        if (!bwg) {
            return callback(null, 'bbi error');
        } 

        var stylesheet = new DASStylesheet();
        if (bwg.type == 'bigbed') {
            var wigStyle = new DASStyle();
            wigStyle.glyph = 'BOX';
            wigStyle.FGCOLOR = 'black';
            wigStyle.BGCOLOR = 'blue'
            wigStyle.HEIGHT = 8;
            wigStyle.BUMP = true;
            wigStyle.LABEL = true;
            wigStyle.ZINDEX = 20;
            stylesheet.pushStyle({type: 'bigwig'}, null, wigStyle);
        
            wigStyle.glyph = 'BOX';
            wigStyle.FGCOLOR = 'black';
            wigStyle.BGCOLOR = 'red'
            wigStyle.HEIGHT = 10;
            wigStyle.BUMP = true;
            wigStyle.ZINDEX = 20;
            stylesheet.pushStyle({type: 'translation'}, null, wigStyle);
                    
            var tsStyle = new DASStyle();
            tsStyle.glyph = 'BOX';
            tsStyle.FGCOLOR = 'black';
            tsStyle.BGCOLOR = 'white';
            tsStyle.HEIGHT = 10;
            tsStyle.ZINDEX = 10;
            tsStyle.BUMP = true;
            tsStyle.LABEL = true;
            stylesheet.pushStyle({type: 'transcript'}, null, tsStyle);

            var densStyle = new DASStyle();
            densStyle.glyph = 'HISTOGRAM';
            densStyle.COLOR1 = 'white';
            densStyle.COLOR2 = 'black';
            densStyle.HEIGHT=30;
            stylesheet.pushStyle({type: 'density'}, null, densStyle);
        } else {
            var wigStyle = new DASStyle();
            wigStyle.glyph = 'HISTOGRAM';
            wigStyle.COLOR1 = 'white';
            wigStyle.COLOR2 = 'black';
            wigStyle.HEIGHT=30;
            stylesheet.pushStyle({type: 'default'}, null, wigStyle);
        }


        if (bwg.definedFieldCount == 12 && bwg.fieldCount >= 14) {
            stylesheet.geneHint = true;
        } 

        return callback(stylesheet);
    });
}

function bamRecordToFeature(r, group) {
    if (r.flag & BamFlags.SEGMENT_UNMAPPED)
        return; 
    
    var len;
    if (r.seq)
        len = r.seq.length;
    else 
        len = r.seqLength;
    
    if (r.cigar) {
        len = 0;
        var ops = parseCigar(r.cigar);
        for (var ci = 0; ci < ops.length; ++ci) {
            var co = ops[ci];
            if (co.op == 'M' || co.op == 'D')
                len += co.cnt;
        }
    }

    var f = new DASFeature();
    f.min = r.pos + 1;
    f.max = r.pos + len;
    f.segment = r.segment;
    f.type = 'bam';
    f.id = r.readName;
    f.notes = [/* 'Sequence=' + r.seq, 'CIGAR=' + r.cigar, */ 'MQ=' + r.mq];
    f.cigar = r.cigar;
    f.seq = r.seq;
    f.quals = r.quals;
    f.orientation = (r.flag & BamFlags.REVERSE_COMPLEMENT) ? '-' : '+';
    f.bamRecord = r;

    if (group && (r.flag & BamFlags.MULTIPLE_SEGMENTS)) {
        f.groups = [{id: r.readName, 
                     type: 'readpair'}];
    }

    return f;
}

function BAMFeatureSource(bamSource) {
    FeatureSourceBase.call(this);

    var thisB = this;
    this.bamSource = bamSource;
    this.opts = {credentials: bamSource.credentials, preflight: bamSource.preflight, bamGroup: bamSource.bamGroup};
    this.bamHolder = new Awaited();
    
    if (this.opts.preflight) {
        var pfs = bwg_preflights[this.opts.preflight];
        if (!pfs) {
            pfs = new Awaited();
            bwg_preflights[this.opts.preflight] = pfs;

            var req = new XMLHttpRequest();
            req.onreadystatechange = function() {
                if (req.readyState == 4) {
                    if (req.status == 200) {
                        pfs.provide('success');
                    } else {
                        pfs.provide('failure');
                    }
                }
            };
            // req.setRequestHeader('cache-control', 'no-cache');    /* Doesn't work, not an allowed request header in CORS */
            req.open('get', this.opts.preflight + '?' + hex_sha1('salt' + Date.now()), true);    // Instead, ensure we always preflight a unique URI.
            if (this.opts.credentials) {
                req.withCredentials = 'true';
            }
            req.send('');
        }
        pfs.await(function(status) {
            if (status === 'success') {
                thisB.init();
            }
        });
    } else {
        thisB.init();
    }
}

BAMFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

BAMFeatureSource.prototype.init = function() {
    var thisB = this;
    var bamF, baiF;
    if (this.bamSource.bamBlob) {
        bamF = new BlobFetchable(this.bamSource.bamBlob);
        baiF = new BlobFetchable(this.bamSource.baiBlob);
    } else {
        bamF = new URLFetchable(this.bamSource.bamURI, {credentials: this.opts.credentials});
        baiF = new URLFetchable(this.bamSource.baiURI || (this.bamSource.bamURI + '.bai'), {credentials: this.opts.credentials});
    }
    makeBam(bamF, baiF, function(bam, err) {
        thisB.readiness = null;
        thisB.notifyReadiness();

        if (bam) {
            thisB.bamHolder.provide(bam);
        } else {
            thisB.error = err;
            thisB.bamHolder.provide(null);
        }
    });
}

BAMFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var light = types && (types.length == 1) && (types[0] == 'density');

    var thisB = this;
    
    thisB.busy++;
    thisB.notifyActivity();
    
    this.bamHolder.await(function(bam) {
        if (!bam) {
            thisB.busy--;
            thisB.notifyActivity();
            return callback(thisB.error || "Couldn't fetch BAM");
        }

        bam.fetch(chr, min, max, function(bamRecords, error) {
            thisB.busy--;
            thisB.notifyActivity();

            if (error) {
                callback(error, null, null);
            } else {
                var features = [];
                for (var ri = 0; ri < bamRecords.length; ++ri) {
                    var r = bamRecords[ri];

                    var f = bamRecordToFeature(r, thisB.opts.bamGroup);
                    if (f)
                        features.push(f);
                }
                callback(null, features, 1000000000);
            }
        }, {light: light});
    });
}

BAMFeatureSource.prototype.getScales = function() {
    return 1000000000;
}

BAMFeatureSource.prototype.getStyleSheet = function(callback) {
    this.bamHolder.await(function(bam) {
	    var stylesheet = new DASStylesheet();
                
        var densStyle = new DASStyle();
        densStyle.glyph = 'HISTOGRAM';
        densStyle.COLOR1 = 'black';
        densStyle.COLOR2 = 'red';
        densStyle.HEIGHT=30;
        stylesheet.pushStyle({type: 'density'}, 'low', densStyle);
        stylesheet.pushStyle({type: 'density'}, 'medium', densStyle);

        var wigStyle = new DASStyle();
        wigStyle.glyph = '__SEQUENCE';
        wigStyle.FGCOLOR = 'black';
        wigStyle.BGCOLOR = 'blue'
        wigStyle.HEIGHT = 8;
        wigStyle.BUMP = true;
        wigStyle.LABEL = false;
        wigStyle.ZINDEX = 20;
        stylesheet.pushStyle({type: 'bam'}, 'high', wigStyle);

	    return callback(stylesheet);
    });
}


function RemoteBAMFeatureSource(bamSource, worker) {
    FeatureSourceBase.call(this);

    var thisB = this;
    this.bamSource = bamSource;
    this.worker = worker;
    this.opts = {credentials: bamSource.credentials, preflight: bamSource.preflight, bamGroup: bamSource.bamGroup};
    this.keyHolder = new Awaited();
    
    this.init();
}

RemoteBAMFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

RemoteBAMFeatureSource.prototype.init = function() {    var thisB = this;
    var uri = this.bamSource.uri || this.bamSource.bamURI;
    var indexUri = this.bamSource.indexUri || this.bamSource.baiURI || uri + '.bai';

    var blob = this.bamSource.bamBlob || this.bamSource.blob;
    var indexBlob = this.bamSource.baiBlob || this.bamSource.indexBlob;

    var cnt = function(result, err) {
        thisB.readiness = null;
        thisB.notifyReadiness();

        if (result) {
            thisB.keyHolder.provide(result);
        } else {
            thisB.error = err;
            thisB.keyHolder.provide(null);
        }
    };

    if (blob) {
        this.worker.postCommand({command: 'connectBAM', blob: blob, indexBlob: indexBlob}, cnt /* , [blob, indexBlob] */);
    } else {
        this.worker.postCommand({command: 'connectBAM', uri: uri, indexUri: indexUri}, cnt); 
    }
}

RemoteBAMFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var light = types && (types.length == 1) && (types[0] == 'density');
    var thisB = this;
    
    thisB.busy++;
    thisB.notifyActivity();
    
    this.keyHolder.await(function(key) {
        if (!key) {
            thisB.busy--;
            thisB.notifyActivity();
            return callback(thisB.error || "Couldn't fetch BAM");
        }

        thisB.worker.postCommand({command: 'fetch', connection: key, chr: chr, min: min, max: max, opts: {light: light}}, function(bamRecords, error) {
            // console.log('retrieved ' + bamRecords.length + ' via worker.');

            thisB.busy--;
            thisB.notifyActivity();

            if (error) {
                callback(error, null, null);
            } else {
                var features = [];
                for (var ri = 0; ri < bamRecords.length; ++ri) {
                    var r = bamRecords[ri];
                    var f = bamRecordToFeature(r, thisB.opts.bamGroup);
                    if (f)
                        features.push(f);
                }
                callback(null, features, 1000000000);
            }
        });
    });
}

RemoteBAMFeatureSource.prototype.getScales = function() {
    return 1000000000;
}

RemoteBAMFeatureSource.prototype.getStyleSheet = function(callback) {
    this.keyHolder.await(function(bam) {
        var stylesheet = new DASStylesheet();
                
        var densStyle = new DASStyle();
        densStyle.glyph = 'HISTOGRAM';
        densStyle.COLOR1 = 'black';
        densStyle.COLOR2 = 'red';
        densStyle.HEIGHT=30;
        stylesheet.pushStyle({type: 'density'}, 'low', densStyle);
        stylesheet.pushStyle({type: 'density'}, 'medium', densStyle);

        var wigStyle = new DASStyle();
        wigStyle.glyph = '__SEQUENCE';
        wigStyle.FGCOLOR = 'black';
        wigStyle.BGCOLOR = 'blue'
        wigStyle.HEIGHT = 8;
        wigStyle.BUMP = true;
        wigStyle.LABEL = false;
        wigStyle.ZINDEX = 20;
        stylesheet.pushStyle({type: 'bam'}, 'high', wigStyle);
        return callback(stylesheet);
    });
}


function MappedFeatureSource(source, mapping) {
    this.source = source;
    this.mapping = mapping;
    
    this.activityListeners = [];
    this.busy = 0;
}

MappedFeatureSource.prototype.addActivityListener = function(listener) {
    this.activityListeners.push(listener);
}

MappedFeatureSource.prototype.notifyActivity = function() {
    for (var li = 0; li < this.activityListeners.length; ++li) {
        try {
            this.activityListeners[li](this.busy);
        } catch (e) {
            console.log(e);
        }
    }
}

MappedFeatureSource.prototype.getStyleSheet = function(callback) {
    return this.source.getStyleSheet(callback);
}

MappedFeatureSource.prototype.getScales = function() {
    return this.source.getScales();
}

MappedFeatureSource.prototype.simplifySegments = function(segs, minGap) {
    if (segs.length == 0) return segs;

    segs.sort(function(s1, s2) {
        var d = s1.name - s2.name;
        if (d)
            return d;
        d = s1.start - s2.start;
        if (d)
            return d;
        return s1.end - s2.end;   // Should never come to this...?
    });

    var ssegs = [];
    var currentSeg = segs[0];
    for (var si = 0; si < segs.length; ++si) {
        var ns = segs[si];

        // console.log(ns.name + ' ' + ns.start + ' ' + ns.end);
        if (ns.name != currentSeg.name || ns.start > (currentSeg.end + minGap)) {
            ssegs.push(currentSeg);
            currentSeg = ns;
        } else {
            currentSeg = new DASSegment(currentSeg.name, Math.min(currentSeg.start, ns.start), Math.max(currentSeg.end, ns.end));
        }
    }
    ssegs.push(currentSeg);
    return ssegs;
}

MappedFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var thisB = this;
    var fetchLength = max - min + 1;

    thisB.busy++;
    thisB.notifyActivity();

    this.mapping.sourceBlocksForRange(chr, min, max, function(mseg) {
        if (mseg.length == 0) {
            thisB.busy--;
            thisB.notifyActivity();

            callback("No mapping available for this regions", [], scale);
        } else {
            mseg = thisB.simplifySegments(mseg, Math.max(100, 0.05 * fetchLength));

            var mappedFeatures = [];
            var mappedLoc = null;
            var count = mseg.length;
            var finalStatus;

            mseg.map(function(seg) {
                thisB.source.fetch(seg.name, seg.start, seg.end, scale, types, pool, function(status, features, fscale) {
                    if (status && !finalStatus)
                        finalStatus = status;

                    if (features) {
                        for (var fi = 0; fi < features.length; ++fi) {
                            var f = features[fi];
                            var sn = f.segment;
                            if (sn.indexOf('chr') == 0) {
                                sn = sn.substr(3);
                            }
                            var mmin = thisB.mapping.mapPoint(sn, f.min);
                            var mmax = thisB.mapping.mapPoint(sn, f.max);
                            if (!mmin || !mmax || mmin.seq != mmax.seq || mmin.seq != chr) {
                                // Discard feature.
                                // dlog('discarding ' + miniJSONify(f));
                                if (f.parts && f.parts.length > 0) {    // FIXME: Ugly hack to make ASTD source map properly.
                                     mappedFeatures.push(f);
                                }
                            } else {
                                f.segment = mmin.seq;
                                f.min = mmin.pos;
                                f.max = mmax.pos;
                                if (f.min > f.max) {
                                    var tmp = f.max;
                                    f.max = f.min;
                                    f.min = tmp;
                                }
                                if (mmin.flipped) {
                                    if (f.orientation == '-') {
                                        f.orientation = '+';
                                    } else if (f.orientation == '+') {
                                        f.orientation = '-';
                                    }
                                }
                                mappedFeatures.push(f);
                            }
                        }
                    }

                    var m1 = thisB.mapping.mapPoint(seg.name, seg.start);
                    var m2 = thisB.mapping.mapPoint(seg.name, seg.end);

                    if (m1 && m2) {
                        var segDestCoverage = new Range(m1.pos, m2.pos);
                        if (mappedLoc)
                            mappedLoc = union(mappedLoc, segDestCoverage);
                        else
                            mappedLoc = segDestCoverage;
                    }

                    --count;
                    if (count == 0) {
                        thisB.busy--;
                        thisB.notifyActivity();
                        callback(finalStatus, mappedFeatures, fscale, mappedLoc);
                    }
                });
            });
        }
    });
}

function DummyFeatureSource() {
}

DummyFeatureSource.prototype.getScales = function() {
    return null;
}

DummyFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, cnt) {
    return cnt(null, [], 1000000000);
}

DummyFeatureSource.prototype.getStyleSheet = function(callback) {
    var stylesheet = new DASStylesheet();
    var defStyle = new DASStyle();
    defStyle.glyph = 'BOX';
    defStyle.BGCOLOR = 'blue';
    defStyle.FGCOLOR = 'black';
    stylesheet.pushStyle({type: 'default'}, null, defStyle);
    return callback(stylesheet);
}

function DummySequenceSource() {
}

DummySequenceSource.prototype.fetch = function(chr, min, max, pool, cnt) {
    return cnt(null, null);
}

function JBrowseFeatureSource(source) {
    this.store = new JBrowseStore(source.jbURI, source.jbQuery);
}

JBrowseFeatureSource.prototype.getScales = function() {
    return null;
}

JBrowseFeatureSource.prototype.getStyleSheet = function(callback) {
    var stylesheet = new DASStylesheet();
    var wigStyle = new DASStyle();
    wigStyle.glyph = 'BOX';
    wigStyle.FGCOLOR = 'black';
    wigStyle.BGCOLOR = 'green'
    wigStyle.HEIGHT = 8;
    wigStyle.BUMP = true;
    wigStyle.LABEL = true;
    wigStyle.ZINDEX = 20;
    stylesheet.pushStyle({type: 'default'}, null, wigStyle);

    return callback(stylesheet);
}

JBrowseFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    if (types && types.length == 0) {
        callback(null, [], scale);
        return;
    }
    
    var fops = {};

    this.store.features(
        new DASSegment(chr, min, max),
        fops,
        function(features, status) {
            callback(status, features, 100000);
        }
    );
}

Browser.prototype.sourceAdapterIsCapable = function(s, cap) {
    if (!s.capabilities)
        return false;
    else return s.capabilities()[cap];
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        FeatureSourceBase: FeatureSourceBase,

        TwoBitSequenceSource: TwoBitSequenceSource,
        DASSequenceSource: DASSequenceSource,
        MappedFeatureSource: MappedFeatureSource,
        CachingFeatureSource: CachingFeatureSource,
        BWGFeatureSource: BWGFeatureSource,
        RemoteBWGFeatureSource: RemoteBWGFeatureSource,
        BAMFeatureSource: BAMFeatureSource,
        RemoteBAMFeatureSource: RemoteBAMFeatureSource,
        DummyFeatureSource: DummyFeatureSource,
        DummySequenceSource: DummySequenceSource,

        registerSourceAdapterFactory: dalliance_registerSourceAdapterFactory,
        registerParserFactory: dalliance_registerParserFactory,
        makeParser: dalliance_makeParser
    }

    // Standard set of plugins.
    require('./ensembljson');
    require('./tabix-source');
    require('./memstore');
    require('./bedwig');
    require('./vcf');
}

},{"./bam":1,"./bedwig":2,"./bigwig":3,"./bin":4,"./cbrowser":6,"./cigar":8,"./das":10,"./ensembljson":12,"./jbjson":20,"./memstore":23,"./overlay":25,"./spans":33,"./tabix-source":36,"./tier":41,"./twoBit":46,"./utils":47,"./vcf":48}],33:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// spans.js: JavaScript Intset/Location port.
//

"use strict";


function Range(min, max)
{
    if (typeof(min) != 'number' || typeof(max) != 'number')
        throw 'Bad range ' + min + ',' + max;
    this._min = min;
    this._max = max;
}

Range.prototype.min = function() {
    return this._min;
}

Range.prototype.max = function() {
    return this._max;
}

Range.prototype.contains = function(pos) {
    return pos >= this._min && pos <= this._max;
}

Range.prototype.isContiguous = function() {
    return true;
}

Range.prototype.ranges = function() {
    return [this];
}

Range.prototype._pushRanges = function(ranges) {
    ranges.push(this);
}

Range.prototype.toString = function() {
    return '[' + this._min + '-' + this._max + ']';
}

function _Compound(ranges) {
    this._ranges = ranges;
    // assert sorted?
}

_Compound.prototype.min = function() {
    return this._ranges[0].min();
}

_Compound.prototype.max = function() {
    return this._ranges[this._ranges.length - 1].max();
}

_Compound.prototype.contains = function(pos) {
    // FIXME implement bsearch if we use this much.
    for (var s = 0; s < this._ranges.length; ++s) {
        if (this._ranges[s].contains(pos)) {
            return true;
        }
    }
    return false;
}

_Compound.prototype.isContiguous = function() {
    return this._ranges.length > 1;
}

_Compound.prototype.ranges = function() {
    return this._ranges;
}

_Compound.prototype._pushRanges = function(ranges) {
    for (var ri = 0; ri < this._ranges.length; ++ri)
        ranges.push(this._ranges[ri]);
}

_Compound.prototype.toString = function() {
    var s = '';
    for (var r = 0; r < this._ranges.length; ++r) {
        if (r>0) {
            s = s + ',';
        }
        s = s + this._ranges[r].toString();
    }
    return s;
}

function union(s0, s1) {
    if (! (s0 instanceof Array)) {
        s0 = [s0];
        if (s1)
            s0.push(s1);
    }

    if (s0.length == 0)
        return null;
    else if (s0.length == 1)
        return s0[0];

    var ranges = [];
    for (var si = 0; si < s0.length; ++si)
        s0[si]._pushRanges(ranges);
    ranges = ranges.sort(_rangeOrder);

    var oranges = [];
    var current = ranges[0];
    current = new Range(current._min, current._max);  // Copy now so we don't have to later.

    for (var i = 1; i < ranges.length; ++i) {
        var nxt = ranges[i];
        if (nxt._min > (current._max + 1)) {
            oranges.push(current);
            current = new Range(nxt._min, nxt._max);
        } else {
            if (nxt._max > current._max) {
                current._max = nxt._max;
            }
        }
    }
    oranges.push(current);

    if (oranges.length == 1) {
        return oranges[0];
    } else {
        return new _Compound(oranges);
    }
}

function intersection(s0, s1) {
    var r0 = s0.ranges();
    var r1 = s1.ranges();
    var l0 = r0.length, l1 = r1.length;
    var i0 = 0, i1 = 0;
    var or = [];

    while (i0 < l0 && i1 < l1) {
        var s0 = r0[i0], s1 = r1[i1];
        var lapMin = Math.max(s0.min(), s1.min());
        var lapMax = Math.min(s0.max(), s1.max());
        if (lapMax >= lapMin) {
            or.push(new Range(lapMin, lapMax));
        }
        if (s0.max() > s1.max()) {
            ++i1;
        } else {
            ++i0;
        }
    }
    
    if (or.length == 0) {
        return null; // FIXME
    } else if (or.length == 1) {
        return or[0];
    } else {
        return new _Compound(or);
    }
}

function coverage(s) {
    var tot = 0;
    var rl = s.ranges();
    for (var ri = 0; ri < rl.length; ++ri) {
        var r = rl[ri];
        tot += (r.max() - r.min() + 1);
    }
    return tot;
}



function rangeOrder(a, b)
{
    if (a.min() < b.min()) {
        return -1;
    } else if (a.min() > b.min()) {
        return 1;
    } else if (a.max() < b.max()) {
        return -1;
    } else if (b.max() > a.max()) {
        return 1;
    } else {
        return 0;
    }
}

function _rangeOrder(a, b)
{
    if (a._min < b._min) {
        return -1;
    } else if (a._min > b._min) {
        return 1;
    } else if (a._max < b._max) {
        return -1;
    } else if (b._max > a._max) {
        return 1;
    } else {
        return 0;
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        Range: Range,
        union: union,
        intersection: intersection,
        coverage: coverage,
        rangeOver: rangeOrder,
        _rangeOrder: _rangeOrder
    }
}
},{}],34:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// svg-export.js
//

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var makeElementNS = utils.makeElementNS;

    var VERSION = require('./version');

    var svgSeqTier = require('./sequence-draw').svgSeqTier;

    var svgu = require('./svg-utils');
    var NS_SVG = svgu.NS_SVG;
    var NS_XLINK = svgu.NS_XLINK;
    var SVGPath = svgu.SVGPath;

    var nf = require('./numformats');
    var formatQuantLabel = nf.formatQuantLabel;
}


Browser.prototype.makeSVG = function(opts) {
    opts = opts || {};
    var minTierHeight = opts.minTierHeight || 20;
    var padding = 3;

    var b = this;
    var saveDoc = document.implementation.createDocument(NS_SVG, 'svg', null);

    var saveRoot = makeElementNS(NS_SVG, 'g', null, {
        fontFamily: 'helvetica',
        fontSize: '8pt'
    });
    saveDoc.documentElement.appendChild(saveRoot);

    var margin = 200;

    var dallianceAnchor = makeElementNS(NS_SVG, 'a',
       makeElementNS(NS_SVG, 'text', 'Graphics from Dalliance ' + VERSION, {
           x: (b.featurePanelWidth + margin + 20)/2,
           y: 30,
           strokeWidth: 0,
           fontSize: '12pt',
	       textAnchor: 'middle',
	       fill: 'blue'
       }));
    dallianceAnchor.setAttribute('xmlns:xlink', NS_XLINK);
    dallianceAnchor.setAttribute('xlink:href', 'http://www.biodalliance.org/');
  
    saveRoot.appendChild(dallianceAnchor);
    
    var clipRect = makeElementNS(NS_SVG, 'rect', null, {
    	x: margin,
    	y: 50,
    	width: b.featurePanelWidth,
    	height: 100000
    });
    var clip = makeElementNS(NS_SVG, 'clipPath', clipRect, {id: 'featureClip'});
    saveRoot.appendChild(clip);

    var pos = 70;
    var tierHolder = makeElementNS(NS_SVG, 'g', null, {});

    for (var ti = 0; ti < b.tiers.length; ++ti) {
        var tier = b.tiers[ti];
    	var tierSVG = makeElementNS(NS_SVG, 'g', null, {clipPath: 'url(#featureClip)', clipRule: 'nonzero'});
    	var tierLabels = makeElementNS(NS_SVG, 'g');
    	var tierTopPos = pos;

    	var tierBackground = makeElementNS(NS_SVG, 'rect', null, {x: 0, y: tierTopPos, width: '10000', height: 50, fill: tier.background});
    	tierSVG.appendChild(tierBackground);

    	if (tier.dasSource.tier_type === 'sequence') {
    	    var seqTrack = svgSeqTier(tier, tier.currentSequence);
    	    
    	    tierSVG.appendChild(makeElementNS(NS_SVG, 'g', seqTrack, {transform: 'translate(' + (margin) + ', ' + pos + ')'}));
    	    pos += 80;
    	} else {
            if (!tier.subtiers) {
    		   continue;
            }
    	
    	    var offset = ((tier.glyphCacheOrigin - b.viewStart) * b.scale);
            var hasQuant = false;
            for (var sti = 0; sti < tier.subtiers.length; ++sti) {
                pos += padding;
        		var subtier = tier.subtiers[sti];
                    
        		var glyphElements = [];
        		for (var gi = 0; gi < subtier.glyphs.length; ++gi) {
                    var glyph = subtier.glyphs[gi];
                    glyphElements.push(glyph.toSVG());
        		}

    		    tierSVG.appendChild(makeElementNS(NS_SVG, 'g', glyphElements, {transform: 'translate(' + (margin+offset) + ', ' + pos + ')'}));

        		if (subtier.quant) {
                    hasQuant = true;
        		    var q = subtier.quant;
                    var h = subtier.height;

                    var numTics = 2;
                    if (h > 40) {
                        numTics = 1 + ((h/20) | 0);
                    }
                    var ticSpacing = h / (numTics - 1);
                    var ticInterval = (q.max - q.min) / (numTics - 1);

        		    var path = new SVGPath();
        		    path.moveTo(margin + 5, pos);
        		    path.lineTo(margin, pos);
        		    path.lineTo(margin, pos + subtier.height);
        		    path.lineTo(margin + 5, pos + subtier.height);
                    for (var t = 1; t < numTics-1; ++t) {
                        var ty = t*ticSpacing;
                        path.moveTo(margin, pos + ty);
                        path.lineTo(margin+3, pos + ty);
                    }

        		    tierLabels.appendChild(makeElementNS(NS_SVG, 'path', null, {d: path.toPathData(), fill: 'none', stroke: 'black', strokeWidth: '2px'}));
        		    tierLabels.appendChild(makeElementNS(NS_SVG, 'text', formatQuantLabel(q.max), {x: margin - 3, y: pos + 7, textAnchor: 'end'}));
        		    tierLabels.appendChild(makeElementNS(NS_SVG, 'text', formatQuantLabel(q.min), {x: margin - 3, y: pos +  subtier.height, textAnchor: 'end'}));
                    for (var t = 1; t < numTics-1; ++t) {
                        var ty = t*ticSpacing;
                        tierLabels.appendChild(makeElementNS(NS_SVG, 'text', formatQuantLabel((1.0*q.max) - (t*ticInterval)), 
                            {x: margin - 3, y: pos +  ty + 3, textAnchor: 'end'}));
                    }
        		}

    		    pos += subtier.height + padding;
            }

            if (pos - tierTopPos < minTierHeight) {
                pos = tierTopPos + minTierHeight;
            }
    	}

        var labelName;
        if (typeof tier.config.name === 'string')
            labelName = tier.config.name;
        else
            labelName = tier.dasSource.name;
    	tierLabels.appendChild(
    	    makeElementNS(
    		NS_SVG, 'text',
    		labelName,
    		{x: margin - (hasQuant ? 20 : 12), y: (pos+tierTopPos+8)/2, fontSize: '10pt', textAnchor: 'end'}));

    	
    	tierBackground.setAttribute('height', pos - tierTopPos);
    	tierHolder.appendChild(makeElementNS(NS_SVG, 'g', [tierSVG, tierLabels]));
    }

    if (opts.highlights) {
        var highlights = this.highlights || [];
        for (var hi = 0; hi < highlights.length; ++hi) {
            var h = highlights[hi];
            if ((h.chr == this.chr || h.chr == ('chr' + this.chr)) && h.min < this.viewEnd && h.max > this.viewStart) {
                var tmin = (Math.max(h.min, this.viewStart) - this.viewStart) * this.scale;
                var tmax = (Math.min(h.max, this.viewEnd) - this.viewStart) * this.scale;

                tierHolder.appendChild(makeElementNS(NS_SVG, 'rect', null, {x: margin + tmin, y: 70, width: (tmax-tmin), height: pos-70,
                                                                      stroke: 'none', fill: this.defaultHighlightFill, fillOpacity: this.defaultHighlightAlpha}));
            }
        }
    }

    var rulerPos = -1; 
    if (opts.ruler == 'center') {
        rulerPos = margin + ((this.viewEnd - this.viewStart + 1)*this.scale) / 2;
    } else if (opts.ruler == 'left') {
        rulerPos = margin;
    } else if (opts.ruler == 'right') {
        rulerPos = margin + ((this.viewEnd - this.viewStart + 1)*this.scale);
    }
    if (rulerPos >= 0) {
        tierHolder.appendChild(makeElementNS(NS_SVG, 'line', null, {x1: rulerPos, y1: 70, x2: rulerPos, y2: pos,
                                                              stroke: 'blue'}));
    }

    saveRoot.appendChild(tierHolder);
    saveDoc.documentElement.setAttribute('width', b.featurePanelWidth + 20 + margin);
    saveDoc.documentElement.setAttribute('height', pos + 50);

    var svgBlob = new Blob([new XMLSerializer().serializeToString(saveDoc)], {type: 'image/svg+xml'});
    return svgBlob;
}

},{"./cbrowser":6,"./numformats":24,"./sequence-draw":29,"./svg-utils":35,"./utils":47,"./version":49}],35:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// svg-utils.js
//

var NS_SVG = 'http://www.w3.org/2000/svg';
var NS_XLINK = 'http://www.w3.org/1999/xlink';

function SVGPath() {
    this.ops = [];
}

SVGPath.prototype.moveTo = function(x, y) {
    this.ops.push('M ' + x + ' ' + y);
}

SVGPath.prototype.lineTo = function(x, y) {
    this.ops.push('L ' + x + ' ' + y);
}

SVGPath.prototype.closePath = function() {
    this.ops.push('Z');
}

SVGPath.prototype.toPathData = function() {
    return this.ops.join(' ');
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        NS_SVG: NS_SVG,
        NS_XLINK: NS_XLINK,
        SVGPath: SVGPath
    }
}
},{}],36:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// tabix-source.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sa = require('./sourceadapters');
    var dalliance_registerSourceAdapterFactory = sa.registerSourceAdapterFactory;
    var dalliance_makeParser = sa.makeParser;
    var FeatureSourceBase = sa.FeatureSourceBase;

    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;
    var BlobFetchable = bin.BlobFetchable;

    var utils = require('./utils');
    var Awaited = utils.Awaited;

    var connectTabix = require('./tabix').connectTabix;
}

function TabixFeatureSource(source) {
    FeatureSourceBase.call(this);
    this.readiness = 'Connecting';
    this.source = source;

    this.tabixHolder = new Awaited();
    var thisB = this;


    var parser = dalliance_makeParser(source.payload);
    if (!parser) {
        throw 'Unsuported tabix payload ' + source.payload;
    } else {
        this.parser = parser;
    }

    var data, index;
    if (this.source.blob) {
        data = new BlobFetchable(this.source.blob);
        index = new BlobFetchable(this.source.indexBlob);
    } else {
        data = new URLFetchable(this.source.uri, {credentials: this.source.credentials});
        index = new URLFetchable(this.source.indexURI || (this.source.uri + '.tbi'), {credentials: this.source.credentials});
    }
    connectTabix(data, index, function(tabix, err) {
        thisB.tabixHolder.provide(tabix);
        tabix.fetchHeader(function(lines, err) {
            if (lines) {
                var session = parser.createSession(function() { /* Null sink because we shouldn't get records */ });
                for (var li = 0; li < lines.length; ++li) {
                    session.parse(lines[li]);
                }
                session.flush();
            }
        });
        thisB.readiness = null
        thisB.notifyReadiness();
    });
}

TabixFeatureSource.prototype = Object.create(FeatureSourceBase.prototype);

TabixFeatureSource.prototype.fetch = function(chr, min, max, scale, types, pool, callback) {
    var thisB = this;
    
    thisB.busy++;
    thisB.notifyActivity();
    
    this.tabixHolder.await(function(tabix) {
        tabix.fetch(chr, min, max, function(records, error) {
            thisB.busy--;
            thisB.notifyActivity();

            var features = [];
            var session = thisB.parser.createSession(function(f) {features.push(f)});
            for (var ri = 0; ri < records.length; ++ri) {
                var f = session.parse(records[ri]);
            }
            session.flush();
            callback(null, features, 1000000000);
        });
    });
}


TabixFeatureSource.prototype.getStyleSheet = function(callback) {
    if (this.parser && this.parser.getStyleSheet)
        this.parser.getStyleSheet(callback)
}

TabixFeatureSource.prototype.getDefaultFIPs = function(callback) {
    if (this.parser && this.parser.getDefaultFIPs)
        this.parser.getDefaultFIPs(callback);
}


dalliance_registerSourceAdapterFactory('tabix', function(source) {
    return {features: new TabixFeatureSource(source)};
});
},{"./bin":4,"./sourceadapters":32,"./tabix":37,"./utils":47}],37:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2011
//
// tabix.js: basic support for tabix-indexed flatfiles
//

"use strict";

var TABIX_MAGIC = 0x01494254;

if (typeof(require) !== 'undefined') {
    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;
    var intersection = spans.intersection;

    var bin = require('./bin');
    var readInt = bin.readInt;
    var readShort = bin.readShort;
    var readByte = bin.readByte;
    var readInt64 = bin.readInt64;
    var readFloat = bin.readFloat;

    var lh3utils = require('./lh3utils');
    var readVob = lh3utils.readVob;
    var unbgzf = lh3utils.unbgzf;
    var reg2bins = lh3utils.reg2bins;
    var Chunk = lh3utils.Chunk;
}

function TabixFile() {
}

function connectTabix(data, tbi, callback) {
    var tabix = new TabixFile();
    tabix.data = data;
    tabix.tbi = tbi;

    tabix.tbi.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(
        if (!header) {
            return dlog("Couldn't access Tabix");
        }

        var unchead = unbgzf(header, header.byteLength);
        var uncba = new Uint8Array(unchead);
        var magic = readInt(uncba, 0);
        if (magic != TABIX_MAGIC) {
            return callback(null, 'Not a tabix index');
        }

        var nref = readInt(uncba, 4);
        tabix.format = readInt(uncba, 8);
        tabix.colSeq = readInt(uncba, 12);
        tabix.colStart = readInt(uncba, 16);
        tabix.colEnd = readInt(uncba, 20);
        tabix.meta = readInt(uncba, 24);
        tabix.skip = readInt(uncba, 28);
        var nameLength = readInt(uncba, 32);

        tabix.indices = [];

        var p = 36;
        tabix.chrToIndex = {};
        tabix.indexToChr = [];
        for (var i = 0; i < nref; ++i) {
            var name = ''

            while (true) {
                var ch = uncba[p++];
                if (ch == 0)
                    break;

                name += String.fromCharCode(ch);
            }

            tabix.chrToIndex[name] = i;
            if (name.indexOf('chr') == 0) {
                tabix.chrToIndex[name.substring(3)] = i;
            } else {
                tabix.chrToIndex['chr' + name] = i;
            }
            tabix.indexToChr.push(name);
        }

        var minBlockIndex = 1000000000;
        for (var ref = 0; ref < nref; ++ref) {
            var blockStart = p;
            var nbin = readInt(uncba, p); p += 4;
            for (var b = 0; b < nbin; ++b) {
                var bin = readInt(uncba, p);
                var nchnk = readInt(uncba, p+4);
                p += 8 + (nchnk * 16);
            }
            var nintv = readInt(uncba, p); p += 4;
            
            var q = p;
            for (var i = 0; i < nintv; ++i) {
                var v = readVob(uncba, q); q += 8;
                if (v) {
                    var bi = v.block;
                    if (v.offset > 0)
                        bi += 65536;

                    if (bi < minBlockIndex)
                        minBlockIndex = bi;
                    break;
                }
            }
            p += (nintv * 8);


            var ub = uncba;
            if (nbin > 0) {
                tabix.indices[ref] = new Uint8Array(unchead, blockStart, p - blockStart);
            }                     
        }

        tabix.headerMax = minBlockIndex;

        callback(tabix);
    });
}

// Copy-paste from BamFile

TabixFile.prototype.blocksForRange = function(refId, min, max) {
    var index = this.indices[refId];
    if (!index) {
        return [];
    }

    var intBinsL = reg2bins(min, max);
    var intBins = [];
    for (var i = 0; i < intBinsL.length; ++i) {
        intBins[intBinsL[i]] = true;
    }
    var leafChunks = [], otherChunks = [];

    var nbin = readInt(index, 0);
    var p = 4;
    for (var b = 0; b < nbin; ++b) {
        var bin = readInt(index, p);
        var nchnk = readInt(index, p+4);
        p += 8;
        if (intBins[bin]) {
            for (var c = 0; c < nchnk; ++c) {
                var cs = readVob(index, p);
                var ce = readVob(index, p + 8);
                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));
                p += 16;
            }
        } else {
            p +=  (nchnk * 16);
        }
    }

    var nintv = readInt(index, p);
    var lowest = null;
    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);
    for (var i = minLin; i <= maxLin; ++i) {
        var lb =  readVob(index, p + 4 + (i * 8));
        if (!lb) {
            continue;
        }
        if (!lowest || lb.block < lowest.block || lb.offset < lowest.offset) {
            lowest = lb;
        }
    }
    
    var prunedOtherChunks = [];
    if (lowest != null) {
        for (var i = 0; i < otherChunks.length; ++i) {
            var chnk = otherChunks[i];
            if (chnk.maxv.block >= lowest.block && chnk.maxv.offset >= lowest.offset) {
                prunedOtherChunks.push(chnk);
            }
        }
    } 
    otherChunks = prunedOtherChunks;

    var intChunks = [];
    for (var i = 0; i < otherChunks.length; ++i) {
        intChunks.push(otherChunks[i]);
    }
    for (var i = 0; i < leafChunks.length; ++i) {
        intChunks.push(leafChunks[i]);
    }

    intChunks.sort(function(c0, c1) {
        var dif = c0.minv.block - c1.minv.block;
        if (dif != 0) {
            return dif;
        } else {
            return c0.minv.offset - c1.minv.offset;
        }
    });
    var mergedChunks = [];
    if (intChunks.length > 0) {
        var cur = intChunks[0];
        for (var i = 1; i < intChunks.length; ++i) {
            var nc = intChunks[i];
            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block
                cur = new Chunk(cur.minv, nc.maxv);
            } else {
                mergedChunks.push(cur);
                cur = nc;
            }
        }
        mergedChunks.push(cur);
    }

    return mergedChunks;
}

TabixFile.prototype.fetch = function(chr, min, max, callback) {
    var thisB = this;

    var chrId = this.chrToIndex[chr];
    if (chrId == undefined)
        return callback([]);

    var canonicalChr = this.indexToChr[chrId];

    var chunks;
    if (chrId === undefined) {
        chunks = [];
    } else {
        chunks = this.blocksForRange(chrId, min, max);
        if (!chunks) {
            callback(null, 'Error in index fetch');
        }
    }

    var records = [];
    var index = 0;
    var data;

    function tramp() {
        if (index >= chunks.length) {
            return callback(records);
        } else if (!data) {
            var c = chunks[index];
            var fetchMin = c.minv.block;
            var fetchMax = c.maxv.block + (1<<16); // *sigh*
            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) {
                data = unbgzf(r, c.maxv.block - c.minv.block + 1);
                return tramp();
            });
        } else {
            var ba = new Uint8Array(data);
            thisB.readRecords(ba, chunks[index].minv.offset, records, min, max, canonicalChr);
            data = null;
            ++index;
            return tramp();
        }
    }
    tramp();
}

TabixFile.prototype.readRecords = function(ba, offset, sink, min, max, chr) {
   LINE_LOOP:
    while (true) {
        var line = '';
        while (offset < ba.length) {
            var ch = ba[offset++];
            if (ch == 10) {
                var toks = line.split('\t');

                if (toks[this.colSeq - 1] == chr) {
                    var fmin = parseInt(toks[this.colStart - 1]);
                    var fmax = fmin;
                    if (this.colEnd > 0)
                        fmax = parseInt(toks[this.colEnd - 1]);
                    if (this.format & 0x10000) ++fmin;

                    if (fmin <= max && fmax >= min)
                        sink.push(line);
                }
                continue LINE_LOOP;
            } else {
                line += String.fromCharCode(ch);
            }
        }
        return;
    }
}

TabixFile.prototype.fetchHeader = function(callback) {
    var self = this;
    var fetchPtr = 0, ptr = 0, line='';
    var lines = [];

    self.data.slice(0, self.headerMax).fetch(function(chnk) {
        if (!chnk) {
            return callback(null, "Fetch failed");
        }
        var ba = new Uint8Array(unbgzf(chnk, chnk.byteLength));
        var ptr = 0, line = '', lines = [];
        while (ptr < ba.length) {
            var ch = ba[ptr++]
            if (ch == 10) {
                if (line.charCodeAt(0) == self.meta) {
                    lines.push(line);
                    line = '';
                } else {
                    return callback(lines);
                }
            } else {
                line += String.fromCharCode(ch);
            }
        }
        callback(lines);
    });
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        connectTabix: connectTabix,
        TABIX_MAGIC: TABIX_MAGIC
    };
}
},{"./bin":4,"./lh3utils":22,"./spans":33}],38:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// thub.js: support for track-hub style registries
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var textXHR = utils.textXHR;
    var relativeURL = utils.relativeURL;
    var shallowCopy = utils.shallowCopy;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
}

var THUB_STANZA_REGEXP = /\n\s*\n/;
var THUB_PARSE_REGEXP  = /(\w+) +(.+)\n?/;
var THUB_SUBGROUP_REGEXP = /subGroup[1-9]/;

var THUB_PENNANT_PREFIX = 'http://genome.ucsc.edu/images/';

function TrackHub(url) {
    this.genomes = {};
    this.url = url;
}

function TrackHubTrack() {
}

TrackHubTrack.prototype.get = function(k) {
    if (this[k])
        return this[k];
    else if (this._parent) 
        return this._parent.get(k);
}

function TrackHubDB(hub) {
    this.hub = hub;
}

TrackHubDB.prototype.getTracks = function(callback) {
    var thisB = this;
    if (this._tracks) {
        return callback(this._tracks);
    } 
    
    textXHR(this.absURL, function(trackFile, err) {
        if (err) {
            return callback(null, err);
        }
        
        // trackFile = trackFile.replace(/\#.*/g, '');
        trackFile = trackFile.replace('\\\n', ' ');

        var tracks = [];
        var tracksById = {};
        var stanzas = trackFile.split(THUB_STANZA_REGEXP);
        for (var s = 0; s < stanzas.length; ++s) {
            var toks = stanzas[s].replace(/\#.*/g, '').split(THUB_PARSE_REGEXP);
            var track = new TrackHubTrack();
            track._db = thisB;
            for (var l = 0; l < toks.length - 2; l += 3) {
                var k = toks[l+1], v = toks[l+2];
                if (k.match(THUB_SUBGROUP_REGEXP)) {
                    if (!track.subgroups)
                        track.subgroups = {};
                    var sgtoks = v.split(/\s/);
                    var sgtag = sgtoks[0];
                    var sgrecord = {name: sgtoks[1], tags: [], titles: []};
                    for (var sgti = 2; sgti < sgtoks.length; ++sgti) {
                        var grp = sgtoks[sgti].split(/=/);
                        sgrecord.tags.push(grp[0]);
                        sgrecord.titles.push(grp[1]);
                    }
                    track.subgroups[sgtag] = sgrecord;
                } else if (k === 'subGroups') {
                    var sgtoks = v.split(/(\w+)=(\w+)/);
                    track.sgm = {};
                    for (var sgti = 0; sgti < sgtoks.length - 2; sgti += 3) {
                        track.sgm[sgtoks[sgti+1]] = sgtoks[sgti + 2];
                    }
                } else {
                    track[toks[l+1]] = toks[l+2];
                }
            }

            if (track.track && (track.type || track.container || track.view)) {
                tracks.push(track);
                tracksById[track.track] = track;
            }
        }
        
        var toplevels = [];
        var composites = [];
        for (var ti = 0; ti < tracks.length; ++ti) {
            var track = tracks[ti];
            var top = true;
            if (track.parent) {
                var ptoks = track.parent.split(/\s+/);
                var parent = tracksById[ptoks[0]];
                if (parent) {
                    track._parent = parent;

                    if (!parent.children)
                        parent.children = [];
                    parent.children.push(track);

                    if (parent)
                        top = false;
                } else {
                    // console.log("Couldn't find parent " + ptoks[0] + '(' + track.parent + ')');
                }
               
            }
            if (track.compositeTrack) {
                composites.push(track);
            } else if (top) {
                toplevels.push(track);
            }
        }

        for (var ci = 0; ci < composites.length; ++ci) {
            var comp = composites[ci];
            if (!comp.children)
                continue;

            var parentOfViews = false;
            for (var ki = 0; ki < comp.children.length; ++ki) {
                var k = comp.children[ki];
                if (k.view) {
                    k.shortLabel = comp.shortLabel + ": " + k.shortLabel;
                    toplevels.push(k);
                    parentOfViews = true;
                }
            }
            if (!parentOfViews)
                toplevels.push(comp);
        }
            
        thisB._tracks = toplevels;
        return callback(thisB._tracks, null);
    }, {credentials: this.credentials, salt: true});
}

function connectTrackHub(hubURL, callback, opts) {
    opts = opts || {};
    opts.salt = true;

    textXHR(hubURL, function(hubFile, err) {
        if (err) {
            return callback(null, err);
        }

        var toks = hubFile.split(THUB_PARSE_REGEXP);
        var hub = new TrackHub(hubURL);
        if (opts.credentials) {
            hub.credentials = opts.credentials;
        }
        for (var l = 0; l < toks.length - 2; l += 3) {
            hub[toks[l+1]] = toks[l+2];
        }
        
        
        if (hub.genomesFile) {
            var genURL = relativeURL(hubURL, hub.genomesFile);
            textXHR(genURL, function(genFile, err) {
                if (err) {
                    return callback(null, err);
                }

                var stanzas = genFile.split(THUB_STANZA_REGEXP);
                for (var s = 0; s < stanzas.length; ++s) {
                    var toks = stanzas[s].split(THUB_PARSE_REGEXP);
                    var gprops = new TrackHubDB(hub);
                    if (opts.credentials) {
                        gprops.credentials = opts.credentials;
                    }

                    for (var l = 0; l < toks.length - 2; l += 3) {
                        gprops[toks[l+1]] = toks[l+2];
                    }

                    if (gprops.twoBitPath) {
                        gprops.twoBitPath = relativeURL(genURL, gprops.twoBitPath);
                    }

                    if (gprops.genome && gprops.trackDb) {
                        gprops.absURL = relativeURL(genURL, gprops.trackDb);
                        hub.genomes[gprops.genome] = gprops;
                    }
                }

                callback(hub);
                        
            }, opts);
        } else {
            callback(null, 'No genomesFile');
        }
    }, opts);
}


TrackHubTrack.prototype.toDallianceSource = function() {
    var source = {
        name: this.shortLabel,
        desc: this.longLabel
    };
    if (this._db.mapping) {
        source.mapping = this._db.mapping;
    }

    var pennantIcon = this.get('pennantIcon');
    if (pennantIcon) {
        var ptoks = pennantIcon.split(/\s+/);
        source.pennant = THUB_PENNANT_PREFIX + ptoks[0];
    }

    var searchTrix = this.get('searchTrix');
    if (searchTrix) {
        source.trixURI = relativeURL(this._db.absURL, searchTrix);
    }

    if (this.container == 'multiWig') {
        source.merge = 'concat';
        source.overlay = [];
        var children = this.children || [];
        source.style = [];
        source.noDownsample = true;

        for (var ci = 0; ci < children.length; ++ci) {
            var ch = children[ci];
            var cs = ch.toDallianceSource()
            source.overlay.push(cs);

            if (cs.style) {
                for (var si = 0; si < cs.style.length; ++si) {
                    var style = cs.style[si];
                    style.method = ch.shortLabel;  // FIXME
                    if (this.aggregate == 'transparentOverlay')
                        style.style.ALPHA = 0.5;
                    source.style.push(style);
                }
            }
        }
        return source;

        
    } else {
        var typeToks = this.type.split(/\s+/);
        if (typeToks[0] == 'bigBed') {
            var bedTokens = typeToks[1]|0
            var bedPlus = typeToks[2] == '+';

            source.bwgURI = relativeURL(this._db.absURL, this.bigDataUrl);
            source.style = this.bigbedStyles();
            if (this._db.credentials) {
                source.credentials = true;
            }
            if (bedTokens >= 12 && bedPlus)
                source.collapseSuperGroups = true;
            return source;
        } else if (typeToks[0] == 'bigWig') {
            source.bwgURI = relativeURL(this._db.absURL, this.bigDataUrl);
            source.style = this.bigwigStyles();
            source.noDownsample = true;     // FIXME seems like a blunt instrument...
            
            if (this.yLineOnOff && this.yLineOnOff == 'on') {
                source.quantLeapThreshold = this.yLineMark !== undefined ? (1.0 * this.yLineMark) : 0.0;
            }

            if (this._db.credentials) {
                source.credentials = true;
            }

            return source;
        } else if (typeToks[0] == 'bam') {
            source.bamURI = relativeURL(this._db.absURL, this.bigDataUrl);
            if (this._db.credentials) {
                source.credentials = true;
            }
            return source;
        } else if (typeToks[0] == 'vcfTabix') {
            source.uri = relativeURL(this._db.absURL, this.bigDataUrl);
            source.tier_type = 'tabix';
            source.payload = 'vcf';
            if (this._db.credentials) {
                source.credentials = true;
            }
            return source;
        } else {
            console.log('Unsupported ' + this.type);
        }
    }
}

TrackHubTrack.prototype.bigwigStyles = function() {
    var typeToks = this.type.split(/\s+/);
    var min, max;
    if (typeToks.length >= 3) {
        min = 1.0 * typeToks[1];
        max = 1.0 * typeToks[2];
    }

    var height;
    if (this.maxHeightPixels) {
        var mhpToks = this.maxHeightPixels.split(/:/);
        if (mhpToks.length == 3) {
            height = mhpToks[1] | 0;
        } else {
            console.log('maxHeightPixels should be of the form max:default:min');
        }
    }
    
    var gtype = 'bars';
    if (this.graphTypeDefault) {
        gtype = this.graphTypeDefault;
    }
    
    var color = 'black';
    var altColor = null;
    if (this.color) {
        color = 'rgb(' + this.color + ')';
    }
    if (this.altColor) {
        altColor = 'rgb(' + this.altColor + ')';
    }
    
    var stylesheet = new DASStylesheet();
    var wigStyle = new DASStyle();
    if (gtype == 'points') {
        wigStyle.glyph = 'POINT';
    } else {
        wigStyle.glyph = 'HISTOGRAM';
    }

    if (altColor) {
        wigStyle.COLOR1 = color;
        wigStyle.COLOR2 = altColor;
    } else {
        wigStyle.BGCOLOR = color;
    }
    wigStyle.HEIGHT = height || 30;
    if (min || max) {
        wigStyle.MIN = min;
        wigStyle.MAX = max;
    }
    stylesheet.pushStyle({type: 'default'}, null, wigStyle);
    return stylesheet.styles;
}

TrackHubTrack.prototype.bigbedStyles = function() {
    var itemRgb = (''+this.get('itemRgb')).toLowerCase() == 'on';
    var visibility = this.get('visibility') || 'full';
    var color = this.get('color');
    if (color)
        color = 'rgb(' + color + ')';
    else 
        color = 'blue';
    
    var stylesheet = new DASStylesheet();
    var wigStyle = new DASStyle();
    wigStyle.glyph = 'BOX';
    wigStyle.FGCOLOR = 'black';
    wigStyle.BGCOLOR = color;
    wigStyle.HEIGHT = (visibility == 'full' || visibility == 'pack') ? 12 : 8;
    wigStyle.BUMP = (visibility == 'full' || visibility == 'pack');
    wigStyle.LABEL = (visibility == 'full' || visibility == 'pack');
    wigStyle.ZINDEX = 20;
    if (itemRgb)
        wigStyle.BGITEM = true;

    var cbs = this.get('colorByStrand');
    if (cbs) {
        var cbsToks = cbs.split(/\s+/);
        
        var plus = shallowCopy(wigStyle);
        plus.BGCOLOR = 'rgb(' + cbsToks[0] + ')';
        stylesheet.pushStyle({type: 'bigwig', orientation: '+'}, null, plus);

        var minus = shallowCopy(wigStyle);
        minus.BGCOLOR = 'rgb(' + cbsToks[1] + ')';
        stylesheet.pushStyle({type: 'bigwig', orientation: '-'}, null, minus);
    } else {
        stylesheet.pushStyle({type: 'bigwig'}, null, wigStyle);
    }   
    
    var tlStyle = new DASStyle();
    tlStyle.glyph = 'BOX';
    tlStyle.FGCOLOR = 'black';
    if (itemRgb)
        tlStyle.BGITEM = true;
    tlStyle.BGCOLOR = 'red'
    tlStyle.HEIGHT = 10;
    tlStyle.BUMP = true;
    tlStyle.ZINDEX = 20;
    stylesheet.pushStyle({type: 'translation'}, null, tlStyle);
    
    var tsStyle = new DASStyle();
    tsStyle.glyph = 'BOX';
    tsStyle.FGCOLOR = 'black';
    tsStyle.BGCOLOR = 'white';
    tsStyle.HEIGHT = 10;
    tsStyle.ZINDEX = 10;
    tsStyle.BUMP = true;
    tsStyle.LABEL = true;
    stylesheet.pushStyle({type: 'transcript'}, null, tsStyle);

    return stylesheet.styles;
}

function THUB_COMPARE(g, h) {
    if (g.priority && h.priority) {
        return (1.0 * g.priority) - (1.0 * h.priority)
    } else if (g.priority) {
        return 1;
    } else if (h.priority) {
        return -1;
    } else {
        return g.shortLabel.localeCompare(h.shortLabel);
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        connectTrackHub: connectTrackHub,
        THUB_COMPARE: THUB_COMPARE
    };
}

},{"./das":10,"./utils":47}],39:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// tier-actions.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var shallowCopy = utils.shallowCopy;
}

Browser.prototype.mergeSelectedTiers = function() {
    var sources = [];
    var styles = [];

    for (var sti = 0; sti < this.selectedTiers.length; ++sti) {
        var tier = this.tiers[this.selectedTiers[sti]];
	    sources.push(shallowCopy(tier.dasSource));
        var ss = tier.stylesheet.styles;
        for (var si = 0; si < ss.length; ++si) {
            var sh = ss[si];
            var nsh = shallowCopy(sh);
            nsh.method = tier.dasSource.name.replace(/[()+*?]/g, '\\$&');
            nsh._methodRE = null;
            nsh.style = shallowCopy(sh.style);
            if (nsh.style.ZINDEX === undefined)
                nsh.style.ZINDEX = sti;

            if (tier.forceMin) {
                nsh.style.MIN = tier.forceMin;
            }
            if (tier.forceMax) {
                nsh.style.MAX = tier.forceMax;
            }

            styles.push(nsh);
        }
    }
    
    this.addTier(
	{name: 'Merged',
	 merge: 'concat',
	 overlay: sources,
	 noDownsample: true,
     style: styles});

    this.setSelectedTier(this.tiers.length - 1);
}

},{"./cbrowser":6,"./utils":47}],40:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2013
//
// tier-edit.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var utils = require('./utils');
    var makeElement = utils.makeElement;

    var das = require('./das');
    var isDasBooleanTrue = das.isDasBooleanTrue;
    var isDasBooleanNotFalse = das.isDasBooleanNotFalse;
    var copyStylesheet = das.copyStylesheet;

    var color = require('./color');
    var dasColourForName = color.dasColourForName;
}

var __dalliance_smallGlyphs = {DOT: true, EX: true, STAR: true, SQUARE: true, CROSS: true, TRIANGLE: true, PLIMSOLL: true}

Browser.prototype.openTierPanel = function(tier) {
    var b = this;

    if (this.uiMode === 'tier' && this.manipulatingTier === tier) {
        this.hideToolPanel();
        this.setUiMode('none');
    } else {
        var setStyleColors = function(style) {
            if (style.BGGRAD)
                return;

            if (numColors == 1) {
                if (style.glyph == 'LINEPLOT' || __dalliance_smallGlyphs[style.glyph]) {
                    style.FGCOLOR = tierColorField.value;
                } else {
                    style.BGCOLOR = tierColorField.value;
                }
                style.COLOR1 = style.COLOR2 = style.COLOR3 = null;
            } else {
                style.COLOR1 = tierColorField.value;
                style.COLOR2 = tierColorField2.value;
                if (numColors > 2) {
                    style.COLOR3 = tierColorField3.value;
                } else {
                    style.COLOR3 = null;
                }
            }
            style._gradient = null;
        }

        var mutateStylesheet = function(visitor) {
            var nss = copyStylesheet(tier.stylesheet);
            var ssScale = tier.browser.zoomForCurrentScale();

            for (var i = 0; i < nss.styles.length; ++i) {
                var sh = nss.styles[i];
                if (sh.zoom && sh.zoom != ssScale) {
                    continue;
                }

                visitor(sh.style);
            }

            return nss;
        }

        var changeColor = function(ev) {
            tier.mergeConfig({stylesheet: mutateStylesheet(setStyleColors)});
        }
        
        this.manipulatingTier = tier;

        var tierForm = makeElement('div', null, {className: 'tier-edit'});
        if (tier.dasSource.mapping) {
            var coords = this.chains[tier.dasSource.mapping].coords;
            tierForm.appendChild(makeElement('div', 'Mapped from ' + coords.auth + coords.version , null, 
                {background: 'gray', paddingBottom: '5px', marginBottom: '5px', textAlign: 'center'}));
        }
        var semanticBanner = makeElement('div', 'Editing styles for current zoom level', null,
                {background: 'gray', paddingBottom: '5px', marginBottom: '5px', textAlign: 'center', display: 'none'});
        tierForm.appendChild(semanticBanner);

        var tierNameField = makeElement('input', null, {type: 'text'});
        var tierPinnedToggle = makeElement('input', null, {type: 'checkbox'});

        var glyphField = makeElement('select');
        glyphField.appendChild(makeElement('option', 'Histogram', {value: 'HISTOGRAM'}));
        glyphField.appendChild(makeElement('option', 'Line Plot', {value: 'LINEPLOT'}));
        glyphField.appendChild(makeElement('option', 'Ribbon', {value: 'GRADIENT'}));
        glyphField.appendChild(makeElement('option', 'Scatter', {value: 'SCATTER'}));

        var tierColorField = makeElement('input', null, {type: 'text', value: '#dd00dd'});
        var tierColorField2 = makeElement('input', null, {type: 'text', value: '#dd00dd'});
        var tierColorField3 = makeElement('input', null, {type: 'text', value: '#dd00dd'});
        try {
            tierColorField.type = tierColorField2.type = tierColorField3.type = 'color';
        } catch (e) {
            // IE throws if attempt to set type to 'color'.
        }

        var tierColorFields = [tierColorField, tierColorField2, tierColorField3];
        var colorListPlus = makeElement('i', null, {className: 'fa fa-plus-circle'});
        var colorListMinus = makeElement('i', null, {className: 'fa fa-minus-circle'});
        var numColors = 1;
        var colorListElement = makeElement('td', tierColorFields);
        var setNumColors = function(n) {
            numColors = n;
            for (var i = 0; i < n; ++i) 
                tierColorFields[i].style.display = 'block';
            for (var i = n; i < tierColorFields.length; ++i)
                tierColorFields[i].style.display = 'none';
        }
        colorListPlus.addEventListener('click', function(ev) {
            if (numColors < 3) {
                setNumColors(numColors + 1);
                changeColor(null);
            }
        }, false);
        colorListMinus.addEventListener('click', function(ev) {
            if (numColors > 1) {
                setNumColors(numColors - 1);
                changeColor(null);
            }
        }, false);

        var tierMinField = makeElement('input', null, {type: 'text', value: '0.0'});
        var tierMaxField = makeElement('input', null, {type: 'text', value: '10.0'});
        var tierMinToggle = makeElement('input', null, {type: 'checkbox'});
        var tierMaxToggle = makeElement('input', null, {type: 'checkbox'});

        var quantLeapToggle = makeElement('input', null, {type: 'checkbox', checked: tier.quantLeapThreshold !== undefined});
        var quantLeapThreshField = makeElement('input', null, {type: 'text', value: tier.quantLeapThreshold, disabled: !quantLeapToggle.checked});

        var tierHeightField = makeElement('input', null, {type: 'text', value: '50'});

        var bumpToggle = makeElement('input', null, {type: 'checkbox'});
        var labelToggle = makeElement('input', null, {type: 'checkbox'});

        var mainStyle = null;
        if (tier.stylesheet.styles.length > 0) {
            var s = mainStyle = tier.stylesheet.styles[0].style;
        }

        var refresh = function() {
            if (typeof tier.config.name === 'string')
                tierNameField.value = tier.config.name;
            else 
                tierNameField.value = tier.dasSource.name;

            tierPinnedToggle.checked = tier.pinned;

            if (tier.forceHeight) {
                tierHeightField.value = '' + tier.forceHeight;
            } else if (mainStyle && mainStyle.HEIGHT) {
                tierHeightField.value = '' + mainStyle.HEIGHT;
            }

            if (typeof tier.quantLeapThreshold == 'number') {
                quantLeapToggle.checked = true;
                quantLeapThreshField.disabled = false;
                if (parseFloat(quantLeapThreshField.value) != tier.quantLeapThreshold)
                    quantLeapThreshField.value = tier.quantLeapThreshold;
            } else {
                quantLeapToggle.checked = false;
                quantLeapThreshField.disabled = true;
            }

            if (tier.stylesheet.styles.length > 0) {
                var s = null;
                var isQuantitative=false, isSimpleQuantitative = false;
                var ssScale = tier.browser.zoomForCurrentScale();
                var activeStyleCount = 0;

                for (var si = 0; si < tier.stylesheet.styles.length; ++si) {
                    var sh = tier.stylesheet.styles[si];  
                    if (sh.zoom && sh.zoom != ssScale) {
                        continue;
                    }
                    ++activeStyleCount;
                    var ss = tier.stylesheet.styles[si].style;

                    if (!s) {
                        s = mainStyle = ss;
                    }
                    
                    if (ss.glyph == 'LINEPLOT' || ss.glyph == 'HISTOGRAM' || ss.glyph == 'GRADIENT' || isDasBooleanTrue(ss.SCATTER)) {
                        if (!isQuantitative)
                            s = mainStyle = ss;
                        isQuantitative = true;
                    }
                }
                if (!s) {
                    return;
                }

                semanticBanner.style.display = (activeStyleCount == tier.stylesheet.styles.length) ? 'none' : 'block';

                isSimpleQuantitative = isQuantitative && activeStyleCount == 1;
                var isGradient = s.COLOR2 || s.BGGRAD;

                if (isQuantitative) {
                    minRow.style.display = 'table-row';
                    maxRow.style.display = 'table-row';
                    bumpRow.style.display = 'none';
                    labelRow.style.display = 'none';
                } else {
                    minRow.style.display = 'none';
                    maxRow.style.display = 'none';
                    bumpRow.style.display = 'table-row';
                    bumpToggle.checked = isDasBooleanTrue(mainStyle.BUMP);
                    labelRow.style.display = 'table-row';
                    labelToggle.checked = isDasBooleanTrue(mainStyle.LABEL);
                }

                if (isSimpleQuantitative) {
                    styleRow.style.display = 'table-row';
                    colorRow.style.display = 'table-row';
                } else {
                    styleRow.style.display = 'none';
                    colorRow.style.display = 'none';

                }

                var numColors = 1;
                if (s.COLOR1) {
                    tierColorField.value = dasColourForName(s.COLOR1).toHexString();
                    if (s.COLOR2) {
                        tierColorField2.value = dasColourForName(s.COLOR2).toHexString();
                        if (s.COLOR3) {
                            tierColorField3.value = dasColourForName(s.COLOR3).toHexString();
                            numColors = 3;
                        } else {
                            numColors = 2;
                        }
                    }
                } else {
                    if (s.glyph == 'LINEPLOT' || s.glyph == 'DOT' && s.FGCOLOR) {
                        tierColorField.value = dasColourForName(s.FGCOLOR).toHexString();
                    } else if (s.BGCOLOR) {
                        tierColorField.value = dasColourForName(s.BGCOLOR).toHexString();
                    }
                } 
                setNumColors(numColors);

                if (isDasBooleanTrue(s.SCATTER)) {
                    glyphField.value = 'SCATTER';
                } else {
                    glyphField.value = s.glyph;
                } 

                var setMinValue, setMaxValue;
                if (s.MIN !== undefined) {
                    var x = parseFloat(s.MIN);
                    if (!isNaN(x))
                        setMinValue = x;
                }
                if (!tier.forceMinDynamic && (s.MIN !== undefined || tier.forceMin !== undefined)) {
                    tierMinToggle.checked = true;
                    tierMinField.disabled = false;
                } else {
                    tierMinToggle.checked = false;
                    tierMinField.disabled = true;
                }

                if (s.MAX !== undefined) {
                    var x = parseFloat(s.MAX)
                    if (!isNaN(x))
                        setMaxValue = x;
                }
                if (!tier.forceMaxDynamic && (s.MAX !== undefined || tier.forceMax !== undefined)) {
                    tierMaxToggle.checked = true;
                    tierMaxField.disabled = false;
                } else {
                    tierMaxToggle.checked = false;
                    tierMaxField.disabled = true;
                }

                if (tier.forceMin != undefined) {
                    setMinValue = tier.forceMin;
                }
                if (tier.forceMax != undefined) {
                    setMaxValue = tier.forceMax;
                }
                if (typeof(setMinValue) == 'number' && setMinValue != parseFloat(tierMinField.value)) {
                    tierMinField.value = setMinValue;
                }
                if (typeof(setMaxValue) == 'number' && setMaxValue != parseFloat(tierMaxField.value)) {
                    tierMaxField.value = setMaxValue;
                }

                var seqStyle = getSeqStyle(tier.stylesheet);
                if (seqStyle) {
                    seqMismatchRow.style.display = 'table-row';
                    seqMismatchToggle.checked = (seqStyle.__SEQCOLOR === 'mismatch');
                    seqInsertRow.style.display = 'table-row';
                    seqInsertToggle.checked =  isDasBooleanTrue(seqStyle.__INSERTIONS);
                } else {
                    seqMismatchRow.style.display = 'none';
                    seqInsertRow.style.display = 'none';
                }
            }

            if (isQuantitative && tier.browser.sourceAdapterIsCapable(tier.featureSource, 'quantLeap'))
                quantLeapRow.style.display = 'table-row';
            else 
                quantLeapRow.style.display = 'none';
        }

        var seqMismatchToggle = makeElement('input', null, {type: 'checkbox'});
        var seqMismatchRow = makeElement('tr',
            [makeElement('th', 'Color mismatches'),
             makeElement('td', seqMismatchToggle)]);
        seqMismatchToggle.addEventListener('change', function(ev) {
            var nss = copyStylesheet(tier.stylesheet);
            var seqStyle = getSeqStyle(nss);
            seqStyle.__SEQCOLOR = seqMismatchToggle.checked ? 'mismatch' : 'base';
            tier.mergeConfig({stylesheet: nss});
        });

        var seqInsertToggle = makeElement('input', null, {type: 'checkbox'});
        var seqInsertRow = makeElement('tr',
            [makeElement('th', 'Show insertions'),
             makeElement('td', seqInsertToggle)]);
        seqInsertToggle.addEventListener('change', function(ev) {
            var nss = copyStylesheet(tier.stylesheet);
            var seqStyle = getSeqStyle(nss);
            seqStyle.__INSERTIONS = seqInsertToggle.checked ? 'yes' : 'no';
            tier.mergeConfig({stylesheet: nss});
        });

        var styleRow = makeElement('tr',
                [makeElement('th', 'Style'),
                 makeElement('td', glyphField)]);
        var colorRow = makeElement('tr',
                [makeElement('th', ['Colour(s)', colorListPlus, colorListMinus]),
                 colorListElement]);
        var minRow = makeElement('tr',
                [makeElement('th', 'Min value'),
                 makeElement('td', [tierMinToggle, ' ', tierMinField])]);
        var maxRow = makeElement('tr',
                [makeElement('th', 'Max value'),
                 makeElement('td', [tierMaxToggle, ' ', tierMaxField])]);
        var quantLeapRow = 
             makeElement('tr',
                [makeElement('th', 'Threshold leap:'),
                 makeElement('td', [quantLeapToggle, ' ', quantLeapThreshField])]);
        var bumpRow = makeElement('tr',
                [makeElement('th', 'Bump overlaps'),
                 makeElement('td', bumpToggle)]);
        var labelRow = makeElement('tr',
                [makeElement('th', 'Label features'),
                 makeElement('td', labelToggle)]);


        var tierTable = makeElement('table',
            [makeElement('tr',
                [makeElement('th', 'Name', {}, {width: '150px', textAlign: 'right'}),
                 tierNameField]),

             makeElement('tr',
                [makeElement('th', 'Pin to top'),
                 tierPinnedToggle]),

             makeElement('tr',
                [makeElement('th', 'Height'),
                 makeElement('td', tierHeightField)]),

            styleRow,
            colorRow,
            minRow,
            maxRow,
            quantLeapRow,
            bumpRow,
            labelRow,
            seqMismatchRow,
            seqInsertRow
             ]);


        refresh();

        tierForm.appendChild(tierTable);

        var resetButton = makeElement('button', 'Reset track', {className: 'btn'}, {marginLeft: 'auto', marginRight: 'auto', display: 'block'});
        resetButton.addEventListener('click', function(ev) {
            tier.setConfig({});
        }, false);
        tierForm.appendChild(resetButton);

        tierNameField.addEventListener('input', function(ev) {
            tier.mergeConfig({name: tierNameField.value});
        }, false);

        tierPinnedToggle.addEventListener('change', function(ev) {
            tier.mergeConfig({pinned: tierPinnedToggle.checked});
        }, false);

        for (var ci = 0; ci < tierColorFields.length; ++ci) {
            tierColorFields[ci].addEventListener('change', changeColor, false);
        }

        glyphField.addEventListener('change', function(ev) {
            var nss = mutateStylesheet(function(ts) {
                if (glyphField.value === 'SCATTER') {
                    ts.SCATTER = true;
                    ts.glyph = 'DOT';
                    ts.SIZE = '3';
                } else {
                    ts.glyph = glyphField.value;
                    ts.SCATTER = undefined;
                }
                setStyleColors(ts);
            });
            tier.mergeConfig({stylesheet: nss});
        }, false);

        tierMinToggle.addEventListener('change', function(ev) {
            var conf = {forceMinDynamic: !tierMinToggle.checked};
            tierMinField.disabled = !tierMinToggle.checked;
            var x = parseFloat(tierMinField.value);
            if (tierMinToggle.checked && typeof(x) == 'number' && !isNaN(x))
                conf.forceMin = parseFloat(x);
            tier.mergeConfig(conf);
        });
        tierMinField.addEventListener('input', function(ev) {
            var x = parseFloat(tierMinField.value);
            if (typeof(x) == 'number' && !isNaN(x))
                tier.mergeConfig({forceMin: x});
        }, false);

        tierMaxToggle.addEventListener('change', function(ev) {
            var conf = {forceMaxDynamic: !tierMaxToggle.checked};
            tierMaxField.disabled = !tierMaxToggle.checked;
            var x = parseFloat(tierMaxField.value);
            if (tierMaxToggle.checked && typeof(x) == 'number' && !isNaN(x))
                conf.forceMax = parseFloat(x);
            tier.mergeConfig(conf);
        });
        tierMaxField.addEventListener('input', function(ev) {
            var x = parseFloat(tierMaxField.value);
            if (typeof(x) == 'number' && !isNaN(x))
                tier.mergeConfig({forceMax: x});
        }, false);

        tierHeightField.addEventListener('input', function(ev) {
            var x = parseFloat(tierHeightField.value);
            if (typeof(x) == 'number' && !isNaN(x))
                tier.mergeConfig({height: Math.min(500, x|0)});
        }, false);

        var updateQuant = function() {
            quantLeapThreshField.disabled = !quantLeapToggle.checked;
            if (quantLeapToggle.checked) {
                var x = parseFloat(quantLeapThreshField.value);
                if (typeof(x) == 'number' && !isNaN(x)) {
                    tier.mergeConfig({quantLeapThreshold: parseFloat(quantLeapThreshField.value)});
                }
            } else {
                tier.mergeConfig({quantLeapThreshold: null});
            }
        }
        quantLeapToggle.addEventListener('change', function(ev) {
            updateQuant();
        }, false);
        quantLeapThreshField.addEventListener('input', function(ev) {
            updateQuant();
        }, false);

        labelToggle.addEventListener('change', function(ev) {
            var nss = mutateStylesheet(function(style) {
                style.LABEL = labelToggle.checked ? 'yes' : 'no';
            });
            tier.mergeConfig({stylesheet: nss});
        }, false);
        bumpToggle.addEventListener('change', function(ev) {
            var nss = mutateStylesheet(function(style) {
                style.BUMP = bumpToggle.checked ? 'yes' : 'no';
            });
            tier.mergeConfig({stylesheet: nss});
        }, false);


        this.showToolPanel(tierForm);
        this.setUiMode('tier');

        tier.addTierListener(refresh);

        var currentScale = tier.browser.scale;
        tier.browser.addViewListener(function() {
            if (tier.browser.scale != currentScale) {
                currentScale = tier.browser.scale;
                refresh();
            }
        });
    }
}

function getSeqStyle(stylesheet) {
    for (var si = 0; si < stylesheet.styles.length; ++si) {
        var ss = stylesheet.styles[si].style;
        if (ss.glyph === '__SEQUENCE') {
            return ss;
        }
    }
}


},{"./cbrowser":6,"./color":9,"./das":10,"./utils":47}],41:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// tier.js: (try) to encapsulate the functionality of a browser tier.
//

"use strict";

if (typeof(require) !== 'undefined') {
    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var shallowCopy = utils.shallowCopy;
    var pushnew = utils.pushnew;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
}

var __tier_idSeed = 0;

function DasTier(browser, source, config, background)
{
    this.config = config || {};
    this.id = 'tier' + (++__tier_idSeed);
    this.browser = browser;
    this.dasSource = shallowCopy(source);
    this.background = background;

    this.viewport = makeElement('canvas', null, 
                                {width: '' + ((this.browser.featurePanelWidth|0) + 2000), 
                                 height: "30",
                                 className: 'viewport'});
    this.overlay = makeElement('canvas', null,
         {width: + ((this.browser.featurePanelWidth|0) + 2000), 
          height: "30",
          className: 'viewport-overlay'});

    this.notifier = makeElement('div', '', {className: 'notifier'});
    this.notifierHolder = makeElement('div', this.notifier, {className: 'notifier-holder'});
    this.quantOverlay = makeElement(
        'canvas', null, 
        {width: '50', height: "56",
         className: 'quant-overlay'});

    this.removeButton = makeElement('i', null, {className: 'fa fa-times'});
    this.bumpButton = makeElement('i', null, {className: 'fa fa-plus-circle'});
    this.loaderButton = browser.makeLoader(16);
    this.loaderButton.style.display = 'none';
    this.infoElement = makeElement('div', this.dasSource.desc, {className: 'track-label-info'});
    this.nameButton = makeElement('div', [], {className: 'tier-tab'});
    this.nameButton.appendChild(this.removeButton);
    if (source.pennant) {
        this.nameButton.appendChild(makeElement('img', null, {src: source.pennant, width: '16', height: '16'}))
    }
    this.nameElement = makeElement('span', source.name);
    this.nameButton.appendChild(makeElement('span', [this.nameElement, this.infoElement], {className: 'track-name-holder'}));
    this.nameButton.appendChild(this.bumpButton);
    this.nameButton.appendChild(this.loaderButton);
    
    this.label = makeElement('span',
       [this.nameButton],
       {className: 'btn-group track-label'});


    this.row = makeElement('div', [this.viewport,
                                   this.overlay, 
                                   this.quantOverlay],
                            {className: 'tier'});

    if (!background) {
        this.row.style.background = 'none';
    }

    if (!browser.noDefaultLabels)
        this.row.appendChild(this.label);
    this.row.appendChild(this.notifierHolder);
    
    this.layoutHeight = 25;
    this.bumped = true;
    this.styleIdSeed = 0;
    if (source.quantLeapThreshold) {
        this.quantLeapThreshold = source.quantLeapThreshold;
    }
    if (this.dasSource.collapseSuperGroups) {
        this.bumped = false;
    }
    this.layoutWasDone = false;

    if (source.featureInfoPlugin) {
        this.addFeatureInfoPlugin(source.featureInfoPlugin);
    }

    this.initSources();

    var thisB = this;
    if (this.featureSource && this.featureSource.getDefaultFIPs && !source.noSourceFeatureInfo) {
        this.featureSource.getDefaultFIPs(function(fip) {
            if (fip)
                thisB.addFeatureInfoPlugin(fip);
        });
    }

    if (this.featureSource && this.featureSource.addReadinessListener) {
        this.featureSource.addReadinessListener(function(ready) {
            thisB.notify(ready, -1);
        });
    }

    this.listeners = [];
    this.featuresLoadedListeners = [];
}

DasTier.prototype.toString = function() {
    return this.id;
}

DasTier.prototype.addFeatureInfoPlugin = function(p) {
    if (!this.featureInfoPlugins) 
        this.featureInfoPlugins = [];
    this.featureInfoPlugins.push(p);
}

DasTier.prototype.init = function() {
    var tier = this;

    if (tier.dasSource.style) {
        this.setStylesheet({styles: tier.dasSource.style});
        this.browser.refreshTier(this);
    } else {
        tier.status = 'Fetching stylesheet';
        tier.fetchStylesheet(function(ss, err) {
            if (err || !ss) {
                tier.error = 'No stylesheet';
                var ss = new DASStylesheet();
                var defStyle = new DASStyle();
                defStyle.glyph = 'BOX';
                defStyle.BGCOLOR = 'blue';
                defStyle.FGCOLOR = 'black';
                ss.pushStyle({type: 'default'}, null, defStyle);
                tier.setStylesheet(ss);
                tier.browser.refreshTier(tier);
            } else {
                tier.setStylesheet(ss);
                if (ss.geneHint) {
                    tier.dasSource.collapseSuperGroups = true;
                    tier.bumped = false;
                    tier.updateLabel();
                }
                tier.browser.refreshTier(tier);
            }
        });
    }
}

DasTier.prototype.setStylesheet = function(ss) {
    this.baseStylesheet = shallowCopy(ss);
    for (var si = 0; si < this.baseStylesheet.styles.length; ++si) {
        var sh = this.baseStylesheet.styles[si] = shallowCopy(this.baseStylesheet.styles[si]);
        sh._methodRE = sh._labelRE = sh._typeRE = null;
        sh.style = shallowCopy(sh.style);
        sh.style.id = 'style' + (++this.styleIdSeed);
    }
    this._updateFromConfig();
}

DasTier.prototype.getSource = function() {
    return this.featureSource;
}

DasTier.prototype.getDesiredTypes = function(scale) {
    var fetchTypes = [];
    var inclusive = false;
    var ssScale = this.browser.zoomForCurrentScale();

    if (this.stylesheet) {
        // dlog('ss = ' + miniJSONify(this.stylesheet));
        var ss = this.stylesheet.styles;
        for (var si = 0; si < ss.length; ++si) {
            var sh = ss[si];
            if (!sh.zoom || sh.zoom == ssScale) {
                if (!sh.type || sh.type == 'default') {
                    inclusive = true;
                    break;
                } else {
                    pushnew(fetchTypes, sh.type);
                }
            }
        }
    } else {
        // inclusive = true;
        return undefined;
    }

    if (inclusive) {
        return null;
    } else {
        return fetchTypes;
    }
}

DasTier.prototype.needsSequence = function(scale ) {
    if (this.dasSource.tier_type === 'sequence' && scale < 5) {
        return true;
    } else if ((this.dasSource.bamURI || this.dasSource.bamBlob) && scale < 20) {
        return true
    }
    return false;
}

DasTier.prototype.viewFeatures = function(chr, coverage, scale, features, sequence) {
    this.currentFeatures = features;
    this.currentSequence = sequence;
    this.notifyFeaturesLoaded();
    
    this.knownChr = chr;
    this.knownCoverage = coverage;

    if (this.status) {
        this.status = null;
        this._notifierToStatus();
    }

    this.draw();
}

DasTier.prototype.draw = function() {
    var features = this.currentFeatures;
    var seq = this.currentSequence;
    if (this.dasSource.tier_type === 'sequence') {
        drawSeqTier(this, seq); 
    } else {
        drawFeatureTier(this);
    }
    this.paint();
    this.originHaxx = 0;
    this.browser.arrangeTiers();
}

DasTier.prototype.findNextFeature = function(chr, pos, dir, fedge, callback) {
    if (this.quantLeapThreshold) {
        var width = this.browser.viewEnd - this.browser.viewStart + 1;
        pos = (pos +  ((width * dir) / 2))|0
        this.featureSource.quantFindNextFeature(chr, pos, dir, this.quantLeapThreshold, callback);
    } else {
        if (this.knownCoverage && pos >= this.knownCoverage.min() && pos <= this.knownCoverage.max()) {
            if (this.currentFeatures) {
                var bestFeature = null;
                for (var fi = 0; fi < this.currentFeatures.length; ++fi) {
                    var f = this.currentFeatures[fi];
                    if (!f.min || !f.max) {
                        continue;
                    }
                    if (f.parents && f.parents.length > 0) {
                        continue;
                    }
                    if (dir < 0) {
                        if (fedge == 1 && f.max >= pos && f.min < pos) {
                            if (!bestFeature || f.min > bestFeature.min ||
                                (f.min == bestFeature.min && f.max < bestFeature.max)) {
                                bestFeature = f;
                            }
                        } else if (f.max < pos) {
                            if (!bestFeature || f.max > bestFeature.max || 
                                (f.max == bestFeature.max && f.min < bestFeature.min) ||
                                (f.min == bestFeature.mmin && bestFeature.max >= pos)) {
                                bestFeature = f;
                            } 
                        }
                    } else {
                        if (fedge == 1 && f.min <= pos && f.max > pos) {
                            if (!bestFeature || f.max < bestFeature.max ||
                                (f.max == bestFeature.max && f.min > bestFeature.min)) {
                                bestFeature = f;
                            }
                        } else if (f.min > pos) {
                            if (!bestFeature || f.min < bestFeature.min ||
                                (f.min == bestFeature.min && f.max > bestFeature.max) ||
                                (f.max == bestFeature.max && bestFeature.min <= pos)) {
                                bestFeature = f;
                            }
                        }
                    }
                }
                if (bestFeature) {
                    //                dlog('bestFeature = ' + miniJSONify(bestFeature));
                    return callback(bestFeature);
                }
                if (dir < 0) {
                    pos = this.knownStart;
                } else {
                    pos = this.knownEnd;
                }
            }
        }

        this.featureSource.findNextFeature(chr, pos, dir, callback);
    }
}


DasTier.prototype.updateLabel = function() {
   this.bumpButton.className = this.bumped ? 'fa fa-minus-circle' : 'fa fa-plus-circle';
   if (this.dasSource.collapseSuperGroups) {
        this.bumpButton.style.display = 'inline-block';
    } else {
        this.bumpButton.style.display = 'none';
    }
}

DasTier.prototype.updateHeight = function() {
    this.currentHeight = Math.max(Math.max(this.layoutHeight, this.label.clientHeight + 2), this.browser.minTierHeight);
    this.row.style.height = '' + this.currentHeight + 'px';
    this.browser.updateHeight();
 }

DasTier.prototype.drawOverlay = function() {
    var t = this;
    var b = this.browser;
    var retina = b.retina && window.devicePixelRatio > 1;
    var g = t.overlay.getContext('2d');
    
    t.overlay.height = t.viewport.height;
    t.overlay.width = t.viewport.width;
    if (retina) {
        g.scale(2, 2);
    }
    
    var origin = b.viewStart - (1000/b.scale);
    var visStart = b.viewStart - (1000/b.scale);
    var visEnd = b.viewEnd + (1000/b.scale);


    for (var hi = 0; hi < b.highlights.length; ++hi) {
        var h = b.highlights[hi];
        if (((h.chr === b.chr) || (h.chr === ('chr' + b.chr))) && h.min < visEnd && h.max > visStart) {
            g.globalAlpha = b.defaultHighlightAlpha;
            g.fillStyle = b.defaultHighlightFill;
            g.fillRect((h.min - origin) * b.scale,
                       0,
                       (h.max - h.min) * b.scale,
                       t.overlay.height);
        }
    }

    t.oorigin = b.viewStart;
    t.overlay.style.width = t.viewport.style.width;
    t.overlay.style.height = t.viewport.style.height;
    t.overlay.style.left = '-1000px'
}

DasTier.prototype.updateStatus = function(status) {
    if (status) {
        this.status = status;
        this.currentFeatures = [];
        this.currentSequence = null;
        this.draw();
        this.updateHeight();
        this._notifierToStatus();
    } else {
        if (this.status) {
            this.status = null
            this._notifierToStatus();
        }
    }
}

DasTier.prototype.notify = function(message, timeout) {
    if (typeof(timeout) !== 'number')
        timeout = 2000;

    if (this.notifierFadeTimeout) {
        clearTimeout(this.notifierFadeTimeout);
        this.notifierFadeTimeout = null;
    }

    if (message) {
        this._notifierOn(message);
        if (timeout > 0) {
            var thisB = this;
            this.notifierFadeTimeout = setTimeout(function() {
                thisB._notifierToStatus();
            }, timeout);
        }
    } else {
        this._notifierToStatus();
    }
}

DasTier.prototype._notifierOn = function(message) {
    this.notifier.textContent = message;
    this.notifier.style.opacity = 0.8;
}

DasTier.prototype._notifierOff = function() {
    this.notifier.style.opacity = 0;
}

DasTier.prototype._notifierToStatus = function() {
    if (this.status) {
        this._notifierOn(this.status)
    } else {
        this._notifierOff();
    }
}

DasTier.prototype.setConfig = function(config) {
    this.config = config || {};
    this._updateFromConfig();
    this.notifyTierListeners();
}

DasTier.prototype.mergeConfig = function(newConfig) {
    for (var k in newConfig) {
        this.config[k] = newConfig[k];
    }
    this._updateFromConfig();
    this.notifyTierListeners();
}

DasTier.prototype._updateFromConfig = function() {
    var needsRefresh = false;
    var needsReorder = false;

    if (typeof this.config.name === 'string')
        this.nameElement.textContent = this.config.name;
    else
        this.nameElement.textContent = this.dasSource.name;

    var wantedHeight = this.config.height || this.dasSource.forceHeight;
    if (wantedHeight != this.forceHeight) {
        this.forceHeight = wantedHeight;
        needsRefresh = true;
    }

    if (this.forceMinDynamic != this.config.forceMinDynamic) {
        this.forceMinDynamic = this.config.forceMinDynamic;
        needsRefresh = true;
    }

    var forceMin = this.config.forceMin != undefined ? this.config.forceMin : this.dasSource.forceMin;
    if (this.forceMin != forceMin) {
        this.forceMin = forceMin;
        needsRefresh = true;
    }

    if (this.forceMaxDynamic != this.config.forceMaxDynamic) {
        this.forceMaxDynamic = this.config.forceMaxDynamic;
        needsRefresh = true;
    }
    
    var forceMax = this.config.forceMax != undefined ? this.config.forceMax : this.dasSource.forceMax;
    if (this.forceMax != forceMax) {
        this.forceMax = forceMax;
        needsRefresh = true;
    }

    var quantLeapThreshold = null;
    if (this.config.quantLeapThreshold !== undefined)
        quantLeapThreshold = this.config.quantLeapThreshold;
    else if (this.dasSource.quantLeapThreshold !== undefined)
        quantLeapThreshold = this.dasSource.quantLeapThreshold;
    if (quantLeapThreshold != this.quantLeapThreshold) {
        this.quantLeapThreshold = quantLeapThreshold;
        needsRefresh = true;
    }
    
    // Possible FIXME -- are there cases where style IDs need to be reassigned?
    var stylesheet = this.config.stylesheet || this.baseStylesheet;
    if (this.stylesheet !== stylesheet) {
        this.stylesheet = stylesheet;
        needsRefresh = true;
    }

    var wantedPinned = this.config.pinned !== undefined ? this.config.pinned : this.dasSource.pinned;
    if (wantedPinned !== this.pinned) {
        this.pinned = wantedPinned;
        needsReorder = true;
    }

    if (needsRefresh)
        this.scheduleRedraw();

    if (needsReorder)
        this.browser.reorderTiers();
}

DasTier.prototype.scheduleRedraw = function() {
    if (!this.currentFeatures)
        return;
    
    var tier = this;

    if (!this.redrawTimeout) {
        this.redrawTimeout = setTimeout(function() {
            tier.draw();
            tier.redrawTimeout = null;
        }, 10);
    }
}


DasTier.prototype.addTierListener = function(l) {
    this.listeners.push(l);
}

DasTier.prototype.notifyTierListeners = function(change) {
    for (var li = 0; li < this.listeners.length; ++li) {
        try {
            this.listeners[li](change);
        } catch (e) {
            console.log(e);
        }
    }
    this.browser.notifyTier();
}

DasTier.prototype.addFeaturesLoadedListener = function(handler) {
    this.featuresLoadedListeners.push(handler);
}

DasTier.prototype.notifyFeaturesLoaded = function() {
    for (var li = 0; li < this.featuresLoadedListeners.length; ++li) {
        try {
            this.featuresLoadedListeners[li].call(this);
        } catch (e) {
            console.log(e);
        }
    }
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        DasTier: DasTier
    };

    // Imported for side effects
    var fd = require('./feature-draw');
    var drawFeatureTier = fd.drawFeatureTier;
    var sd = require('./sequence-draw');
    var drawSeqTier = sd.drawSeqTier;
    // require('./sourceadapters');  /* Done in cbrowser instead */
}
},{"./das":10,"./feature-draw":16,"./sequence-draw":29,"./utils":47}],42:[function(require,module,exports){
/**
 * Retrieve DAS resources from tranSMART's DAS
 *
 * @param result_instance_id
 * @returns {Array}
 */

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;

    var tUtils = require('./tsmart-utils');
    var displayError = tUtils.displayError;

    var das = require('./das');
    var DASSegment = das.DASSegment;
    var DASRegistry = das.DASRegistry;

}

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;
    var sourcesAreEqual = browser.sourcesAreEqual;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;
    var Observed = utils.Observed;

    var thub = require('./thub');
    var THUB_COMPARE = thub.THUB_COMPARE;
    var connectTrackHub = thub.connectTrackHub;

    var domui = require('./domui');
    var makeTreeTableSection = domui.makeTreeTableSection;

    var probeResource = require('./probe').probeResource;


    // Most of this could disappear if we leave all probing to the probe module...
    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;
    var BlobFetchable = bin.BlobFetchable;
    var readInt = bin.readInt;

    var lh3utils = require('./lh3utils');
    var unbgzf = lh3utils.unbgzf;

    var bam = require('./bam');
    var BAM_MAGIC = bam.BAM_MAGIC;
    var BAI_MAGIC = bam.BAI_MAGIC;

    var tbi = require('./tabix');
    var TABIX_MAGIC = tbi.TABIX_MAGIC;


    var das = require('./das');
    var DASSource = das.DASSource;
    var DASSegment = das.DASSegment;
    var DASRegistry = das.DASRegistry;
}

/**
 * Add track when user drag & drop a node
 * @param node
 * @param result_instance_id_1
 */
Browser.prototype.addTrackByNode = function (node, result_instance_id_1, result_instance_id_2) {

    var thisB = this;
    var das_source;
    var res_inst_id_1, res_inst_id_2;

    /**
     * Get tranSMART's DAS source
     * @param result_instance_id
     * @param dataType
     * @returns {Array}
     * @private
     */
    var _getTransmartDASSources = function (result_instance_id, dataType) {

var arrNds = new Array();

        if (dataType == 'acgh') {
            arrNds[0] = new DASSource({name: 'acgh-gain', uri: pageInfo.basePath + "/das/acgh-gain-" + result_instance_id + "/"});
            arrNds[1] = new DASSource({name: 'acgh-loss', uri: pageInfo.basePath + "/das/acgh-loss-" + result_instance_id + "/"});
            arrNds[2] = new DASSource({name: 'acgh-normal', uri: pageInfo.basePath + "/das/acgh-normal-" + result_instance_id + "/"});
            arrNds[3] = new DASSource({name: 'acgh-amp', uri: pageInfo.basePath + "/das/acgh-amp-" + result_instance_id + "/"});
            arrNds[4] = new DASSource({name: 'acgh-inv', uri: pageInfo.basePath + "/das/acgh-inv-" + result_instance_id + "/"});
        } else if (dataType == 'vcf') {
            arrNds[0] = new DASSource({name: 'smaf', uri: pageInfo.basePath + "/das/smaf-"+ result_instance_id + "/"});
            arrNds[1] = new DASSource({name: 'qd', uri: pageInfo.basePath + "/das/qd-" + result_instance_id + "/"});
            arrNds[3] = new DASSource({name: 'gv', uri: pageInfo.basePath + "/das/gv-"+ result_instance_id + "/"});
            arrNds[4] = new DASSource({name: 'vcf', uri: pageInfo.basePath + "/das/vcf-"+ result_instance_id + "/"});
        } else {
            console.log("Unknown data type", dataType);
        }

        return arrNds;
    }

    /**
     * Add DAS source
     * @param arr
     * @param nameSuffix
     * @param testSegment
     * @param tryAddDASxSources
     * @private
     */
    var _addDasSource = function (arr, nameSuffix, testSegment, tryAddDASxSources) {

        arr.forEach(function(nds) {

            nds.features(testSegment, {}, function(features) {

                if (!nds.name)  {
                    var nameExtractPattern = new RegExp('/([^/]+)/?$');
                    var match = nameExtractPattern.exec(nds.uri);
                    if (match) {
                        nds.name = match[1];
                    }
                }

                tryAddDASxSources(nds, nameSuffix);

                return;
            });
        });

    }

    // reseting the global subset ids (result instance ids)
    GLOBAL.CurrentSubsetIDs[1] = null;
    GLOBAL.CurrentSubsetIDs[2] = null;

    var _getNodeDetails = function (node, callback) {

        var nodReq = new XMLHttpRequest();
        var nodUrl = pageInfo.basePath + "/HighDimension/nodeDetails";

        nodReq.open('POST', nodUrl, true);
        nodReq.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");

        nodReq.onreadystatechange = function() {
            if (nodReq.readyState == 4) {
                if (nodReq.status == 200 || nodReq.status == 206) {
                    return callback(nodReq.responseText);
                } else {
                    return callback(null);
                }
            }
        };

        var params = "conceptKeys="+encodeURIComponent([node.id]);
        nodReq.send(params);

    };

    // get result instance id as representative of cohort selection
    // in Comparison tab
    runAllQueries(function () {

        res_inst_id_1 = GLOBAL.CurrentSubsetIDs[1];
        res_inst_id_2 = GLOBAL.CurrentSubsetIDs[2];

        var knownSpace = thisB.knownSpace;

        /**
         * Check if a node is high dimensional or not
         * @param node
         * @returns {boolean}
         */
        var _isHighDimensionalNode = function (node) {
            if (node.attributes.visualattributes.indexOf('HIGH_DIMENSIONAL') != -1)
                return true;
            else
                return false;
        }

        // validate space
        if (!knownSpace) {
            alert("Can't confirm track-addition to an unit browser.");
            return;
        }

        var tsm = Math.max(knownSpace.min, (knownSpace.min + knownSpace.max - 100) / 2)|0;
        var testSegment = new DASSegment(knownSpace.chr, tsm, Math.min(tsm + 99, knownSpace.max));

        var _nodeDetails = _getNodeDetails(node, function (response) {

            var dataType = "";

            for (var key in JSON.parse(response)) {
                dataType = key;
            }


            if (_isHighDimensionalNode(node)) {
                // define features
                var sources = _getTransmartDASSources(res_inst_id_1, dataType);
                _addDasSource(sources, res_inst_id_2 ? '-subset 1' : '', testSegment, tryAddDASxSources);
                if (res_inst_id_2) {
                    sources = _getTransmartDASSources(res_inst_id_2, dataType);
                    _addDasSource(sources, '-subset 2', testSegment, tryAddDASxSources);
                }
                thisB.createAddInfoButton()
            } else {
                displayError('Error', 'Cannot display non-High Dimensional node');
            }

        });

        /**
         * Add DAS x Sources
         * @param nds
         * @param nameSuffix for distinguishing multiple subsets
         * @param retry
         */
        function tryAddDASxSources(nds, nameSuffix, retry) {

            var uri = nds.uri;
            if (retry) {
                var match = /(.+)\/[^\/]+\/?/.exec(uri);
                if (match) {
                    uri = match[1] + '/sources';
                }
            }
            function sqfail() {
                if (!retry) {
                    return tryAddDASxSources(nds, nameSuffix, true);
                } else {
                    return drawTrack(nds);
                }
            }

            new DASRegistry(uri, {credentials: nds.credentials}).sources(
                function(sources) {
                    if (!sources || sources.length == 0) {
                        return sqfail();
                    }

                    var fs = null;
                    if (sources.length == 1) {
                        fs = sources[0];
                    } else {
                        for (var i = 0; i < sources.length; ++i) {
                            if (sources[i].uri === nds.uri) {
                                fs = sources[i];
                                break;
                            }
                        }
                    }

                    var coordsDetermined = false, quantDetermined = false;

                    /**
                     *
                     * @param c1
                     * @param c2
                     * @returns {boolean}
                     * @private
                     */
                    var _coordsMatch = function (c1, c2) {
                        return c1.taxon == c2.taxon && c1.auth == c2.auth && c1.version == c2.version;
                    }


                    if (fs) {
                        nds.name = fs.name+nameSuffix;
                        nds.desc = fs.desc;
                        if (fs.maxbins) {
                            nds.maxbins = true;
                        } else {
                            nds.maxbins = false;
                        }
                        if (fs.capabilities) {
                            nds.capabilities = fs.capabilities;
                        }
                        quantDetermined = true

                        if (fs.coords && fs.coords.length == 1) {
                            var coords = fs.coords[0];
                            if (_coordsMatch(coords, thisB.coordSystem)) {
                                coordsDetermined = true;
                            } else if (thisB.chains) {
                                for (var k in thisB.chains) {
                                    if (_coordsMatch(coords, thisB.chains[k].coords)) {
                                        nds.mapping = k;
                                        coordsDetermined = true;
                                    }
                                }
                            }
                        }

                    }
                    return drawTrack(nds, coordsDetermined, quantDetermined);
                },
                function() {
                    return sqfail();
                }
            );
        }

        /**
         * Draw new track in the swimming lane
         * @param nds
         * @param coordsDetermined
         * @param quantDetermined
         * @param quantIrrelevant
         */
        var drawTrack = function(nds, coordsDetermined, quantDetermined, quantIrrelevant) {

            var dataToFinalize = nds;

            var m = '__default__'; // coordinate system
            if (m != '__default__') {
                dataToFinalize.mapping = m;
            } else {
                dataToFinalize.mapping = undefined;
            }
            thisB.sources.push(dataToFinalize);
            thisB.makeTier(dataToFinalize);
        }

    });
}

Browser.prototype.createAddInfoButton= function() {
    var that = this;
    //get the Add track button
    var dalBtns = jQuery('.pull-right.btn-group').children();
    jQuery(dalBtns[0]).click(function() {
        if (jQuery('#btnAddVCFINFO').length > 0)
            return; //it's already there
        //add a button to add custom INFO tracks for VCF
        var btn = that.makeButton('Add VCF INFO', 'Add a custom track with a particular field from the INFO column in a VCF file');
        btn.id = 'btnAddVCFINFO';
        btn.addEventListener('click', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            var vcfs = that.scanCurrentTracksForVCF();

            //only add the track if there is a query result instance
            if (vcfs.length > 0) {
                var infoField = prompt(
                    'You can add custom track from the INFO column. If you know the VCF file\'s INFO column contains for example: \n\nDP=89;AF1=1;AC1=2;DP4=0,0,81,0;MQ=60;FQ=-271,\n\n you can add a track for DP to see the values of DP plotted. \n'+
                        'Please, first drop a VCF node from the concept tree on the genome browser. \n'+
                        'Note: please remember to remove the track and add it again if you change the patient subset selection criteria',
                    'DP');
                if (infoField != null) {
                    that.addVCFInfoTrack(infoField, vcfs[0].id, vcfs.length>1?'-subset 1' : '');
                    if (vcfs.length>1)
                        that.addVCFInfoTrack(infoField, vcfs[1].id, '-subset 2');
                }
            }
            else {
                alert('Please, first drop a VCF node from the concept tree on the genome browser.');
            }
        });
        jQuery('.nav').prepend(btn);
    })
}

Browser.prototype.addVCFInfoTrack= function(infoField, qri, nameSuffix) {
    this.addTier(new DASSource({
        name: 'VCF-'+infoField.trim()+nameSuffix,
        uri: pageInfo.basePath + "/das/vcfInfo-"+infoField.trim()+'-'+ qri + "/"
    }))
}

Browser.prototype.scanCurrentTracksForVCF = function () {
    var subset1, subset2; var subset1INFOs=[], subset2INFOs=[];
    var vcfs = [];
    for (var i=0;i<this.sources.length;i++){
        var s = this.sources[i];
        if (!s.uri) continue;
        if (s.uri.indexOf('vcf-') > -1 ||
            s.uri.indexOf('vcfInfo-') > -1 ||
            s.uri.indexOf('smaf-') > -1 ||
            s.uri.indexOf('qd-') > -1 ||
            s.uri.indexOf('gv-') > -1) {
            //stuff between last / identifies track, numbers after last - identify QRI
            var match = /([^\-]+)-(([^\-]+)-)?([^\/]+)\/$/.exec(s.uri)
            if (match) {
                var qri = match[4]; //QRI is fourth group
                var info = match[3];
                var subset = null;
                for (var j=0;j<vcfs.length;j++)
                    if (vcfs[j].id == qri)
                        subset = vcfs[j];
                if (subset == null)
                    vcfs.push(subset = {id: qri, infos:[info], sources: [s]});
                else {
                    subset.infos.push(info);
                    subset.sources.push(s);
                }

            }
        }
    }
    return vcfs;
}

},{"./bam":1,"./bin":4,"./cbrowser":6,"./das":10,"./domui":11,"./lh3utils":22,"./probe":26,"./tabix":37,"./thub":38,"./tsmart-utils":45,"./utils":47}],43:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// track-adder.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var browser = require('./cbrowser');
    var Browser = browser.Browser;
    var sourcesAreEqual = browser.sourcesAreEqual;

    var utils = require('./utils');
    var makeElement = utils.makeElement;
    var removeChildren = utils.removeChildren;
    var Observed = utils.Observed;

    var thub = require('./thub');
    var THUB_COMPARE = thub.THUB_COMPARE;
    var connectTrackHub = thub.connectTrackHub;

    var domui = require('./domui');
    var makeTreeTableSection = domui.makeTreeTableSection;

    var probeResource = require('./probe').probeResource;


    // Most of this could disappear if we leave all probing to the probe module...
    var bin = require('./bin');
    var URLFetchable = bin.URLFetchable;
    var BlobFetchable = bin.BlobFetchable;
    var readInt = bin.readInt;

    var lh3utils = require('./lh3utils');
    var unbgzf = lh3utils.unbgzf;

    var bam = require('./bam');
    var BAM_MAGIC = bam.BAM_MAGIC;
    var BAI_MAGIC = bam.BAI_MAGIC;

    var tbi = require('./tabix');
    var TABIX_MAGIC = tbi.TABIX_MAGIC;

    var das = require('./das');
    var DASSource = das.DASSource;
    var DASSegment = das.DASSegment;
    var DASRegistry = das.DASRegistry;
}

Browser.prototype.currentlyActive = function(source) {
    for (var ti = 0; ti < this.tiers.length; ++ti) {
        if (sourcesAreEqual(this.tiers[ti].dasSource, source))
            return this.tiers[ti];
    }
    return false;
}

Browser.prototype.makeButton = function(name, tooltip) {
    var regButton = makeElement('a', name, {href: '#'});
    if (tooltip) {
        this.makeTooltip(regButton, tooltip);
    }
    return makeElement('li', regButton);
}

function activateButton(addModeButtons, which) {
    for (var i = 0; i < addModeButtons.length; ++i) {
        var b = addModeButtons[i];
        if (b === which) {
            b.classList.add('active');
        } else {
            b.classList.remove('active');
        }
    }
}

Browser.prototype.showTrackAdder = function(ev) {
    if (this.uiMode === 'add') {
        this.hideToolPanel();
        this.setUiMode('none');
        return;
    }

    var thisB = this;

    var popup = makeElement('div', null, {className: 'dalliance'} , {width: '100%', display: 'inline-block', boxSizing: 'border-box', MozBoxSizing: 'border-box', verticalAlign: 'top', paddingRight: '15px'});

    var addModeButtons = [];
    var makeStab, makeStabObserver;


    if (!this.noRegistryTabs) {
        var regButton = this.makeButton('Registry', 'Browse compatible datasources from the DAS registry');
        addModeButtons.push(regButton);
        
        for (var m in this.mappableSources) {
            var mf  = function(mm) {
                var mapButton = thisB.makeButton(thisB.chains[mm].srcTag, 'Browse datasources mapped from ' + thisB.chains[mm].srcTag);
                addModeButtons.push(mapButton);
                mapButton.addEventListener('click', function(ev) {
                    ev.preventDefault(); ev.stopPropagation();
                    activateButton(addModeButtons, mapButton);
                    makeStab(thisB.mappableSources[mm], mm);
                }, false);
            }; mf(m);
        }
    }

    var groupedDefaults = {};
    for (var si = 0; si < this.defaultSources.length; ++si) {
        var s = this.defaultSources[si];
        var g = s.group || 'Defaults';
        if (groupedDefaults[g]) {
            groupedDefaults[g].push(s);
        } else {
            groupedDefaults[g] = [s];
        }
    }
    

    var makeHubButton = function(tdb) {
        var hub = tdb.hub;
        var hubMenuButton = makeElement('i', null, {className: 'fa fa-list-alt'});
        var label = hub.shortLabel || 'Unknown';
        if (tdb.mapping)
            label = label + ' (' + tdb.genome + ')';
        var hbContent = makeElement('span', [label, ' ', hubMenuButton]);
        var hubButton = thisB.makeButton(hbContent, hub.longLabel);
        addModeButtons.push(hubButton);
        
        hubButton.addEventListener('click', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            activateButton(addModeButtons, hubButton);
            removeChildren(stabHolder);
            var loader = thisB.makeLoader(24);
            loader.style.marginLeft = 'auto';
            loader.style.marginRight = 'auto';
            loader.style.marginTop = '100px';
            stabHolder.appendChild(makeElement('div', loader, null, {textAlign: 'center'}));

            refreshButton.style.display = 'none';
            addButton.style.display = 'none';
            canButton.style.display = 'none';

            tdb.getTracks(function(tracks, err) {
                if (err) {
                    console.log(err);
                }
                
                makeHubStab(tracks);
            });
        }, false);

        hubMenuButton.addEventListener('click', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            
            var removeHubItem = makeElement('li', makeElement('a', 'Remove hub'));
            var allOnItem = makeElement('li',  makeElement('a', 'Enable all'));
            var allOffItem = makeElement('li',  makeElement('a', 'Disable all'));
            var hubMenu = makeElement('ul', [removeHubItem, allOnItem, allOffItem], {className: 'dropdown-menu'}, {display: 'block'});

            var mx =  ev.clientX, my = ev.clientY;
            mx +=  document.documentElement.scrollLeft || document.body.scrollLeft;
            my +=  document.documentElement.scrollTop || document.body.scrollTop;

            hubMenu.style.position = 'absolute';
            hubMenu.style.top = '' + (my+10) + 'px';
            hubMenu.style.left = '' + (mx-30) + 'px';
            thisB.hPopupHolder.appendChild(hubMenu);

            var clickCatcher = function(ev) {
                console.log('cc');
                document.body.removeEventListener('click', clickCatcher, true);
                thisB.hPopupHolder.removeChild(hubMenu);
            };
            document.body.addEventListener('click', clickCatcher, true);

            removeHubItem.addEventListener('click', function(ev) {
                for (var hi = 0; hi < thisB.hubObjects.length; ++hi) {
                    if (thisB.hubObjects[hi].absURL == tdb.absURL) {
                        thisB.hubObjects.splice(hi, 1);
                        break;
                    }
                }
                for (var hi = 0; hi < thisB.hubs.length; ++hi) {
                    var hc = thisB.hubs[hi];
                    if (typeof hc === 'string')
                        hc = {url: hc};
                    if (hc.url == tdb.hub.url && !hc.genome || hc.genome == tdb.genome) {
                        thisB.hubs.splice(hi, 1);
                        break;
                    }

                }

                thisB.notifyTier();

                modeButtonHolder.removeChild(hubButton);
                activateButton(addModeButtons, addHubButton);
                switchToHubConnectMode();
            }, false);


            allOnItem.addEventListener('click', function(ev) {
                tdb.getTracks(function(tracks, err) {
                    if (err) {
                        console.log(err);
                    }
                    
                    for (var ti = 0; ti < tracks.length; ++ti) {
                        var ds = tracks[ti].toDallianceSource();
                        if (!thisB.currentlyActive(ds)) {
                            thisB.addTier(ds);
                        }
                    }
                });
            }, false);

            allOffItem.addEventListener('click', function(ev) {
                tdb.getTracks(function(tracks, err) {
                    if (err) {
                        console.log(err);
                    }
                    
                    for (var ti = 0; ti < tracks.length; ++ti) {
                        var ds = tracks[ti].toDallianceSource();
                        if (thisB.currentlyActive(ds)) {
                            thisB.removeTier(ds);
                        }
                    }
                });
            }, false);
        }, false);

        return hubButton;
    }

    var firstDefButton = null;
    var firstDefSources = null;
    for (var g in groupedDefaults) {
        (function(g, ds) {
            var defButton = thisB.makeButton(g, 'Browse the default set of data for this browser');
            defButton.addEventListener('click', function(ev) {
                ev.preventDefault(); ev.stopPropagation();
                activateButton(addModeButtons, defButton);
                makeStab(new Observed(ds));
            }, false);
            addModeButtons.push(defButton);

            if (!firstDefButton) {
                firstDefButton = defButton;
                firstDefSources = ds;
            }
        })(g, groupedDefaults[g]);
    }   
    var custButton = this.makeButton('DAS', 'Add arbitrary DAS data');
    addModeButtons.push(custButton);
    var binButton = this.makeButton('Binary', 'Add data in bigwig or bigbed format');
    addModeButtons.push(binButton);


    for (var hi = 0; hi < this.hubObjects.length; ++hi) {
        var hub = this.hubObjects[hi];
        makeHubButton(hub);
    }

    var addHubButton = this.makeButton('+', 'Connect to a new track-hub');
    addModeButtons.push(addHubButton);


    var modeButtonHolder = makeElement('ul', addModeButtons, {className: 'nav nav-tabs'}, {marginBottom: '0px'});
    popup.appendChild(modeButtonHolder);
    
    var custURL, custName, custCS, custQuant, custFile, custUser, custPass;
    var customMode = false;
    var dataToFinalize = null;

    var asform = makeElement('form', null, {}, {display: 'inline-block', width: '100%'});
    asform.addEventListener('submit', function(ev) {
            ev.stopPropagation(); ev.preventDefault();
            doAdd();
            return false;
    }, true); 
    var stabHolder = makeElement('div');
    stabHolder.style.position = 'relative';
    stabHolder.style.overflow = 'scroll';
    // stabHolder.style.height = '500px';
    asform.appendChild(stabHolder);

    var __mapping;
    var __sourceHolder;


    makeStab = function(msources, mapping) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'none';
        canButton.style.display = 'none';
        if (__sourceHolder) {
            __sourceHolder.removeListener(makeStabObserver);
        }
        __mapping = mapping;
        __sourceHolder = msources;
        __sourceHolder.addListenerAndFire(makeStabObserver);
    }

    makeStabObserver = function(msources) {
        customMode = false;
        var buttons = [];
        removeChildren(stabHolder);
        if (!msources) {
            stabHolder.appendChild(makeElement('p', 'Dalliance was unable to retrieve data source information from the DAS registry, please try again later'));
            return;
        }
        
        var stabBody = makeElement('tbody', null, {className: 'table table-striped table-condensed'}, {width: '100%'});
        var stab = makeElement('table', stabBody, {className: 'table table-striped table-condensed'}, {width: '100%', tableLayout: 'fixed'}); 
        var idx = 0;

        var sources = [];
        for (var i = 0; i < msources.length; ++i) {
            sources.push(msources[i]);
        }
        
        sources.sort(function(a, b) {
            return a.name.toLowerCase().trim().localeCompare(b.name.toLowerCase().trim());
        });

        for (var i = 0; i < sources.length; ++i) {
            var source = sources[i];
            var r = makeElement('tr');

            var bd = makeElement('td', null, {}, {width: '30px'});
            bd.style.textAlign = 'center';
            if (!source.props || source.props.cors) {
                var b = makeElement('input');
                b.type = 'checkbox';
                b.dalliance_source = source;
                if (__mapping) {
                    b.dalliance_mapping = __mapping;
                }
                // b.checked = thisB.currentlyActive(source);
                bd.appendChild(b);
                buttons.push(b);
                b.addEventListener('change', function(ev) {
                    if (ev.target.checked) {
                        thisB.addTier(ev.target.dalliance_source);
                    } else {
                        thisB.removeTier(ev.target.dalliance_source);
                    }
                });
            } else {
                bd.appendChild(document.createTextNode('!'));
                thisB.makeTooltip(bd, makeElement('span', ["This data source isn't accessible because it doesn't support ", makeElement('a', "CORS", {href: 'http://www.w3.org/TR/cors/'}), "."]));
            }
            r.appendChild(bd);
            var ld = makeElement('td');
            ld.appendChild(document.createTextNode(source.name));
            if (source.desc && source.desc.length > 0) {
                thisB.makeTooltip(ld, source.desc);
            }
            r.appendChild(ld);
            stabBody.appendChild(r);
            ++idx;
        }

        var setChecks = function() {
            for (var bi = 0; bi < buttons.length; ++bi) {
                var b = buttons[bi];
                var t = thisB.currentlyActive(b.dalliance_source);
                if (t) {
                    b.checked = true;
                } else {
                    b.checked = false;
                }
            }
        }
        setChecks();
        thisB.addTierListener(function(l) {
            setChecks();
        });

        stabHolder.appendChild(stab);
    };

    function makeHubStab(tracks) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'none';
        canButton.style.display = 'none';

        customMode = false;
        removeChildren(stabHolder);
        
        var ttab = makeElement('div', null, {}, {width: '100%'});
        var sources = [];
        for (var i = 0; i < tracks.length; ++i) {
            sources.push(tracks[i]);
        }
        
        sources.sort(function(a, b) {
            return a.shortLabel.toLowerCase().trim().localeCompare(b.shortLabel.toLowerCase().trim());
        });

        var groups = [];
        var tops = [];
        
        for (var ti = 0; ti < sources.length; ++ti) {
            var track = sources[ti];
            if (track.children && track.children.length > 0 && track.container != 'multiWig') {
                groups.push(track);
            } else {
                tops.push(track);
            }
        }
        if (tops.length > 0) {
            groups.push({
                shortLabel: 'Others',
                priority: -100000000,
                children: tops});
        }

        groups.sort(THUB_COMPARE);
        
        var buttons = [];
        for (var gi = 0; gi < groups.length; ++gi) {
            var group = groups[gi];
            var dg = group;
            if (!dg.dimensions && dg._parent && dg._parent.dimensions)
                dg = dg._parent;

            var dprops = {}
            if (dg.dimensions) {
                var dtoks = dg.dimensions.split(/(\w+)=(\w+)/);
                for (var dti = 0; dti < dtoks.length - 2; dti += 3) {
                    dprops[dtoks[dti + 1]] = dtoks[dti + 2];
                }
            }

            if (dprops.dimX && dprops.dimY) {
                var dimX = dprops.dimX, dimY = dprops.dimY;
                var sgX = dg.subgroups[dimX];
                var sgY = dg.subgroups[dimY];
                
                var trks = {};
                for (var ci = 0; ci < group.children.length; ++ci) {
                    var child = group.children[ci];
                    var vX = child.sgm[dimX], vY = child.sgm[dimY];
                    if (!trks[vX])
                        trks[vX] = {};
                    trks[vX][vY] = child;
                }

                var matrix = makeElement('table', null, {className: 'table table-striped table-condensed'}, {tableLayout: 'fixed'});
                {
                    var header = makeElement('tr');
                    header.appendChild(makeElement('th', null, {}, {width: '150px', height: '100px'}));   // blank corner element
                    for (var si = 0; si < sgX.titles.length; ++si) {
                        var h = makeElement('th', makeElement('div', sgX.titles[si], {}, {transform: 'rotate(-60deg)', 
                                                                       transformOrigin: '0% 100%', 
                                                                       webkitTransform: 'rotate(-60deg) translate(20px,10px)', 
                                                                       webkitTransformOrigin: '0% 100%',
                                                                       textAlign: 'left'}), {}, {width: '35px',
                                                                                                 height: '100px',
                                                                                                 verticalAlign: 'bottom'})
                        header.appendChild(h);
                    }
                    matrix.appendChild(header);
                }

                var mbody = makeElement('tbody', null, {className: 'table table-striped table-condensed'})
                for (var yi = 0; yi < sgY.titles.length; ++yi) {
                    var vY = sgY.tags[yi];
                    var row = makeElement('tr');
                    row.appendChild(makeElement('th', sgY.titles[yi]), {});
                    
                    for (var xi = 0; xi < sgX.titles.length; ++xi) {
                        var vX = sgX.tags[xi];
                        var cell = makeElement('td');
                        if (trks[vX] && trks[vX][vY]) {
                            var track = trks[vX][vY];
                            var ds = track.toDallianceSource();
                            if (!ds)
                                continue;
                            
                            var r = makeElement('tr');
                            var bd = makeElement('td');
                            bd.style.textAlign = 'center';
                            
                            var b = makeElement('input');
                            b.type = 'checkbox';
                            b.dalliance_source = ds;
                            if (__mapping) {
                                b.dalliance_mapping = __mapping;
                            }
                            buttons.push(b);
                            cell.appendChild(b);
                            b.addEventListener('change', function(ev) {
                                if (ev.target.checked) {
                                    thisB.addTier(ev.target.dalliance_source);
                                } else {
                                    thisB.removeTier(ev.target.dalliance_source);
                                }
                            });

                        }
                        row.appendChild(cell);
                    } 
                    mbody.appendChild(row);
                }
                matrix.appendChild(mbody);
                ttab.appendChild(makeTreeTableSection(group.shortLabel, matrix, gi==0));                
            } else {
                var stabBody = makeElement('tbody', null, {className: 'table table-striped table-condensed'});
                var stab = makeElement('table', stabBody, {className: 'table table-striped table-condensed'}, {width: '100%', tableLayout: 'fixed'}); 
                var idx = 0;
            
                group.children.sort(THUB_COMPARE);
                for (var i = 0; i < group.children.length; ++i) {
                    var track = group.children[i];
                    var ds = track.toDallianceSource();
                    if (!ds)
                        continue;

                    var r = makeElement('tr');
                    var bd = makeElement('td', null, {}, {width: '30px'});
                    bd.style.textAlign = 'center';
                    
                    var b = makeElement('input');
                    b.type = 'checkbox';
                    b.dalliance_source = ds;
                    if (__mapping) {
                        b.dalliance_mapping = __mapping;
                    }
                    buttons.push(b);
                    bd.appendChild(b);
                    b.addEventListener('change', function(ev) {
                        if (ev.target.checked) {
                            thisB.addTier(ev.target.dalliance_source);
                        } else {
                            thisB.removeTier(ev.target.dalliance_source);
                        }
                    });

                    r.appendChild(bd);
                    var ld = makeElement('td');
                    ld.appendChild(document.createTextNode(track.shortLabel));
                    if (track.longLabel && track.longLabel.length > 0) {
                        thisB.makeTooltip(ld, track.longLabel);
                    }
                    r.appendChild(ld);
                    stabBody.appendChild(r);
                    ++idx;
                }

                if (groups.length > 1 || group.shortLabel !== 'Others') {
                    ttab.appendChild(makeTreeTableSection(group.shortLabel, stab, gi==0));
                } else {
                    ttab.appendChild(stab);
                }
                
            }
        }

        var setChecks = function() {
            for (var bi = 0; bi < buttons.length; ++bi) {
                var b = buttons[bi];
                var t = thisB.currentlyActive(b.dalliance_source);
                if (t) {
                    b.checked = true;
                    b.disabled = t.sequenceSource != null;
                } else {
                    b.checked = false;
                }
            }
        }
        setChecks();
        thisB.addTierListener(function(l) {
            setChecks();
        });
        
        stabHolder.appendChild(ttab);
    }

    if (regButton) {
        regButton.addEventListener('click', function(ev) {
            ev.preventDefault(); ev.stopPropagation();
            activateButton(addModeButtons, regButton);
            makeStab(thisB.availableSources);
        }, false);
    }
 
    binButton.addEventListener('click', function(ev) {
        ev.preventDefault(); ev.stopPropagation();
        switchToBinMode();
    }, false);
    addHubButton.addEventListener('click', function(ev) {
        ev.preventDefault(); ev.stopPropagation();
        switchToHubConnectMode();
    }, false);


    function switchToBinMode() {
        activateButton(addModeButtons, binButton);
        customMode = 'bin';

        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'none';

        removeChildren(stabHolder);
        var pageHolder = makeElement('div', null, {}, {paddingLeft: '10px', paddingRight: '10px'});
        pageHolder.appendChild(makeElement('h3', 'Add custom URL-based data'));
        pageHolder.appendChild(makeElement('p', ['You can add indexed binary data hosted on an web server that supports CORS (', makeElement('a', 'full details', {href: 'http://www.biodalliance.org/bin.html'}), ').  Currently supported formats are bigwig, bigbed, and indexed BAM.']));

        pageHolder.appendChild(makeElement('br'));
        pageHolder.appendChild(document.createTextNode('URL: '));
        custURL = makeElement('input', '', {size: 80, value: 'http://www.biodalliance.org/datasets/ensGene.bb'}, {width: '100%'});
        pageHolder.appendChild(custURL);
        
        pageHolder.appendChild(makeElement('br'));
        pageHolder.appendChild(makeElement('b', '- or -'));
        pageHolder.appendChild(makeElement('br'));
        pageHolder.appendChild(document.createTextNode('File: '));
        custFile = makeElement('input', null, {type: 'file', multiple: 'multiple'});
        pageHolder.appendChild(custFile);
        
        pageHolder.appendChild(makeElement('p', 'Clicking the "Add" button below will initiate a series of test queries.'));

        stabHolder.appendChild(pageHolder);
        custURL.focus();
    }

    function switchToHubConnectMode() {
        activateButton(addModeButtons, addHubButton);
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'none';

        customMode = 'hub-connect';
        refreshButton.style.visibility = 'hidden';

        removeChildren(stabHolder);

        var pageHolder = makeElement('div', null, {}, {paddingLeft: '10px', paddingRight: '10px'});
        pageHolder.appendChild(makeElement('h3', 'Connect to a track hub.'));
        pageHolder.appendChild(makeElement('p', ['Enter the top-level URL (usually points to a file called "hub.txt") of a UCSC-style track hub']));
        
        custURL = makeElement('input', '', {size: 120, value: 'http://www.biodalliance.org/datasets/testhub/hub.txt'}, {width: '100%'});
        pageHolder.appendChild(custURL);
        
        stabHolder.appendChild(pageHolder);
        
        custURL.focus();
    }

    custButton.addEventListener('click', function(ev) {
        ev.preventDefault(); ev.stopPropagation();
        switchToCustomMode();
    }, false);

    function switchToCustomMode() {
        activateButton(addModeButtons, custButton);
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'none';

        customMode = 'das';

        removeChildren(stabHolder);

        var customForm = makeElement('div', null, {},  {paddingLeft: '10px', paddingRight: '10px'});
        customForm.appendChild(makeElement('h3', 'Add custom DAS data'));
        customForm.appendChild(makeElement('p', 'This interface is intended for adding custom or lab-specific data.  Public data can be added more easily via the registry interface.'));
                
        customForm.appendChild(document.createTextNode('URL: '));
        customForm.appendChild(makeElement('br'));
        custURL = makeElement('input', '', {size: 80, value: 'http://www.derkholm.net:8080/das/medipseq_reads/'}, {width: '100%'});
        customForm.appendChild(custURL);

        customForm.appendChild(makeElement('p', 'Clicking the "Add" button below will initiate a series of test queries.  If the source is password-protected, you may be prompted to enter credentials.'));
        stabHolder.appendChild(customForm);

        custURL.focus();
    }



    var addButton = makeElement('button', 'Add', {className: 'btn btn-primary'});
    addButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        doAdd();
    }, false);

    function doAdd() {
        if (customMode) {
            if (customMode === 'das') {
                var curi = custURL.value.trim();
                if (!/^.+:\/\//.exec(curi)) {
                    curi = 'http://' + curi;
                }
                var nds = new DASSource({name: 'temporary', uri: curi});
                tryAddDAS(nds);
            } else if (customMode === 'bin') {
                var fileList = custFile.files;

                if (fileList && fileList.length > 0) {
                    tryAddMultiple(fileList);
                } else {
                    var curi = custURL.value.trim();
                    if (!/^.+:\/\//.exec(curi)) {
                        curi = 'http://' + curi;
                    }
                    tryAddBin({uri: curi});
                }
            } else if (customMode === 'reset') {
                switchToCustomMode();
            } else if (customMode === 'reset-bin') {
                switchToBinMode(); 
            } else if (customMode === 'reset-hub') {
                switchToHubConnectMode();
            } else if (customMode === 'prompt-bai') {
                var fileList = custFile.files;
                if (fileList && fileList.length > 0 && fileList[0]) {
                    dataToFinalize.baiBlob = fileList[0];
                    completeBAM(dataToFinalize);
                } else {
                    promptForBAI(dataToFinalize);
                }
            } else if (customMode === 'prompt-tbi') {
                var fileList = custFile.files;
                if (fileList && fileList.length > 0 && fileList[0]) {
                    dataToFinalize.indexBlob = fileList[0];
                    completeTabixVCF(dataToFinalize);
                } else {
                    promptForTabix(dataToFinalize);
                }
            } else if (customMode === 'finalize' || customMode === 'finalize-bin') {
                dataToFinalize.name = custName.value;
                var m = custCS.value;
                if (m != '__default__') {
                    dataToFinalize.mapping = m;
                } else {
                    dataToFinalize.mapping = undefined;
                }
                if (custQuant) {
                    dataToFinalize.maxbins = custQuant.checked;
                }

                if (custUser.value.length > 1 && custPass.value.length > 1) {
                    dataToFinalize.xUser = custUser.value;
                    dataToFinalize.xPass = custPass.value;
                }

                thisB.addTier(dataToFinalize);

                if (customMode == 'finalize-bin')
                    switchToBinMode();
                else
                    switchToCustomMode();
            } else if (customMode === 'hub-connect') {
                var curi = custURL.value.trim();
                if (!/^.+:\/\//.exec(curi)) {
                    curi = 'http://' + curi;
                }
                
                tryAddHub(curi);
            } else if (customMode === 'multiple') {
                for (var mi = 0; mi < multipleSet.length; ++mi) {
                    var s = multipleSet[mi];
                    if (s.hidden)
                        continue;

                    if (s.tier_type == 'bam' && !s.indexBlob && !s.indexUri)
                        continue;
                    if (s.tier_type == 'tabix' && !s.indexBlob && !s.indexUri)
                        continue;

                    var nds = makeSourceConfig(s);
                    if (nds) {
                        nds.noPersist = true;
                        thisB.addTier(nds);
                    }
                }

                switchToBinMode();
            }
        } else {
            thisB.removeAllPopups();
        }
    };

    function tryAddHub(curi, opts, retry) {
        opts = opts || {};
        
        connectTrackHub(curi, function(hub, err) {
            if (err) {
                if (!retry) {
                    return tryAddHub(curi, {credentials: true}, true);
                }
                removeChildren(stabHolder);
                stabHolder.appendChild(makeElement('h2', 'Error connecting to track hub'))
                stabHolder.appendChild(makeElement('p', err));
                customMode = 'reset-hub';
                return;
            } else {
                var bestHub = null;
                var bestHubButton = null;
                for (var genome in hub.genomes) {
                    var mapping = null;
                    var okay = false;

                    if (genome == thisB.coordSystem.ucscName) {
                        okay = true;
                    } else {
                         for (var mid in thisB.chains) {
                            var m = thisB.chains[mid];
                            if (genome == m.coords.ucscName) {
                                mapping = mid;
                                okay = true;
                            }
                         }
                    }

                    if (okay) {
                        var hc = {url: curi, genome: genome};
                        if (opts.credentials)
                            hc.credentials = true;
                        if (mapping) {
                            hc.mapping = mapping;
                            hub.genomes[genome].mapping = mapping;
                        }
                        thisB.hubs.push(hc);
                        thisB.hubObjects.push(hub.genomes[genome]);
                        
                        var hubButton = makeHubButton(hub.genomes[genome]);
                        modeButtonHolder.appendChild(hubButton);

                        if (!mapping || !bestHub) {
                            bestHub = hub.genomes[genome];
                            bestHubButton = hubButton;
                        }
                    }
                }

                if (bestHub) {
                    thisB.notifyTier();
                    activateButton(addModeButtons, bestHubButton);
                    bestHub.getTracks(function(tracks, err) {
                        makeHubStab(tracks);
                    });
                } else {
                    removeChildren(stabHolder);
                    stabHolder.appendChild(makeElement('h2', 'No data for this genome'))
                    stabHolder.appendChild(makeElement('p', 'This URL appears to be a valid track-hub, but it doesn\'t contain any data for the coordinate system of this browser'));
                    stabHolder.appendChild(makeElement('p', 'coordSystem.ucscName = ' + thisB.coordSystem.ucscName));
                    customMode = 'reset-hub';
                    return;
                }
            }
        }, opts);
    }

    var tryAddDAS = function(nds, retry) {
        var knownSpace = thisB.knownSpace;
        if (!knownSpace) {
            alert("Can't confirm track-addition to an uninit browser.");
            return;
        }
        var tsm = Math.max(knownSpace.min, (knownSpace.min + knownSpace.max - 100) / 2)|0;
        var testSegment = new DASSegment(knownSpace.chr, tsm, Math.min(tsm + 99, knownSpace.max));
        nds.features(testSegment, {}, function(features, status) {
            if (status) {
                if (!retry) {
                    nds.credentials = true;
                    tryAddDAS(nds, true);
                } else {
                    removeChildren(stabHolder);
                    stabHolder.appendChild(makeElement('h2', 'Custom data not found'));
                    stabHolder.appendChild(makeElement('p', 'DAS uri: ' + nds.uri + ' is not answering features requests'));
                    customMode = 'reset';
                    return;
                }
            } else {
                var nameExtractPattern = new RegExp('/([^/]+)/?$');
                var match = nameExtractPattern.exec(nds.uri);
                if (match) {
                    nds.name = match[1];
                }

                tryAddDASxSources(nds);
                return;
            }
        });
    }

    function tryAddDASxSources(nds, retry) {
        var uri = nds.uri;
        if (retry) {
            var match = /(.+)\/[^\/]+\/?/.exec(uri);
            if (match) {
                uri = match[1] + '/sources';
            }
        }
        function sqfail() {
            if (!retry) {
                return tryAddDASxSources(nds, true);
            } else {
                return addDasCompletionPage(nds);
            }
        }
        new DASRegistry(uri, {credentials: nds.credentials}).sources(
            function(sources) {
                if (!sources || sources.length == 0) {
                    return sqfail();
                } 

                var fs = null;
                if (sources.length == 1) {
                    fs = sources[0];
                } else {
                    for (var i = 0; i < sources.length; ++i) {
                        if (sources[i].uri === nds.uri) {
                            fs = sources[i];
                            break;
                        }
                    }
                }

                var coordsDetermined = false, quantDetermined = false;
                if (fs) {
                    nds.name = fs.name;
                    nds.desc = fs.desc;
                    if (fs.maxbins) {
                        nds.maxbins = true;
                    } else {
                        nds.maxbins = false;
                    }
                    if (fs.capabilities) {
                        nds.capabilities = fs.capabilities;
                    }
                    quantDetermined = true
                    
                    if (fs.coords && fs.coords.length == 1) {
                        var coords = fs.coords[0];
                        if (coordsMatch(coords, thisB.coordSystem)) {
                            coordsDetermined = true;
                        } else if (thisB.chains) {
                            for (var k in thisB.chains) {
                                if (coordsMatch(coords, thisB.chains[k].coords)) {
                                    nds.mapping = k;
                                    coordsDetermined = true;
                                }
                            }
                        }
                    }
                    
                }
                return addDasCompletionPage(nds, coordsDetermined, quantDetermined);
            },
            function() {
                return sqfail();
            }
        );
    }

    var makeSourceConfig = function(s) {
        var nds = {name: s.name};
        if (s.mapping && s.mapping != '__default__')
            nds.mapping = s.mapping;

        if (s.tier_type == 'bwg') {
            if (s.blob)
                nds.bwgBlob = s.blob;
            else if (s.uri)
                nds.bwgURI = s.uri;
            return nds;
        } else if (s.tier_type == 'bam') {
            if (s.blob) {
                nds.bamBlob = s.blob;
                nds.baiBlob = s.indexBlob;
            } else {
                nds.bamURI = s.uri;
                nds.baiURI = s.indexUri;
            }
            return nds;
        } else if (s.tier_type == 'tabix') {
            nds.tier_type = 'tabix';
            nds.payload = s.payload;
            if (s.blob) {
                nds.blob = s.blob;
                nds.indexBlob = s.indexBlob;
            } else {
                nds.uri = s.uri;
                nds.indexUri = s.indexUri;
            }
            return nds;
        } else if (s.tier_type == 'memstore') {
            nds.tier_type = 'memstore';
            nds.payload = s.payload;
            if (s.blob)
                nds.blob = s.blob;
            else
                nds.uri = s.uri;
            return nds;
        }
    }

    var tryAddBin = function(source) {
        probeResource(source, function(source, err) {
            if (err) {
                removeChildren(stabHolder);
                stabHolder.appendChild(makeElement('h2', "Couldn't access custom data"));
                stabHolder.appendChild(makeElement('p', '' + err));
                customMode = 'reset-bin';
            } else {
                var nds = makeSourceConfig(source);
                if (source.tier_type == 'bam') {
                    return completeBAM(nds);
                } else if (source.tier_type == 'tabix') {
                    return completeTabixVCF(nds);
                } else {
                    return addDasCompletionPage(nds, false, false, true);
                }
            }
        });
    }

    function promptForBAI(nds) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'inline';

        removeChildren(stabHolder);
        customMode = 'prompt-bai'
        stabHolder.appendChild(makeElement('h2', 'Select an index file'));
        stabHolder.appendChild(makeElement('p', 'Dalliance requires a BAM index (.bai) file when displaying BAM data.  These normally accompany BAM files.  For security reasons, web applications like Dalliance can only access local files which you have explicity selected.  Please use the file chooser below to select the appropriate BAI file'));

        stabHolder.appendChild(document.createTextNode('Index file: '));
        custFile = makeElement('input', null, {type: 'file'});
        stabHolder.appendChild(custFile);
        dataToFinalize = nds;
    }

    function promptForTabix(nds) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'inline';

        removeChildren(stabHolder);
        customMode = 'prompt-tbi'
        stabHolder.appendChild(makeElement('h2', 'Select an index file'));
        stabHolder.appendChild(makeElement('p', 'Dalliance requires a Tabix index (.tbi) file when displaying VCF data.  For security reasons, web applications like Dalliance can only access local files which you have explicity selected.  Please use the file chooser below to select the appropriate BAI file'));

        stabHolder.appendChild(document.createTextNode('Index file: '));
        custFile = makeElement('input', null, {type: 'file'});
        stabHolder.appendChild(custFile);
        dataToFinalize = nds;
    }

    function completeBAM(nds) {
        var indexF;
        if (nds.baiBlob) {
            indexF = new BlobFetchable(nds.baiBlob);
        } else {
            indexF = new URLFetchable(nds.bamURI + '.bai');
        }
        indexF.slice(0, 256).fetch(function(r) {
                var hasBAI = false;
                if (r) {
                    var ba = new Uint8Array(r);
                    var magic2 = readInt(ba, 0);
                    hasBAI = (magic2 == BAI_MAGIC);
                }
                if (hasBAI) {
                    return addDasCompletionPage(nds, false, false, true);
                } else {
                    return binFormatErrorPage('You have selected a valid BAM file, but a corresponding index (.bai) file was not found.  Please index your BAM (samtools index) and place the BAI file in the same directory');
                }
        });
    }

    function completeTabixVCF(nds) {
        var indexF;
        if (nds.indexBlob) {
            indexF = new BlobFetchable(nds.indexBlob);
        } else {
            indexF = new URLFetchable(nds.uri + '.tbi');
        }
        indexF.slice(0, 1<<16).fetch(function(r) {
            var hasTabix = false;
            if (r) {
                var ba = new Uint8Array(r);
                if (ba[0] == 31 || ba[1] == 139) {
                    var unc = unbgzf(r);
                    ba = new Uint8Array(unc);
                    var m2 = readInt(ba, 0);
                    hasTabix = (m2 == TABIX_MAGIC);
                }
            }
            if (hasTabix) {
                return addDasCompletionPage(nds, false, false, true);
            } else {
                return binFormatErrorPage('You have selected a valid VCF file, but a corresponding index (.tbi) file was not found.  Please index your VCF ("tabix -p vcf -f myfile.vcf.gz") and place the .tbi file in the same directory');
            }
        });
    }

    function binFormatErrorPage(message) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'inline';

        removeChildren(stabHolder);
        message = message || 'Custom data format not recognized';
        stabHolder.appendChild(makeElement('h2', 'Error adding custom data'));
        stabHolder.appendChild(makeElement('p', message));
        stabHolder.appendChild(makeElement('p', 'Currently supported formats are bigBed, bigWig, and BAM.'));
        customMode = 'reset-bin';
        return;
    }
                     
    var addDasCompletionPage = function(nds, coordsDetermined, quantDetermined, quantIrrelevant) {
        refreshButton.style.display = 'none';
        addButton.style.display = 'inline';
        canButton.style.display = 'inline';

        removeChildren(stabHolder);
        stabHolder.appendChild(makeElement('h2', 'Add custom data: step 2'));
        stabHolder.appendChild(document.createTextNode('Label: '));
        custName = makeElement('input', '', {value: nds.name});
        stabHolder.appendChild(custName);


        // stabHolder.appendChild(document.createTextNode('User: '));
        custUser = makeElement('input', '');
        // stabHolder.appendChild(custUser);
        //stabHolder.appendChild(document.createTextNode('Pass: '));
        custPass = makeElement('input', '');
        // stabHolder.appendChild(custPass);
        

        stabHolder.appendChild(makeElement('br'));
        stabHolder.appendChild(makeElement('br'));
        stabHolder.appendChild(makeElement('h4', 'Coordinate system: '));
        custCS = makeElement('select', null);
        custCS.appendChild(makeElement('option', thisB.nameForCoordSystem(thisB.coordSystem), {value: '__default__'}));
        if (thisB.chains) {
            for (var csk in thisB.chains) {
                var cs = thisB.chains[csk].coords;
                custCS.appendChild(makeElement('option', thisB.nameForCoordSystem(cs), {value: csk}));
            }
        }
        custCS.value = nds.mapping || '__default__';
        stabHolder.appendChild(custCS);

        if (coordsDetermined) {
            stabHolder.appendChild(makeElement('p', "(Based on server response, probably doesn't need changing.)"));
        } else {
            stabHolder.appendChild(makeElement('p', [makeElement('b', 'Warning: '), "unable to determine the correct value from server responses.  Please check carefully."]));
            stabHolder.appendChild(makeElement('p', "If you don't see the mapping you're looking for, please contact thomas@biodalliance.org"));
        }

        if (!quantIrrelevant) {
            stabHolder.appendChild(document.createTextNode('Quantitative: '));
            custQuant = makeElement('input', null, {type: 'checkbox', checked: true});
            if (typeof nds.maxbins !== 'undefined') {
                custQuant.checked = nds.maxbins;
            }
            stabHolder.appendChild(custQuant);
            if (quantDetermined) {
                stabHolder.appendChild(makeElement('p', "(Based on server response, probably doesn't need changing.)"));
            } else {
                stabHolder.appendChild(makeElement('p', [makeElement('b', "Warning: "), "unable to determine correct value.  If in doubt, leave checked."]));
            }
        }

        if (nds.bwgBlob) {
            stabHolder.appendChild(makeElement('p', [makeElement('b', 'Warning: '), 'data added from local file.  Due to the browser security model, the track will disappear if you reload Dalliance.']));
        }

        custName.focus();

        if (customMode === 'bin' || customMode === 'prompt-bai' || customMode === 'prompt-tbi')
            customMode = 'finalize-bin';
        else
            customMode = 'finalize';
        dataToFinalize = nds;
    }

    var multipleSet = null;
    var tryAddMultiple = function(fileList) {
        var newSources = multipleSet = [];
        customMode = 'multiple';
        for (var fi = 0; fi < fileList.length; ++fi) {
            var f = fileList[fi];
            if (f) {
                newSources.push({blob: f});
            }
        }

        for (var fi = 0; fi < newSources.length; ++fi) {
            probeMultiple(newSources[fi]);
        }
        updateMultipleStatus();
    }

    var probeMultiple = function(ns) {
        probeResource(ns, function(source, err) {
            if (err) {
                source.error = err;
            }

            var usedIndices = [];
            var bams = {}, tabixes = {};
            for (var si = 0; si < multipleSet.length; ++si) {
                var s = multipleSet[si];
                if (s.tier_type == 'bam' && !s.indexBlob) {
                    bams[s.blob.name] = s;
                }
                if (s.tier_type == 'tabix' && !s.indexBlob) {
                    tabixes[s.blob.name] = s;
                }
            }

            for (var si = 0; si < multipleSet.length; ++si) {
                var s = multipleSet[si];
                if (s.tier_type === 'bai') {
                    var baiPattern = new RegExp('(.+)\\.bai$');
                    var match = baiPattern.exec(s.blob.name);
                    if (match && bams[match[1]]) {
                        bams[match[1]].indexBlob = s.blob;
                        usedIndices.push(si);
                    }
                } else if (s.tier_type === 'tabix-index') {
                    var tbiPattern = new RegExp('(.+)\\.tbi$');
                    var match = tbiPattern.exec(s.blob.name);
                    if (match && tabixes[match[1]]) {
                        tabixes[match[1]].indexBlob = s.blob;
                        usedIndices.push(si);
                    }
                }
            }

            for (var bi = usedIndices.length - 1; bi >= 0; --bi) {
                multipleSet.splice(usedIndices[bi], 1);
            }

            updateMultipleStatus();
        });
    }

    var updateMultipleStatus = function() {
        removeChildren(stabHolder);
        var needsIndex = false;
        var multTable = makeElement('table', multipleSet
          .filter(function(s) {return !s.hidden})
          .map(function(s) {
            var row = makeElement('tr');
            row.appendChild(makeElement('td', s.name || s.blob.name));
            var typeContent;
            if (s.error) {
                typeContent = makeElement('span', 'Error', null, {color: 'red'});
            } else if (s.tier_type) {
                typeContent = s.payload || s.tier_type;
            } else {
                typeContent = thisB.makeLoader(16);
            }

            var ccs;
            var state = 'unknown';
            if (s.tier_type == 'bwg' || s.tier_type == 'memstore') {
                state = 'okay';
            } else if (s.tier_type == 'bam') {
                state = s.indexBlob ? 'okay' : 'needs-index';
            } else if (s.tier_type == 'tabix') {
                state = s.indexBlob ? 'okay' : 'needs-index';
            }

            if (state == 'okay') {
                ccs = makeElement('select', null, null, {width: '150px'});
                ccs.appendChild(makeElement('option', thisB.nameForCoordSystem(thisB.coordSystem), {value: '__default__'}));
                if (thisB.chains) {
                    for (var csk in thisB.chains) {
                        var cs = thisB.chains[csk].coords;
                        ccs.appendChild(makeElement('option', thisB.nameForCoordSystem(cs), {value: csk}));
                    }
                }
                ccs.value = s.mapping || '__default__';

                ccs.addEventListener('change', function(ev) {
                    s.mapping = ccs.value;
                    console.log(s);
                }, false);
            } else if (state == 'needs-index') {
                ccs = makeElement('span', 'Needs index', {}, {color: 'red'});
                needsIndex = true;
            }

            return makeElement('tr', [makeElement('td', s.name || s.blob.name),
                                      makeElement('td', typeContent),
                                      makeElement('td', ccs)]);

        }), {className: 'table table-striped table-condensed'});
        stabHolder.appendChild(multTable);

        if (needsIndex) {
            stabHolder.appendChild(makeElement('p', 'Some of these files are missing required index (.bai or .tbi) files.  For security reasons, web applications like Dalliance can only access local files which you have explicity selected.  Please use the file chooser below to select the appropriate index file'));
            stabHolder.appendChild(document.createTextNode('Index file(s): '));
            var indexFile = makeElement('input', null, {type: 'file', multiple: 'multiple'});
            stabHolder.appendChild(indexFile);
            indexFile.addEventListener('change', function(ev) {
                console.log('fileset changed');
                var fileList = indexFile.files || [];
                for (var fi = 0; fi < fileList.length; ++fi) {
                    var f = fileList[fi];
                    if (f) {
                        var ns = {blob: f, hidden: true};
                        multipleSet.push(ns);
                        probeMultiple(ns);
                    }
                }
            }, false);
        }
    }

    var canButton = makeElement('button', 'Cancel', {className: 'btn'});
    canButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        if (customMode === 'finalize-bin')
            switchToBinMode();
        else
            switchToCustomMode();
    }, false);

    var refreshButton = makeElement('button', 'Refresh', {className: 'btn'});
    refreshButton.addEventListener('click', function(ev) {
        ev.stopPropagation(); ev.preventDefault();
        thisB.queryRegistry(__mapping);
    }, false);
    this.makeTooltip(refreshButton, 'Click to re-fetch data from the DAS registry');

    var buttonHolder = makeElement('div', [addButton, ' ', canButton, ' ', refreshButton]);
    buttonHolder.style.margin = '10px';
    asform.appendChild(buttonHolder);

    popup.appendChild(asform);
    makeStab(thisB.availableSources);

    this.showToolPanel(popup);
    this.setUiMode('add');

    if (firstDefButton) {
        activateButton(addModeButtons, firstDefButton);
        makeStab(new Observed(firstDefSources));
    }
}

},{"./bam":1,"./bin":4,"./cbrowser":6,"./das":10,"./domui":11,"./lh3utils":22,"./probe":26,"./tabix":37,"./thub":38,"./utils":47}],44:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// trix.js: UCSC-style free text indices
//

"use strict";

function connectTrix(ix, ixx, callback) {
    ixx.fetchAsText(function(ixxData) {
        if (!ixxData) 
            return callback(null, "Couldn't fetch index-index");

        var toks = ixxData.split(/(.+)([0-9A-F]{10})\n/);

        var keys = [];
        var offsets = [];
        for (var ti = 1; ti < toks.length; ti += 3) {
            keys.push(toks[ti]);
            offsets.push(parseInt(toks[ti+1], 16));
        }

        return callback(new TrixIndex(keys, offsets, ix));
    });
}

function TrixIndex(keys, offsets, ix) {
    this.keys = keys;
    this.offsets = offsets;
    this.ix = ix;
}

TrixIndex.prototype.lookup = function(query, callback) {
    var ixslice;

    var qtag = (query + '     ').substring(0,5).toLowerCase();
    for (var i = 0; i < this.keys.length; ++i) {
        if (qtag.localeCompare(this.keys[i]) < 0) {
            ixslice = this.ix.slice(this.offsets[i - 1], this.offsets[i] - this.offsets[i - 1]);
            break;
        }
    }

    if (!ixslice) {
        ixslice = this.ix.slice(this.offsets[this.offsets.length - 1]);
    }

    ixslice.fetchAsText(function(ist) {
        var lines = ist.split('\n');
        for (var li = 0; li < lines.length; ++li) {
            if (lines[li].indexOf(query.toLowerCase() + ' ') == 0) {
                return callback(lines[li].split(' '));
            }
        }
        return callback(null);
    });
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        connectTrix: connectTrix
    };
}
},{}],45:[function(require,module,exports){
// tranSMART related utils

/**
 * Display error as popup
 * @param title
 * @param msg
 */
function displayError (title, msg) {
    Ext.Msg.show(
        {
            title: title,
            msg: msg,
            buttons: Ext.Msg.OK,
            fn: function () {
                Ext.Msg.hide();
            },
            icon: Ext.MessageBox.ERROR
        }
    );
}

/**
 * Check if a node is high dimensional or not
 * @param node
 * @returns {boolean}
 */
function isHighDimensionalNode (node) {
    if (node.attributes.visualattributes.indexOf('HIGH_DIMENSIONAL') != -1)
        return true;
    else
        return false;
}

},{}],46:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// twoBit.js: packed-binary reference sequences
//

"use strict";

if (typeof(require) !== 'undefined') {
    var bin = require('./bin');
    var readInt = bin.readInt;
    var readIntBE = bin.readIntBE;

    var spans = require('./spans');
    var Range = spans.Range;
    var union = spans.union;
    var intersection = spans.intersection;
}

var TWOBIT_MAGIC = 0x1a412743;
var TWOBIT_MAGIC_BE = 0x4327411a;

function TwoBitFile() {
}

function makeTwoBit(fetchable, cnt) {
    var tb = new TwoBitFile();
    tb.data = fetchable;
    var headerBlockSize = 12500;

    tb.data.slice(0, headerBlockSize).fetch(function(r) {
        if (!r) {
            return cnt(null, "Couldn't access data");
        }
        var ba = new Uint8Array(r);
        var magic = readInt(ba, 0);
        if (magic == TWOBIT_MAGIC) {
            tb.readInt = readInt;
        } else if (magic == TWOBIT_MAGIC_BE) {
            tb.readInt = readIntBE;
        } else {
            return cnt(null, "Not a .2bit file, magic=0x" + magic.toString(16));
        }

        var version = tb.readInt(ba, 4);
        if (version != 0) {
            return cnt(null, 'Unsupported version ' + version);
        }

        tb.seqCount = tb.readInt(ba, 8);
        tb.seqDict = {};

        var p = 16, i=0;
        var o = 0;  // Offset of the current block if we need to fetch multiple header blocks.

        var parseSeqInfo = function() {
            while (i < tb.seqCount) {
                var ns = ba[p];
                if (p + ns + 6 >= ba.length) {
                    return tb.data.slice(o + p, headerBlockSize).fetch(function (r) {
                        o += p;
                        p = 0;
                        ba = new Uint8Array(r);
                        parseSeqInfo();
                    });
                } else {
                    ++p;
                    var name = '';
                    for (var j = 1; j <= ns; ++j) {
                        name += String.fromCharCode(ba[p++]);
                    }
                    var offset = tb.readInt(ba, p);
                    p += 4;
                    tb.seqDict[name] = new TwoBitSeq(tb, offset);
                    ++i;
                }
            }
            return cnt(tb);
        }

        parseSeqInfo();
        
    });
}

TwoBitFile.prototype.getSeq = function(chr) {
    var seq = this.seqDict[chr];
    if (!seq) {
        seq = this.seqDict['chr' + chr];
    }
    return seq;
}

TwoBitFile.prototype.fetch = function(chr, min, max, cnt) {
    var seq = this.getSeq(chr);
    if (!seq) {
        return cnt(null, "Couldn't find " + chr);
    } else if (max <= min) {
        return cnt('');
    } else {
        seq.fetch(min, max, cnt);
    }
}

function TwoBitSeq(tbf, offset) {
    this.tbf = tbf;
    this.offset = offset;
}

TwoBitSeq.prototype.init = function(cnt) {
    if (this.seqOffset) {
        return cnt();
    }

    var thisB = this;
    thisB.tbf.data.slice(thisB.offset, 8).fetch(function(r1) {
        if (!r1) {
            return cnt('Fetch failed');
        }
        var ba = new Uint8Array(r1);
        thisB._length = thisB.tbf.readInt(ba, 0);
        thisB.nBlockCnt = thisB.tbf.readInt(ba, 4);
        thisB.tbf.data.slice(thisB.offset + 8, thisB.nBlockCnt*8 + 4).fetch(function(r2) {
            if (!r2) {
                return cnt('Fetch failed');
            }
            var ba = new Uint8Array(r2);
            var nbs = null;
            for (var b = 0; b < thisB.nBlockCnt; ++b) {
                var nbMin = thisB.tbf.readInt(ba, b * 4);
                var nbLen = thisB.tbf.readInt(ba, (b + thisB.nBlockCnt) * 4);
                var nb = new Range(nbMin, nbMin + nbLen - 1);
                if (!nbs) {
                    nbs = nb;
                } else {
                    nbs = union(nbs, nb);
                }
            }
            thisB.nBlocks = nbs;
            thisB.mBlockCnt = thisB.tbf.readInt(ba, thisB.nBlockCnt*8);
            thisB.seqLength = ((thisB._length + 3)/4)|0;
            thisB.seqOffset = thisB.offset + 16 + ((thisB.nBlockCnt + thisB.mBlockCnt) * 8);
            return cnt();
        });
    });
}

var TWOBIT_TABLE = ['T', 'C', 'A', 'G'];

TwoBitSeq.prototype.fetch = function(min, max, cnt) {
    --min; --max;       // Switch to zero-based.
    var thisB = this;
    this.init(function(error) {
        if (error) {
            return cnt(null, error);
        }

        var fetchMin = min >> 2;
        var fetchMax = max + 3 >> 2;
        if (fetchMin < 0 || fetchMax > thisB.seqLength) {
            return cnt('Coordinates out of bounds: ' + min + ':' + max);
        }

        thisB.tbf.data.slice(thisB.seqOffset + fetchMin, fetchMax - fetchMin).fetch(function(r) {
            if (r == null) {
                return cnt('SeqFetch failed');
            }
            var seqData = new Uint8Array(r);

            var nSpans = [];
            if (thisB.nBlocks) {
                var intr = intersection(new Range(min, max), thisB.nBlocks);
                if (intr) {
                    nSpans = intr.ranges();
                }
            }
            
            var seqstr = '';
            var ptr = min;
            function fillSeq(fsm) {
                while (ptr <= fsm) {
                    var bb = (ptr >> 2) - fetchMin;
                    var ni = ptr & 0x3;
                    var bv = seqData[bb];
                    var n;
                    if (ni == 0) {
                        n = (bv >> 6) & 0x3;
                    } else if (ni == 1) {
                        n = (bv >> 4) & 0x3;
                    } else if (ni == 2) {
                        n = (bv >> 2) & 0x3;
                    } else {
                        n = (bv) & 0x3;
                    }
                    seqstr += TWOBIT_TABLE[n];
                    ++ptr;
                }
            }
            
            for (var b = 0; b < nSpans.length; ++b) {
                var nb = nSpans[b];
                if (ptr > nb.min()) {
                    throw 'N mismatch...';
                }
                if (ptr < nb.min()) {
                    fillSeq(nb.min() - 1);
                }
                while (ptr <= nb.max()) {
                    seqstr += 'N';
                    ++ptr;
                }
            }
            if (ptr <= max) {
                fillSeq(max);
            }

            return cnt(seqstr);
        });
    });
}

TwoBitSeq.prototype.length = function(cnt) {
    var thisB = this;
    this.init(function(error) {
        if (error) {
            return cnt(null, error);
        } else {
            return cnt(thisB._length);
        }
    });
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        makeTwoBit: makeTwoBit
    };
}

},{"./bin":4,"./spans":33}],47:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// utils.js: odds, sods, and ends.
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sha1 = require('./sha1');
    var b64_sha1 = sha1.b64_sha1;
}

var NUM_REGEXP = new RegExp('[0-9]+');

function stringToNumbersArray(str) {
    var nums = new Array();
    var m;
    while (m = NUM_REGEXP.exec(str)) {
        nums.push(m[0]);
        str=str.substring(m.index + (m[0].length));
    }
    return nums;
}

var STRICT_NUM_REGEXP = new RegExp('^[0-9]+$');

function stringToInt(str) {
    str = str.replace(new RegExp(',', 'g'), '');
    if (!STRICT_NUM_REGEXP.test(str)) {
        return null;
    }
    return str|0;
}

function pushnew(a, v) {
    for (var i = 0; i < a.length; ++i) {
        if (a[i] == v) {
            return;
        }
    }
    a.push(v);
}

function pusho(obj, k, v) {
    if (obj[k]) {
        obj[k].push(v);
    } else {
        obj[k] = [v];
    }
}

function pushnewo(obj, k, v) {
    var a = obj[k];
    if (a) {
        for (var i = 0; i < a.length; ++i) {    // indexOf requires JS16 :-(.
            if (a[i] == v) {
                return;
            }
        }
        a.push(v);
    } else {
        obj[k] = [v];
    }
}


function pick(a, b, c, d)
{
    if (a) {
        return a;
    } else if (b) {
        return b;
    } else if (c) {
        return c;
    } else if (d) {
        return d;
    }
}

function pushnew(l, o)
{
    for (var i = 0; i < l.length; ++i) {
        if (l[i] == o) {
            return;
        }
    }
    l.push(o);
}



function arrayIndexOf(a, x) {
    if (!a) {
        return -1;
    }

    for (var i = 0; i < a.length; ++i) {
        if (a[i] === x) {
            return i;
        }
    }
    return -1;
}

function arrayRemove(a, x) {
    var i = arrayIndexOf(a, x);
    if (i >= 0) {
        a.splice(i, 1);
        return true;
    }
    return false;
}

//
// DOM utilities
//


function makeElement(tag, children, attribs, styles)
{
    var ele = document.createElement(tag);
    if (children) {
        if (! (children instanceof Array)) {
            children = [children];
        }
        for (var i = 0; i < children.length; ++i) {
            var c = children[i];
            if (typeof c == 'string') {
                c = document.createTextNode(c);
            }
            ele.appendChild(c);
        }
    }
    
    if (attribs) {
        for (var l in attribs) {
            try {
                ele[l] = attribs[l];
            } catch (e) {
                console.log('error setting ' + l);
                throw(e);
            }
        }
    }
    if (styles) {
        for (var l in styles) {
            ele.style[l] = styles[l];
        }
    }
    return ele;
}

function makeElementNS(namespace, tag, children, attribs)
{
    var ele = document.createElementNS(namespace, tag);
    if (children) {
        if (! (children instanceof Array)) {
            children = [children];
        }
        for (var i = 0; i < children.length; ++i) {
            var c = children[i];
            if (typeof c == 'string') {
                c = document.createTextNode(c);
            }
            ele.appendChild(c);
        }
    }
    
    setAttrs(ele, attribs);
    return ele;
}

var attr_name_cache = {};

function setAttr(node, key, value)
{
    var attr = attr_name_cache[key];
    if (!attr) {
        var _attr = '';
        for (var c = 0; c < key.length; ++c) {
            var cc = key.substring(c, c+1);
            var lcc = cc.toLowerCase();
            if (lcc != cc) {
                _attr = _attr + '-' + lcc;
            } else {
                _attr = _attr + cc;
            }
        }
        attr_name_cache[key] = _attr;
        attr = _attr;
    }
    node.setAttribute(attr, value);
}

function setAttrs(node, attribs)
{
    if (attribs) {
        for (var l in attribs) {
            setAttr(node, l, attribs[l]);
        }
    }
}



function removeChildren(node)
{
    if (!node || !node.childNodes) {
        return;
    }

    while (node.childNodes.length > 0) {
        node.removeChild(node.firstChild);
    }
}



//
// WARNING: not for general use!
//

function miniJSONify(o, exc) {
    if (typeof o === 'undefined') {
        return 'undefined';
    } else if (o == null) {
        return 'null';
    } else if (typeof o == 'string') {
        return "'" + o + "'";
    } else if (typeof o == 'number') {
        return "" + o;
    } else if (typeof o == 'boolean') {
        return "" + o;
    } else if (typeof o == 'object') {
        if (o instanceof Array) {
            var s = null;
            for (var i = 0; i < o.length; ++i) {
                s = (s == null ? '' : (s + ', ')) + miniJSONify(o[i], exc);
            }
            return '[' + (s?s:'') + ']';
        } else {
            exc = exc || {};
            var s = null;
            for (var k in o) {
                if (exc[k])
                    continue;
                if (k != undefined && typeof(o[k]) != 'function') {
                    s = (s == null ? '' : (s + ', ')) + k + ': ' + miniJSONify(o[k], exc);
                }
            }
            return '{' + (s?s:'') + '}';
        }
    } else {
        return (typeof o);
    }
}

function shallowCopy(o) {
    var n = {};
    for (var k in o) {
        n[k] = o[k];
    }
    return n;
}

function Observed(x) {
    this.value = x;
    this.listeners = [];
}

Observed.prototype.addListener = function(f) {
    this.listeners.push(f);
}

Observed.prototype.addListenerAndFire = function(f) {
    this.listeners.push(f);
    f(this.value);
}

Observed.prototype.removeListener = function(f) {
    arrayRemove(this.listeners, f);
}

Observed.prototype.get = function() {
    return this.value;
}

Observed.prototype.set = function(x) {
    this.value = x;
    for (var i = 0; i < this.listeners.length; ++i) {
        this.listeners[i](x);
    }
}

function Awaited() {
    this.queue = [];
}

Awaited.prototype.provide = function(x) {
    if (this.res !== undefined) {
        throw "Resource has already been provided.";
    }

    this.res = x;
    for (var i = 0; i < this.queue.length; ++i) {
        this.queue[i](x);
    }
    this.queue = null;   // avoid leaking closures.
}

Awaited.prototype.await = function(f) {
    if (this.res !== undefined) {
        f(this.res);
        return this.res;
    } else {
        this.queue.push(f);
    }
}

var __dalliance_saltSeed = 0;

function saltURL(url) {
    return url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++__dalliance_saltSeed));
}

function textXHR(url, callback, opts) {
    if (opts.salt) 
        url = saltURL(url);

    var req = new XMLHttpRequest();
    req.onreadystatechange = function() {
    	if (req.readyState == 4) {
    	    if (req.status >= 300) {
    		    callback(null, 'Error code ' + req.status);
    	    } else {
    		    callback(req.responseText);
    	    }
    	}
    };
    
    req.open('GET', url, true);
    req.responseType = 'text';

    if (opts && opts.credentials) {
        req.withCredentials = true;
    }
    req.send('');
}

function relativeURL(base, rel) {
    // FIXME quite naive -- good enough for trackhubs?

    if (rel.indexOf('http:') == 0 || rel.indexOf('https:') == 0) {
        return rel;
    }

    var li = base.lastIndexOf('/');
    if (li >= 0) {
        return base.substr(0, li + 1) + rel;
    } else {
        return rel;
    }
}

//
// Missing APIs
// 

if (!('trim' in String.prototype)) {
    String.prototype.trim = function() {
        return this.replace(/^\s+/, '').replace(/\s+$/, '');
    };
}

if (typeof(module) !== 'undefined') {
    module.exports = {
        textXHR: textXHR,
        relativeURL: relativeURL,
        shallowCopy: shallowCopy,
        pusho: pusho,
        pushnew: pushnew,
        pushnewo: pushnewo,
        arrayIndexOf: arrayIndexOf,
        pick: pick,

        makeElement: makeElement,
        makeElementNS: makeElementNS,
        removeChildren: removeChildren,

        miniJSONify: miniJSONify,

        Observed: Observed,
        Awaited: Awaited
    }
}

},{"./sha1":31}],48:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2014
//
// vcf.js
//

"use strict";

if (typeof(require) !== 'undefined') {
    var sa = require('./sourceadapters');
    var dalliance_registerParserFactory = sa.registerParserFactory;

    var das = require('./das');
    var DASStylesheet = das.DASStylesheet;
    var DASStyle = das.DASStyle;
    var DASFeature = das.DASFeature;
    var DASGroup = das.DASGroup;
}

function VCFParser() {
    this.info = [];
}

var VCF_INFO_RE = /([^;=]+)(=([^;]+))?;?/;
var VCF_INFO_HEADER = /##INFO=<([^>]+)>/;
var VCF_INFO_HEADER_TOK = /([^,=]+)=([^,]+|"[^"]+"),?/

VCFParser.prototype.createSession = function(sink) {
    return new VCFParseSession(this, sink);
}

function VCFParseSession(parser, sink) {
    this.parser = parser;
    this.sink  = sink;
}

VCFParseSession.prototype.parse = function(line) {
    if (line.length == 0)
        return;
    if (line[0] == '#') {
        if (line.length > 1 && line[1] == '#') {
            var m = VCF_INFO_HEADER.exec(line);
            if (m) {
                var toks = m[1].split(VCF_INFO_HEADER_TOK);
                var id = null, desc = null;
                for (var ti = 0; ti < toks.length - 1; ti += 3) {
                    var key = toks[ti + 1];
                    var value = toks[ti + 2].replace(/"/g, '');
                    if (key == 'ID') {
                        id = value;
                    } else if (key == 'Description') {
                        desc = value;
                    }
                }
                if (id && desc) {
                    this.parser.info.push(
                        {id: id,
                         desc: desc}
                    );
                }
            }
            return;
        } else {
            return;
        }
    }

    var toks = line.split('\t');
    var f = new DASFeature();
    f.segment = toks[0];
    f.id = toks[2]
    f.refAllele = toks[3];
    f.altAlleles = toks[4].split(',');
    f.min = parseInt(toks[1]);
    f.max = f.min + f.refAllele.length - 1;

    var infoToks = toks[7].split(VCF_INFO_RE);
    f.info = {};
    for (var ti = 0; ti < infoToks.length; ti += 4) {
        f.info[infoToks[ti + 1]] = infoToks[ti + 3];
    }


    var alt = f.altAlleles[0];
    var ref = f.refAllele;
    if (alt.length > ref.length) {
        f.type = "insertion";
        if (alt.indexOf(ref) == 0) {
            f.insertion = alt.substr(ref.length);
            f.min += ref.length;
            f.max = f.min - 1; // Effectively "between" bases.
        } else {
            f.insertion = alt;
        }
    } else if (alt.length < ref.length) {
        f.type = "deletion";
    } else {
        f.type = 'substitution';
    }

    this.sink(f);
}

VCFParseSession.prototype.flush = function() {};

VCFParser.prototype.getStyleSheet = function(callback) {
    var stylesheet = new DASStylesheet();

    {
        var varStyle = new DASStyle();
        varStyle.glyph = '__INSERTION';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.FGCOLOR = 'rgb(50,80,255)';
        varStyle.BGCOLOR = '#888888';
        varStyle.STROKECOLOR = 'black';
        stylesheet.pushStyle({type: 'insertion'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'PLIMSOLL';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.FGCOLOR = 'rgb(255, 60, 60)';
        varStyle.BGCOLOR = '#888888';
        varStyle.STROKECOLOR = 'black';
        stylesheet.pushStyle({type: 'deletion'}, null, varStyle);
    }
    {
        var varStyle = new DASStyle();
        varStyle.glyph = 'PLIMSOLL';
        varStyle.BUMP = 'yes';
        varStyle.LABEL = 'no';
        varStyle.FGCOLOR = 'rgb(50,80,255)';
        varStyle.BGCOLOR = '#888888';
        varStyle.STROKECOLOR = 'black';
        stylesheet.pushStyle({type: 'default'}, null, varStyle);
    }

    return callback(stylesheet);
}

VCFParser.prototype.getDefaultFIPs = function(callback) {
    var self = this;
    var fip = function(feature, featureInfo) {
        featureInfo.add("Ref. allele", feature.refAllele);
        featureInfo.add("Alt. alleles", feature.altAlleles.join(','));

        if (feature.info) {
            for (var ii = 0; ii < self.info.length; ++ii) {
                var info = self.info[ii];
                var val = feature.info[info.id];
                if (val !== undefined) {
                    featureInfo.add(info.desc, val);
                }
            }
        }
    };
    callback(fip);
}

dalliance_registerParserFactory('vcf', function() {return new VCFParser()});

},{"./das":10,"./sourceadapters":32}],49:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Dalliance Genome Explorer
// (c) Thomas Down 2006-2010
//
// version.js
//

"use strict";

var VERSION = {
    CONFIG: 5,
    MAJOR:  0,
    MINOR:  12,
    MICRO:  1,
    PATCH:  '',
    BRANCH: ''
}

VERSION.toString = function() {
    var vs = '' + this.MAJOR + '.' + this.MINOR + '.' + this.MICRO;
    if (this.PATCH) {
        vs = vs + this.PATCH;
    }
    if (this.BRANCH && this.BRANCH != '') {
        vs = vs + '-' + this.BRANCH;
    }
    return vs;
}

if (typeof(module) !== 'undefined') {
    module.exports = VERSION;
}

},{}],50:[function(require,module,exports){
"use strict";
var Promise = require("./promise/promise").Promise;
var polyfill = require("./promise/polyfill").polyfill;
exports.Promise = Promise;
exports.polyfill = polyfill;
},{"./promise/polyfill":55,"./promise/promise":56}],51:[function(require,module,exports){
"use strict";
/* global toString */

var isArray = require("./utils").isArray;
var isFunction = require("./utils").isFunction;

/**
  Returns a promise that is fulfilled when all the given promises have been
  fulfilled, or rejected if any of them become rejected. The return promise
  is fulfilled with an array that gives all the values in the order they were
  passed in the `promises` array argument.

  Example:

  ```javascript
  var promise1 = RSVP.resolve(1);
  var promise2 = RSVP.resolve(2);
  var promise3 = RSVP.resolve(3);
  var promises = [ promise1, promise2, promise3 ];

  RSVP.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `RSVP.all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  var promise1 = RSVP.resolve(1);
  var promise2 = RSVP.reject(new Error("2"));
  var promise3 = RSVP.reject(new Error("3"));
  var promises = [ promise1, promise2, promise3 ];

  RSVP.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @for RSVP
  @param {Array} promises
  @param {String} label
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
*/
function all(promises) {
  /*jshint validthis:true */
  var Promise = this;

  if (!isArray(promises)) {
    throw new TypeError('You must pass an array to all.');
  }

  return new Promise(function(resolve, reject) {
    var results = [], remaining = promises.length,
    promise;

    if (remaining === 0) {
      resolve([]);
    }

    function resolver(index) {
      return function(value) {
        resolveAll(index, value);
      };
    }

    function resolveAll(index, value) {
      results[index] = value;
      if (--remaining === 0) {
        resolve(results);
      }
    }

    for (var i = 0; i < promises.length; i++) {
      promise = promises[i];

      if (promise && isFunction(promise.then)) {
        promise.then(resolver(i), reject);
      } else {
        resolveAll(i, promise);
      }
    }
  });
}

exports.all = all;
},{"./utils":60}],52:[function(require,module,exports){
(function (process,global){
"use strict";
var browserGlobal = (typeof window !== 'undefined') ? window : {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var local = (typeof global !== 'undefined') ? global : (this === undefined? window:this);

// node
function useNextTick() {
  return function() {
    process.nextTick(flush);
  };
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function() {
    node.data = (iterations = ++iterations % 2);
  };
}

function useSetTimeout() {
  return function() {
    local.setTimeout(flush, 1);
  };
}

var queue = [];
function flush() {
  for (var i = 0; i < queue.length; i++) {
    var tuple = queue[i];
    var callback = tuple[0], arg = tuple[1];
    callback(arg);
  }
  queue = [];
}

var scheduleFlush;

// Decide what async method to use to triggering processing of queued callbacks:
if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else {
  scheduleFlush = useSetTimeout();
}

function asap(callback, arg) {
  var length = queue.push([callback, arg]);
  if (length === 1) {
    // If length is 1, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    scheduleFlush();
  }
}

exports.asap = asap;
}).call(this,require("1YiZ5S"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"1YiZ5S":61}],53:[function(require,module,exports){
"use strict";
/**
  `RSVP.Promise.cast` returns the same promise if that promise shares a constructor
  with the promise being casted.

  Example:

  ```javascript
  var promise = RSVP.resolve(1);
  var casted = RSVP.Promise.cast(promise);

  console.log(promise === casted); // true
  ```

  In the case of a promise whose constructor does not match, it is assimilated.
  The resulting promise will fulfill or reject based on the outcome of the
  promise being casted.

  In the case of a non-promise, a promise which will fulfill with that value is
  returned.

  Example:

  ```javascript
  var value = 1; // could be a number, boolean, string, undefined...
  var casted = RSVP.Promise.cast(value);

  console.log(value === casted); // false
  console.log(casted instanceof RSVP.Promise) // true

  casted.then(function(val) {
    val === value // => true
  });
  ```

  `RSVP.Promise.cast` is similar to `RSVP.resolve`, but `RSVP.Promise.cast` differs in the
  following ways:
  * `RSVP.Promise.cast` serves as a memory-efficient way of getting a promise, when you
  have something that could either be a promise or a value. RSVP.resolve
  will have the same effect but will create a new promise wrapper if the
  argument is a promise.
  * `RSVP.Promise.cast` is a way of casting incoming thenables or promise subclasses to
  promises of the exact class specified, so that the resulting object's `then` is
  ensured to have the behavior of the constructor you are calling cast on (i.e., RSVP.Promise).

  @method cast
  @for RSVP
  @param {Object} object to be casted
  @return {Promise} promise that is fulfilled when all properties of `promises`
  have been fulfilled, or rejected if any of them become rejected.
*/


function cast(object) {
  /*jshint validthis:true */
  if (object && typeof object === 'object' && object.constructor === this) {
    return object;
  }

  var Promise = this;

  return new Promise(function(resolve) {
    resolve(object);
  });
}

exports.cast = cast;
},{}],54:[function(require,module,exports){
"use strict";
var config = {
  instrument: false
};

function configure(name, value) {
  if (arguments.length === 2) {
    config[name] = value;
  } else {
    return config[name];
  }
}

exports.config = config;
exports.configure = configure;
},{}],55:[function(require,module,exports){
(function (global){
"use strict";
/*global self*/
var RSVPPromise = require("./promise").Promise;
var isFunction = require("./utils").isFunction;

function polyfill() {
  var local;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof window !== 'undefined' && window.document) {
    local = window;
  } else {
    local = self;
  }

  var es6PromiseSupport = 
    "Promise" in local &&
    // Some of these methods are missing from
    // Firefox/Chrome experimental implementations
    "cast" in local.Promise &&
    "resolve" in local.Promise &&
    "reject" in local.Promise &&
    "all" in local.Promise &&
    "race" in local.Promise &&
    // Older version of the spec had a resolver object
    // as the arg rather than a function
    (function() {
      var resolve;
      new local.Promise(function(r) { resolve = r; });
      return isFunction(resolve);
    }());

  if (!es6PromiseSupport) {
    local.Promise = RSVPPromise;
  }
}

exports.polyfill = polyfill;
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./promise":56,"./utils":60}],56:[function(require,module,exports){
"use strict";
var config = require("./config").config;
var configure = require("./config").configure;
var objectOrFunction = require("./utils").objectOrFunction;
var isFunction = require("./utils").isFunction;
var now = require("./utils").now;
var cast = require("./cast").cast;
var all = require("./all").all;
var race = require("./race").race;
var staticResolve = require("./resolve").resolve;
var staticReject = require("./reject").reject;
var asap = require("./asap").asap;

var counter = 0;

config.async = asap; // default async is asap;

function Promise(resolver) {
  if (!isFunction(resolver)) {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  if (!(this instanceof Promise)) {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  this._subscribers = [];

  invokeResolver(resolver, this);
}

function invokeResolver(resolver, promise) {
  function resolvePromise(value) {
    resolve(promise, value);
  }

  function rejectPromise(reason) {
    reject(promise, reason);
  }

  try {
    resolver(resolvePromise, rejectPromise);
  } catch(e) {
    rejectPromise(e);
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value, error, succeeded, failed;

  if (hasCallback) {
    try {
      value = callback(detail);
      succeeded = true;
    } catch(e) {
      failed = true;
      error = e;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (handleThenable(promise, value)) {
    return;
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (failed) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    resolve(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

var PENDING   = void 0;
var SEALED    = 0;
var FULFILLED = 1;
var REJECTED  = 2;

function subscribe(parent, child, onFulfillment, onRejection) {
  var subscribers = parent._subscribers;
  var length = subscribers.length;

  subscribers[length] = child;
  subscribers[length + FULFILLED] = onFulfillment;
  subscribers[length + REJECTED]  = onRejection;
}

function publish(promise, settled) {
  var child, callback, subscribers = promise._subscribers, detail = promise._detail;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    invokeCallback(settled, child, callback, detail);
  }

  promise._subscribers = null;
}

Promise.prototype = {
  constructor: Promise,

  _state: undefined,
  _detail: undefined,
  _subscribers: undefined,

  then: function(onFulfillment, onRejection) {
    var promise = this;

    var thenPromise = new this.constructor(function() {});

    if (this._state) {
      var callbacks = arguments;
      config.async(function invokePromiseCallback() {
        invokeCallback(promise._state, thenPromise, callbacks[promise._state - 1], promise._detail);
      });
    } else {
      subscribe(this, thenPromise, onFulfillment, onRejection);
    }

    return thenPromise;
  },

  'catch': function(onRejection) {
    return this.then(null, onRejection);
  }
};

Promise.all = all;
Promise.cast = cast;
Promise.race = race;
Promise.resolve = staticResolve;
Promise.reject = staticReject;

function handleThenable(promise, value) {
  var then = null,
  resolved;

  try {
    if (promise === value) {
      throw new TypeError("A promises callback cannot return that same promise.");
    }

    if (objectOrFunction(value)) {
      then = value.then;

      if (isFunction(then)) {
        then.call(value, function(val) {
          if (resolved) { return true; }
          resolved = true;

          if (value !== val) {
            resolve(promise, val);
          } else {
            fulfill(promise, val);
          }
        }, function(val) {
          if (resolved) { return true; }
          resolved = true;

          reject(promise, val);
        });

        return true;
      }
    }
  } catch (error) {
    if (resolved) { return true; }
    reject(promise, error);
    return true;
  }

  return false;
}

function resolve(promise, value) {
  if (promise === value) {
    fulfill(promise, value);
  } else if (!handleThenable(promise, value)) {
    fulfill(promise, value);
  }
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) { return; }
  promise._state = SEALED;
  promise._detail = value;

  config.async(publishFulfillment, promise);
}

function reject(promise, reason) {
  if (promise._state !== PENDING) { return; }
  promise._state = SEALED;
  promise._detail = reason;

  config.async(publishRejection, promise);
}

function publishFulfillment(promise) {
  publish(promise, promise._state = FULFILLED);
}

function publishRejection(promise) {
  publish(promise, promise._state = REJECTED);
}

exports.Promise = Promise;
},{"./all":51,"./asap":52,"./cast":53,"./config":54,"./race":57,"./reject":58,"./resolve":59,"./utils":60}],57:[function(require,module,exports){
"use strict";
/* global toString */
var isArray = require("./utils").isArray;

/**
  `RSVP.race` allows you to watch a series of promises and act as soon as the
  first promise given to the `promises` argument fulfills or rejects.

  Example:

  ```javascript
  var promise1 = new RSVP.Promise(function(resolve, reject){
    setTimeout(function(){
      resolve("promise 1");
    }, 200);
  });

  var promise2 = new RSVP.Promise(function(resolve, reject){
    setTimeout(function(){
      resolve("promise 2");
    }, 100);
  });

  RSVP.race([promise1, promise2]).then(function(result){
    // result === "promise 2" because it was resolved before promise1
    // was resolved.
  });
  ```

  `RSVP.race` is deterministic in that only the state of the first completed
  promise matters. For example, even if other promises given to the `promises`
  array argument are resolved, but the first completed promise has become
  rejected before the other promises became fulfilled, the returned promise
  will become rejected:

  ```javascript
  var promise1 = new RSVP.Promise(function(resolve, reject){
    setTimeout(function(){
      resolve("promise 1");
    }, 200);
  });

  var promise2 = new RSVP.Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error("promise 2"));
    }, 100);
  });

  RSVP.race([promise1, promise2]).then(function(result){
    // Code here never runs because there are rejected promises!
  }, function(reason){
    // reason.message === "promise2" because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  @method race
  @for RSVP
  @param {Array} promises array of promises to observe
  @param {String} label optional string for describing the promise returned.
  Useful for tooling.
  @return {Promise} a promise that becomes fulfilled with the value the first
  completed promises is resolved with if the first completed promise was
  fulfilled, or rejected with the reason that the first completed promise
  was rejected with.
*/
function race(promises) {
  /*jshint validthis:true */
  var Promise = this;

  if (!isArray(promises)) {
    throw new TypeError('You must pass an array to race.');
  }
  return new Promise(function(resolve, reject) {
    var results = [], promise;

    for (var i = 0; i < promises.length; i++) {
      promise = promises[i];

      if (promise && typeof promise.then === 'function') {
        promise.then(resolve, reject);
      } else {
        resolve(promise);
      }
    }
  });
}

exports.race = race;
},{"./utils":60}],58:[function(require,module,exports){
"use strict";
/**
  `RSVP.reject` returns a promise that will become rejected with the passed
  `reason`. `RSVP.reject` is essentially shorthand for the following:

  ```javascript
  var promise = new RSVP.Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  var promise = RSVP.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @for RSVP
  @param {Any} reason value that the returned promise will be rejected with.
  @param {String} label optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise that will become rejected with the given
  `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Promise = this;

  return new Promise(function (resolve, reject) {
    reject(reason);
  });
}

exports.reject = reject;
},{}],59:[function(require,module,exports){
"use strict";
/**
  `RSVP.resolve` returns a promise that will become fulfilled with the passed
  `value`. `RSVP.resolve` is essentially shorthand for the following:

  ```javascript
  var promise = new RSVP.Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  var promise = RSVP.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @for RSVP
  @param {Any} value value that the returned promise will be resolved with
  @param {String} label optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(value) {
  /*jshint validthis:true */
  var Promise = this;
  return new Promise(function(resolve, reject) {
    resolve(value);
  });
}

exports.resolve = resolve;
},{}],60:[function(require,module,exports){
"use strict";
function objectOrFunction(x) {
  return isFunction(x) || (typeof x === "object" && x !== null);
}

function isFunction(x) {
  return typeof x === "function";
}

function isArray(x) {
  return Object.prototype.toString.call(x) === "[object Array]";
}

// Date.now is not available in browsers < IE9
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility
var now = Date.now || function() { return new Date().getTime(); };


exports.objectOrFunction = objectOrFunction;
exports.isFunction = isFunction;
exports.isArray = isArray;
exports.now = now;
},{}],61:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],62:[function(require,module,exports){
/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */

// 
// Javascript ZLib
// By Thomas Down 2010-2011
//
// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in
// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.
//
// inflate.js: ZLib inflate code
//

//
// Shared constants
//

var MAX_WBITS=15; // 32K LZ77 window
var DEF_WBITS=MAX_WBITS;
var MAX_MEM_LEVEL=9;
var MANY=1440;
var BMAX = 15;

// preset dictionary flag in zlib header
var PRESET_DICT=0x20;

var Z_NO_FLUSH=0;
var Z_PARTIAL_FLUSH=1;
var Z_SYNC_FLUSH=2;
var Z_FULL_FLUSH=3;
var Z_FINISH=4;

var Z_DEFLATED=8;

var Z_OK=0;
var Z_STREAM_END=1;
var Z_NEED_DICT=2;
var Z_ERRNO=-1;
var Z_STREAM_ERROR=-2;
var Z_DATA_ERROR=-3;
var Z_MEM_ERROR=-4;
var Z_BUF_ERROR=-5;
var Z_VERSION_ERROR=-6;

var METHOD=0;   // waiting for method byte
var FLAG=1;     // waiting for flag byte
var DICT4=2;    // four dictionary check bytes to go
var DICT3=3;    // three dictionary check bytes to go
var DICT2=4;    // two dictionary check bytes to go
var DICT1=5;    // one dictionary check byte to go
var DICT0=6;    // waiting for inflateSetDictionary
var BLOCKS=7;   // decompressing blocks
var CHECK4=8;   // four check bytes to go
var CHECK3=9;   // three check bytes to go
var CHECK2=10;  // two check bytes to go
var CHECK1=11;  // one check byte to go
var DONE=12;    // finished check, done
var BAD=13;     // got an error--stay here

var inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];

var IB_TYPE=0;  // get type bits (3, including end bit)
var IB_LENS=1;  // get lengths for stored
var IB_STORED=2;// processing stored block
var IB_TABLE=3; // get table lengths
var IB_BTREE=4; // get bit lengths tree for a dynamic block
var IB_DTREE=5; // get length, distance trees for a dynamic block
var IB_CODES=6; // processing fixed or dynamic block
var IB_DRY=7;   // output remaining window bytes
var IB_DONE=8;  // finished last block, done
var IB_BAD=9;   // ot a data error--stuck here

var fixed_bl = 9;
var fixed_bd = 5;

var fixed_tl = [
    96,7,256, 0,8,80, 0,8,16, 84,8,115,
    82,7,31, 0,8,112, 0,8,48, 0,9,192,
    80,7,10, 0,8,96, 0,8,32, 0,9,160,
    0,8,0, 0,8,128, 0,8,64, 0,9,224,
    80,7,6, 0,8,88, 0,8,24, 0,9,144,
    83,7,59, 0,8,120, 0,8,56, 0,9,208,
    81,7,17, 0,8,104, 0,8,40, 0,9,176,
    0,8,8, 0,8,136, 0,8,72, 0,9,240,
    80,7,4, 0,8,84, 0,8,20, 85,8,227,
    83,7,43, 0,8,116, 0,8,52, 0,9,200,
    81,7,13, 0,8,100, 0,8,36, 0,9,168,
    0,8,4, 0,8,132, 0,8,68, 0,9,232,
    80,7,8, 0,8,92, 0,8,28, 0,9,152,
    84,7,83, 0,8,124, 0,8,60, 0,9,216,
    82,7,23, 0,8,108, 0,8,44, 0,9,184,
    0,8,12, 0,8,140, 0,8,76, 0,9,248,
    80,7,3, 0,8,82, 0,8,18, 85,8,163,
    83,7,35, 0,8,114, 0,8,50, 0,9,196,
    81,7,11, 0,8,98, 0,8,34, 0,9,164,
    0,8,2, 0,8,130, 0,8,66, 0,9,228,
    80,7,7, 0,8,90, 0,8,26, 0,9,148,
    84,7,67, 0,8,122, 0,8,58, 0,9,212,
    82,7,19, 0,8,106, 0,8,42, 0,9,180,
    0,8,10, 0,8,138, 0,8,74, 0,9,244,
    80,7,5, 0,8,86, 0,8,22, 192,8,0,
    83,7,51, 0,8,118, 0,8,54, 0,9,204,
    81,7,15, 0,8,102, 0,8,38, 0,9,172,
    0,8,6, 0,8,134, 0,8,70, 0,9,236,
    80,7,9, 0,8,94, 0,8,30, 0,9,156,
    84,7,99, 0,8,126, 0,8,62, 0,9,220,
    82,7,27, 0,8,110, 0,8,46, 0,9,188,
    0,8,14, 0,8,142, 0,8,78, 0,9,252,
    96,7,256, 0,8,81, 0,8,17, 85,8,131,
    82,7,31, 0,8,113, 0,8,49, 0,9,194,
    80,7,10, 0,8,97, 0,8,33, 0,9,162,
    0,8,1, 0,8,129, 0,8,65, 0,9,226,
    80,7,6, 0,8,89, 0,8,25, 0,9,146,
    83,7,59, 0,8,121, 0,8,57, 0,9,210,
    81,7,17, 0,8,105, 0,8,41, 0,9,178,
    0,8,9, 0,8,137, 0,8,73, 0,9,242,
    80,7,4, 0,8,85, 0,8,21, 80,8,258,
    83,7,43, 0,8,117, 0,8,53, 0,9,202,
    81,7,13, 0,8,101, 0,8,37, 0,9,170,
    0,8,5, 0,8,133, 0,8,69, 0,9,234,
    80,7,8, 0,8,93, 0,8,29, 0,9,154,
    84,7,83, 0,8,125, 0,8,61, 0,9,218,
    82,7,23, 0,8,109, 0,8,45, 0,9,186,
    0,8,13, 0,8,141, 0,8,77, 0,9,250,
    80,7,3, 0,8,83, 0,8,19, 85,8,195,
    83,7,35, 0,8,115, 0,8,51, 0,9,198,
    81,7,11, 0,8,99, 0,8,35, 0,9,166,
    0,8,3, 0,8,131, 0,8,67, 0,9,230,
    80,7,7, 0,8,91, 0,8,27, 0,9,150,
    84,7,67, 0,8,123, 0,8,59, 0,9,214,
    82,7,19, 0,8,107, 0,8,43, 0,9,182,
    0,8,11, 0,8,139, 0,8,75, 0,9,246,
    80,7,5, 0,8,87, 0,8,23, 192,8,0,
    83,7,51, 0,8,119, 0,8,55, 0,9,206,
    81,7,15, 0,8,103, 0,8,39, 0,9,174,
    0,8,7, 0,8,135, 0,8,71, 0,9,238,
    80,7,9, 0,8,95, 0,8,31, 0,9,158,
    84,7,99, 0,8,127, 0,8,63, 0,9,222,
    82,7,27, 0,8,111, 0,8,47, 0,9,190,
    0,8,15, 0,8,143, 0,8,79, 0,9,254,
    96,7,256, 0,8,80, 0,8,16, 84,8,115,
    82,7,31, 0,8,112, 0,8,48, 0,9,193,

    80,7,10, 0,8,96, 0,8,32, 0,9,161,
    0,8,0, 0,8,128, 0,8,64, 0,9,225,
    80,7,6, 0,8,88, 0,8,24, 0,9,145,
    83,7,59, 0,8,120, 0,8,56, 0,9,209,
    81,7,17, 0,8,104, 0,8,40, 0,9,177,
    0,8,8, 0,8,136, 0,8,72, 0,9,241,
    80,7,4, 0,8,84, 0,8,20, 85,8,227,
    83,7,43, 0,8,116, 0,8,52, 0,9,201,
    81,7,13, 0,8,100, 0,8,36, 0,9,169,
    0,8,4, 0,8,132, 0,8,68, 0,9,233,
    80,7,8, 0,8,92, 0,8,28, 0,9,153,
    84,7,83, 0,8,124, 0,8,60, 0,9,217,
    82,7,23, 0,8,108, 0,8,44, 0,9,185,
    0,8,12, 0,8,140, 0,8,76, 0,9,249,
    80,7,3, 0,8,82, 0,8,18, 85,8,163,
    83,7,35, 0,8,114, 0,8,50, 0,9,197,
    81,7,11, 0,8,98, 0,8,34, 0,9,165,
    0,8,2, 0,8,130, 0,8,66, 0,9,229,
    80,7,7, 0,8,90, 0,8,26, 0,9,149,
    84,7,67, 0,8,122, 0,8,58, 0,9,213,
    82,7,19, 0,8,106, 0,8,42, 0,9,181,
    0,8,10, 0,8,138, 0,8,74, 0,9,245,
    80,7,5, 0,8,86, 0,8,22, 192,8,0,
    83,7,51, 0,8,118, 0,8,54, 0,9,205,
    81,7,15, 0,8,102, 0,8,38, 0,9,173,
    0,8,6, 0,8,134, 0,8,70, 0,9,237,
    80,7,9, 0,8,94, 0,8,30, 0,9,157,
    84,7,99, 0,8,126, 0,8,62, 0,9,221,
    82,7,27, 0,8,110, 0,8,46, 0,9,189,
    0,8,14, 0,8,142, 0,8,78, 0,9,253,
    96,7,256, 0,8,81, 0,8,17, 85,8,131,
    82,7,31, 0,8,113, 0,8,49, 0,9,195,
    80,7,10, 0,8,97, 0,8,33, 0,9,163,
    0,8,1, 0,8,129, 0,8,65, 0,9,227,
    80,7,6, 0,8,89, 0,8,25, 0,9,147,
    83,7,59, 0,8,121, 0,8,57, 0,9,211,
    81,7,17, 0,8,105, 0,8,41, 0,9,179,
    0,8,9, 0,8,137, 0,8,73, 0,9,243,
    80,7,4, 0,8,85, 0,8,21, 80,8,258,
    83,7,43, 0,8,117, 0,8,53, 0,9,203,
    81,7,13, 0,8,101, 0,8,37, 0,9,171,
    0,8,5, 0,8,133, 0,8,69, 0,9,235,
    80,7,8, 0,8,93, 0,8,29, 0,9,155,
    84,7,83, 0,8,125, 0,8,61, 0,9,219,
    82,7,23, 0,8,109, 0,8,45, 0,9,187,
    0,8,13, 0,8,141, 0,8,77, 0,9,251,
    80,7,3, 0,8,83, 0,8,19, 85,8,195,
    83,7,35, 0,8,115, 0,8,51, 0,9,199,
    81,7,11, 0,8,99, 0,8,35, 0,9,167,
    0,8,3, 0,8,131, 0,8,67, 0,9,231,
    80,7,7, 0,8,91, 0,8,27, 0,9,151,
    84,7,67, 0,8,123, 0,8,59, 0,9,215,
    82,7,19, 0,8,107, 0,8,43, 0,9,183,
    0,8,11, 0,8,139, 0,8,75, 0,9,247,
    80,7,5, 0,8,87, 0,8,23, 192,8,0,
    83,7,51, 0,8,119, 0,8,55, 0,9,207,
    81,7,15, 0,8,103, 0,8,39, 0,9,175,
    0,8,7, 0,8,135, 0,8,71, 0,9,239,
    80,7,9, 0,8,95, 0,8,31, 0,9,159,
    84,7,99, 0,8,127, 0,8,63, 0,9,223,
    82,7,27, 0,8,111, 0,8,47, 0,9,191,
    0,8,15, 0,8,143, 0,8,79, 0,9,255
];
var fixed_td = [
    80,5,1, 87,5,257, 83,5,17, 91,5,4097,
    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,
    80,5,3, 88,5,513, 84,5,33, 92,5,8193,
    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,
    80,5,2, 87,5,385, 83,5,25, 91,5,6145,
    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,
    80,5,4, 88,5,769, 84,5,49, 92,5,12289,
    82,5,13, 90,5,3073, 86,5,193, 192,5,24577
];

  // Tables for deflate from PKZIP's appnote.txt.
  var cplens = [ // Copy lengths for literal codes 257..285
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ];

  // see note #13 above about 258
  var cplext = [ // Extra bits for literal codes 257..285
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid
  ];

 var cpdist = [ // Copy offsets for distance codes 0..29
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        8193, 12289, 16385, 24577
  ];

  var cpdext = [ // Extra bits for distance codes
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        12, 12, 13, 13];

//
// ZStream.java
//

function ZStream() {
}


ZStream.prototype.inflateInit = function(w, nowrap) {
    if (!w) {
	w = DEF_WBITS;
    }
    if (nowrap) {
	nowrap = false;
    }
    this.istate = new Inflate();
    return this.istate.inflateInit(this, nowrap?-w:w);
}

ZStream.prototype.inflate = function(f) {
    if(this.istate==null) return Z_STREAM_ERROR;
    return this.istate.inflate(this, f);
}

ZStream.prototype.inflateEnd = function(){
    if(this.istate==null) return Z_STREAM_ERROR;
    var ret=istate.inflateEnd(this);
    this.istate = null;
    return ret;
}
ZStream.prototype.inflateSync = function(){
    // if(istate == null) return Z_STREAM_ERROR;
    return istate.inflateSync(this);
}
ZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){
    // if(istate == null) return Z_STREAM_ERROR;
    return istate.inflateSetDictionary(this, dictionary, dictLength);
}

/*

  public int deflateInit(int level){
    return deflateInit(level, MAX_WBITS);
  }
  public int deflateInit(int level, boolean nowrap){
    return deflateInit(level, MAX_WBITS, nowrap);
  }
  public int deflateInit(int level, int bits){
    return deflateInit(level, bits, false);
  }
  public int deflateInit(int level, int bits, boolean nowrap){
    dstate=new Deflate();
    return dstate.deflateInit(this, level, nowrap?-bits:bits);
  }
  public int deflate(int flush){
    if(dstate==null){
      return Z_STREAM_ERROR;
    }
    return dstate.deflate(this, flush);
  }
  public int deflateEnd(){
    if(dstate==null) return Z_STREAM_ERROR;
    int ret=dstate.deflateEnd();
    dstate=null;
    return ret;
  }
  public int deflateParams(int level, int strategy){
    if(dstate==null) return Z_STREAM_ERROR;
    return dstate.deflateParams(this, level, strategy);
  }
  public int deflateSetDictionary (byte[] dictionary, int dictLength){
    if(dstate == null)
      return Z_STREAM_ERROR;
    return dstate.deflateSetDictionary(this, dictionary, dictLength);
  }

*/

/*
  // Flush as much pending output as possible. All deflate() output goes
  // through this function so some applications may wish to modify it
  // to avoid allocating a large strm->next_out buffer and copying into it.
  // (See also read_buf()).
  void flush_pending(){
    int len=dstate.pending;

    if(len>avail_out) len=avail_out;
    if(len==0) return;

    if(dstate.pending_buf.length<=dstate.pending_out ||
       next_out.length<=next_out_index ||
       dstate.pending_buf.length<(dstate.pending_out+len) ||
       next_out.length<(next_out_index+len)){
      System.out.println(dstate.pending_buf.length+", "+dstate.pending_out+
			 ", "+next_out.length+", "+next_out_index+", "+len);
      System.out.println("avail_out="+avail_out);
    }

    System.arraycopy(dstate.pending_buf, dstate.pending_out,
		     next_out, next_out_index, len);

    next_out_index+=len;
    dstate.pending_out+=len;
    total_out+=len;
    avail_out-=len;
    dstate.pending-=len;
    if(dstate.pending==0){
      dstate.pending_out=0;
    }
  }

  // Read a new buffer from the current input stream, update the adler32
  // and total number of bytes read.  All deflate() input goes through
  // this function so some applications may wish to modify it to avoid
  // allocating a large strm->next_in buffer and copying from it.
  // (See also flush_pending()).
  int read_buf(byte[] buf, int start, int size) {
    int len=avail_in;

    if(len>size) len=size;
    if(len==0) return 0;

    avail_in-=len;

    if(dstate.noheader==0) {
      adler=_adler.adler32(adler, next_in, next_in_index, len);
    }
    System.arraycopy(next_in, next_in_index, buf, start, len);
    next_in_index  += len;
    total_in += len;
    return len;
  }

  public void free(){
    next_in=null;
    next_out=null;
    msg=null;
    _adler=null;
  }
}
*/


//
// Inflate.java
//

function Inflate() {
    this.was = [0];
}

Inflate.prototype.inflateReset = function(z) {
    if(z == null || z.istate == null) return Z_STREAM_ERROR;
    
    z.total_in = z.total_out = 0;
    z.msg = null;
    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;
    z.istate.blocks.reset(z, null);
    return Z_OK;
}

Inflate.prototype.inflateEnd = function(z){
    if(this.blocks != null)
      this.blocks.free(z);
    this.blocks=null;
    return Z_OK;
}

Inflate.prototype.inflateInit = function(z, w){
    z.msg = null;
    this.blocks = null;

    // handle undocumented nowrap option (no zlib header or check)
    nowrap = 0;
    if(w < 0){
      w = - w;
      nowrap = 1;
    }

    // set window size
    if(w<8 ||w>15){
      this.inflateEnd(z);
      return Z_STREAM_ERROR;
    }
    this.wbits=w;

    z.istate.blocks=new InfBlocks(z, 
				  z.istate.nowrap!=0 ? null : this,
				  1<<w);

    // reset state
    this.inflateReset(z);
    return Z_OK;
  }

Inflate.prototype.inflate = function(z, f){
    var r, b;

    if(z == null || z.istate == null || z.next_in == null)
      return Z_STREAM_ERROR;
    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;
    r = Z_BUF_ERROR;
    while (true){
      switch (z.istate.mode){
      case METHOD:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){
          z.istate.mode = BAD;
          z.msg="unknown compression method";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }
        if((z.istate.method>>4)+8>z.istate.wbits){
          z.istate.mode = BAD;
          z.msg="invalid window size";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }
        z.istate.mode=FLAG;
      case FLAG:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        b = (z.next_in[z.next_in_index++])&0xff;

        if((((z.istate.method << 8)+b) % 31)!=0){
          z.istate.mode = BAD;
          z.msg = "incorrect header check";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }

        if((b&PRESET_DICT)==0){
          z.istate.mode = BLOCKS;
          break;
        }
        z.istate.mode = DICT4;
      case DICT4:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;
        z.istate.mode=DICT3;
      case DICT3:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;
        z.istate.mode=DICT2;
      case DICT2:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;
        z.istate.mode=DICT1;
      case DICT1:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need += (z.next_in[z.next_in_index++]&0xff);
        z.adler = z.istate.need;
        z.istate.mode = DICT0;
        return Z_NEED_DICT;
      case DICT0:
        z.istate.mode = BAD;
        z.msg = "need dictionary";
        z.istate.marker = 0;       // can try inflateSync
        return Z_STREAM_ERROR;
      case BLOCKS:

        r = z.istate.blocks.proc(z, r);
        if(r == Z_DATA_ERROR){
          z.istate.mode = BAD;
          z.istate.marker = 0;     // can try inflateSync
          break;
        }
        if(r == Z_OK){
          r = f;
        }
        if(r != Z_STREAM_END){
          return r;
        }
        r = f;
        z.istate.blocks.reset(z, z.istate.was);
        if(z.istate.nowrap!=0){
          z.istate.mode=DONE;
          break;
        }
        z.istate.mode=CHECK4;
      case CHECK4:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;
        z.istate.mode=CHECK3;
      case CHECK3:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;
        z.istate.mode = CHECK2;
      case CHECK2:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;
        z.istate.mode = CHECK1;
      case CHECK1:

        if(z.avail_in==0)return r;r=f;

        z.avail_in--; z.total_in++;
        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);

        if(((z.istate.was[0])) != ((z.istate.need))){
          z.istate.mode = BAD;
          z.msg = "incorrect data check";
          z.istate.marker = 5;       // can't try inflateSync
          break;
        }

        z.istate.mode = DONE;
      case DONE:
        return Z_STREAM_END;
      case BAD:
        return Z_DATA_ERROR;
      default:
        return Z_STREAM_ERROR;
      }
    }
  }


Inflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {
    var index=0;
    var length = dictLength;
    if(z==null || z.istate == null|| z.istate.mode != DICT0)
      return Z_STREAM_ERROR;

    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){
      return Z_DATA_ERROR;
    }

    z.adler = z._adler.adler32(0, null, 0, 0);

    if(length >= (1<<z.istate.wbits)){
      length = (1<<z.istate.wbits)-1;
      index=dictLength - length;
    }
    z.istate.blocks.set_dictionary(dictionary, index, length);
    z.istate.mode = BLOCKS;
    return Z_OK;
  }

//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};
var mark = [0, 0, 255, 255]

Inflate.prototype.inflateSync = function(z){
    var n;       // number of bytes to look at
    var p;       // pointer to bytes
    var m;       // number of marker bytes found in a row
    var r, w;   // temporaries to save total_in and total_out

    // set up
    if(z == null || z.istate == null)
      return Z_STREAM_ERROR;
    if(z.istate.mode != BAD){
      z.istate.mode = BAD;
      z.istate.marker = 0;
    }
    if((n=z.avail_in)==0)
      return Z_BUF_ERROR;
    p=z.next_in_index;
    m=z.istate.marker;

    // search
    while (n!=0 && m < 4){
      if(z.next_in[p] == mark[m]){
        m++;
      }
      else if(z.next_in[p]!=0){
        m = 0;
      }
      else{
        m = 4 - m;
      }
      p++; n--;
    }

    // restore
    z.total_in += p-z.next_in_index;
    z.next_in_index = p;
    z.avail_in = n;
    z.istate.marker = m;

    // return no joy or set up to restart on a new block
    if(m != 4){
      return Z_DATA_ERROR;
    }
    r=z.total_in;  w=z.total_out;
    this.inflateReset(z);
    z.total_in=r;  z.total_out = w;
    z.istate.mode = BLOCKS;
    return Z_OK;
}

  // Returns true if inflate is currently at the end of a block generated
  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH
  // but removes the length bytes of the resulting empty stored block. When
  // decompressing, PPP checks that at the end of input packet, inflate is
  // waiting for these length bytes.
Inflate.prototype.inflateSyncPoint = function(z){
    if(z == null || z.istate == null || z.istate.blocks == null)
      return Z_STREAM_ERROR;
    return z.istate.blocks.sync_point();
}


//
// InfBlocks.java
//

var INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

function InfBlocks(z, checkfn, w) {
    this.hufts=new Int32Array(MANY*3);
    this.window=new Uint8Array(w);
    this.end=w;
    this.checkfn = checkfn;
    this.mode = IB_TYPE;
    this.reset(z, null);

    this.left = 0;            // if STORED, bytes left to copy 

    this.table = 0;           // table lengths (14 bits) 
    this.index = 0;           // index into blens (or border) 
    this.blens = null;         // bit lengths of codes 
    this.bb=new Int32Array(1); // bit length tree depth 
    this.tb=new Int32Array(1); // bit length decoding tree 

    this.codes = new InfCodes();

    this.last = 0;            // true if this block is the last block 

  // mode independent information 
    this.bitk = 0;            // bits in bit buffer 
    this.bitb = 0;            // bit buffer 
    this.read = 0;            // window read pointer 
    this.write = 0;           // window write pointer 
    this.check = 0;          // check on output 

    this.inftree=new InfTree();
}




InfBlocks.prototype.reset = function(z, c){
    if(c) c[0]=this.check;
    if(this.mode==IB_CODES){
      this.codes.free(z);
    }
    this.mode=IB_TYPE;
    this.bitk=0;
    this.bitb=0;
    this.read=this.write=0;

    if(this.checkfn)
      z.adler=this.check=z._adler.adler32(0, null, 0, 0);
  }

 InfBlocks.prototype.proc = function(z, r){
    var t;              // temporary storage
    var b;              // bit buffer
    var k;              // bits in bit buffer
    var p;              // input data pointer
    var n;              // bytes available there
    var q;              // output window write pointer
    var m;              // bytes to end of window or read pointer

    // copy input/output information to locals (UPDATE macro restores)
    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}
    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}

    // process input based on current state
    while(true){
      switch (this.mode){
      case IB_TYPE:

	while(k<(3)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k; 
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}
	t = (b & 7);
	this.last = t & 1;

	switch (t >>> 1){
        case 0:                         // stored 
          {b>>>=(3);k-=(3);}
          t = k & 7;                    // go to byte boundary

          {b>>>=(t);k-=(t);}
          this.mode = IB_LENS;                  // get length of stored block
          break;
        case 1:                         // fixed
          {
              var bl=new Int32Array(1);
	      var bd=new Int32Array(1);
              var tl=[];
	      var td=[];

	      inflate_trees_fixed(bl, bd, tl, td, z);
              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);
          }

          {b>>>=(3);k-=(3);}

          this.mode = IB_CODES;
          break;
        case 2:                         // dynamic

          {b>>>=(3);k-=(3);}

          this.mode = IB_TABLE;
          break;
        case 3:                         // illegal

          {b>>>=(3);k-=(3);}
          this.mode = BAD;
          z.msg = "invalid block type";
          r = Z_DATA_ERROR;

	  this.bitb=b; this.bitk=k; 
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z,r);
	}
	break;
      case IB_LENS:
	while(k<(32)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k; 
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	if ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){
	  this.mode = BAD;
	  z.msg = "invalid stored block lengths";
	  r = Z_DATA_ERROR;

	  this.bitb=b; this.bitk=k; 
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z,r);
	}
	this.left = (b & 0xffff);
	b = k = 0;                       // dump bits
	this.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);
	break;
      case IB_STORED:
	if (n == 0){
	  this.bitb=b; this.bitk=k; 
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  write=q;
	  return this.inflate_flush(z,r);
	}

	if(m==0){
	  if(q==end&&read!=0){
	    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);
	  }
	  if(m==0){
	    this.write=q; 
	    r=this.inflate_flush(z,r);
	    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);
	    if(q==this.end && this.read != 0){
	      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);
	    }
	    if(m==0){
	      this.bitb=b; this.bitk=k; 
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    }
	  }
	}
	r=Z_OK;

	t = this.left;
	if(t>n) t = n;
	if(t>m) t = m;
	arrayCopy(z.next_in, p, this.window, q, t);
	p += t;  n -= t;
	q += t;  m -= t;
	if ((this.left -= t) != 0)
	  break;
	this.mode = (this.last != 0 ? IB_DRY : IB_TYPE);
	break;
      case IB_TABLE:

	while(k<(14)){
	  if(n!=0){
	    r=Z_OK;
	  }
	  else{
	    this.bitb=b; this.bitk=k; 
	    z.avail_in=n;
	    z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  };
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.table = t = (b & 0x3fff);
	if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)
	  {
	    this.mode = IB_BAD;
	    z.msg = "too many length or distance symbols";
	    r = Z_DATA_ERROR;

	    this.bitb=b; this.bitk=k; 
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    this.write=q;
	    return this.inflate_flush(z,r);
	  }
	t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);
	if(this.blens==null || this.blens.length<t){
	    this.blens=new Int32Array(t);
	}
	else{
	  for(var i=0; i<t; i++){
              this.blens[i]=0;
          }
	}

	{b>>>=(14);k-=(14);}

	this.index = 0;
	mode = IB_BTREE;
      case IB_BTREE:
	while (this.index < 4 + (this.table >>> 10)){
	  while(k<(3)){
	    if(n!=0){
	      r=Z_OK;
	    }
	    else{
	      this.bitb=b; this.bitk=k; 
	      z.avail_in=n;
	      z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    };
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;
	    k+=8;
	  }

	  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;

	  {b>>>=(3);k-=(3);}
	}

	while(this.index < 19){
	  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;
	}

	this.bb[0] = 7;
	t = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);
	if (t != Z_OK){
	  r = t;
	  if (r == Z_DATA_ERROR){
	    this.blens=null;
	    this.mode = IB_BAD;
	  }

	  this.bitb=b; this.bitk=k; 
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  write=q;
	  return this.inflate_flush(z,r);
	}

	this.index = 0;
	this.mode = IB_DTREE;
      case IB_DTREE:
	while (true){
	  t = this.table;
	  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){
	    break;
	  }

	  var h; //int[]
	  var i, j, c;

	  t = this.bb[0];

	  while(k<(t)){
	    if(n!=0){
	      r=Z_OK;
	    }
	    else{
	      this.bitb=b; this.bitk=k; 
	      z.avail_in=n;
	      z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    };
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;
	    k+=8;
	  }

//	  if (this.tb[0]==-1){
//            dlog("null...");
//	  }

	  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];
	  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];

	  if (c < 16){
	    b>>>=(t);k-=(t);
	    this.blens[this.index++] = c;
	  }
	  else { // c == 16..18
	    i = c == 18 ? 7 : c - 14;
	    j = c == 18 ? 11 : 3;

	    while(k<(t+i)){
	      if(n!=0){
		r=Z_OK;
	      }
	      else{
		this.bitb=b; this.bitk=k; 
		z.avail_in=n;
		z.total_in+=p-z.next_in_index;z.next_in_index=p;
		this.write=q;
		return this.inflate_flush(z,r);
	      };
	      n--;
	      b|=(z.next_in[p++]&0xff)<<k;
	      k+=8;
	    }

	    b>>>=(t);k-=(t);

	    j += (b & inflate_mask[i]);

	    b>>>=(i);k-=(i);

	    i = this.index;
	    t = this.table;
	    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||
		(c == 16 && i < 1)){
	      this.blens=null;
	      this.mode = IB_BAD;
	      z.msg = "invalid bit length repeat";
	      r = Z_DATA_ERROR;

	      this.bitb=b; this.bitk=k; 
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      this.write=q;
	      return this.inflate_flush(z,r);
	    }

	    c = c == 16 ? this.blens[i-1] : 0;
	    do{
	      this.blens[i++] = c;
	    }
	    while (--j!=0);
	    this.index = i;
	  }
	}

	this.tb[0]=-1;
	{
	    var bl=new Int32Array(1);
	    var bd=new Int32Array(1);
	    var tl=new Int32Array(1);
	    var td=new Int32Array(1);
	    bl[0] = 9;         // must be <= 9 for lookahead assumptions
	    bd[0] = 6;         // must be <= 9 for lookahead assumptions

	    t = this.table;
	    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), 
					      1 + ((t >> 5) & 0x1f),
					      this.blens, bl, bd, tl, td, this.hufts, z);

	    if (t != Z_OK){
	        if (t == Z_DATA_ERROR){
	            this.blens=null;
	            this.mode = BAD;
	        }
	        r = t;

	        this.bitb=b; this.bitk=k; 
	        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	        this.write=q;
	        return this.inflate_flush(z,r);
	    }
	    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);
	}
	this.mode = IB_CODES;
      case IB_CODES:
	this.bitb=b; this.bitk=k;
	z.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;

	if ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){
	  return this.inflate_flush(z, r);
	}
	r = Z_OK;
	this.codes.free(z);

	p=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;
	q=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);

	if (this.last==0){
	  this.mode = IB_TYPE;
	  break;
	}
	this.mode = IB_DRY;
      case IB_DRY:
	this.write=q; 
	r = this.inflate_flush(z, r); 
	q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);
	if (this.read != this.write){
	  this.bitb=b; this.bitk=k; 
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  this.write=q;
	  return this.inflate_flush(z, r);
	}
	mode = DONE;
      case IB_DONE:
	r = Z_STREAM_END;

	this.bitb=b; this.bitk=k; 
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);
      case IB_BAD:
	r = Z_DATA_ERROR;

	this.bitb=b; this.bitk=k; 
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);

      default:
	r = Z_STREAM_ERROR;

	this.bitb=b; this.bitk=k; 
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	this.write=q;
	return this.inflate_flush(z, r);
      }
    }
  }

InfBlocks.prototype.free = function(z){
    this.reset(z, null);
    this.window=null;
    this.hufts=null;
}

InfBlocks.prototype.set_dictionary = function(d, start, n){
    arrayCopy(d, start, window, 0, n);
    this.read = this.write = n;
}

  // Returns true if inflate is currently at the end of a block generated
  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. 
InfBlocks.prototype.sync_point = function(){
    return this.mode == IB_LENS;
}

  // copy as much as possible from the sliding window to the output area
InfBlocks.prototype.inflate_flush = function(z, r){
    var n;
    var p;
    var q;

    // local copies of source and destination pointers
    p = z.next_out_index;
    q = this.read;

    // compute number of bytes to copy as far as end of window
    n = ((q <= this.write ? this.write : this.end) - q);
    if (n > z.avail_out) n = z.avail_out;
    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;

    // update counters
    z.avail_out -= n;
    z.total_out += n;

    // update check information
    if(this.checkfn != null)
      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);

    // copy as far as end of window
    arrayCopy(this.window, q, z.next_out, p, n);
    p += n;
    q += n;

    // see if more to copy at beginning of window
    if (q == this.end){
      // wrap pointers
      q = 0;
      if (this.write == this.end)
        this.write = 0;

      // compute bytes to copy
      n = this.write - q;
      if (n > z.avail_out) n = z.avail_out;
      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;

      // update counters
      z.avail_out -= n;
      z.total_out += n;

      // update check information
      if(this.checkfn != null)
	z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);

      // copy
      arrayCopy(this.window, q, z.next_out, p, n);
      p += n;
      q += n;
    }

    // update pointers
    z.next_out_index = p;
    this.read = q;

    // done
    return r;
  }

//
// InfCodes.java
//

var IC_START=0;  // x: set up for LEN
var IC_LEN=1;    // i: get length/literal/eob next
var IC_LENEXT=2; // i: getting length extra (have base)
var IC_DIST=3;   // i: get distance next
var IC_DISTEXT=4;// i: getting distance extra
var IC_COPY=5;   // o: copying bytes in window, waiting for space
var IC_LIT=6;    // o: got literal, waiting for output space
var IC_WASH=7;   // o: got eob, possibly still output waiting
var IC_END=8;    // x: got eob and all data flushed
var IC_BADCODE=9;// x: got error

function InfCodes() {
}

InfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {
    this.mode=IC_START;
    this.lbits=bl;
    this.dbits=bd;
    this.ltree=tl;
    this.ltree_index=tl_index;
    this.dtree = td;
    this.dtree_index=td_index;
    this.tree=null;
}

InfCodes.prototype.proc = function(s, z, r){ 
    var j;              // temporary storage
    var t;              // temporary pointer (int[])
    var tindex;         // temporary pointer
    var e;              // extra bits or operation
    var b=0;            // bit buffer
    var k=0;            // bits in bit buffer
    var p=0;            // input data pointer
    var n;              // bytes available there
    var q;              // output window write pointer
    var m;              // bytes to end of window or read pointer
    var f;              // pointer to copy strings from

    // copy input/output information to locals (UPDATE macro restores)
    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

    // process input and output based on current state
    while (true){
      switch (this.mode){
	// waiting for "i:"=input, "o:"=output, "x:"=nothing
      case IC_START:         // x: set up for LEN
	if (m >= 258 && n >= 10){

	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;
	  r = this.inflate_fast(this.lbits, this.dbits, 
			   this.ltree, this.ltree_index, 
			   this.dtree, this.dtree_index,
			   s, z);

	  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
	  q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	  if (r != Z_OK){
	    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;
	    break;
	  }
	}
	this.need = this.lbits;
	this.tree = this.ltree;
	this.tree_index=this.ltree_index;

	this.mode = IC_LEN;
      case IC_LEN:           // i: get length/literal/eob next
	j = this.need;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--;
	  b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	tindex=(this.tree_index+(b&inflate_mask[j]))*3;

	b>>>=(this.tree[tindex+1]);
	k-=(this.tree[tindex+1]);

	e=this.tree[tindex];

	if(e == 0){               // literal
	  this.lit = this.tree[tindex+2];
	  this.mode = IC_LIT;
	  break;
	}
	if((e & 16)!=0 ){          // length
	  this.get = e & 15;
	  this.len = this.tree[tindex+2];
	  this.mode = IC_LENEXT;
	  break;
	}
	if ((e & 64) == 0){        // next table
	  this.need = e;
	  this.tree_index = tindex/3 + this.tree[tindex+2];
	  break;
	}
	if ((e & 32)!=0){               // end of block
	  this.mode = IC_WASH;
	  break;
	}
	this.mode = IC_BADCODE;        // invalid code
	z.msg = "invalid literal/length code";
	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_LENEXT:        // i: getting length extra (have base)
	j = this.get;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.len += (b & inflate_mask[j]);

	b>>=j;
	k-=j;

	this.need = this.dbits;
	this.tree = this.dtree;
	this.tree_index = this.dtree_index;
	this.mode = IC_DIST;
      case IC_DIST:          // i: get distance next
	j = this.need;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	tindex=(this.tree_index+(b & inflate_mask[j]))*3;

	b>>=this.tree[tindex+1];
	k-=this.tree[tindex+1];

	e = (this.tree[tindex]);
	if((e & 16)!=0){               // distance
	  this.get = e & 15;
	  this.dist = this.tree[tindex+2];
	  this.mode = IC_DISTEXT;
	  break;
	}
	if ((e & 64) == 0){        // next table
	  this.need = e;
	  this.tree_index = tindex/3 + this.tree[tindex+2];
	  break;
	}
	this.mode = IC_BADCODE;        // invalid code
	z.msg = "invalid distance code";
	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_DISTEXT:       // i: getting distance extra
	j = this.get;

	while(k<(j)){
	  if(n!=0)r=Z_OK;
	  else{

	    s.bitb=b;s.bitk=k;
	    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	    s.write=q;
	    return s.inflate_flush(z,r);
	  }
	  n--; b|=(z.next_in[p++]&0xff)<<k;
	  k+=8;
	}

	this.dist += (b & inflate_mask[j]);

	b>>=j;
	k-=j;

	this.mode = IC_COPY;
      case IC_COPY:          // o: copying bytes in window, waiting for space
        f = q - this.dist;
        while(f < 0){     // modulo window size-"while" instead
          f += s.end;     // of "if" handles invalid distances
	}
	while (this.len!=0){

	  if(m==0){
	    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	    if(m==0){
	      s.write=q; r=s.inflate_flush(z,r);
	      q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}

	      if(m==0){
		s.bitb=b;s.bitk=k;
		z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
		s.write=q;
		return s.inflate_flush(z,r);
	      }  
	    }
	  }

	  s.window[q++]=s.window[f++]; m--;

	  if (f == s.end)
            f = 0;
	  this.len--;
	}
	this.mode = IC_START;
	break;
      case IC_LIT:           // o: got literal, waiting for output space
	if(m==0){
	  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	  if(m==0){
	    s.write=q; r=s.inflate_flush(z,r);
	    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}
	    if(m==0){
	      s.bitb=b;s.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      s.write=q;
	      return s.inflate_flush(z,r);
	    }
	  }
	}
	r=Z_OK;

	s.window[q++]=this.lit; m--;

	this.mode = IC_START;
	break;
      case IC_WASH:           // o: got eob, possibly more output
	if (k > 7){        // return unused byte, if any
	  k -= 8;
	  n++;
	  p--;             // can always return one
	}

	s.write=q; r=s.inflate_flush(z,r);
	q=s.write;m=q<s.read?s.read-q-1:s.end-q;

	if (s.read != s.write){
	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;
	  return s.inflate_flush(z,r);
	}
	this.mode = IC_END;
      case IC_END:
	r = Z_STREAM_END;
	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      case IC_BADCODE:       // x: got error

	r = Z_DATA_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);

      default:
	r = Z_STREAM_ERROR;

	s.bitb=b;s.bitk=k;
	z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	s.write=q;
	return s.inflate_flush(z,r);
      }
    }
  }

InfCodes.prototype.free = function(z){
    //  ZFREE(z, c);
}

  // Called with number of bytes left to write in window at least 258
  // (the maximum string length) and number of input bytes available
  // at least ten.  The ten bytes are six bytes for the longest length/
  // distance pair plus four bytes for overloading the bit buffer.

InfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {
    var t;                // temporary pointer
    var   tp;             // temporary pointer (int[])
    var tp_index;         // temporary pointer
    var e;                // extra bits or operation
    var b;                // bit buffer
    var k;                // bits in bit buffer
    var p;                // input data pointer
    var n;                // bytes available there
    var q;                // output window write pointer
    var m;                // bytes to end of window or read pointer
    var ml;               // mask for literal/length tree
    var md;               // mask for distance tree
    var c;                // bytes to copy
    var d;                // distance back to copy from
    var r;                // copy source pointer

    var tp_index_t_3;     // (tp_index+t)*3

    // load input, output, bit values
    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;
    q=s.write;m=q<s.read?s.read-q-1:s.end-q;

    // initialize masks
    ml = inflate_mask[bl];
    md = inflate_mask[bd];

    // do until not enough input or output space for fast loop
    do {                          // assume called with m >= 258 && n >= 10
      // get literal/length code
      while(k<(20)){              // max bits for literal/length code
	n--;
	b|=(z.next_in[p++]&0xff)<<k;k+=8;
      }

      t= b&ml;
      tp=tl; 
      tp_index=tl_index;
      tp_index_t_3=(tp_index+t)*3;
      if ((e = tp[tp_index_t_3]) == 0){
	b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	s.window[q++] = tp[tp_index_t_3+2];
	m--;
	continue;
      }
      do {

	b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	if((e&16)!=0){
	  e &= 15;
	  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);

	  b>>=e; k-=e;

	  // decode distance base of block to copy
	  while(k<(15)){           // max bits for distance code
	    n--;
	    b|=(z.next_in[p++]&0xff)<<k;k+=8;
	  }

	  t= b&md;
	  tp=td;
	  tp_index=td_index;
          tp_index_t_3=(tp_index+t)*3;
	  e = tp[tp_index_t_3];

	  do {

	    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	    if((e&16)!=0){
	      // get extra bits to add to distance base
	      e &= 15;
	      while(k<(e)){         // get extra bits (up to 13)
		n--;
		b|=(z.next_in[p++]&0xff)<<k;k+=8;
	      }

	      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);

	      b>>=(e); k-=(e);

	      // do the copy
	      m -= c;
	      if (q >= d){                // offset before dest
		//  just copy
		r=q-d;
		if(q-r>0 && 2>(q-r)){           
		  s.window[q++]=s.window[r++]; // minimum count is three,
		  s.window[q++]=s.window[r++]; // so unroll loop a little
		  c-=2;
		}
		else{
		  s.window[q++]=s.window[r++]; // minimum count is three,
		  s.window[q++]=s.window[r++]; // so unroll loop a little
		  c-=2;
		}
	      }
	      else{                  // else offset after destination
                r=q-d;
                do{
                  r+=s.end;          // force pointer in window
                }while(r<0);         // covers invalid distances
		e=s.end-r;
		if(c>e){             // if source crosses,
		  c-=e;              // wrapped copy
		  if(q-r>0 && e>(q-r)){           
		    do{s.window[q++] = s.window[r++];}
		    while(--e!=0);
		  }
		  else{
		    arrayCopy(s.window, r, s.window, q, e);
		    q+=e; r+=e; e=0;
		  }
		  r = 0;                  // copy rest from start of window
		}

	      }

	      // copy all or what's left
              do{s.window[q++] = s.window[r++];}
		while(--c!=0);
	      break;
	    }
	    else if((e&64)==0){
	      t+=tp[tp_index_t_3+2];
	      t+=(b&inflate_mask[e]);
	      tp_index_t_3=(tp_index+t)*3;
	      e=tp[tp_index_t_3];
	    }
	    else{
	      z.msg = "invalid distance code";

	      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

	      s.bitb=b;s.bitk=k;
	      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	      s.write=q;

	      return Z_DATA_ERROR;
	    }
	  }
	  while(true);
	  break;
	}

	if((e&64)==0){
	  t+=tp[tp_index_t_3+2];
	  t+=(b&inflate_mask[e]);
	  tp_index_t_3=(tp_index+t)*3;
	  if((e=tp[tp_index_t_3])==0){

	    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);

	    s.window[q++]=tp[tp_index_t_3+2];
	    m--;
	    break;
	  }
	}
	else if((e&32)!=0){

	  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;
 
	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;

	  return Z_STREAM_END;
	}
	else{
	  z.msg="invalid literal/length code";

	  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

	  s.bitb=b;s.bitk=k;
	  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
	  s.write=q;

	  return Z_DATA_ERROR;
	}
      } 
      while(true);
    } 
    while(m>=258 && n>= 10);

    // not enough input or output--restore pointers and return
    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;

    s.bitb=b;s.bitk=k;
    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;
    s.write=q;

    return Z_OK;
}

//
// InfTree.java
//

function InfTree() {
}

InfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {

    // Given a list of code lengths and a maximum table size, make a set of
    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
    // if the given code set is incomplete (the tables are still built in this
    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of
    // lengths), or Z_MEM_ERROR if not enough memory.

    var a;                       // counter for codes of length k
    var f;                       // i repeats in table every f entries
    var g;                       // maximum code length
    var h;                       // table level
    var i;                       // counter, current code
    var j;                       // counter
    var k;                       // number of bits in current code
    var l;                       // bits per table (returned in m)
    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP
    var p;                       // pointer into c[], b[], or v[]
    var q;                       // points to current table
    var w;                       // bits before this table == (l * h)
    var xp;                      // pointer into x
    var y;                       // number of dummy codes added
    var z;                       // number of entries in current table

    // Generate counts for each bit length

    p = 0; i = n;
    do {
      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX
    }while(i!=0);

    if(this.c[0] == n){                // null input--all zero length codes
      t[0] = -1;
      m[0] = 0;
      return Z_OK;
    }

    // Find minimum and maximum length, bound *m by those
    l = m[0];
    for (j = 1; j <= BMAX; j++)
      if(this.c[j]!=0) break;
    k = j;                        // minimum code length
    if(l < j){
      l = j;
    }
    for (i = BMAX; i!=0; i--){
      if(this.c[i]!=0) break;
    }
    g = i;                        // maximum code length
    if(l > i){
      l = i;
    }
    m[0] = l;

    // Adjust last length count to fill out codes, if needed
    for (y = 1 << j; j < i; j++, y <<= 1){
      if ((y -= this.c[j]) < 0){
        return Z_DATA_ERROR;
      }
    }
    if ((y -= this.c[i]) < 0){
      return Z_DATA_ERROR;
    }
    this.c[i] += y;

    // Generate starting offsets into the value table for each length
    this.x[1] = j = 0;
    p = 1;  xp = 2;
    while (--i!=0) {                 // note that i == g from above
      this.x[xp] = (j += this.c[p]);
      xp++;
      p++;
    }

    // Make a table of values in order of bit lengths
    i = 0; p = 0;
    do {
      if ((j = b[bindex+p]) != 0){
        this.v[this.x[j]++] = i;
      }
      p++;
    }
    while (++i < n);
    n = this.x[g];                     // set n to length of v

    // Generate the Huffman codes and for each, make the table entries
    this.x[0] = i = 0;                 // first Huffman code is zero
    p = 0;                        // grab values in bit order
    h = -1;                       // no tables yet--level -1
    w = -l;                       // bits decoded == (l * h)
    this.u[0] = 0;                     // just to keep compilers happy
    q = 0;                        // ditto
    z = 0;                        // ditto

    // go through the bit lengths (k already is bits in shortest code)
    for (; k <= g; k++){
      a = this.c[k];
      while (a--!=0){
	// here i is the Huffman code of length k bits for value *p
	// make tables up to required level
        while (k > w + l){
          h++;
          w += l;                 // previous table always l bits
	  // compute minimum size table less than or equal to l bits
          z = g - w;
          z = (z > l) ? l : z;        // table size upper limit
          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table
                                      // too few codes for k-w bit table
            f -= a + 1;               // deduct codes from patterns left
            xp = k;
            if(j < z){
              while (++j < z){        // try smaller tables up to z bits
                if((f <<= 1) <= this.c[++xp])
                  break;              // enough codes to use up j bits
                f -= this.c[xp];           // else deduct codes from patterns
              }
	    }
          }
          z = 1 << j;                 // table entries for j-bit table

	  // allocate new table
          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)
            return Z_DATA_ERROR;       // overflow of MANY
          }
          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG
          this.hn[0] += z;
 
	  // connect to last table, if there is one
	  if(h!=0){
            this.x[h]=i;           // save pattern for backing up
            this.r[0]=j;     // bits in this table
            this.r[1]=l;     // bits to dump before this table
            j=i>>>(w - l);
            this.r[2] = (q - this.u[h-1] - j);               // offset to this table
            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table
          }
          else{
            t[0] = q;               // first table is returned result
	  }
        }

	// set up table entry in r
        this.r[1] = (k - w);
        if (p >= n){
          this.r[0] = 128 + 64;      // out of values--invalid code
	}
        else if (v[p] < s){
          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block
          this.r[2] = this.v[p++];          // simple code is just the value
        }
        else{
          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists
          this.r[2]=d[this.v[p++] - s];
        }

        // fill code-like entries with r
        f=1<<(k-w);
        for (j=i>>>w;j<z;j+=f){
          arrayCopy(this.r, 0, hp, (q+j)*3, 3);
	}

	// backwards increment the k-bit code i
        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){
          i ^= j;
	}
        i ^= j;

	// backup over finished tables
        mask = (1 << w) - 1;      // needed on HP, cc -O bug
        while ((i & mask) != this.x[h]){
          h--;                    // don't need to update q
          w -= l;
          mask = (1 << w) - 1;
        }
      }
    }
    // Return Z_BUF_ERROR if we were given an incomplete table
    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
}

InfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {
    var result;
    this.initWorkArea(19);
    this.hn[0]=0;
    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);

    if(result == Z_DATA_ERROR){
      z.msg = "oversubscribed dynamic bit lengths tree";
    }
    else if(result == Z_BUF_ERROR || bb[0] == 0){
      z.msg = "incomplete dynamic bit lengths tree";
      result = Z_DATA_ERROR;
    }
    return result;
}

InfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {
    var result;

    // build literal/length tree
    this.initWorkArea(288);
    this.hn[0]=0;
    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);
    if (result != Z_OK || bl[0] == 0){
      if(result == Z_DATA_ERROR){
        z.msg = "oversubscribed literal/length tree";
      }
      else if (result != Z_MEM_ERROR){
        z.msg = "incomplete literal/length tree";
        result = Z_DATA_ERROR;
      }
      return result;
    }

    // build distance tree
    this.initWorkArea(288);
    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);

    if (result != Z_OK || (bd[0] == 0 && nl > 257)){
      if (result == Z_DATA_ERROR){
        z.msg = "oversubscribed distance tree";
      }
      else if (result == Z_BUF_ERROR) {
        z.msg = "incomplete distance tree";
        result = Z_DATA_ERROR;
      }
      else if (result != Z_MEM_ERROR){
        z.msg = "empty distance tree with lengths";
        result = Z_DATA_ERROR;
      }
      return result;
    }

    return Z_OK;
}
/*
  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth
                                 int[] bd,  //distance desired/actual bit depth
                                 int[][] tl,//literal/length tree result
                                 int[][] td,//distance tree result 
                                 ZStream z  //for memory allocation
				 ){

*/

function inflate_trees_fixed(bl, bd, tl, td, z) {
    bl[0]=fixed_bl;
    bd[0]=fixed_bd;
    tl[0]=fixed_tl;
    td[0]=fixed_td;
    return Z_OK;
}

InfTree.prototype.initWorkArea = function(vsize){
    if(this.hn==null){
        this.hn=new Int32Array(1);
        this.v=new Int32Array(vsize);
        this.c=new Int32Array(BMAX+1);
        this.r=new Int32Array(3);
        this.u=new Int32Array(BMAX);
        this.x=new Int32Array(BMAX+1);
    }
    if(this.v.length<vsize){ 
        this.v=new Int32Array(vsize); 
    }
    for(var i=0; i<vsize; i++){this.v[i]=0;}
    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}
    for(var i=0; i<3; i++){this.r[i]=0;}
//  for(int i=0; i<BMAX; i++){u[i]=0;}
    arrayCopy(this.c, 0, this.u, 0, BMAX);
//  for(int i=0; i<BMAX+1; i++){x[i]=0;}
    arrayCopy(this.c, 0, this.x, 0, BMAX+1);
}

var testArray = new Uint8Array(1);
var hasSubarray = (typeof testArray.subarray === 'function');
var hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...

function arrayCopy(src, srcOffset, dest, destOffset, count) {
    if (count == 0) {
        return;
    } 
    if (!src) {
        throw "Undef src";
    } else if (!dest) {
        throw "Undef dest";
    }

    if (srcOffset == 0 && count == src.length) {
        arrayCopy_fast(src, dest, destOffset);
    } else if (hasSubarray) {
        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); 
    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {
        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);
    } else { 
        arrayCopy_slow(src, srcOffset, dest, destOffset, count);
    }

}

function arrayCopy_slow(src, srcOffset, dest, destOffset, count) {

    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);

     for (var i = 0; i < count; ++i) {
        dest[destOffset + i] = src[srcOffset + i];
    }
}

function arrayCopy_fast(src, dest, destOffset) {
    dest.set(src, destOffset);
}


  // largest prime smaller than 65536
var ADLER_BASE=65521; 
  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1
var ADLER_NMAX=5552;

function adler32(adler, /* byte[] */ buf,  index, len){
    if(buf == null){ return 1; }

    var s1=adler&0xffff;
    var s2=(adler>>16)&0xffff;
    var k;

    while(len > 0) {
      k=len<ADLER_NMAX?len:ADLER_NMAX;
      len-=k;
      while(k>=16){
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        s1+=buf[index++]&0xff; s2+=s1;
        k-=16;
      }
      if(k!=0){
        do{
          s1+=buf[index++]&0xff; s2+=s1;
        }
        while(--k!=0);
      }
      s1%=ADLER_BASE;
      s2%=ADLER_BASE;
    }
    return (s2<<16)|s1;
}



function jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {
    if (!start) {
        buffer = new Uint8Array(buffer);
    } else if (!length) {
        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);
    } else {
        buffer = new Uint8Array(buffer, start, length);
    }

    var z = new ZStream();
    z.inflateInit(DEF_WBITS, true);
    z.next_in = buffer;
    z.next_in_index = 0;
    z.avail_in = buffer.length;

    var oBlockList = [];
    var totalSize = 0;
    while (true) {
        var obuf = new Uint8Array(32000);
        z.next_out = obuf;
        z.next_out_index = 0;
        z.avail_out = obuf.length;
        var status = z.inflate(Z_NO_FLUSH);
        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {
            throw z.msg;
        }
        if (z.avail_out != 0) {
            var newob = new Uint8Array(obuf.length - z.avail_out);
            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));
            obuf = newob;
        }
        oBlockList.push(obuf);
        totalSize += obuf.length;
        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {
            break;
        }
    }

    if (afterUncOffset) {
        afterUncOffset[0] = (start || 0) + z.next_in_index;
    }

    if (oBlockList.length == 1) {
        return oBlockList[0].buffer;
    } else {
        var out = new Uint8Array(totalSize);
        var cursor = 0;
        for (var i = 0; i < oBlockList.length; ++i) {
            var b = oBlockList[i];
            arrayCopy(b, 0, out, cursor, b.length);
            cursor += b.length;
        }
        return out.buffer;
    }
}

if (typeof(module) !== 'undefined') {
  module.exports = {
    inflateBuffer: jszlib_inflate_buffer,
    arrayCopy: arrayCopy
  };
}

},{}]},{},[15])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvYmFtLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2JlZHdpZy5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9iaWd3aWcuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvYmluLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2Jyb3dzZXItdWkuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvY2Jyb3dzZXIuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvY2hhaW5zZXQuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvY2lnYXIuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvY29sb3IuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvZGFzLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2RvbXVpLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2Vuc2VtYmxqc29uLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2V4cG9ydC1jb25maWcuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvZXhwb3J0LXVpLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2Zha2VfMjJmZWIzYzIuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvZmVhdHVyZS1kcmF3LmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2ZlYXR1cmUtcG9wdXAuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvZmVhdHVyZXMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvZ2x5cGhzLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL2pianNvbi5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9rc3BhY2UuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvbGgzdXRpbHMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvbWVtc3RvcmUuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvbnVtZm9ybWF0cy5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9vdmVybGF5LmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3Byb2JlLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3NhbXBsZS5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9zZWFyY2guanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvc2VxdWVuY2UtZHJhdy5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9zZXNzaW9uLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3NoYTEuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvc291cmNlYWRhcHRlcnMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvc3BhbnMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvc3ZnLWV4cG9ydC5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy9zdmctdXRpbHMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvdGFiaXgtc291cmNlLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3RhYml4LmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3RodWIuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvdGllci1hY3Rpb25zLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3RpZXItZWRpdC5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy90aWVyLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3RyYWNrLWFkZGVyLWN1c3RvbS5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy90cmFjay1hZGRlci5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy90cml4LmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3RzbWFydC11dGlscy5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9qcy90d29CaXQuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvdXRpbHMuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvanMvdmNmLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL2pzL3ZlcnNpb24uanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvY29tbW9uanMvbWFpbi5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9jb21tb25qcy9wcm9taXNlL2FsbC5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9jb21tb25qcy9wcm9taXNlL2FzYXAuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvY29tbW9uanMvcHJvbWlzZS9jYXN0LmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2NvbW1vbmpzL3Byb21pc2UvY29uZmlnLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2NvbW1vbmpzL3Byb21pc2UvcG9seWZpbGwuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvY29tbW9uanMvcHJvbWlzZS9wcm9taXNlLmpzIiwiL1VzZXJzL3Brb2svcmVwb3MvZGFsbGlhbmNlLXBsdWdpbi93ZWItYXBwL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2NvbW1vbmpzL3Byb21pc2UvcmFjZS5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9jb21tb25qcy9wcm9taXNlL3JlamVjdC5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9jb21tb25qcy9wcm9taXNlL3Jlc29sdmUuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNlL2Rpc3QvY29tbW9uanMvcHJvbWlzZS91dGlscy5qcyIsIi9Vc2Vycy9wa29rL3JlcG9zL2RhbGxpYW5jZS1wbHVnaW4vd2ViLWFwcC9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIvVXNlcnMvcGtvay9yZXBvcy9kYWxsaWFuY2UtcGx1Z2luL3dlYi1hcHAvbm9kZV9tb2R1bGVzL2pzemxpYi9qcy9pbmZsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Y0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25pQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1UUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3AwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWxDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeDNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25QQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbmdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDLzBDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9ZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMVxuLy9cbi8vIGJhbS5qczogaW5kZXhlZCBiaW5hcnkgYWxpZ25tZW50c1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHNwYW5zID0gcmVxdWlyZSgnLi9zcGFucycpO1xuICAgIHZhciBSYW5nZSA9IHNwYW5zLlJhbmdlO1xuICAgIHZhciB1bmlvbiA9IHNwYW5zLnVuaW9uO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBzcGFucy5pbnRlcnNlY3Rpb247XG5cbiAgICB2YXIgYmluID0gcmVxdWlyZSgnLi9iaW4nKTtcbiAgICB2YXIgcmVhZEludCA9IGJpbi5yZWFkSW50O1xuICAgIHZhciByZWFkU2hvcnQgPSBiaW4ucmVhZFNob3J0O1xuICAgIHZhciByZWFkQnl0ZSA9IGJpbi5yZWFkQnl0ZTtcbiAgICB2YXIgcmVhZEludDY0ID0gYmluLnJlYWRJbnQ2NDtcbiAgICB2YXIgcmVhZEZsb2F0ID0gYmluLnJlYWRGbG9hdDtcblxuICAgIHZhciBsaDN1dGlscyA9IHJlcXVpcmUoJy4vbGgzdXRpbHMnKTtcbiAgICB2YXIgcmVhZFZvYiA9IGxoM3V0aWxzLnJlYWRWb2I7XG4gICAgdmFyIHVuYmd6ZiA9IGxoM3V0aWxzLnVuYmd6ZjtcbiAgICB2YXIgcmVnMmJpbnMgPSBsaDN1dGlscy5yZWcyYmlucztcbiAgICB2YXIgQ2h1bmsgPSBsaDN1dGlscy5DaHVuaztcbn1cblxuXG52YXIgQkFNX01BR0lDID0gMHgxNGQ0MTQyO1xudmFyIEJBSV9NQUdJQyA9IDB4MTQ5NDE0MjtcblxudmFyIEJhbUZsYWdzID0ge1xuICAgIE1VTFRJUExFX1NFR01FTlRTOiAgICAgICAweDEsXG4gICAgQUxMX1NFR01FTlRTX0FMSUdOOiAgICAgIDB4MixcbiAgICBTRUdNRU5UX1VOTUFQUEVEOiAgICAgICAgMHg0LFxuICAgIE5FWFRfU0VHTUVOVF9VTk1BUFBFRDogICAweDgsXG4gICAgUkVWRVJTRV9DT01QTEVNRU5UOiAgICAgIDB4MTAsXG4gICAgTkVYVF9SRVZFUlNFX0NPTVBMRU1FTlQ6IDB4MjAsXG4gICAgRklSU1RfU0VHTUVOVDogICAgICAgICAgIDB4NDAsXG4gICAgTEFTVF9TRUdNRU5UOiAgICAgICAgICAgIDB4ODAsXG4gICAgU0VDT05EQVJZX0FMSUdOTUVOVDogICAgIDB4MTAwLFxuICAgIFFDX0ZBSUw6ICAgICAgICAgICAgICAgICAweDIwMCxcbiAgICBEVVBMSUNBVEU6ICAgICAgICAgICAgICAgMHg0MDAsXG4gICAgU1VQUExFTUVOVEFSWTogICAgICAgICAgIDB4ODAwXG59O1xuXG5mdW5jdGlvbiBCYW1GaWxlKCkge1xufVxuXG5mdW5jdGlvbiBtYWtlQmFtKGRhdGEsIGJhaSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYmFtID0gbmV3IEJhbUZpbGUoKTtcbiAgICBiYW0uZGF0YSA9IGRhdGE7XG4gICAgYmFtLmJhaSA9IGJhaTtcblxuICAgIGJhbS5iYWkuZmV0Y2goZnVuY3Rpb24oaGVhZGVyKSB7ICAgLy8gRG8gd2UgcmVhbGx5IG5lZWQgdG8gZmV0Y2ggdGhlIHdob2xlIHRoaW5nPyA6LShcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkNvdWxkbid0IGFjY2VzcyBCQUlcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5jYmEgPSBuZXcgVWludDhBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgYmFpTWFnaWMgPSByZWFkSW50KHVuY2JhLCAwKTtcbiAgICAgICAgaWYgKGJhaU1hZ2ljICE9IEJBSV9NQUdJQykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdOb3QgYSBCQUkgZmlsZSwgbWFnaWM9MHgnICsgYmFpTWFnaWMudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBucmVmID0gcmVhZEludCh1bmNiYSwgNCk7XG5cbiAgICAgICAgYmFtLmluZGljZXMgPSBbXTtcblxuICAgICAgICB2YXIgcCA9IDg7XG4gICAgICAgIHZhciBtaW5CbG9ja0luZGV4ID0gMTAwMDAwMDAwMDtcbiAgICAgICAgZm9yICh2YXIgcmVmID0gMDsgcmVmIDwgbnJlZjsgKytyZWYpIHtcbiAgICAgICAgICAgIHZhciBibG9ja1N0YXJ0ID0gcDtcbiAgICAgICAgICAgIHZhciBuYmluID0gcmVhZEludCh1bmNiYSwgcCk7IHAgKz0gNDtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgbmJpbjsgKytiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJpbiA9IHJlYWRJbnQodW5jYmEsIHApO1xuICAgICAgICAgICAgICAgIHZhciBuY2huayA9IHJlYWRJbnQodW5jYmEsIHArNCk7XG4gICAgICAgICAgICAgICAgcCArPSA4ICsgKG5jaG5rICogMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5pbnR2ID0gcmVhZEludCh1bmNiYSwgcCk7IHAgKz0gNDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHEgPSBwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuaW50djsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSByZWFkVm9iKHVuY2JhLCBxKTsgcSArPSA4O1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiaSA9IHYuYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2Lm9mZnNldCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBiaSArPSA2NTUzNjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYmkgPCBtaW5CbG9ja0luZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWluQmxvY2tJbmRleCA9IGJpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwICs9IChuaW50diAqIDgpO1xuXG5cbiAgICAgICAgICAgIGlmIChuYmluID4gMCkge1xuICAgICAgICAgICAgICAgIGJhbS5pbmRpY2VzW3JlZl0gPSBuZXcgVWludDhBcnJheShoZWFkZXIsIGJsb2NrU3RhcnQsIHAgLSBibG9ja1N0YXJ0KTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGJhbS5kYXRhLnNsaWNlKDAsIG1pbkJsb2NrSW5kZXgpLmZldGNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkNvdWxkbid0IGFjY2VzcyBCQU1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB1bmMgPSB1bmJnemYociwgci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciB1bmNiYSA9IG5ldyBVaW50OEFycmF5KHVuYyk7XG5cbiAgICAgICAgICAgIHZhciBtYWdpYyA9IHJlYWRJbnQodW5jYmEsIDApO1xuICAgICAgICAgICAgaWYgKG1hZ2ljICE9IEJBTV9NQUdJQykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIk5vdCBhIEJBTSBmaWxlLCBtYWdpYz0weFwiICsgbWFnaWMudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoZWFkTGVuID0gcmVhZEludCh1bmNiYSwgNCk7XG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRMZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGhlYWRlciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHVuY2JhW2kgKyA4XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuUmVmID0gcmVhZEludCh1bmNiYSwgaGVhZExlbiArIDgpO1xuICAgICAgICAgICAgdmFyIHAgPSBoZWFkTGVuICsgMTI7XG5cbiAgICAgICAgICAgIGJhbS5jaHJUb0luZGV4ID0ge307XG4gICAgICAgICAgICBiYW0uaW5kZXhUb0NociA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuUmVmOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbE5hbWUgPSByZWFkSW50KHVuY2JhLCBwKTtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbE5hbWUtMTsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1bmNiYVtwICsgNCArIGpdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGxSZWYgPSByZWFkSW50KHVuY2JhLCBwICsgbE5hbWUgKyA0KTtcbiAgICAgICAgICAgICAgICBiYW0uY2hyVG9JbmRleFtuYW1lXSA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignY2hyJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBiYW0uY2hyVG9JbmRleFtuYW1lLnN1YnN0cmluZygzKV0gPSBpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhbS5jaHJUb0luZGV4WydjaHInICsgbmFtZV0gPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYW0uaW5kZXhUb0Noci5wdXNoKG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgcCA9IHAgKyA4ICsgbE5hbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChiYW0uaW5kaWNlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhiYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuXG5cbkJhbUZpbGUucHJvdG90eXBlLmJsb2Nrc0ZvclJhbmdlID0gZnVuY3Rpb24ocmVmSWQsIG1pbiwgbWF4KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRpY2VzW3JlZklkXTtcbiAgICBpZiAoIWluZGV4KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgaW50Qmluc0wgPSByZWcyYmlucyhtaW4sIG1heCk7XG4gICAgdmFyIGludEJpbnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGludEJpbnNMLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGludEJpbnNbaW50Qmluc0xbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGxlYWZDaHVua3MgPSBbXSwgb3RoZXJDaHVua3MgPSBbXTtcblxuICAgIHZhciBuYmluID0gcmVhZEludChpbmRleCwgMCk7XG4gICAgdmFyIHAgPSA0O1xuICAgIGZvciAodmFyIGIgPSAwOyBiIDwgbmJpbjsgKytiKSB7XG4gICAgICAgIHZhciBiaW4gPSByZWFkSW50KGluZGV4LCBwKTtcbiAgICAgICAgdmFyIG5jaG5rID0gcmVhZEludChpbmRleCwgcCs0KTtcbi8vICAgICAgICBkbG9nKCdiaW49JyArIGJpbiArICc7IG5jaG5rPScgKyBuY2huayk7XG4gICAgICAgIHAgKz0gODtcbiAgICAgICAgaWYgKGludEJpbnNbYmluXSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuY2huazsgKytjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzID0gcmVhZFZvYihpbmRleCwgcCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlID0gcmVhZFZvYihpbmRleCwgcCArIDgpO1xuICAgICAgICAgICAgICAgIChiaW4gPCA0NjgxID8gb3RoZXJDaHVua3MgOiBsZWFmQ2h1bmtzKS5wdXNoKG5ldyBDaHVuayhjcywgY2UpKTtcbiAgICAgICAgICAgICAgICBwICs9IDE2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcCArPSAgKG5jaG5rICogMTYpO1xuICAgICAgICB9XG4gICAgfVxuLy8gICAgZGxvZygnbGVhZkNodW5rcyA9ICcgKyBtaW5pSlNPTmlmeShsZWFmQ2h1bmtzKSk7XG4vLyAgICBkbG9nKCdvdGhlckNodW5rcyA9ICcgKyBtaW5pSlNPTmlmeShvdGhlckNodW5rcykpO1xuXG4gICAgdmFyIG5pbnR2ID0gcmVhZEludChpbmRleCwgcCk7XG4gICAgdmFyIGxvd2VzdCA9IG51bGw7XG4gICAgdmFyIG1pbkxpbiA9IE1hdGgubWluKG1pbj4+MTQsIG5pbnR2IC0gMSksIG1heExpbiA9IE1hdGgubWluKG1heD4+MTQsIG5pbnR2IC0gMSk7XG4gICAgZm9yICh2YXIgaSA9IG1pbkxpbjsgaSA8PSBtYXhMaW47ICsraSkge1xuICAgICAgICB2YXIgbGIgPSAgcmVhZFZvYihpbmRleCwgcCArIDQgKyAoaSAqIDgpKTtcbiAgICAgICAgaWYgKCFsYikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsb3dlc3QgfHwgbGIuYmxvY2sgPCBsb3dlc3QuYmxvY2sgfHwgbGIub2Zmc2V0IDwgbG93ZXN0Lm9mZnNldCkge1xuICAgICAgICAgICAgbG93ZXN0ID0gbGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZGxvZygnTG93ZXN0IExCID0gJyArIGxvd2VzdCk7XG4gICAgXG4gICAgdmFyIHBydW5lZE90aGVyQ2h1bmtzID0gW107XG4gICAgaWYgKGxvd2VzdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaG5rID0gb3RoZXJDaHVua3NbaV07XG4gICAgICAgICAgICBpZiAoY2huay5tYXh2LmJsb2NrID49IGxvd2VzdC5ibG9jayAmJiBjaG5rLm1heHYub2Zmc2V0ID49IGxvd2VzdC5vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBwcnVuZWRPdGhlckNodW5rcy5wdXNoKGNobmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGRsb2coJ3BydW5lZE90aGVyQ2h1bmtzID0gJyArIG1pbmlKU09OaWZ5KHBydW5lZE90aGVyQ2h1bmtzKSk7XG4gICAgb3RoZXJDaHVua3MgPSBwcnVuZWRPdGhlckNodW5rcztcblxuICAgIHZhciBpbnRDaHVua3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG90aGVyQ2h1bmtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGludENodW5rcy5wdXNoKG90aGVyQ2h1bmtzW2ldKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZWFmQ2h1bmtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGludENodW5rcy5wdXNoKGxlYWZDaHVua3NbaV0pO1xuICAgIH1cblxuICAgIGludENodW5rcy5zb3J0KGZ1bmN0aW9uKGMwLCBjMSkge1xuICAgICAgICB2YXIgZGlmID0gYzAubWludi5ibG9jayAtIGMxLm1pbnYuYmxvY2s7XG4gICAgICAgIGlmIChkaWYgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRpZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjMC5taW52Lm9mZnNldCAtIGMxLm1pbnYub2Zmc2V0O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdmFyIG1lcmdlZENodW5rcyA9IFtdO1xuICAgIGlmIChpbnRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgY3VyID0gaW50Q2h1bmtzWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGludENodW5rcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG5jID0gaW50Q2h1bmtzW2ldO1xuICAgICAgICAgICAgaWYgKG5jLm1pbnYuYmxvY2sgPT0gY3VyLm1heHYuYmxvY2sgLyogJiYgbmMubWludi5vZmZzZXQgPT0gY3VyLm1heHYub2Zmc2V0ICovKSB7IC8vIG5vIHBvaW50IHNwbGl0dGluZyBtaWQtYmxvY2tcbiAgICAgICAgICAgICAgICBjdXIgPSBuZXcgQ2h1bmsoY3VyLm1pbnYsIG5jLm1heHYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRDaHVua3MucHVzaChjdXIpO1xuICAgICAgICAgICAgICAgIGN1ciA9IG5jO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lcmdlZENodW5rcy5wdXNoKGN1cik7XG4gICAgfVxuICAgIC8vIGRsb2coJ21lcmdlZENodW5rcyA9ICcgKyBtaW5pSlNPTmlmeShtZXJnZWRDaHVua3MpKTtcblxuICAgIHJldHVybiBtZXJnZWRDaHVua3M7XG59XG5cbkJhbUZpbGUucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgY2FsbGJhY2ssIG9wdHMpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgdmFyIGNocklkID0gdGhpcy5jaHJUb0luZGV4W2Nocl07XG4gICAgdmFyIGNodW5rcztcbiAgICBpZiAoY2hySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjaHVua3MgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjaHVua3MgPSB0aGlzLmJsb2Nrc0ZvclJhbmdlKGNocklkLCBtaW4sIG1heCk7XG4gICAgICAgIGlmICghY2h1bmtzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCAnRXJyb3IgaW4gaW5kZXggZmV0Y2gnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB2YXIgcmVjb3JkcyA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGRhdGE7XG5cbiAgICBmdW5jdGlvbiB0cmFtcCgpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZWNvcmRzKTtcbiAgICAgICAgfSBlbHNlIGlmICghZGF0YSkge1xuICAgICAgICAgICAgLy8gZGxvZygnZmV0Y2hpbmcgJyArIGluZGV4KTtcbiAgICAgICAgICAgIHZhciBjID0gY2h1bmtzW2luZGV4XTtcbiAgICAgICAgICAgIHZhciBmZXRjaE1pbiA9IGMubWludi5ibG9jaztcbiAgICAgICAgICAgIHZhciBmZXRjaE1heCA9IGMubWF4di5ibG9jayArICgxPDwxNik7IC8vICpzaWdoKlxuICAgICAgICAgICAgdGhpc0IuZGF0YS5zbGljZShmZXRjaE1pbiwgZmV0Y2hNYXggLSBmZXRjaE1pbikuZmV0Y2goZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB1bmJnemYociwgYy5tYXh2LmJsb2NrIC0gYy5taW52LmJsb2NrICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW1wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgICAgdGhpc0IucmVhZEJhbVJlY29yZHMoYmEsIGNodW5rc1tpbmRleF0ubWludi5vZmZzZXQsIHJlY29yZHMsIG1pbiwgbWF4LCBjaHJJZCwgb3B0cyk7XG4gICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gdHJhbXAoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cmFtcCgpO1xufVxuXG52YXIgU0VRUkVUX0RFQ09ERVIgPSBbJz0nLCAnQScsICdDJywgJ3gnLCAnRycsICd4JywgJ3gnLCAneCcsICdUJywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ04nXTtcbnZhciBDSUdBUl9ERUNPREVSID0gWydNJywgJ0knLCAnRCcsICdOJywgJ1MnLCAnSCcsICdQJywgJz0nLCAnWCcsICc/JywgJz8nLCAnPycsICc/JywgJz8nLCAnPycsICc/J107XG5cbmZ1bmN0aW9uIEJhbVJlY29yZCgpIHtcbn1cblxuQmFtRmlsZS5wcm90b3R5cGUucmVhZEJhbVJlY29yZHMgPSBmdW5jdGlvbihiYSwgb2Zmc2V0LCBzaW5rLCBtaW4sIG1heCwgY2hySWQsIG9wdHMpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgYmxvY2tTaXplID0gcmVhZEludChiYSwgb2Zmc2V0KTtcbiAgICAgICAgdmFyIGJsb2NrRW5kID0gb2Zmc2V0ICsgYmxvY2tTaXplICsgNDtcbiAgICAgICAgaWYgKGJsb2NrRW5kID49IGJhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpbms7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjb3JkID0gbmV3IEJhbVJlY29yZCgpO1xuXG4gICAgICAgIHZhciByZWZJRCA9IHJlYWRJbnQoYmEsIG9mZnNldCArIDQpO1xuICAgICAgICB2YXIgcG9zID0gcmVhZEludChiYSwgb2Zmc2V0ICsgOCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgYm1uID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMTIpO1xuICAgICAgICB2YXIgYmluID0gKGJtbiAmIDB4ZmZmZjAwMDApID4+IDE2O1xuICAgICAgICB2YXIgbXEgPSAoYm1uICYgMHhmZjAwKSA+PiA4O1xuICAgICAgICB2YXIgbmwgPSBibW4gJiAweGZmO1xuXG4gICAgICAgIHZhciBmbGFnX25jID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMTYpO1xuICAgICAgICB2YXIgZmxhZyA9IChmbGFnX25jICYgMHhmZmZmMDAwMCkgPj4gMTY7XG4gICAgICAgIHZhciBuYyA9IGZsYWdfbmMgJiAweGZmZmY7XG4gICAgXG4gICAgICAgIHZhciBsc2VxID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMjApO1xuICAgICAgICBcbiAgICAgICAgdmFyIG5leHRSZWYgID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMjQpO1xuICAgICAgICB2YXIgbmV4dFBvcyA9IHJlYWRJbnQoYmEsIG9mZnNldCArIDI4KTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0bGVuID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMzIpO1xuICAgIFxuICAgICAgICByZWNvcmQuc2VnbWVudCA9IHRoaXMuaW5kZXhUb0NocltyZWZJRF07XG4gICAgICAgIHJlY29yZC5mbGFnID0gZmxhZztcbiAgICAgICAgcmVjb3JkLnBvcyA9IHBvcztcbiAgICAgICAgcmVjb3JkLm1xID0gbXE7XG4gICAgICAgIGlmIChvcHRzLmxpZ2h0KVxuICAgICAgICAgICAgcmVjb3JkLnNlcUxlbmd0aCA9IGxzZXE7XG5cbiAgICAgICAgaWYgKCFvcHRzLmxpZ2h0KSB7XG4gICAgICAgICAgICBpZiAobmV4dFJlZiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLm5leHRTZWdtZW50ID0gdGhpcy5pbmRleFRvQ2hyW25leHRSZWZdO1xuICAgICAgICAgICAgICAgIHJlY29yZC5uZXh0UG9zID0gbmV4dFBvcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlYWROYW1lID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5sLTE7ICsraikge1xuICAgICAgICAgICAgICAgIHJlYWROYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbb2Zmc2V0ICsgMzYgKyBqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQucmVhZE5hbWUgPSByZWFkTmFtZTtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgcCA9IG9mZnNldCArIDM2ICsgbmw7XG5cbiAgICAgICAgICAgIHZhciBjaWdhciA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuYzsgKytjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNpZ29wID0gcmVhZEludChiYSwgcCk7XG4gICAgICAgICAgICAgICAgY2lnYXIgPSBjaWdhciArIChjaWdvcD4+NCkgKyBDSUdBUl9ERUNPREVSW2NpZ29wICYgMHhmXTtcbiAgICAgICAgICAgICAgICBwICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQuY2lnYXIgPSBjaWdhcjtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2VxID0gJyc7XG4gICAgICAgICAgICB2YXIgc2VxQnl0ZXMgPSAobHNlcSArIDEpID4+IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcUJ5dGVzOyArK2opIHtcbiAgICAgICAgICAgICAgICB2YXIgc2IgPSBiYVtwICsgal07XG4gICAgICAgICAgICAgICAgc2VxICs9IFNFUVJFVF9ERUNPREVSWyhzYiAmIDB4ZjApID4+IDRdO1xuICAgICAgICAgICAgICAgIHNlcSArPSBTRVFSRVRfREVDT0RFUlsoc2IgJiAweDBmKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwICs9IHNlcUJ5dGVzO1xuICAgICAgICAgICAgcmVjb3JkLnNlcSA9IHNlcTtcblxuICAgICAgICAgICAgdmFyIHFzZXEgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbHNlcTsgKytqKSB7XG4gICAgICAgICAgICAgICAgcXNlcSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJhW3AgKyBqXSArIDMzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgKz0gbHNlcTtcbiAgICAgICAgICAgIHJlY29yZC5xdWFscyA9IHFzZXE7XG5cbiAgICAgICAgICAgIHdoaWxlIChwIDwgYmxvY2tFbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gU3RyaW5nLmZyb21DaGFyQ29kZShiYVtwXSwgYmFbcCArIDFdKTtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbcCArIDJdKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnQScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJhW3AgKyAzXSk7XG4gICAgICAgICAgICAgICAgICAgIHAgKz0gNDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2knIHx8IHR5cGUgPT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVhZEludChiYSwgcCArIDMpO1xuICAgICAgICAgICAgICAgICAgICBwICs9IDc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdjJyB8fCB0eXBlID09ICdDJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGJhW3AgKyAzXTtcbiAgICAgICAgICAgICAgICAgICAgcCArPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncycgfHwgdHlwZSA9PSAnUycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZWFkU2hvcnQoYmEsIHAgKyAzKTtcbiAgICAgICAgICAgICAgICAgICAgcCArPSA1O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnZicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZWFkRmxvYXQoYmEsIHAgKyAzKTtcbiAgICAgICAgICAgICAgICAgICAgcCArPSA3O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnWicgfHwgdHlwZSA9PSAnSCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcCArPSAzO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2MgPSBiYVtwKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNjID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ0InKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHlwZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbcCArIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsZW4gPSByZWFkSW50KGJhLCBwICsgNCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR5cGUgPT0gJ2knIHx8IGF0eXBlID09ICdJJyB8fCBhdHlwZSA9PSAnZicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW4gPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0eXBlID09ICdmJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkRmxvYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZEludDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHlwZSA9PSAncycgfHwgYXR5cGUgPT0gJ1MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVuID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRTaG9ydDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHlwZSA9PSAnYycgfHwgYXR5cGUgPT0gJ0MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVuID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRCeXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1Vua25vd24gYXJyYXkgdHlwZSAnICsgYXR5cGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwICs9IDg7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKHJlYWRlcihiYSwgcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcCArPSBlbGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1Vua25vd24gdHlwZSAnKyB0eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWNvcmRbdGFnXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtaW4gfHwgcmVjb3JkLnBvcyA8PSBtYXggJiYgcmVjb3JkLnBvcyArIGxzZXEgPj0gbWluKSB7XG4gICAgICAgICAgICBpZiAoY2hySWQgPT09IHVuZGVmaW5lZCB8fCByZWZJRCA9PSBjaHJJZCkge1xuICAgICAgICAgICAgICAgIHNpbmsucHVzaChyZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9mZnNldCA9IGJsb2NrRW5kO1xuICAgIH1cblxuICAgIC8vIEV4aXRzIHZpYSB0b3Agb2YgbG9vcC5cbn07XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZUJhbTogbWFrZUJhbSxcbiAgICAgICAgQkFNX01BR0lDOiBCQU1fTUFHSUMsXG4gICAgICAgIEJBSV9NQUdJQzogQkFJX01BR0lDLFxuICAgICAgICBCYW1GbGFnczogQmFtRmxhZ3NcbiAgICB9O1xufSIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTRcbi8vXG4vLyBiZWR3aWcuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBzYSA9IHJlcXVpcmUoJy4vc291cmNlYWRhcHRlcnMnKTtcbiAgICB2YXIgZGFsbGlhbmNlX3JlZ2lzdGVyUGFyc2VyRmFjdG9yeSA9IHNhLnJlZ2lzdGVyUGFyc2VyRmFjdG9yeTtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTdHlsZXNoZWV0ID0gZGFzLkRBU1N0eWxlc2hlZXQ7XG4gICAgdmFyIERBU1N0eWxlID0gZGFzLkRBU1N0eWxlO1xuICAgIHZhciBEQVNGZWF0dXJlID0gZGFzLkRBU0ZlYXR1cmU7XG4gICAgdmFyIERBU0dyb3VwID0gZGFzLkRBU0dyb3VwO1xufVxuXG5cbmZ1bmN0aW9uIEJlZFdpZ1BhcnNlcih0eXBlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbn1cblxuQmVkV2lnUGFyc2VyLnByb3RvdHlwZS5jcmVhdGVTZXNzaW9uID0gZnVuY3Rpb24oc2luaykge1xuICAgIGlmICh0aGlzLnR5cGUgPT0gJ3dpZycpXG4gICAgICAgIHJldHVybiBuZXcgV2lnUGFyc2VTZXNzaW9uKHRoaXMsIHNpbmspO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIG5ldyBCZWRQYXJzZVNlc3Npb24odGhpcywgc2luayk7XG59XG5cbnZhciBfX0tWX1JFR0VYUD0vKFtePV0rKT0oLispLztcbnZhciBfX1NQQUNFX1JFR0VYUD0vXFxzLztcblxuXG5mdW5jdGlvbiBCZWRQYXJzZVNlc3Npb24ocGFyc2VyLCBzaW5rKSB7XG4gICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgdGhpcy5zaW5rID0gc2luaztcbn1cblxuQmVkUGFyc2VTZXNzaW9uLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB2YXIgdG9rcyA9IGxpbmUuc3BsaXQoX19TUEFDRV9SRUdFWFApO1xuICAgIGlmICh0b2tzLmxlbmd0aCA8IDMpXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBzdGFydCA9IHBhcnNlSW50KHRva3NbMV0pICsgMTtcbiAgICB2YXIgZW5kID0gcGFyc2VJbnQodG9rc1syXSk7XG5cbiAgICB2YXIgZiA9IHtzZWdtZW50OiB0b2tzWzBdLCBcbiAgICAgICAgICAgICBtaW46IHN0YXJ0LFxuICAgICAgICAgICAgIG1heDogZW5kfTtcblxuICAgIGlmICh0b2tzLmxlbmd0aCA+IDMgJiYgdG9rc1szXSAhPT0gJy4nKSB7XG4gICAgICAgIGYubGFiZWwgPSB0b2tzWzNdO1xuICAgIH1cblxuICAgIGlmICh0b2tzLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgZi5zY29yZSA9IHBhcnNlRmxvYXQodG9rc1s0XSlcbiAgICB9XG5cbiAgICBpZiAodG9rcy5sZW5ndGggPiA1KSB7XG4gICAgICAgIGYub3JpZW50YXRpb24gPSB0b2tzWzVdO1xuICAgIH1cblxuICAgIGlmICh0b2tzLmxlbmd0aCA+IDgpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gdG9rc1s4XTtcbiAgICAgICAgaWYgKEJFRF9DT0xPUl9SRUdFWFAudGVzdChjb2xvcikpIHtcbiAgICAgICAgICAgIGYuaXRlbVJnYiA9ICdyZ2IoJyArIGNvbG9yICsgJyknO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRva3MubGVuZ3RoID49IDEyKSB7XG4gICAgICAgIHZhciB0aGlja1N0YXJ0ID0gcGFyc2VJbnQodG9rc1s2XSk7XG4gICAgICAgIHZhciB0aGlja0VuZCAgID0gcGFyc2VJbnQodG9rc1s3XSk7XG4gICAgICAgIHZhciBibG9ja0NvdW50ID0gcGFyc2VJbnQodG9rc1s5XSk7XG4gICAgICAgIHZhciBibG9ja1NpemVzID0gdG9rc1sxMF0uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24oeCkge3JldHVybiBwYXJzZUludCh4KX0pO1xuICAgICAgICB2YXIgYmxvY2tTdGFydHMgPSB0b2tzWzExXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbih4KSB7cmV0dXJuIHBhcnNlSW50KHgpfSk7XG5cbiAgICAgICAgZi50eXBlID0gJ3RyYW5zY3JpcHQnXG4gICAgICAgIHZhciBncnAgPSBuZXcgREFTR3JvdXAoKTtcbiAgICAgICAgZ3JwLmlkID0gdG9rc1szXTtcbiAgICAgICAgZ3JwLnR5cGUgPSAndHJhbnNjcmlwdCdcbiAgICAgICAgZ3JwLm5vdGVzID0gW107XG4gICAgICAgIGYuZ3JvdXBzID0gW2dycF07XG5cbiAgICAgICAgaWYgKHRva3MubGVuZ3RoID4gMTIpIHtcbiAgICAgICAgICAgIHZhciBnZW5lSWQgPSB0b2tzWzEyXTtcbiAgICAgICAgICAgIHZhciBnZW5lTmFtZSA9IGdlbmVJZDtcbiAgICAgICAgICAgIGlmICh0b2tzLmxlbmd0aCA+IDEzKSB7XG4gICAgICAgICAgICAgICAgZ2VuZU5hbWUgPSB0b2tzWzEzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBnZyA9IG5ldyBEQVNHcm91cCgpO1xuICAgICAgICAgICAgZ2cuaWQgPSBnZW5lSWQ7XG4gICAgICAgICAgICBnZy5sYWJlbCA9IGdlbmVOYW1lO1xuICAgICAgICAgICAgZ2cudHlwZSA9ICdnZW5lJztcbiAgICAgICAgICAgIGYuZ3JvdXBzLnB1c2goZ2cpO1xuICAgICAgICB9ICBcblxuICAgICAgICB2YXIgc3BhbnMgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IGJsb2NrQ291bnQ7ICsrYikge1xuICAgICAgICAgICAgdmFyIGJtaW4gPSBibG9ja1N0YXJ0c1tiXSArIHN0YXJ0O1xuICAgICAgICAgICAgdmFyIGJtYXggPSBibWluICsgYmxvY2tTaXplc1tiXTtcbiAgICAgICAgICAgIHZhciBzcGFuID0gbmV3IFJhbmdlKGJtaW4sIGJtYXgpO1xuICAgICAgICAgICAgaWYgKHNwYW5zKSB7XG4gICAgICAgICAgICAgICAgc3BhbnMgPSB1bmlvbihzcGFucywgc3Bhbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwYW5zID0gc3BhbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgdmFyIHRzTGlzdCA9IHNwYW5zLnJhbmdlcygpO1xuICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHRzTGlzdC5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgdmFyIHRzID0gdHNMaXN0W3NdO1xuICAgICAgICAgICAgdmFyIGJmID0gc2hhbGxvd0NvcHkoZik7XG4gICAgICAgICAgICBiZi5taW4gPSB0cy5taW4oKTtcbiAgICAgICAgICAgIGJmLm1heCA9IHRzLm1heCgpO1xuICAgICAgICAgICAgdGhpcy5zaW5rKGJmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlja0VuZCA+IHRoaWNrU3RhcnQpIHtcbiAgICAgICAgICAgIHZhciB0bCA9IGludGVyc2VjdGlvbihzcGFucywgbmV3IFJhbmdlKHRoaWNrU3RhcnQsIHRoaWNrRW5kKSk7XG4gICAgICAgICAgICBpZiAodGwpIHtcbiAgICAgICAgICAgICAgICBmLnR5cGUgPSAndHJhbnNsYXRpb24nO1xuICAgICAgICAgICAgICAgIHZhciB0bExpc3QgPSB0bC5yYW5nZXMoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHRsTGlzdC5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSB0bExpc3Rbc107XG4gICAgICAgICAgICAgICAgICAgIHZhciBiZiA9IHNoYWxsb3dDb3B5KGYpO1xuICAgICAgICAgICAgICAgICAgICBiZi5taW4gPSB0cy5taW4oKTtcbiAgICAgICAgICAgICAgICAgICAgYmYubWF4ID0gdHMubWF4KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2luayhiZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaW5rKGYpO1xuICAgIH1cbn1cblxuQmVkUGFyc2VTZXNzaW9uLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKCkge307XG5cbmZ1bmN0aW9uIFdpZ1BhcnNlU2Vzc2lvbihwYXJzZXIsIHNpbmspIHtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB0aGlzLnNpbmsgPSBzaW5rO1xuICAgIHRoaXMud2lnU3RhdGUgPSBudWxsO1xufVxuXG5XaWdQYXJzZVNlc3Npb24ucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24obGluZSkge1xuICAgIHZhciB0b2tzID0gbGluZS5zcGxpdChfX1NQQUNFX1JFR0VYUCk7XG5cbiAgICBpZiAodG9rc1swXSA9PSAnZml4ZWRTdGVwJykge1xuICAgICAgICB0aGlzLndpZ1N0YXRlID0gJ2ZpeGVkU3RlcCc7XG4gICAgICAgIHRoaXMuY2hyID0gdGhpcy5wb3MgPSB0aGlzLnN0ZXAgPSBudWxsO1xuICAgICAgICB0aGlzLnNwYW4gPSAxO1xuXG4gICAgICAgIGZvciAodmFyIHRpID0gMTsgdGkgPCB0b2tzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgdmFyIG0gPSBfX0tWX1JFR0VYUC5leGVjKHRva3NbdGldKTtcbiAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1bMV0gPT0gJ2Nocm9tJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNociA9IG1bMl07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtWzFdID09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3MgPSBwYXJzZUludChtWzJdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1bMV0gPT0gJ3N0ZXAnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlcCA9IHBhcnNlSW50KG1bMl0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobVsxXSA9PSAnc3BhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGFuID0gcGFyc2VJbnQobVsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0b2tzWzBdID09ICd2YXJpYWJsZVN0ZXAnKSB7XG4gICAgICAgIHRoaXMud2lnU3RhdGUgPSAndmFyaWFibGVTdGVwJztcbiAgICAgICAgdGhpcy5jaHIgPSBudWxsO1xuICAgICAgICB0aGlzLnNwYW4gPSAxO1xuXG4gICAgICAgIGZvciAodmFyIHRpID0gMTsgdGkgPCB0b2tzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgdmFyIG0gPSBfX0tWX1JFR0VYUC5leGVjKHRva3NbdGldKTtcbiAgICAgICAgICAgIGlmIChtWzFdID09ICdjaHJvbScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNociA9IG1bMl07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1bMV0gPT0gJ3NwYW4nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGFuID0gcGFyc2VJbnQobVsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMud2lnU3RhdGUpIHtcbiAgICAgICAgICAgIGlmICh0b2tzLmxlbmd0aCA8IDQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgZiA9IHtzZWdtZW50OiB0b2tzWzBdLCBcbiAgICAgICAgICAgICAgICAgICAgIG1pbjogcGFyc2VJbnQodG9rc1sxXSkgKyAxLCBcbiAgICAgICAgICAgICAgICAgICAgIG1heDogcGFyc2VJbnQodG9rc1syXSksXG4gICAgICAgICAgICAgICAgICAgICBzY29yZTogcGFyc2VGbG9hdCh0b2tzWzNdKX07XG5cbiAgICAgICAgICAgIHRoaXMuc2luayhmKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLndpZ1N0YXRlID09ICdmaXhlZFN0ZXAnKSB7XG4gICAgICAgICAgICBpZiAodG9rcy5sZW5ndGggIT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgc2NvcmUgPSBwYXJzZUZsb2F0KHRva3NbMF0pO1xuICAgICAgICAgICAgdmFyIGYgPSB7c2VnbWVudDogdGhpcy5jaHIsIG1pbjogdGhpcy5wb3MsIG1heDogdGhpcy5wb3MgKyB0aGlzLnNwYW4gLSAxLCBzY29yZTogc2NvcmV9O1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGhpcy5zdGVwO1xuICAgICAgICAgICAgdGhpcy5zaW5rKGYpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2lnU3RhdGUgPT0gJ3ZhcmlhYmxlU3RlcCcpIHtcbiAgICAgICAgICAgIGlmICh0b2tzLmxlbmd0aCAhPSAyKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBwb3MgPSBwYXJzZUludCh0b2tzWzBdKTtcbiAgICAgICAgICAgIHZhciBzY29yZSA9IHBhcnNlRmxvYXQodG9rc1sxXSk7XG4gICAgICAgICAgICB2YXIgZiA9IHtzZWdtZW50OiB0aGlzLmNociwgbWluOiBwb3MsIG1heDogcG9zICsgdGhpcy5zcGFuIC0gMSwgc2NvcmU6IHNjb3JlfTtcbiAgICAgICAgICAgIHRoaXMuc2luayhmKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuV2lnUGFyc2VTZXNzaW9uLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKCkge307XG5cbkJlZFdpZ1BhcnNlci5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgc3R5bGVzaGVldCA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG5cbiAgICBpZiAodGhpcy50eXBlID09ICd3aWcnKSB7XG4gICAgICAgIHZhciB3aWdTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdISVNUT0dSQU0nO1xuICAgICAgICB3aWdTdHlsZS5CR0NPTE9SID0gJ2JsdWUnO1xuICAgICAgICB3aWdTdHlsZS5IRUlHSFQ9MzA7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVmYXVsdCd9LCBudWxsLCB3aWdTdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHdpZ1N0eWxlLmdseXBoID0gJ0JPWCc7XG4gICAgICAgIHdpZ1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICB3aWdTdHlsZS5CR0NPTE9SID0gJ2JsdWUnXG4gICAgICAgIHdpZ1N0eWxlLkhFSUdIVCA9IDg7XG4gICAgICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgICAgICB3aWdTdHlsZS5MQUJFTCA9IHRydWU7XG4gICAgICAgIHdpZ1N0eWxlLlpJTkRFWCA9IDIwO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgd2lnU3R5bGUpO1xuXG4gICAgICAgIHZhciB3aWdTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgICAgICB3aWdTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICAgICAgd2lnU3R5bGUuQkdDT0xPUiA9ICdyZWQnXG4gICAgICAgIHdpZ1N0eWxlLkhFSUdIVCA9IDEwO1xuICAgICAgICB3aWdTdHlsZS5CVU1QID0gdHJ1ZTtcbiAgICAgICAgd2lnU3R5bGUuWklOREVYID0gMjA7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndHJhbnNsYXRpb24nfSwgbnVsbCwgd2lnU3R5bGUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgdHNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB0c1N0eWxlLmdseXBoID0gJ0JPWCc7XG4gICAgICAgIHRzU3R5bGUuRkdDT0xPUiA9ICdibGFjayc7XG4gICAgICAgIHRzU3R5bGUuQkdDT0xPUiA9ICd3aGl0ZSc7XG4gICAgICAgIHRzU3R5bGUuSEVJR0hUID0gMTA7XG4gICAgICAgIHRzU3R5bGUuWklOREVYID0gMTA7XG4gICAgICAgIHRzU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgICAgIHRzU3R5bGUuTEFCRUwgPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ3RyYW5zY3JpcHQnfSwgbnVsbCwgdHNTdHlsZSk7XG5cbiAgICAgICAgdmFyIGRlbnNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICBkZW5zU3R5bGUuZ2x5cGggPSAnSElTVE9HUkFNJztcbiAgICAgICAgZGVuc1N0eWxlLkNPTE9SMSA9ICd3aGl0ZSc7XG4gICAgICAgIGRlbnNTdHlsZS5DT0xPUjIgPSAnYmxhY2snO1xuICAgICAgICBkZW5zU3R5bGUuSEVJR0hUPTMwO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlbnNpdHknfSwgbnVsbCwgZGVuc1N0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2soc3R5bGVzaGVldCk7XG59XG5cbmRhbGxpYW5jZV9yZWdpc3RlclBhcnNlckZhY3RvcnkoJ2JlZCcsIGZ1bmN0aW9uKHQpIHtyZXR1cm4gbmV3IEJlZFdpZ1BhcnNlcih0KX0pO1xuZGFsbGlhbmNlX3JlZ2lzdGVyUGFyc2VyRmFjdG9yeSgnd2lnJywgZnVuY3Rpb24odCkge3JldHVybiBuZXcgQmVkV2lnUGFyc2VyKHQpfSk7IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIGJpZ3dpZy5qczogaW5kZXhlZCBiaW5hcnkgV0lHIChhbmQgQkVEKSBmaWxlc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc3BhbnMgPSByZXF1aXJlKCcuL3NwYW5zJyk7XG4gICAgdmFyIFJhbmdlID0gc3BhbnMuUmFuZ2U7XG4gICAgdmFyIHVuaW9uID0gc3BhbnMudW5pb247XG4gICAgdmFyIGludGVyc2VjdGlvbiA9IHNwYW5zLmludGVyc2VjdGlvbjtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNGZWF0dXJlID0gZGFzLkRBU0ZlYXR1cmU7XG4gICAgdmFyIERBU0dyb3VwID0gZGFzLkRBU0dyb3VwO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBzaGFsbG93Q29weSA9IHV0aWxzLnNoYWxsb3dDb3B5O1xuXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIHJlYWRJbnQgPSBiaW4ucmVhZEludDtcblxuICAgIHZhciBqc3psaWIgPSByZXF1aXJlKCdqc3psaWInKTtcbiAgICB2YXIganN6bGliX2luZmxhdGVfYnVmZmVyID0ganN6bGliLmluZmxhdGVCdWZmZXI7XG4gICAgdmFyIGFycmF5Q29weSA9IGpzemxpYi5hcnJheUNvcHk7XG59XG5cbnZhciBCSUdfV0lHX01BR0lDID0gMHg4ODhGRkMyNjtcbnZhciBCSUdfV0lHX01BR0lDX0JFID0gMHgyNkZDOEY4ODtcbnZhciBCSUdfQkVEX01BR0lDID0gMHg4Nzg5RjJFQjtcbnZhciBCSUdfQkVEX01BR0lDX0JFID0gMHhFQkYyODk4NztcblxuXG52YXIgQklHX1dJR19UWVBFX0dSQVBIID0gMTtcbnZhciBCSUdfV0lHX1RZUEVfVlNURVAgPSAyO1xudmFyIEJJR19XSUdfVFlQRV9GU1RFUCA9IDM7XG4gIFxudmFyIE0xID0gMjU2O1xudmFyIE0yID0gMjU2KjI1NjtcbnZhciBNMyA9IDI1NioyNTYqMjU2O1xudmFyIE00ID0gMjU2KjI1NioyNTYqMjU2O1xuXG52YXIgQkVEX0NPTE9SX1JFR0VYUCA9IG5ldyBSZWdFeHAoXCJeWzAtOV0rLFswLTldKyxbMC05XStcIik7XG5cbmZ1bmN0aW9uIGJ3Z19yZWFkT2Zmc2V0KGJhLCBvKSB7XG4gICAgdmFyIG9mZnNldCA9IGJhW29dICsgYmFbbysxXSpNMSArIGJhW28rMl0qTTIgKyBiYVtvKzNdKk0zICsgYmFbbys0XSpNNDtcbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBCaWdXaWcoKSB7XG59XG5cbkJpZ1dpZy5wcm90b3R5cGUucmVhZENocm9tVHJlZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmNocm9tc1RvSURzID0ge307XG4gICAgdGhpcy5pZHNUb0Nocm9tcyA9IHt9O1xuICAgIHRoaXMubWF4SUQgPSAwO1xuXG4gICAgdmFyIHVkbyA9IHRoaXMudW56b29tZWREYXRhT2Zmc2V0O1xuICAgIHZhciBlYiA9ICh1ZG8gLSB0aGlzLmNocm9tVHJlZU9mZnNldCkgJiAzO1xuICAgIHVkbyA9IHVkbyArIDQgLSBlYjtcblxuICAgIHRoaXMuZGF0YS5zbGljZSh0aGlzLmNocm9tVHJlZU9mZnNldCwgdWRvIC0gdGhpcy5jaHJvbVRyZWVPZmZzZXQpLmZldGNoKGZ1bmN0aW9uKGJwdCkge1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShicHQpO1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShicHQpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShicHQpO1xuICAgICAgICB2YXIgYnB0TWFnaWMgPSBsYVswXTtcbiAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGxhWzFdO1xuICAgICAgICB2YXIga2V5U2l6ZSA9IGxhWzJdO1xuICAgICAgICB2YXIgdmFsU2l6ZSA9IGxhWzNdO1xuICAgICAgICB2YXIgaXRlbUNvdW50ID0gYndnX3JlYWRPZmZzZXQoYmEsIDE2KTtcbiAgICAgICAgdmFyIHJvb3ROb2RlT2Zmc2V0ID0gMzI7XG5cbiAgICAgICAgdmFyIGJwdFJlYWROb2RlID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgbm9kZVR5cGUgPSBiYVtvZmZzZXRdO1xuICAgICAgICAgICAgdmFyIGNudCA9IHNhWyhvZmZzZXQvMikgKyAxXTtcbiAgICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBjbnQ7ICsrbikge1xuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBrZXlTaXplO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkT2Zmc2V0IC09IHRoaXNCLmNocm9tVHJlZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgYnB0UmVhZE5vZGUoY2hpbGRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2kgPSAwOyBraSA8IGtleVNpemU7ICsra2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IGJhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHJvbUlkID0gKGJhW29mZnNldCszXTw8MjQpIHwgKGJhW29mZnNldCsyXTw8MTYpIHwgKGJhW29mZnNldCsxXTw8OCkgfCAoYmFbb2Zmc2V0KzBdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNocm9tU2l6ZSA9IChiYVtvZmZzZXQgKyA3XTw8MjQpIHwgKGJhW29mZnNldCs2XTw8MTYpIHwgKGJhW29mZnNldCs1XTw8OCkgfCAoYmFbb2Zmc2V0KzRdKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc0IuY2hyb21zVG9JRHNba2V5XSA9IGNocm9tSWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignY2hyJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuY2hyb21zVG9JRHNba2V5LnN1YnN0cigzKV0gPSBjaHJvbUlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmlkc1RvQ2hyb21zW2Nocm9tSWRdID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5tYXhJRCA9IE1hdGgubWF4KHRoaXNCLm1heElELCBjaHJvbUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGJwdFJlYWROb2RlKHJvb3ROb2RlT2Zmc2V0KTtcblxuICAgICAgICBjYWxsYmFjayh0aGlzQik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIEJpZ1dpZ1ZpZXcoYndnLCBjaXJUcmVlT2Zmc2V0LCBjaXJUcmVlTGVuZ3RoLCBpc1N1bW1hcnkpIHtcbiAgICB0aGlzLmJ3ZyA9IGJ3ZztcbiAgICB0aGlzLmNpclRyZWVPZmZzZXQgPSBjaXJUcmVlT2Zmc2V0O1xuICAgIHRoaXMuY2lyVHJlZUxlbmd0aCA9IGNpclRyZWVMZW5ndGg7XG4gICAgdGhpcy5pc1N1bW1hcnkgPSBpc1N1bW1hcnk7XG59XG5cblxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5yZWFkV2lnRGF0YSA9IGZ1bmN0aW9uKGNock5hbWUsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHZhciBjaHIgPSB0aGlzLmJ3Zy5jaHJvbXNUb0lEc1tjaHJOYW1lXTtcbiAgICBpZiAoY2hyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTm90IGFuIGVycm9yIGJlY2F1c2Ugc29tZSAuYndncyB3b24ndCBoYXZlIGRhdGEgZm9yIGFsbCBjaHJvbW9zb21lcy5cblxuICAgICAgICAvLyBkbG9nKFwiQ291bGRuJ3QgZmluZCBjaHIgXCIgKyBjaHJOYW1lKTtcbiAgICAgICAgLy8gZGxvZygnQ2hyb21zPScgKyBtaW5pSlNPTmlmeSh0aGlzLmJ3Zy5jaHJvbXNUb0lEcykpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVhZFdpZ0RhdGFCeUlkKGNociwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbkJpZ1dpZ1ZpZXcucHJvdG90eXBlLnJlYWRXaWdEYXRhQnlJZCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAoIXRoaXMuY2lySGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYndnLmRhdGEuc2xpY2UodGhpcy5jaXJUcmVlT2Zmc2V0LCA0OCkuZmV0Y2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzQi5jaXJIZWFkZXIgPSByZXN1bHQ7XG4gICAgICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheSh0aGlzQi5jaXJIZWFkZXIpO1xuICAgICAgICAgICAgdGhpc0IuY2lyQmxvY2tTaXplID0gbGFbMV07XG4gICAgICAgICAgICB0aGlzQi5yZWFkV2lnRGF0YUJ5SWQoY2hyLCBtaW4sIG1heCwgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBibG9ja3NUb0ZldGNoID0gW107XG4gICAgdmFyIG91dHN0YW5kaW5nID0gMDtcblxuICAgIHZhciBiZWZvcmVCV0cgPSBEYXRlLm5vdygpO1xuXG4gICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uKGNocm9tSWQsIGZtaW4sIGZtYXgsIHRva3MpIHtcbiAgICAgICAgcmV0dXJuICgoY2hyIDwgMCB8fCBjaHJvbUlkID09IGNocikgJiYgZm1pbiA8PSBtYXggJiYgZm1heCA+PSBtaW4pO1xuICAgIH1cblxuICAgIHZhciBjaXJGb2JSZWN1ciA9IGZ1bmN0aW9uKG9mZnNldCwgbGV2ZWwpIHtcbiAgICAgICAgaWYgKHRoaXNCLmJ3Zy5pbnN0cnVtZW50KVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2xldmVsPScgKyBsZXZlbCArICc7IG9mZnNldD0nICsgb2Zmc2V0ICsgJzsgdGltZT0nICsgKERhdGUubm93KCl8MCkpO1xuXG4gICAgICAgIG91dHN0YW5kaW5nICs9IG9mZnNldC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG9mZnNldC5sZW5ndGggPT0gMSAmJiBvZmZzZXRbMF0gLSB0aGlzQi5jaXJUcmVlT2Zmc2V0ID09IDQ4ICYmIHRoaXNCLmNhY2hlZENpclJvb3QpIHtcbiAgICAgICAgICAgIGNpckZvYlJlY3VyMih0aGlzQi5jYWNoZWRDaXJSb290LCAwLCBsZXZlbCk7XG4gICAgICAgICAgICAtLW91dHN0YW5kaW5nO1xuICAgICAgICAgICAgaWYgKG91dHN0YW5kaW5nID09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzQi5mZXRjaEZlYXR1cmVzKGZpbHRlciwgYmxvY2tzVG9GZXRjaCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1heENpckJsb2NrU3BhbiA9IDQgKyAgKHRoaXNCLmNpckJsb2NrU2l6ZSAqIDMyKTsgICAvLyBVcHBlciBib3VuZCBvbiBzaXplLCBiYXNlZCBvbiBhIGNvbXBsZXRlbHkgZnVsbCBsZWFmIG5vZGUuXG4gICAgICAgIHZhciBzcGFucztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBibG9ja1NwYW4gPSBuZXcgUmFuZ2Uob2Zmc2V0W2ldLCBvZmZzZXRbaV0gKyBtYXhDaXJCbG9ja1NwYW4pO1xuICAgICAgICAgICAgc3BhbnMgPSBzcGFucyA/IHVuaW9uKHNwYW5zLCBibG9ja1NwYW4pIDogYmxvY2tTcGFuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZmV0Y2hSYW5nZXMgPSBzcGFucy5yYW5nZXMoKTtcbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBmZXRjaFJhbmdlcy5sZW5ndGg7ICsrcikge1xuICAgICAgICAgICAgdmFyIGZyID0gZmV0Y2hSYW5nZXNbcl07XG4gICAgICAgICAgICBjaXJGb2JTdGFydEZldGNoKG9mZnNldCwgZnIsIGxldmVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaXJGb2JTdGFydEZldGNoID0gZnVuY3Rpb24ob2Zmc2V0LCBmciwgbGV2ZWwsIGF0dGVtcHRzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmci5tYXgoKSAtIGZyLm1pbigpO1xuICAgICAgICB0aGlzQi5id2cuZGF0YS5zbGljZShmci5taW4oKSwgZnIubWF4KCkgLSBmci5taW4oKSkuZmV0Y2goZnVuY3Rpb24ocmVzdWx0QnVmZmVyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZnNldC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChmci5jb250YWlucyhvZmZzZXRbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNpckZvYlJlY3VyMihyZXN1bHRCdWZmZXIsIG9mZnNldFtpXSAtIGZyLm1pbigpLCBsZXZlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldFtpXSAtIHRoaXNCLmNpclRyZWVPZmZzZXQgPT0gNDggJiYgb2Zmc2V0W2ldIC0gZnIubWluKCkgPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmNhY2hlZENpclJvb3QgPSByZXN1bHRCdWZmZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgLS1vdXRzdGFuZGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHN0YW5kaW5nID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmZldGNoRmVhdHVyZXMoZmlsdGVyLCBibG9ja3NUb0ZldGNoLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBjaXJGb2JSZWN1cjIgPSBmdW5jdGlvbihjaXJCbG9ja0RhdGEsIG9mZnNldCwgbGV2ZWwpIHtcbiAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoY2lyQmxvY2tEYXRhKTtcbiAgICAgICAgdmFyIHNhID0gbmV3IEludDE2QXJyYXkoY2lyQmxvY2tEYXRhKTtcbiAgICAgICAgdmFyIGxhID0gbmV3IEludDMyQXJyYXkoY2lyQmxvY2tEYXRhKTtcblxuICAgICAgICB2YXIgaXNMZWFmID0gYmFbb2Zmc2V0XTtcbiAgICAgICAgdmFyIGNudCA9IHNhW29mZnNldC8yICsgMV07XG4gICAgICAgIG9mZnNldCArPSA0O1xuXG4gICAgICAgIGlmIChpc0xlYWYgIT0gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBsbyA9IG9mZnNldC80O1xuICAgICAgICAgICAgICAgIHZhciBzdGFydENocm9tID0gbGFbbG9dO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEJhc2UgPSBsYVtsbyArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDaHJvbSA9IGxhW2xvICsgMl07XG4gICAgICAgICAgICAgICAgdmFyIGVuZEJhc2UgPSBsYVtsbyArIDNdO1xuICAgICAgICAgICAgICAgIHZhciBibG9ja09mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCBvZmZzZXQrMTYpO1xuICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KzI0KTtcbiAgICAgICAgICAgICAgICBpZiAoKChjaHIgPCAwIHx8IHN0YXJ0Q2hyb20gPCBjaHIpIHx8IChzdGFydENocm9tID09IGNociAmJiBzdGFydEJhc2UgPD0gbWF4KSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKChjaHIgPCAwIHx8IGVuZENocm9tICAgPiBjaHIpIHx8IChlbmRDaHJvbSA9PSBjaHIgJiYgZW5kQmFzZSA+PSBtaW4pKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1RvRmV0Y2gucHVzaCh7b2Zmc2V0OiBibG9ja09mZnNldCwgc2l6ZTogYmxvY2tTaXplfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZWN1ck9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG8gPSBvZmZzZXQvNDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDaHJvbSA9IGxhW2xvXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRCYXNlID0gbGFbbG8gKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ2hyb20gPSBsYVtsbyArIDJdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRCYXNlID0gbGFbbG8gKyAzXTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KzE2KTtcbiAgICAgICAgICAgICAgICBpZiAoKGNociA8IDAgfHwgc3RhcnRDaHJvbSA8IGNociB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IG1heCkpICYmXG4gICAgICAgICAgICAgICAgICAgIChjaHIgPCAwIHx8IGVuZENocm9tICAgPiBjaHIgfHwgKGVuZENocm9tID09IGNociAmJiBlbmRCYXNlID49IG1pbikpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJPZmZzZXRzLnB1c2goYmxvY2tPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVjdXJPZmZzZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjaXJGb2JSZWN1cihyZWN1ck9mZnNldHMsIGxldmVsICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY2lyRm9iUmVjdXIoW3RoaXNCLmNpclRyZWVPZmZzZXQgKyA0OF0sIDEpO1xufVxuXG5cbkJpZ1dpZ1ZpZXcucHJvdG90eXBlLmZldGNoRmVhdHVyZXMgPSBmdW5jdGlvbihmaWx0ZXIsIGJsb2Nrc1RvRmV0Y2gsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuICAgIGJsb2Nrc1RvRmV0Y2guc29ydChmdW5jdGlvbihiMCwgYjEpIHtcbiAgICAgICAgcmV0dXJuIChiMC5vZmZzZXR8MCkgLSAoYjEub2Zmc2V0fDApO1xuICAgIH0pO1xuXG4gICAgaWYgKGJsb2Nrc1RvRmV0Y2gubGVuZ3RoID09IDApIHtcbiAgICAgICAgY2FsbGJhY2soW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgICAgICB2YXIgY3JlYXRlRmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgZm1pbiwgZm1heCwgb3B0cykge1xuICAgICAgICAgICAgaWYgKCFvcHRzKSB7XG4gICAgICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHZhciBmID0gbmV3IERBU0ZlYXR1cmUoKTtcbiAgICAgICAgICAgIGYuX2Nocm9tSWQgPSBjaHI7XG4gICAgICAgICAgICBmLnNlZ21lbnQgPSB0aGlzQi5id2cuaWRzVG9DaHJvbXNbY2hyXTtcbiAgICAgICAgICAgIGYubWluID0gZm1pbjtcbiAgICAgICAgICAgIGYubWF4ID0gZm1heDtcbiAgICAgICAgICAgIGYudHlwZSA9ICdiaWd3aWcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmW2tdID0gb3B0c1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdHJhbXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChibG9ja3NUb0ZldGNoLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFmdGVyQldHID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAvLyBkbG9nKCdCV0cgZmV0Y2ggdG9vayAnICsgKGFmdGVyQldHIC0gYmVmb3JlQldHKSArICdtcycpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47ICAvLyBqdXN0IGluIGNhc2UuLi5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gYmxvY2tzVG9GZXRjaFswXTtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5wYXJzZUZlYXR1cmVzKGJsb2NrLmRhdGEsIGNyZWF0ZUZlYXR1cmUsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1RvRmV0Y2guc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0cmFtcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmZXRjaFN0YXJ0ID0gYmxvY2sub2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmV0Y2hTaXplID0gYmxvY2suc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpID0gMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJpIDwgYmxvY2tzVG9GZXRjaC5sZW5ndGggJiYgYmxvY2tzVG9GZXRjaFtiaV0ub2Zmc2V0ID09IChmZXRjaFN0YXJ0ICsgZmV0Y2hTaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hTaXplICs9IGJsb2Nrc1RvRmV0Y2hbYmldLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2JpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc0IuYndnLmRhdGEuc2xpY2UoZmV0Y2hTdGFydCwgZmV0Y2hTaXplKS5mZXRjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBmZXRjaFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmIgPSBibG9ja3NUb0ZldGNoW2JpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzQi5id2cudW5jb21wcmVzc0J1ZlNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBqc3psaWJfaW5mbGF0ZV9idWZmZXIocmVzdWx0LCBvZmZzZXQgKyAyLCBmYi5zaXplIC0gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBVaW50OEFycmF5KGZiLnNpemUpOyAgICAvLyBGSVhNRSBpcyB0aGlzIHJlYWxseSB0aGUgYmVzdCB3ZSBjYW4gZG8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5Q29weShuZXcgVWludDhBcnJheShyZXN1bHQsIG9mZnNldCwgZmIuc2l6ZSksIDAsIHRtcCwgMCwgZmIuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0bXAuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYi5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZmIuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2JpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyYW1wKCk7XG4gICAgfVxufVxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5wYXJzZUZlYXR1cmVzID0gZnVuY3Rpb24oZGF0YSwgY3JlYXRlRmVhdHVyZSwgZmlsdGVyKSB7XG4gICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG5cbiAgICBpZiAodGhpcy5pc1N1bW1hcnkpIHtcbiAgICAgICAgdmFyIHNhID0gbmV3IEludDE2QXJyYXkoZGF0YSk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGRhdGEpO1xuICAgICAgICB2YXIgZmEgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEpO1xuXG4gICAgICAgIHZhciBpdGVtQ291bnQgPSBkYXRhLmJ5dGVMZW5ndGgvMzI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaHJvbUlkID0gICBsYVsoaSo4KV07XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSAgICAgbGFbKGkqOCkrMV07XG4gICAgICAgICAgICB2YXIgZW5kID0gICAgICAgbGFbKGkqOCkrMl07XG4gICAgICAgICAgICB2YXIgdmFsaWRDbnQgPSAgbGFbKGkqOCkrM107XG4gICAgICAgICAgICB2YXIgbWluVmFsICAgID0gZmFbKGkqOCkrNF07XG4gICAgICAgICAgICB2YXIgbWF4VmFsICAgID0gZmFbKGkqOCkrNV07XG4gICAgICAgICAgICB2YXIgc3VtRGF0YSAgID0gZmFbKGkqOCkrNl07XG4gICAgICAgICAgICB2YXIgc3VtU3FEYXRhID0gZmFbKGkqOCkrN107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmaWx0ZXIoY2hyb21JZCwgc3RhcnQgKyAxLCBlbmQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1bW1hcnlPcHRzID0ge3R5cGU6ICdiaWd3aWcnLCBzY29yZTogc3VtRGF0YS92YWxpZENudCwgbWF4U2NvcmU6IG1heFZhbH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYndnLnR5cGUgPT0gJ2JpZ2JlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeU9wdHMudHlwZSA9ICdkZW5zaXR5JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZShjaHJvbUlkLCBzdGFydCArIDEsIGVuZCwgc3VtbWFyeU9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmJ3Zy50eXBlID09ICdiaWd3aWcnKSB7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGRhdGEpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShkYXRhKTtcbiAgICAgICAgdmFyIGZhID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcblxuICAgICAgICB2YXIgY2hyb21JZCA9IGxhWzBdO1xuICAgICAgICB2YXIgYmxvY2tTdGFydCA9IGxhWzFdO1xuICAgICAgICB2YXIgYmxvY2tFbmQgPSBsYVsyXTtcbiAgICAgICAgdmFyIGl0ZW1TdGVwID0gbGFbM107XG4gICAgICAgIHZhciBpdGVtU3BhbiA9IGxhWzRdO1xuICAgICAgICB2YXIgYmxvY2tUeXBlID0gYmFbMjBdO1xuICAgICAgICB2YXIgaXRlbUNvdW50ID0gc2FbMTFdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGJsb2NrVHlwZSA9PSBCSUdfV0lHX1RZUEVfRlNURVApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSBmYVtpICsgNl07XG4gICAgICAgICAgICAgICAgdmFyIGZtaW4gPSBibG9ja1N0YXJ0ICsgKGkqaXRlbVN0ZXApICsgMSwgZm1heCA9IGJsb2NrU3RhcnQgKyAoaSppdGVtU3RlcCkgKyBpdGVtU3BhbjtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKGNocm9tSWQsIGZtaW4sIGZtYXgpKVxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVGZWF0dXJlKGNocm9tSWQsIGZtaW4sIGZtYXgsIHtzY29yZTogc2NvcmV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChibG9ja1R5cGUgPT0gQklHX1dJR19UWVBFX1ZTVEVQKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1Db3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbGFbKGkqMikgKyA2XSArIDE7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgaXRlbVNwYW4gLSAxO1xuICAgICAgICAgICAgICAgIHZhciBzY29yZSA9IGZhWyhpKjIpICsgN107XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcihjaHJvbUlkLCBzdGFydCwgZW5kKSlcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZShjaHJvbUlkLCBzdGFydCwgZW5kLCB7c2NvcmU6IHNjb3JlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYmxvY2tUeXBlID09IEJJR19XSUdfVFlQRV9HUkFQSCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGxhWyhpKjMpICsgNl0gKyAxO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgICA9IGxhWyhpKjMpICsgN107XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gZmFbKGkqMykgKyA4XTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIoY2hyb21JZCwgc3RhcnQsIGVuZCkpXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZlYXR1cmUoY2hyb21JZCwgc3RhcnQsIGVuZCwge3Njb3JlOiBzY29yZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0N1cnJlbnRseSBub3QgaGFuZGxpbmcgYndnVHlwZT0nICsgYmxvY2tUeXBlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5id2cudHlwZSA9PSAnYmlnYmVkJykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGRmYyA9IHRoaXMuYndnLmRlZmluZWRGaWVsZENvdW50O1xuICAgICAgICB2YXIgc2NoZW1hID0gdGhpcy5id2cuc2NoZW1hO1xuXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBiYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaHJvbUlkID0gKGJhW29mZnNldCszXTw8MjQpIHwgKGJhW29mZnNldCsyXTw8MTYpIHwgKGJhW29mZnNldCsxXTw8OCkgfCAoYmFbb2Zmc2V0KzBdKTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IChiYVtvZmZzZXQrN108PDI0KSB8IChiYVtvZmZzZXQrNl08PDE2KSB8IChiYVtvZmZzZXQrNV08PDgpIHwgKGJhW29mZnNldCs0XSk7XG4gICAgICAgICAgICB2YXIgZW5kID0gKGJhW29mZnNldCsxMV08PDI0KSB8IChiYVtvZmZzZXQrMTBdPDwxNikgfCAoYmFbb2Zmc2V0KzldPDw4KSB8IChiYVtvZmZzZXQrOF0pO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDEyO1xuICAgICAgICAgICAgdmFyIHJlc3QgPSAnJztcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoID0gYmFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgICAgIGlmIChjaCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3QgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZmVhdHVyZU9wdHMgPSB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGJlZENvbHVtbnM7XG4gICAgICAgICAgICBpZiAocmVzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYmVkQ29sdW1ucyA9IHJlc3Quc3BsaXQoJ1xcdCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiZWRDb2x1bW5zID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVkQ29sdW1ucy5sZW5ndGggPiAwICYmIGRmYyA+IDMpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy5sYWJlbCA9IGJlZENvbHVtbnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVkQ29sdW1ucy5sZW5ndGggPiAxICYmIGRmYyA+IDQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSBwYXJzZUludChiZWRDb2x1bW5zWzFdKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHNjb3JlKSlcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMuc2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiZWRDb2x1bW5zLmxlbmd0aCA+IDIgJiYgZGZjID4gNSkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLm9yaWVudGF0aW9uID0gYmVkQ29sdW1uc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiZWRDb2x1bW5zLmxlbmd0aCA+IDUgJiYgZGZjID4gOCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IGJlZENvbHVtbnNbNV07XG4gICAgICAgICAgICAgICAgaWYgKEJFRF9DT0xPUl9SRUdFWFAudGVzdChjb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMuaXRlbVJnYiA9ICdyZ2IoJyArIGNvbG9yICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJlZENvbHVtbnMubGVuZ3RoID4gZGZjLTMgJiYgc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gZGZjIC0gMzsgY29sIDwgYmVkQ29sdW1ucy5sZW5ndGg7ICsrY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzW3NjaGVtYS5maWVsZHNbY29sKzNdLm5hbWVdID0gYmVkQ29sdW1uc1tjb2xdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZpbHRlcihjaHJvbUlkLCBzdGFydCArIDEsIGVuZCwgYmVkQ29sdW1ucykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGZjIDwgMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZShjaHJvbUlkLCBzdGFydCArIDEsIGVuZCwgZmVhdHVyZU9wdHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlja1N0YXJ0ID0gYmVkQ29sdW1uc1szXXwwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpY2tFbmQgICA9IGJlZENvbHVtbnNbNF18MDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrQ291bnQgPSBiZWRDb2x1bW5zWzZdfDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemVzID0gYmVkQ29sdW1uc1s3XS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tTdGFydHMgPSBiZWRDb2x1bW5zWzhdLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy50eXBlID0gJ3RyYW5zY3JpcHQnXG4gICAgICAgICAgICAgICAgICAgIHZhciBncnAgPSBuZXcgREFTR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBmZWF0dXJlT3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JwW2tdID0gZmVhdHVyZU9wdHNba107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ3JwLmlkID0gYmVkQ29sdW1uc1swXTtcbiAgICAgICAgICAgICAgICAgICAgZ3JwLnNlZ21lbnQgPSB0aGlzLmJ3Zy5pZHNUb0Nocm9tc1tjaHJvbUlkXTtcbiAgICAgICAgICAgICAgICAgICAgZ3JwLm1pbiA9IHN0YXJ0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgZ3JwLm1heCA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgZ3JwLm5vdGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLmdyb3VwcyA9IFtncnBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWRDb2x1bW5zLmxlbmd0aCA+IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW5lSWQgPSBiZWRDb2x1bW5zWzldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlbmVOYW1lID0gZ2VuZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZENvbHVtbnMubGVuZ3RoID4gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lTmFtZSA9IGJlZENvbHVtbnNbMTBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdnID0gc2hhbGxvd0NvcHkoZ3JwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdnLmlkID0gZ2VuZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2cubGFiZWwgPSBnZW5lTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdnLnR5cGUgPSAnZ2VuZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy5ncm91cHMucHVzaChnZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3Bhbkxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCBibG9ja0NvdW50OyArK2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibWluID0gKGJsb2NrU3RhcnRzW2JdfDApICsgc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm1heCA9IGJtaW4gKyAoYmxvY2tTaXplc1tiXXwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFuID0gbmV3IFJhbmdlKGJtaW4sIGJtYXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbkxpc3QucHVzaChzcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbnMgPSB1bmlvbihzcGFuTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdHNMaXN0ID0gc3BhbnMucmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgdHNMaXN0Lmxlbmd0aDsgKytzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSB0c0xpc3Rbc107XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGZWF0dXJlKGNocm9tSWQsIHRzLm1pbigpICsgMSwgdHMubWF4KCksIGZlYXR1cmVPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlja0VuZCA+IHRoaWNrU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bCA9IGludGVyc2VjdGlvbihzcGFucywgbmV3IFJhbmdlKHRoaWNrU3RhcnQsIHRoaWNrRW5kKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy50eXBlID0gJ3RyYW5zbGF0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGxMaXN0ID0gdGwucmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCB0bExpc3QubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRzID0gdGxMaXN0W3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGZWF0dXJlKGNocm9tSWQsIHRzLm1pbigpICsgMSwgdHMubWF4KCksIGZlYXR1cmVPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkbG9nKFwiRG9uJ3Qga25vdyB3aGF0IHRvIGRvIHdpdGggXCIgKyB0aGlzLmJ3Zy50eXBlKTtcbiAgICB9XG59XG5cbi8vXG4vLyBuYXN0eSBjdXQvcGFzdGUsIHNob3VsZCByb2xsIGJhY2sgaW4hXG4vL1xuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5nZXRGaXJzdEFkamFjZW50ID0gZnVuY3Rpb24oY2hyTmFtZSwgcG9zLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNociA9IHRoaXMuYndnLmNocm9tc1RvSURzW2Nock5hbWVdO1xuICAgIGlmIChjaHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBOb3QgYW4gZXJyb3IgYmVjYXVzZSBzb21lIC5id2dzIHdvbid0IGhhdmUgZGF0YSBmb3IgYWxsIGNocm9tb3NvbWVzLlxuXG4gICAgICAgIC8vIGRsb2coXCJDb3VsZG4ndCBmaW5kIGNociBcIiArIGNock5hbWUpO1xuICAgICAgICAvLyBkbG9nKCdDaHJvbXM9JyArIG1pbmlKU09OaWZ5KHRoaXMuYndnLmNocm9tc1RvSURzKSk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhbXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXRGaXJzdEFkamFjZW50QnlJZChjaHIsIHBvcywgZGlyLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5nZXRGaXJzdEFkamFjZW50QnlJZCA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAoIXRoaXMuY2lySGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYndnLmRhdGEuc2xpY2UodGhpcy5jaXJUcmVlT2Zmc2V0LCA0OCkuZmV0Y2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzQi5jaXJIZWFkZXIgPSByZXN1bHQ7XG4gICAgICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheSh0aGlzQi5jaXJIZWFkZXIpO1xuICAgICAgICAgICAgdGhpc0IuY2lyQmxvY2tTaXplID0gbGFbMV07XG4gICAgICAgICAgICB0aGlzQi5nZXRGaXJzdEFkamFjZW50QnlJZChjaHIsIHBvcywgZGlyLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJsb2NrVG9GZXRjaCA9IG51bGw7XG4gICAgdmFyIGJlc3RCbG9ja0NociA9IC0xO1xuICAgIHZhciBiZXN0QmxvY2tPZmZzZXQgPSAtMTtcblxuICAgIHZhciBvdXRzdGFuZGluZyA9IDA7XG5cbiAgICB2YXIgYmVmb3JlQldHID0gRGF0ZS5ub3coKTtcblxuICAgIHZhciBjaXJGb2JSZWN1ciA9IGZ1bmN0aW9uKG9mZnNldCwgbGV2ZWwpIHtcbiAgICAgICAgb3V0c3RhbmRpbmcgKz0gb2Zmc2V0Lmxlbmd0aDtcblxuICAgICAgICB2YXIgbWF4Q2lyQmxvY2tTcGFuID0gNCArICAodGhpc0IuY2lyQmxvY2tTaXplICogMzIpOyAgIC8vIFVwcGVyIGJvdW5kIG9uIHNpemUsIGJhc2VkIG9uIGEgY29tcGxldGVseSBmdWxsIGxlYWYgbm9kZS5cbiAgICAgICAgdmFyIHNwYW5zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZnNldC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGJsb2NrU3BhbiA9IG5ldyBSYW5nZShvZmZzZXRbaV0sIG9mZnNldFtpXSArIG1heENpckJsb2NrU3Bhbik7XG4gICAgICAgICAgICBzcGFucyA9IHNwYW5zID8gdW5pb24oc3BhbnMsIGJsb2NrU3BhbikgOiBibG9ja1NwYW47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBmZXRjaFJhbmdlcyA9IHNwYW5zLnJhbmdlcygpO1xuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGZldGNoUmFuZ2VzLmxlbmd0aDsgKytyKSB7XG4gICAgICAgICAgICB2YXIgZnIgPSBmZXRjaFJhbmdlc1tyXTtcbiAgICAgICAgICAgIGNpckZvYlN0YXJ0RmV0Y2gob2Zmc2V0LCBmciwgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNpckZvYlN0YXJ0RmV0Y2ggPSBmdW5jdGlvbihvZmZzZXQsIGZyLCBsZXZlbCwgYXR0ZW1wdHMpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZyLm1heCgpIC0gZnIubWluKCk7XG4gICAgICAgIHRoaXNCLmJ3Zy5kYXRhLnNsaWNlKGZyLm1pbigpLCBmci5tYXgoKSAtIGZyLm1pbigpKS5mZXRjaChmdW5jdGlvbihyZXN1bHRCdWZmZXIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyLmNvbnRhaW5zKG9mZnNldFtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2lyRm9iUmVjdXIyKHJlc3VsdEJ1ZmZlciwgb2Zmc2V0W2ldIC0gZnIubWluKCksIGxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgLS1vdXRzdGFuZGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHN0YW5kaW5nID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYmxvY2tUb0ZldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA+IDAgJiYgKGNociAhPSAwIHx8IHBvcyA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5nZXRGaXJzdEFkamFjZW50QnlJZCgwLCAwLCBkaXIsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpciA8IDAgJiYgKGNociAhPSB0aGlzQi5id2cubWF4SUQgfHwgcG9zIDwgMTAwMDAwMDAwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNCLmdldEZpcnN0QWRqYWNlbnRCeUlkKHRoaXNCLmJ3Zy5tYXhJRCwgMTAwMDAwMDAwMCwgZGlyLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmZldGNoRmVhdHVyZXMoZnVuY3Rpb24oY2hyeCwgZm1pbiwgZm1heCwgdG9rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGlyIDwgMCAmJiAoY2hyeCA8IGNociB8fCBmbWF4IDwgcG9zKSkgfHwgKGRpciA+IDAgJiYgKGNocnggPiBjaHIgfHwgZm1pbiA+IHBvcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgW2Jsb2NrVG9GZXRjaF0sIGZ1bmN0aW9uKGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdENociA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0UG9zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGZlYXR1cmVzW2ZpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNocnggPSBmLl9jaHJvbUlkLCBmbWluID0gZi5taW4sIGZtYXggPSBmLm1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlc3RGZWF0dXJlID09IG51bGwgfHwgKChkaXIgPCAwKSAmJiAoY2hyeCA+IGJlc3RDaHIgfHwgZm1heCA+IGJlc3RQb3MpKSB8fCAoKGRpciA+IDApICYmIChjaHJ4IDwgYmVzdENociB8fCBmbWluIDwgYmVzdFBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0RmVhdHVyZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0UG9zID0gKGRpciA8IDApID8gZm1heCA6IGZtaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0Q2hyID0gY2hyeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZXN0RmVhdHVyZSAhPSBudWxsKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtiZXN0RmVhdHVyZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgY2lyRm9iUmVjdXIyID0gZnVuY3Rpb24oY2lyQmxvY2tEYXRhLCBvZmZzZXQsIGxldmVsKSB7XG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGNpckJsb2NrRGF0YSk7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGNpckJsb2NrRGF0YSk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGNpckJsb2NrRGF0YSk7XG5cbiAgICAgICAgdmFyIGlzTGVhZiA9IGJhW29mZnNldF07XG4gICAgICAgIHZhciBjbnQgPSBzYVtvZmZzZXQvMiArIDFdO1xuICAgICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgICBpZiAoaXNMZWFmICE9IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG8gPSBvZmZzZXQvNDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDaHJvbSA9IGxhW2xvXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRCYXNlID0gbGFbbG8gKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ2hyb20gPSBsYVtsbyArIDJdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRCYXNlID0gbGFbbG8gKyAzXTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KzE2KTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gYndnX3JlYWRPZmZzZXQoYmEsIG9mZnNldCsyNCk7XG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPCAwICYmICgoc3RhcnRDaHJvbSA8IGNociB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IHBvcykpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGRpciA+IDAgJiYgKChlbmRDaHJvbSA+IGNociB8fCAoZW5kQ2hyb20gPT0gY2hyICYmIGVuZEJhc2UgPj0gcG9zKSkpKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdHb3QgYW4gaW50ZXJlc3RpbmcgYmxvY2s6IHN0YXJ0QmFzZT0nICsgc3RhcnRDaHJvbSArICc6JyArIHN0YXJ0QmFzZSArICc7IGVuZEJhc2U9JyArIGVuZENocm9tICsgJzonICsgZW5kQmFzZSArICc7IG9mZnNldD0nICsgYmxvY2tPZmZzZXQgKyAnOyBzaXplPScgKyBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoL19yYW5kb20vLmV4ZWModGhpc0IuYndnLmlkc1RvQ2hyb21zW3N0YXJ0Q2hyb21dKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGxvZygnc2tpcHBpbmcgcmFuZG9tOiAnICsgdGhpc0IuYndnLmlkc1RvQ2hyb21zW3N0YXJ0Q2hyb21dKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9ja1RvRmV0Y2ggPT0gbnVsbCB8fCAoKGRpciA8IDApICYmIChlbmRDaHJvbSA+IGJlc3RCbG9ja0NociB8fCAoZW5kQ2hyb20gPT0gYmVzdEJsb2NrQ2hyICYmIGVuZEJhc2UgPiBiZXN0QmxvY2tPZmZzZXQpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkaXIgPiAwKSAmJiAoc3RhcnRDaHJvbSA8IGJlc3RCbG9ja0NociB8fCAoc3RhcnRDaHJvbSA9PSBiZXN0QmxvY2tDaHIgJiYgc3RhcnRCYXNlIDwgYmVzdEJsb2NrT2Zmc2V0KSkpKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIGRsb2coJ2Jlc3QgaXM6IHN0YXJ0QmFzZT0nICsgc3RhcnRDaHJvbSArICc6JyArIHN0YXJ0QmFzZSArICc7IGVuZEJhc2U9JyArIGVuZENocm9tICsgJzonICsgZW5kQmFzZSArICc7IG9mZnNldD0nICsgYmxvY2tPZmZzZXQgKyAnOyBzaXplPScgKyBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tUb0ZldGNoID0ge29mZnNldDogYmxvY2tPZmZzZXQsIHNpemU6IGJsb2NrU2l6ZX07XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0QmxvY2tPZmZzZXQgPSAoZGlyIDwgMCkgPyBlbmRCYXNlIDogc3RhcnRCYXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEJsb2NrQ2hyID0gKGRpciA8IDApID8gZW5kQ2hyb20gOiBzdGFydENocm9tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiZXN0UmVjdXIgPSAtMTtcbiAgICAgICAgICAgIHZhciBiZXN0UG9zID0gLTE7XG4gICAgICAgICAgICB2YXIgYmVzdENociA9IC0xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBsbyA9IG9mZnNldC80O1xuICAgICAgICAgICAgICAgIHZhciBzdGFydENocm9tID0gbGFbbG9dO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEJhc2UgPSBsYVtsbyArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDaHJvbSA9IGxhW2xvICsgMl07XG4gICAgICAgICAgICAgICAgdmFyIGVuZEJhc2UgPSBsYVtsbyArIDNdO1xuICAgICAgICAgICAgICAgIHZhciBibG9ja09mZnNldCA9IChsYVtsbyArIDRdPDwzMikgfCAobGFbbG8gKyA1XSk7XG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPCAwICYmICgoc3RhcnRDaHJvbSA8IGNociB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IHBvcykpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kQ2hyb20gICA+PSBjaHIpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgIChkaXIgPiAwICYmICgoZW5kQ2hyb20gPiBjaHIgfHwgKGVuZENocm9tID09IGNociAmJiBlbmRCYXNlID49IHBvcykpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXJ0Q2hyb20gPD0gY2hyKSkpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlc3RSZWN1ciA8IDAgfHwgZW5kQmFzZSA+IGJlc3RQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RSZWN1ciA9IGJsb2NrT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFBvcyA9IChkaXIgPCAwKSA/IGVuZEJhc2UgOiBzdGFydEJhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Q2hyID0gKGRpciA8IDApID8gZW5kQ2hyb20gOiBzdGFydENocm9tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAyNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiZXN0UmVjdXIgPj0gMCkge1xuICAgICAgICAgICAgICAgIGNpckZvYlJlY3VyKFtiZXN0UmVjdXJdLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBcblxuICAgIGNpckZvYlJlY3VyKFt0aGlzQi5jaXJUcmVlT2Zmc2V0ICsgNDhdLCAxKTtcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5yZWFkV2lnRGF0YSA9IGZ1bmN0aW9uKGNock5hbWUsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0VW56b29tZWRWaWV3KCkucmVhZFdpZ0RhdGEoY2hyTmFtZSwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5nZXRVbnpvb21lZFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMudW56b29tZWRWaWV3KSB7XG4gICAgICAgIHZhciBjaXJMZW4gPSA0MDAwO1xuICAgICAgICB2YXIgbnpsID0gdGhpcy56b29tTGV2ZWxzWzBdO1xuICAgICAgICBpZiAobnpsKSB7XG4gICAgICAgICAgICBjaXJMZW4gPSB0aGlzLnpvb21MZXZlbHNbMF0uZGF0YU9mZnNldCAtIHRoaXMudW56b29tZWRJbmRleE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuem9vbWVkVmlldyA9IG5ldyBCaWdXaWdWaWV3KHRoaXMsIHRoaXMudW56b29tZWRJbmRleE9mZnNldCwgY2lyTGVuLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVuem9vbWVkVmlldztcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5nZXRab29tZWRWaWV3ID0gZnVuY3Rpb24oeikge1xuICAgIHZhciB6aCA9IHRoaXMuem9vbUxldmVsc1t6XTtcbiAgICBpZiAoIXpoLnZpZXcpIHtcbiAgICAgICAgemgudmlldyA9IG5ldyBCaWdXaWdWaWV3KHRoaXMsIHpoLmluZGV4T2Zmc2V0LCAvKiB0aGlzLnpvb21MZXZlbHNbeiArIDFdLmRhdGFPZmZzZXQgLSB6aC5pbmRleE9mZnNldCAqLyA0MDAwLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHpoLnZpZXc7XG59XG5cbmZ1bmN0aW9uIG1ha2VCd2coZGF0YSwgY2FsbGJhY2ssIG5hbWUpIHtcbiAgICB2YXIgYndnID0gbmV3IEJpZ1dpZygpO1xuICAgIGJ3Zy5kYXRhID0gZGF0YTtcbiAgICBid2cubmFtZSA9IG5hbWU7XG4gICAgYndnLmRhdGEuc2xpY2UoMCwgNTEyKS5zYWx0ZWQoKS5mZXRjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkNvdWxkbid0IGZldGNoIGZpbGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVhZGVyID0gcmVzdWx0O1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgbWFnaWMgPSBiYVswXSArIChNMSAqIGJhWzFdKSArIChNMiAqIGJhWzJdKSArIChNMyAqIGJhWzNdKTtcbiAgICAgICAgaWYgKG1hZ2ljID09IEJJR19XSUdfTUFHSUMpIHtcbiAgICAgICAgICAgIGJ3Zy50eXBlID0gJ2JpZ3dpZyc7XG4gICAgICAgIH0gZWxzZSBpZiAobWFnaWMgPT0gQklHX0JFRF9NQUdJQykge1xuICAgICAgICAgICAgYndnLnR5cGUgPSAnYmlnYmVkJztcbiAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSBCSUdfV0lHX01BR0lDX0JFIHx8IG1hZ2ljID09IEJJR19CRURfTUFHSUNfQkUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIFwiQ3VycmVudGx5IGRvbid0IHN1cHBvcnQgYmlnLWVuZGlhbiBCQkkgZmlsZXNcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBcIk5vdCBhIHN1cHBvcnRlZCBmb3JtYXQsIG1hZ2ljPTB4XCIgKyBtYWdpYy50b1N0cmluZygxNikpO1xuICAgICAgICB9XG5cbiAgICAgICAgYndnLnZlcnNpb24gPSBzYVsyXTsgICAgICAgICAgICAgLy8gNFxuICAgICAgICBid2cubnVtWm9vbUxldmVscyA9IHNhWzNdOyAgICAgICAvLyA2XG4gICAgICAgIGJ3Zy5jaHJvbVRyZWVPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgOCk7XG4gICAgICAgIGJ3Zy51bnpvb21lZERhdGFPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgMTYpO1xuICAgICAgICBid2cudW56b29tZWRJbmRleE9mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCAyNCk7XG4gICAgICAgIGJ3Zy5maWVsZENvdW50ID0gc2FbMTZdOyAgICAgICAgIC8vIDMyXG4gICAgICAgIGJ3Zy5kZWZpbmVkRmllbGRDb3VudCA9IHNhWzE3XTsgIC8vIDM0XG4gICAgICAgIGJ3Zy5hc09mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCAzNik7XG4gICAgICAgIGJ3Zy50b3RhbFN1bW1hcnlPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgNDQpO1xuICAgICAgICBid2cudW5jb21wcmVzc0J1ZlNpemUgPSBsYVsxM107ICAvLyA1MlxuICAgICAgICBid2cuZXh0SGVhZGVyT2Zmc2V0ID0gYndnX3JlYWRPZmZzZXQoYmEsIDU2KTtcblxuICAgICAgICBid2cuem9vbUxldmVscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB6bCA9IDA7IHpsIDwgYndnLm51bVpvb21MZXZlbHM7ICsremwpIHtcbiAgICAgICAgICAgIHZhciB6bFJlZHVjdGlvbiA9IGxhW3psKjYgKyAxNl1cbiAgICAgICAgICAgIHZhciB6bERhdGEgPSBid2dfcmVhZE9mZnNldChiYSwgemwqMjQgKyA3Mik7XG4gICAgICAgICAgICB2YXIgemxJbmRleCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCB6bCoyNCArIDgwKTtcbiAgICAgICAgICAgIGJ3Zy56b29tTGV2ZWxzLnB1c2goe3JlZHVjdGlvbjogemxSZWR1Y3Rpb24sIGRhdGFPZmZzZXQ6IHpsRGF0YSwgaW5kZXhPZmZzZXQ6IHpsSW5kZXh9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ3Zy5yZWFkQ2hyb21UcmVlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYndnLmdldEF1dG9TUUwoZnVuY3Rpb24oYXMpIHtcbiAgICAgICAgICAgICAgICBid2cuc2NoZW1hID0gYXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGJ3Zyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cblxuQmlnV2lnLnByb3RvdHlwZS5fdHNGZXRjaCA9IGZ1bmN0aW9uKHpvb20sIGNociwgbWluLCBtYXgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGJ3ZyA9IHRoaXM7XG4gICAgaWYgKHpvb20gPj0gdGhpcy56b29tTGV2ZWxzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRvcExldmVsUmVkdWN0aW9uQ2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Wm9vbWVkVmlldyh0aGlzLnpvb21MZXZlbHMubGVuZ3RoIC0gMSkucmVhZFdpZ0RhdGFCeUlkKC0xLCAwLCAzMDAwMDAwMDAsIGZ1bmN0aW9uKGZlYXRzKSB7XG4gICAgICAgICAgICAgICAgYndnLnRvcExldmVsUmVkdWN0aW9uQ2FjaGUgPSBmZWF0cztcbiAgICAgICAgICAgICAgICByZXR1cm4gYndnLl90c0ZldGNoKHpvb20sIGNociwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGYgPSBbXTtcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy50b3BMZXZlbFJlZHVjdGlvbkNhY2hlO1xuICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNbZmldLl9jaHJvbUlkID09IGNocikge1xuICAgICAgICAgICAgICAgICAgICBmLnB1c2goY1tmaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2aWV3O1xuICAgICAgICBpZiAoem9vbSA8IDApIHtcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLmdldFVuem9vbWVkVmlldygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuZ2V0Wm9vbWVkVmlldyh6b29tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlldy5yZWFkV2lnRGF0YUJ5SWQoY2hyLCBtaW4sIG1heCwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuQmlnV2lnLnByb3RvdHlwZS50aHJlc2hvbGRTZWFyY2ggPSBmdW5jdGlvbihjaHJOYW1lLCByZWZlcmVuY2VQb2ludCwgZGlyLCB0aHJlc2hvbGQsIGNhbGxiYWNrKSB7XG4gICAgZGlyID0gKGRpcjwwKSA/IC0xIDogMTtcbiAgICB2YXIgYndnID0gdGhpcztcbiAgICB2YXIgaW5pdGlhbENociA9IHRoaXMuY2hyb21zVG9JRHNbY2hyTmFtZV07XG4gICAgdmFyIGNhbmRpZGF0ZXMgPSBbe2Nock9yZDogMCwgY2hyOiBpbml0aWFsQ2hyLCB6b29tOiBid2cuem9vbUxldmVscy5sZW5ndGggLSA0LCBtaW46IDAsIG1heDogMzAwMDAwMDAwLCBmcm9tUmVmOiB0cnVlfV1cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB0aGlzLm1heElEICsgMTsgKytpKSB7XG4gICAgICAgIHZhciBjaHJJZCA9IChpbml0aWFsQ2hyICsgKGRpcippKSkgJSAodGhpcy5tYXhJRCArIDEpO1xuICAgICAgICBpZiAoY2hySWQgPCAwKSBcbiAgICAgICAgICAgIGNocklkICs9ICh0aGlzLm1heElEICsgMSk7XG4gICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7Y2hyT3JkOiBpLCBjaHI6IGNocklkLCB6b29tOiBid2cuem9vbUxldmVscy5sZW5ndGggLSAxLCBtaW46IDAsIG1heDogMzAwMDAwMDAwfSlcbiAgICB9XG4gICAgICAgXG4gICAgZnVuY3Rpb24gZmJUaHJlc2hvbGRTZWFyY2hSZWN1cigpIHtcbiAgICBcdGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgXHQgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgIFx0fVxuICAgIFx0Y2FuZGlkYXRlcy5zb3J0KGZ1bmN0aW9uKGMxLCBjMikge1xuICAgIFx0ICAgIHZhciBkID0gYzEuem9vbSAtIGMyLnpvb207XG4gICAgXHQgICAgaWYgKGQgIT0gMClcbiAgICBcdFx0ICAgIHJldHVybiBkO1xuXG4gICAgICAgICAgICBkID0gYzEuY2hyT3JkIC0gYzIuY2hyT3JkO1xuICAgICAgICAgICAgaWYgKGQgIT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICBcdCAgICBlbHNlXG4gICAgXHRcdCAgICByZXR1cm4gYzEubWluIC0gYzIubWluICogZGlyO1xuICAgIFx0fSk7XG5cblx0ICAgIHZhciBjYW5kaWRhdGUgPSBjYW5kaWRhdGVzLnNwbGljZSgwLCAxKVswXTtcbiAgICAgICAgYndnLl90c0ZldGNoKGNhbmRpZGF0ZS56b29tLCBjYW5kaWRhdGUuY2hyLCBjYW5kaWRhdGUubWluLCBjYW5kaWRhdGUubWF4LCBmdW5jdGlvbihmZWF0cykge1xuICAgICAgICAgICAgdmFyIHJwID0gZGlyID4gMCA/IDAgOiAzMDAwMDAwMDA7XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlLmZyb21SZWYpXG4gICAgICAgICAgICAgICAgcnAgPSByZWZlcmVuY2VQb2ludDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXRzLmxlbmd0aDsgKytmaSkge1xuICAgIFx0ICAgICAgICB2YXIgZiA9IGZlYXRzW2ZpXTtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcmU7XG4gICAgICAgICAgICAgICAgaWYgKGYubWF4U2NvcmUgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBzY29yZSA9IGYubWF4U2NvcmU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzY29yZSA9IGYuc2NvcmU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgIFx0ICAgICAgICAgICAgaWYgKHNjb3JlID4gdGhyZXNob2xkKSB7XG4gICAgICAgIFx0XHQgICAgICAgIGlmIChjYW5kaWRhdGUuem9vbSA8IDApIHtcbiAgICAgICAgXHRcdCAgICAgICAgICAgIGlmIChmLm1pbiA+IHJwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZik7XG4gICAgICAgIFx0XHQgICAgICAgIH0gZWxzZSBpZiAoZi5tYXggPiBycCkge1xuICAgICAgICBcdFx0ICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHtjaHI6IGNhbmRpZGF0ZS5jaHIsIGNock9yZDogY2FuZGlkYXRlLmNock9yZCwgem9vbTogY2FuZGlkYXRlLnpvb20gLSAyLCBtaW46IGYubWluLCBtYXg6IGYubWF4LCBmcm9tUmVmOiBjYW5kaWRhdGUuZnJvbVJlZn0pO1xuICAgICAgICBcdFx0ICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIFx0XHQgICAgaWYgKGNhbmRpZGF0ZS56b29tIDwgMCkge1xuICAgICAgICAgICAgICAgIFx0ICAgICAgICBpZiAoZi5tYXggPCBycClcbiAgICAgICAgICAgICAgICBcdFx0XHQgICAgcmV0dXJuIGNhbGxiYWNrKGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmLm1pbiA8IHJwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHtjaHI6IGNhbmRpZGF0ZS5jaHIsIGNock9yZDogY2FuZGlkYXRlLmNock9yZCwgem9vbTogY2FuZGlkYXRlLnpvb20gLSAyLCBtaW46IGYubWluLCBtYXg6IGYubWF4LCBmcm9tUmVmOiBjYW5kaWRhdGUuZnJvbVJlZn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFx0ICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICBcdCAgICB9XG4gICAgICAgICAgICBmYlRocmVzaG9sZFNlYXJjaFJlY3VyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBmYlRocmVzaG9sZFNlYXJjaFJlY3VyKCk7XG59XG5cbkJpZ1dpZy5wcm90b3R5cGUuZ2V0QXV0b1NRTCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAoIXRoaXMuYXNPZmZzZXQpXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcblxuXG4gICAgdGhpcy5kYXRhLnNsaWNlKHRoaXMuYXNPZmZzZXQsIDIwNDgpLmZldGNoKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShyZXN1bHQpO1xuICAgICAgICB2YXIgcyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoYmFbaV0gPT0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShiYVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qIFxuICAgICAgICAgKiBRdWljayduJ2RpcnR5IGF0dGVtcHQgdG8gcGFyc2UgYXV0b1NxbCBmb3JtYXQuXG4gICAgICAgICAqIFNlZTogaHR0cDovL3d3dy5saW51eGpvdXJuYWwuY29tL2ZpbGVzL2xpbnV4am91cm5hbC5jb20vbGludXhqb3VybmFsL2FydGljbGVzLzA1OS81OTQ5LzU5NDlsMi5odG1sXG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBoZWFkZXJfcmUgPSAvKFxcdyspXFxzKyhcXHcrKVxccysoXCIoW15cIl0rKVwiKT9cXHMrXFwoXFxzKi87XG4gICAgICAgIHZhciBmaWVsZF9yZSA9IC8oW1xcd1xcW1xcXV0rKVxccysoXFx3KylcXHMqO1xccyooXCIoW15cIl0rKVwiKT9cXHMqL2c7XG5cbiAgICAgICAgdmFyIGhlYWRlck1hdGNoID0gaGVhZGVyX3JlLmV4ZWMocyk7XG4gICAgICAgIGlmIChoZWFkZXJNYXRjaCkge1xuICAgICAgICAgICAgdmFyIGFzID0ge1xuICAgICAgICAgICAgICAgIGRlY2xUeXBlOiBoZWFkZXJNYXRjaFsxXSxcbiAgICAgICAgICAgICAgICBuYW1lOiBoZWFkZXJNYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBjb21tZW50OiBoZWFkZXJNYXRjaFs0XSxcblxuICAgICAgICAgICAgICAgIGZpZWxkczogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHMgPSBzLnN1YnN0cmluZyhoZWFkZXJNYXRjaFswXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBtID0gZmllbGRfcmUuZXhlYyhzKTsgbSAhPSBudWxsOyBtID0gZmllbGRfcmUuZXhlYyhzKSkge1xuICAgICAgICAgICAgICAgIGFzLmZpZWxkcy5wdXNoKHt0eXBlOiBtWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBtWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBtWzRdfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhhcyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5nZXRFeHRyYUluZGljZXMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgaWYgKHRoaXMudmVyc2lvbiA8IDQgfHwgdGhpcy5leHRIZWFkZXJPZmZzZXQgPT0gMCB8fCB0aGlzLnR5cGUgIT0gJ2JpZ2JlZCcpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0YS5zbGljZSh0aGlzLmV4dEhlYWRlck9mZnNldCwgNjQpLmZldGNoKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJDb3VsZG4ndCBmZXRjaCBleHRlbnNpb24gaGVhZGVyXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShyZXN1bHQpO1xuICAgICAgICAgICAgdmFyIHNhID0gbmV3IEludDE2QXJyYXkocmVzdWx0KTtcbiAgICAgICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KHJlc3VsdCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBleHRIZWFkZXJTaXplID0gc2FbMF07XG4gICAgICAgICAgICB2YXIgZXh0cmFJbmRleENvdW50ID0gc2FbMV07XG4gICAgICAgICAgICB2YXIgZXh0cmFJbmRleExpc3RPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgNCk7XG5cbiAgICAgICAgICAgIGlmIChleHRyYUluZGV4Q291bnQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRklYTUUgMjBieXRlIHJlY29yZHMgb25seSBtYWtlIHNlbnNlIGZvciBzaW5nbGUtZmllbGQgaW5kaWNlcy5cbiAgICAgICAgICAgIC8vIFJpZ2h0IG5vdywgdGhlc2Ugc2VlbSB0byBiZSB0aGUgb25seSB0aGluZ3MgYXJvdW5kLCBidXQgdGhlIGZvcm1hdFxuICAgICAgICAgICAgLy8gaXMgYWN0dWFsbHkgbW9yZSBnZW5lcmFsLlxuICAgICAgICAgICAgdGhpc0IuZGF0YS5zbGljZShleHRyYUluZGV4TGlzdE9mZnNldCwgZXh0cmFJbmRleENvdW50ICogMjApLmZldGNoKGZ1bmN0aW9uKGVpbCkge1xuICAgICAgICAgICAgICAgIGlmICghZWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkNvdWxkbid0IGZldGNoIGluZGV4IGluZm9cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoZWlsKTtcbiAgICAgICAgICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShlaWwpO1xuICAgICAgICAgICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGVpbCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBleHRyYUluZGV4Q291bnQ7ICsraWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVpVHlwZSA9IHNhW2lpKjEwXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVpRmllbGRDb3VudCA9IHNhW2lpKjEwICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBlaU9mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCBpaSoyMCArIDQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWlGaWVsZCA9IHNhW2lpKjEwICsgOF1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbmV3IEJCSUV4dHJhSW5kZXgodGhpc0IsIGVpVHlwZSwgZWlGaWVsZENvdW50LCBlaU9mZnNldCwgZWlGaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGluZGljZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gQkJJRXh0cmFJbmRleChiYmksIHR5cGUsIGZpZWxkQ291bnQsIG9mZnNldCwgZmllbGQpIHtcbiAgICB0aGlzLmJiaSA9IGJiaTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZmllbGRDb3VudCA9IGZpZWxkQ291bnQ7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgdGhpcy5maWVsZCA9IGZpZWxkO1xufVxuXG5CQklFeHRyYUluZGV4LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICB0aGlzLmJiaS5kYXRhLnNsaWNlKHRoaXMub2Zmc2V0LCAzMikuZmV0Y2goZnVuY3Rpb24oYnB0KSB7XG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGJwdCk7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGJwdCk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGJwdCk7XG4gICAgICAgIHZhciBicHRNYWdpYyA9IGxhWzBdO1xuICAgICAgICB2YXIgYmxvY2tTaXplID0gbGFbMV07XG4gICAgICAgIHZhciBrZXlTaXplID0gbGFbMl07XG4gICAgICAgIHZhciB2YWxTaXplID0gbGFbM107XG4gICAgICAgIHZhciBpdGVtQ291bnQgPSBid2dfcmVhZE9mZnNldChiYSwgMTYpO1xuICAgICAgICB2YXIgcm9vdE5vZGVPZmZzZXQgPSAzMjtcblxuICAgICAgICBmdW5jdGlvbiBicHRSZWFkTm9kZShub2RlT2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzQi5iYmkuZGF0YS5zbGljZShub2RlT2Zmc2V0LCA0ICsgKGJsb2NrU2l6ZSAqIChrZXlTaXplICsgdmFsU2l6ZSkpKS5mZXRjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkobm9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIHNhID0gbmV3IFVpbnQxNkFycmF5KG5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciBsYSA9IG5ldyBVaW50MzJBcnJheShub2RlKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlVHlwZSA9IGJhWzBdO1xuICAgICAgICAgICAgICAgIHZhciBjbnQgPSBzYVsxXTtcblxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSA0O1xuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0Q2hpbGRPZmZzZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGNudDsgKytuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBraSA9IDA7IGtpIDwga2V5U2l6ZTsgKytraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IGJhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5sb2NhbGVDb21wYXJlKGtleSkgPCAwICYmIGxhc3RDaGlsZE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJwdFJlYWROb2RlKGxhc3RDaGlsZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENoaWxkT2Zmc2V0ID0gY2hpbGRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnB0UmVhZE5vZGUobGFzdENoaWxkT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGNudDsgKytuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBraSA9IDA7IGtpIDwga2V5U2l6ZTsgKytraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IGJhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWZpYyBmb3IgRUkgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSByZWFkSW50KGJhLCBvZmZzZXQgKyA4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5iYmkuZ2V0VW56b29tZWRWaWV3KCkuZmV0Y2hGZWF0dXJlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgdG9rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva3MgJiYgdG9rcy5sZW5ndGggPiB0aGlzQi5maWVsZCAtIDMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva3NbdGhpc0IuZmllbGQgLSAzXSA9PSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3tvZmZzZXQ6IHN0YXJ0LCBzaXplOiBsZW5ndGh9XSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB2YWxTaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBicHRSZWFkTm9kZSh0aGlzQi5vZmZzZXQgKyByb290Tm9kZU9mZnNldCk7XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZUJ3ZzogbWFrZUJ3ZyxcbiAgICAgICAgQklHX0JFRF9NQUdJQzogQklHX0JFRF9NQUdJQyxcbiAgICAgICAgQklHX1dJR19NQUdJQzogQklHX1dJR19NQUdJQ1xuICAgIH1cbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTFcbi8vXG4vLyBiaW4uanMgZ2VuZXJhbCBiaW5hcnkgZGF0YSBzdXBwb3J0XG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIHNoYWxsb3dDb3B5ID0gdXRpbHMuc2hhbGxvd0NvcHk7XG5cbiAgICB2YXIgc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpO1xuICAgIHZhciBiNjRfc2hhMSA9IHNoYTEuYjY0X3NoYTE7XG59XG5cbmZ1bmN0aW9uIEJsb2JGZXRjaGFibGUoYikge1xuICAgIHRoaXMuYmxvYiA9IGI7XG59XG5cbkJsb2JGZXRjaGFibGUucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xuICAgIHZhciBiO1xuXG4gICAgaWYgKHRoaXMuYmxvYi5zbGljZSkge1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICBiID0gdGhpcy5ibG9iLnNsaWNlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiID0gdGhpcy5ibG9iLnNsaWNlKHN0YXJ0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGIgPSB0aGlzLmJsb2Iud2Via2l0U2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGIgPSB0aGlzLmJsb2Iud2Via2l0U2xpY2Uoc3RhcnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQmxvYkZldGNoYWJsZShiKTtcbn1cblxuQmxvYkZldGNoYWJsZS5wcm90b3R5cGUuc2FsdGVkID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXM7fVxuXG5pZiAodHlwZW9mKEZpbGVSZWFkZXIpICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNvbnNvbGUubG9nKCdkZWZpbmluZyBhc3luYyBCbG9iRmV0Y2hhYmxlLmZldGNoJyk7XG5cbiAgICBCbG9iRmV0Y2hhYmxlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJzdHJpbmdUb0J1ZmZlcihyZWFkZXIucmVzdWx0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcodGhpcy5ibG9iKTtcbiAgICB9XG5cbn0gZWxzZSB7XG4gICAgLy8gaWYgKGNvbnNvbGUgJiYgY29uc29sZS5sb2cpXG4gICAgLy8gICAgY29uc29sZS5sb2coJ2RlZmluaW5nIHN5bmMgQmxvYkZldGNoYWJsZS5mZXRjaCcpO1xuXG4gICAgQmxvYkZldGNoYWJsZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXJTeW5jKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzID0gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHRoaXMuYmxvYik7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gVVJMRmV0Y2hhYmxlKHVybCwgc3RhcnQsIGVuZCwgb3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3B0cyA9IHN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICBpZiAoZW5kKSB7XG4gICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xufVxuXG5VUkxGZXRjaGFibGUucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24ocywgbCkge1xuICAgIGlmIChzIDwgMCkge1xuICAgICAgICB0aHJvdyAnQmFkIHNsaWNlICcgKyBzO1xuICAgIH1cblxuICAgIHZhciBucyA9IHRoaXMuc3RhcnQsIG5lID0gdGhpcy5lbmQ7XG4gICAgaWYgKG5zICYmIHMpIHtcbiAgICAgICAgbnMgPSBucyArIHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnMgPSBzIHx8IG5zO1xuICAgIH1cbiAgICBpZiAobCAmJiBucykge1xuICAgICAgICBuZSA9IG5zICsgbCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmUgPSBuZSB8fCBsIC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVUkxGZXRjaGFibGUodGhpcy51cmwsIG5zLCBuZSwgdGhpcy5vcHRzKTtcbn1cblxudmFyIHNlZWQ9MDtcbnZhciBpc1NhZmFyaSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgPj0gMCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpIDwgMCA7XG5cblVSTEZldGNoYWJsZS5wcm90b3R5cGUuZmV0Y2hBc1RleHQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbGVuZ3RoO1xuICAgIHZhciB1cmwgPSB0aGlzLnVybDtcbiAgICBpZiAoaXNTYWZhcmkgfHwgdGhpcy5vcHRzLnNhbHQpIHtcbiAgICAgICAgdXJsID0gc2FsdFVSTCh1cmwpO1xuICAgICAgICB1cmwgPSB1cmwgKyAnP3NhbHQ9JyArIGI2NF9zaGExKCcnICsgRGF0ZS5ub3coKSArICcsJyArICgrK3NlZWQpKTtcbiAgICB9XG4gICAgcmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG5cbiAgICBpZiAodGhpcy5lbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kIC0gdGhpcy5zdGFydCA+IDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgdGhyb3cgJ01vbnN0ZXIgZmV0Y2ghJztcbiAgICAgICAgfVxuICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignUmFuZ2UnLCAnYnl0ZXM9JyArIHRoaXMuc3RhcnQgKyAnLScgKyB0aGlzLmVuZCk7XG4gICAgICAgIGxlbmd0aCA9IHRoaXMuZW5kIC0gdGhpcy5zdGFydCArIDE7XG4gICAgfVxuXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT0gMjAwIHx8IHJlcS5zdGF0dXMgPT0gMjA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0aGlzLm9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgcmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuICAgIHJlcS5zZW5kKCcnKTtcbn1cblxuVVJMRmV0Y2hhYmxlLnByb3RvdHlwZS5zYWx0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbyA9IHNoYWxsb3dDb3B5KHRoaXMub3B0cyk7XG4gICAgby5zYWx0ID0gdHJ1ZTtcbiAgICByZXR1cm4gbmV3IFVSTEZldGNoYWJsZSh0aGlzLnVybCwgdGhpcy5zdGFydCwgdGhpcy5lbmQsIG8pO1xufVxuXG5VUkxGZXRjaGFibGUucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIGF0dGVtcHQsIHRydW5jYXRlZExlbmd0aCkge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICBhdHRlbXB0ID0gYXR0ZW1wdCB8fCAxO1xuICAgIGlmIChhdHRlbXB0ID4gMykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsZW5ndGg7XG4gICAgdmFyIHVybCA9IHRoaXMudXJsO1xuICAgIGlmIChpc1NhZmFyaSB8fCB0aGlzLm9wdHMuc2FsdCkge1xuICAgICAgICB1cmwgPSB1cmwgKyAnP3NhbHQ9JyArIGI2NF9zaGExKCcnICsgRGF0ZS5ub3coKSArICcsJyArICgrK3NlZWQpKTtcbiAgICB9XG4gICAgcmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnKTtcbiAgICBpZiAodGhpcy5lbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kIC0gdGhpcy5zdGFydCA+IDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgdGhyb3cgJ01vbnN0ZXIgZmV0Y2ghJztcbiAgICAgICAgfVxuICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignUmFuZ2UnLCAnYnl0ZXM9JyArIHRoaXMuc3RhcnQgKyAnLScgKyB0aGlzLmVuZCk7XG4gICAgICAgIGxlbmd0aCA9IHRoaXMuZW5kIC0gdGhpcy5zdGFydCArIDE7XG4gICAgfVxuICAgIHJlcS5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09IDIwMCB8fCByZXEuc3RhdHVzID09IDIwNikge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsID0gcmVxLnJlc3BvbnNlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGggJiYgbGVuZ3RoICE9IGJsICYmICghdHJ1bmNhdGVkTGVuZ3RoIHx8IGJsICE9IHRydW5jYXRlZExlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5mZXRjaChjYWxsYmFjaywgYXR0ZW1wdCArIDEsIGJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZXEucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXEubW96UmVzcG9uc2VBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2socmVxLm1velJlc3BvbnNlQXJyYXlCdWZmZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gcmVxLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCAmJiBsZW5ndGggIT0gci5sZW5ndGggJiYgKCF0cnVuY2F0ZWRMZW5ndGggfHwgci5sZW5ndGggIT0gdHJ1bmNhdGVkTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNCLmZldGNoKGNhbGxiYWNrLCBhdHRlbXB0ICsgMSwgci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGJzdHJpbmdUb0J1ZmZlcihyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5mZXRjaChjYWxsYmFjaywgYXR0ZW1wdCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cbiAgICByZXEuc2VuZCgnJyk7XG59XG5cbmZ1bmN0aW9uIGJzdHJpbmdUb0J1ZmZlcihyZXN1bHQpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShyZXN1bHQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGJhW2ldID0gcmVzdWx0LmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBiYS5idWZmZXI7XG59XG5cbi8vIFJlYWQgZnJvbSBVaW50OEFycmF5XG5cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgICB2YXIgY29udmVydEJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShjb252ZXJ0QnVmZmVyKTtcbiAgICB2YXIgZmEgPSBuZXcgRmxvYXQzMkFycmF5KGNvbnZlcnRCdWZmZXIpO1xuXG5cbiAgICBnbG9iYWwucmVhZEZsb2F0ID0gZnVuY3Rpb24oYnVmLCBvZmZzZXQpIHtcbiAgICAgICAgYmFbMF0gPSBidWZbb2Zmc2V0XTtcbiAgICAgICAgYmFbMV0gPSBidWZbb2Zmc2V0KzFdO1xuICAgICAgICBiYVsyXSA9IGJ1ZltvZmZzZXQrMl07XG4gICAgICAgIGJhWzNdID0gYnVmW29mZnNldCszXTtcbiAgICAgICAgcmV0dXJuIGZhWzBdO1xuICAgIH07XG4gfSh0aGlzKSk7XG5cbmZ1bmN0aW9uIHJlYWRJbnQ2NChiYSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIChiYVtvZmZzZXQgKyA3XSA8PCAyNCkgfCAoYmFbb2Zmc2V0ICsgNl0gPDwgMTYpIHwgKGJhW29mZnNldCArIDVdIDw8IDgpIHwgKGJhW29mZnNldCArIDRdKTtcbn1cblxuZnVuY3Rpb24gcmVhZEludChiYSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIChiYVtvZmZzZXQgKyAzXSA8PCAyNCkgfCAoYmFbb2Zmc2V0ICsgMl0gPDwgMTYpIHwgKGJhW29mZnNldCArIDFdIDw8IDgpIHwgKGJhW29mZnNldF0pO1xufVxuXG5mdW5jdGlvbiByZWFkU2hvcnQoYmEsIG9mZnNldCkge1xuICAgIHJldHVybiAoYmFbb2Zmc2V0ICsgMV0gPDwgOCkgfCAoYmFbb2Zmc2V0XSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRCeXRlKGJhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gYmFbb2Zmc2V0XTtcbn1cblxuZnVuY3Rpb24gcmVhZEludEJFKGJhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gKGJhW29mZnNldF0gPDwgMjQpIHwgKGJhW29mZnNldCArIDFdIDw8IDE2KSB8IChiYVtvZmZzZXQgKyAyXSA8PCA4KSB8IChiYVtvZmZzZXQgKyAzXSk7XG59XG5cbi8vIEV4cG9ydHMgaWYgd2UgYXJlIGJlaW5nIHVzZWQgYXMgYSBtb2R1bGVcblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBCbG9iRmV0Y2hhYmxlOiBCbG9iRmV0Y2hhYmxlLFxuICAgICAgICBVUkxGZXRjaGFibGU6IFVSTEZldGNoYWJsZSxcblxuICAgICAgICByZWFkSW50OiByZWFkSW50LFxuICAgICAgICByZWFkSW50QkU6IHJlYWRJbnRCRSxcbiAgICAgICAgcmVhZEludDY0OiByZWFkSW50NjQsXG4gICAgICAgIHJlYWRTaG9ydDogcmVhZFNob3J0LFxuICAgICAgICByZWFkQnl0ZTogcmVhZEJ5dGUsXG4gICAgICAgIHJlYWRGbG9hdDogdGhpcy5yZWFkRmxvYXRcbiAgICB9XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEzXG4vL1xuLy8gYnJvd3Nlci11cy5qczogc3RhbmRhcmQgVUkgd2lyaW5nXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYnJvd3NlciA9IHJlcXVpcmUoJy4vY2Jyb3dzZXInKTtcbiAgICB2YXIgQnJvd3NlciA9IGJyb3dzZXIuQnJvd3NlcjtcblxuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgbWFrZUVsZW1lbnQgPSB1dGlscy5tYWtlRWxlbWVudDtcbiAgICB2YXIgcmVtb3ZlQ2hpbGRyZW4gPSB1dGlscy5yZW1vdmVDaGlsZHJlbjtcblxuICAgIHZhciBuZiA9IHJlcXVpcmUoJy4vbnVtZm9ybWF0cycpO1xuICAgIHZhciBmb3JtYXRMb25nSW50ID0gbmYuZm9ybWF0TG9uZ0ludDtcblxuICAgIC8vIEZvciBzaWRlIGVmZmVjdHNcblxuICAgIHJlcXVpcmUoJy4vdGllci1lZGl0Jyk7XG4gICAgcmVxdWlyZSgnLi9leHBvcnQtY29uZmlnJyk7XG4gICAgcmVxdWlyZSgnLi9leHBvcnQtdWknKTtcbiAgICByZXF1aXJlKCcuL3N2Zy1leHBvcnQnKTtcbiAgICByZXF1aXJlKCcuL3Nlc3Npb24nKTtcbn1cblxuLypcbiAqIFF1aXRlIGEgYml0IG9mIHRoaXMgb3VnaHQgdG8gYmUgZG9uZSB1c2luZyBhIHRlbXBsYXRpbmcgc3lzdGVtLCBidXRcbiAqIHNpbmNlIHdlYi1jb21wb25lbnRzIGlzbid0IHF1aXRlIHJlYWR5IGZvciBwcmltZSB0aW1lIHlldCB3ZSdsbCBzdGlja1xuICogd2l0aCBjb25zdHJ1Y3RpbmcgaXQgYWxsIGluIEphdmFzY3JpcHQgZm9yIG5vdy4uLlxuICovXG5cbkJyb3dzZXIucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKGhvbGRlciwgZ2Vub21lUGFuZWwpIHtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdsaW5rJywgJycsIHtyZWw6ICdzdHlsZXNoZWV0JywgaHJlZjogdGhpcy5yZXNvbHZlVVJMKCckJGNzcy9ib290c3RyYXAtc2NvcGVkLmNzcycpfSkpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2xpbmsnLCAnJywge3JlbDogJ3N0eWxlc2hlZXQnLCBocmVmOiB0aGlzLnJlc29sdmVVUkwoJyQkY3NzL2RhbGxpYW5jZS1zY29wZWQuY3NzJyl9KSk7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnbGluaycsICcnLCB7cmVsOiAnc3R5bGVzaGVldCcsIGhyZWY6IHRoaXMucmVzb2x2ZVVSTCgnJCRjc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MnKX0pKTtcblxuICAgIHZhciBiID0gdGhpcztcblxuICAgIGlmICghYi5kaXNhYmxlRGVmYXVsdEZlYXR1cmVQb3B1cCkge1xuICAgICAgICB0aGlzLmFkZEZlYXR1cmVMaXN0ZW5lcihmdW5jdGlvbihldiwgZmVhdHVyZSwgaGl0LCB0aWVyKSB7XG4gICAgICAgICAgICBiLmZlYXR1cmVQb3B1cChldiwgZmVhdHVyZSwgaGl0LCB0aWVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaG9sZGVyLmNsYXNzTGlzdC5hZGQoJ2RhbGxpYW5jZScpO1xuICAgIHZhciB0b29sYmFyID0gYi50b29sYmFyID0gbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHtjbGFzc05hbWU6ICdidG4tdG9vbGJhciB0b29sYmFyJ30pO1xuXG4gICAgdmFyIHRpdGxlID0gYi5jb29yZFN5c3RlbS5zcGVjaWVzTmFtZSArICcgJyArIGIubmFtZUZvckNvb3JkU3lzdGVtKGIuY29vcmRTeXN0ZW0pO1xuICAgIGlmICh0aGlzLnNldERvY3VtZW50VGl0bGUpIHtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZSArICcgOjogZGFsbGlhbmNlJztcbiAgICB9XG4gICAgXG4gICAgdmFyIGxvY0ZpZWxkID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgJycsIHtjbGFzc05hbWU6ICdsb2MtZmllbGQnfSk7XG4gICAgYi5tYWtlVG9vbHRpcChsb2NGaWVsZCwgJ0VudGVyIGEgZ2Vub21pYyBsb2NhdGlvbiBvciBnZW5lIG5hbWUnKTtcbiAgICB2YXIgbG9jU3RhdHVzRmllbGQgPSBtYWtlRWxlbWVudCgncCcsICcnLCB7Y2xhc3NOYW1lOiAnbG9jLXN0YXR1cyd9KTtcblxuXG4gICAgdmFyIHpvb21JbkJ0biA9IG1ha2VFbGVtZW50KCdhJywgW21ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLXNlYXJjaC1wbHVzJ30pXSwge2NsYXNzTmFtZTogJ2J0bid9KTtcbiAgICB2YXIgem9vbVNsaWRlciA9IG1ha2VFbGVtZW50KCdpbnB1dCcsICcnLCB7dHlwZTogJ3JhbmdlJywgbWluOiAxMDAsIG1heDogMjUwfSwge2NsYXNzTmFtZTogJ3pvb20tc2xpZGVyJ30sIHt3aWR0aDogJzE1MHB4J30pOyAgLy8gTkIgbWluIGFuZCBtYXggZ2V0IG92ZXJ3cml0dGVuLlxuICAgIHZhciB6b29tT3V0QnRuID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtc2VhcmNoLW1pbnVzJ30pXSwge2NsYXNzTmFtZTogJ2J0bid9KTtcblxuICAgIHZhciBjbGVhckhpZ2hsaWdodHNCdXR0b24gPSBtYWtlRWxlbWVudCgnYScsIFttYWtlRWxlbWVudCgnaScsIG51bGwsIHtjbGFzc05hbWU6ICdmYSBmYS1lcmFzZXInfSldLCB7Y2xhc3NOYW1lOiAnYnRuJ30pO1xuXG4gICAgdmFyIGFkZFRyYWNrQnRuID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtcGx1cyd9KV0sIHtjbGFzc05hbWU6ICdidG4nfSk7XG4gICAgdmFyIGZhdkJ0biA9IG1ha2VFbGVtZW50KCdhJywgW21ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLWJvb2ttYXJrJ30pXSwge2NsYXNzTmFtZTogJ2J0bid9KTtcbiAgICB2YXIgc3ZnQnRuID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtcHJpbnQnfSldLCB7Y2xhc3NOYW1lOiAnYnRuJ30pO1xuICAgIHZhciByZXNldEJ0biA9IG1ha2VFbGVtZW50KCdhJywgW21ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLXJlZnJlc2gnfSldLCB7Y2xhc3NOYW1lOiAnYnRuJ30pO1xuICAgIHZhciBvcHRzQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtY29ncyd9KV0sIHtjbGFzc05hbWU6ICdidG4nfSk7XG4gICAgdmFyIGhlbHBCdXR0b24gPSBtYWtlRWxlbWVudCgnYScsIFttYWtlRWxlbWVudCgnaScsIG51bGwsIHtjbGFzc05hbWU6ICdmYSBmYS1xdWVzdGlvbid9KV0sIHtjbGFzc05hbWU6ICdidG4nfSk7XG5cbiAgICB2YXIgdGllckVkaXRCdXR0b24gPSBtYWtlRWxlbWVudCgnYScsIFttYWtlRWxlbWVudCgnaScsIG51bGwsIHtjbGFzc05hbWU6ICdmYSBmYS1yb2FkJ30pXSwge2NsYXNzTmFtZTogJ2J0bid9KTtcbiAgICBiLm1ha2VUb29sdGlwKHRpZXJFZGl0QnV0dG9uLCAnQ29uZmlndXJlIGN1cnJlbnRseSBzZWxlY3RlZCB0cmFjayhzKSAoRSknKVxuXG4gICAgdmFyIGxlYXBMZWZ0QnV0dG9uID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtY2hldnJvbi1sZWZ0J30pXSwge2NsYXNzTmFtZTogJ2J0bid9KTtcbiAgICB2YXIgbGVhcFJpZ2h0QnV0dG9uID0gbWFrZUVsZW1lbnQoJ2EnLCBbbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtY2hldnJvbi1yaWdodCd9KV0sIHtjbGFzc05hbWU6ICdidG4gcHVsbC1yaWdodCd9KTtcblxuICAgIHZhciBtb2RlQnV0dG9ucyA9IG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7Y2xhc3NOYW1lOiAnYnRuLWdyb3VwIHB1bGwtcmlnaHQnfSk7XG4gICAgaWYgKCF0aGlzLm5vVHJhY2tBZGRlcilcbiAgICAgICAgbW9kZUJ1dHRvbnMuYXBwZW5kQ2hpbGQoYWRkVHJhY2tCdG4pO1xuICAgIGlmICghdGhpcy5ub1RyYWNrRWRpdG9yKVxuICAgICAgICBtb2RlQnV0dG9ucy5hcHBlbmRDaGlsZCh0aWVyRWRpdEJ1dHRvbik7XG4gICAgaWYgKCF0aGlzLm5vRXhwb3J0KVxuICAgICAgICBtb2RlQnV0dG9ucy5hcHBlbmRDaGlsZChzdmdCdG4pO1xuICAgIGlmICghdGhpcy5ub09wdGlvbnMpXG4gICAgICAgIG1vZGVCdXR0b25zLmFwcGVuZENoaWxkKG9wdHNCdXR0b24pO1xuICAgIGlmICghdGhpcy5ub0hlbHApXG4gICAgICAgIG1vZGVCdXR0b25zLmFwcGVuZENoaWxkKGhlbHBCdXR0b24pO1xuXG4gICAgdGhpcy5zZXRVaU1vZGUgPSBmdW5jdGlvbihtKSB7XG4gICAgICAgIHRoaXMudWlNb2RlID0gbTtcbiAgICAgICAgdmFyIG1iID0ge2hlbHA6IGhlbHBCdXR0b24sIGFkZDogYWRkVHJhY2tCdG4sIG9wdHM6IG9wdHNCdXR0b24sICdleHBvcnQnOiBzdmdCdG4sIHRpZXI6IHRpZXJFZGl0QnV0dG9ufTtcbiAgICAgICAgZm9yICh2YXIgeCBpbiBtYikge1xuICAgICAgICAgICAgaWYgKHggPT0gbSlcbiAgICAgICAgICAgICAgICBtYlt4XS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYlt4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLm5vTGVhcEJ1dHRvbnMpXG4gICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQobGVhcFJpZ2h0QnV0dG9uKTtcblxuICAgIGlmIChtb2RlQnV0dG9ucy5maXJzdENoaWxkKVxuICAgICAgICB0b29sYmFyLmFwcGVuZENoaWxkKG1vZGVCdXR0b25zKTtcbiAgICBcbiAgICBpZiAoIXRoaXMubm9MZWFwQnV0dG9ucylcbiAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChsZWFwTGVmdEJ1dHRvbik7XG4gICAgaWYgKCF0aGlzLm5vVGl0bGUpIHtcbiAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnZGl2JywgbWFrZUVsZW1lbnQoJ2g0JywgdGl0bGUsIHt9LCB7bWFyZ2luOiAnMHB4J30pLCB7Y2xhc3NOYW1lOiAnYnRuLWdyb3VwIHRpdGxlJ30pKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm5vTG9jYXRpb25GaWVsZClcbiAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnZGl2JywgW2xvY0ZpZWxkLCBsb2NTdGF0dXNGaWVsZF0sIHtjbGFzc05hbWU6ICdidG4tZ3JvdXAgbG9jLWdyb3VwJ30pKTtcbiAgICBpZiAoIXRoaXMubm9DbGVhckhpZ2hsaWdodHNCdXR0b24pXG4gICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQoY2xlYXJIaWdobGlnaHRzQnV0dG9uKTtcblxuICAgIGlmICghdGhpcy5ub1pvb21TbGlkZXIpIHtcbiAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnZGl2JywgW3pvb21JbkJ0bixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCdzcGFuJywgem9vbVNsaWRlciwge2NsYXNzTmFtZTogJ2J0bid9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb21PdXRCdG5dLCB7Y2xhc3NOYW1lOiAnYnRuLWdyb3VwJ30pKTtcbiAgICB9XG4gICAgXG5cbiAgICBob2xkZXIuYXBwZW5kQ2hpbGQodG9vbGJhcik7XG4gICAgaG9sZGVyLmFwcGVuZENoaWxkKGdlbm9tZVBhbmVsKTtcblxuICAgIHRoaXMuYWRkVmlld0xpc3RlbmVyKGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIF9vbGRab29tLCB6b29tKSB7XG4gICAgICAgIGxvY0ZpZWxkLnZhbHVlID0gKGNociArICc6JyArIGZvcm1hdExvbmdJbnQobWluKSArICcuLicgKyBmb3JtYXRMb25nSW50KG1heCkpO1xuICAgICAgICB6b29tU2xpZGVyLm1pbiA9IHpvb20ubWlufDA7XG4gICAgICAgIHpvb21TbGlkZXIubWF4ID0gem9vbS5tYXh8MDtcbiAgICAgICAgem9vbVNsaWRlci52YWx1ZSA9IHpvb20uY3VycmVudHwwO1xuICAgICAgICBpZiAoYi5zdG9yZVN0YXR1cykge1xuICAgICAgICAgICAgYi5zdG9yZVZpZXdTdGF0dXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiLmhpZ2hsaWdodHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2xlYXJIaWdobGlnaHRzQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFySGlnaGxpZ2h0c0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZFRpZXJMaXN0ZW5lcihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGIuc3RvcmVTdGF0dXMpIHtcbiAgICAgICAgICAgIGIuc3RvcmVUaWVyU3RhdHVzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGxvY0ZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldikge1xuICAgICAgICBpZiAoZXYua2V5Q29kZSA9PSA0MCkge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBiLnNldFNlbGVjdGVkVGllcigwKTtcbiAgICAgICAgfSBpZiAoZXYua2V5Q29kZSA9PSAxMCB8fCBldi5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cbiAgICAgICAgICAgIHZhciBnID0gbG9jRmllbGQudmFsdWU7XG4gICAgICAgICAgICBiLnNlYXJjaChnLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY1N0YXR1c0ZpZWxkLnRleHRDb250ZW50ID0gJycgKyBlcnI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jU3RhdHVzRmllbGQudGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIGZhbHNlKTtcbiAgICBcbiAgICB2YXIgdHJhY2tBZGRQb3B1cDtcbiAgICBhZGRUcmFja0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmICh0cmFja0FkZFBvcHVwICYmIHRyYWNrQWRkUG9wdXAuZGlzcGxheWVkKSB7XG4gICAgICAgICAgICBiLnJlbW92ZUFsbFBvcHVwcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tBZGRQb3B1cCA9IGIuc2hvd1RyYWNrQWRkZXIoZXYpO1xuICAgICAgICB9XG4gICAgfSwgZmFsc2UpO1xuICAgIGIubWFrZVRvb2x0aXAoYWRkVHJhY2tCdG4sICdBZGQgYSBuZXcgdHJhY2sgZnJvbSB0aGUgcmVnaXN0cnkgb3IgYW4gaW5kZXhlZCBmaWxlLiAoQSknKTtcblxuICAgIHpvb21JbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgYi56b29tU3RlcCgtMTApO1xuICAgIH0sIGZhbHNlKTtcbiAgICBiLm1ha2VUb29sdGlwKHpvb21JbkJ0biwgJ1pvb20gaW4gKCspJyk7XG5cbiAgICB6b29tT3V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBiLnpvb21TdGVwKDEwKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgYi5tYWtlVG9vbHRpcCh6b29tT3V0QnRuLCAnWm9vbSBvdXQgKC0pJyk7XG5cbiAgICB6b29tU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgXHRiLnpvb21TbGlkZXJWYWx1ZSA9ICgxLjAgKiB6b29tU2xpZGVyLnZhbHVlKTtcbiAgICBcdGIuem9vbShNYXRoLmV4cCgoMS4wICogem9vbVNsaWRlci52YWx1ZSkgLyBiLnpvb21FeHB0KSk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgZmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgYi5tYWtlVG9vbHRpcChmYXZCdG4sICdGYXZvdXJpdGUgcmVnaW9ucycpO1xuXG4gICAgc3ZnQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYi5vcGVuRXhwb3J0UGFuZWwoKTtcbiAgICB9LCBmYWxzZSk7XG4gICAgYi5tYWtlVG9vbHRpcChzdmdCdG4sICdFeHBvcnQgcHVibGljYXRpb24tcXVhbGl0eSBTVkcuIChYKScpO1xuXG4gICAgdmFyIG9wdHNQb3B1cDtcbiAgICBvcHRzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgYi50b2dnbGVPcHRzUG9wdXAoZXYpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBiLm1ha2VUb29sdGlwKG9wdHNCdXR0b24sICdDb25maWd1cmUgb3B0aW9ucy4nKTtcblxuICAgIGhlbHBCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYi50b2dnbGVIZWxwUG9wdXAoZXYpO1xuICAgIH0pO1xuICAgIGIubWFrZVRvb2x0aXAoaGVscEJ1dHRvbiwgJ0hlbHA7IEtleWJvYXJkIHNob3J0Y3V0cy4gKEgpJyk7XG5cbiAgICB0aWVyRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoYi5zZWxlY3RlZFRpZXJzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICBiLm9wZW5UaWVyUGFuZWwoYi50aWVyc1tiLnNlbGVjdGVkVGllcnNbMF1dKTtcbiAgICAgICAgfVxuICAgIH0sIGZhbHNlKTtcblxuICAgIGxlYXBMZWZ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgYi5sZWFwKGIucmV2ZXJzZUtleVNjcm9sbGluZyA/IC0xIDogMSwgZmFsc2UpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBiLm1ha2VUb29sdGlwKGxlYXBMZWZ0QnV0dG9uLCBmdW5jdGlvbihldikge1xuICAgICAgICB2YXIgc3QgPSBiLmdldFNlbGVjdGVkVGllcigpO1xuICAgICAgICB2YXIgdGllcjtcbiAgICAgICAgaWYgKHN0ID49IDApXG4gICAgICAgICAgICB0aWVyID0gYi50aWVyc1tzdF07XG5cbiAgICAgICAgaWYgKHRpZXIgJiYgdGllci5mZWF0dXJlU291cmNlICYmIGIuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aWVyLmZlYXR1cmVTb3VyY2UsICdxdWFudExlYXAnKSAmJiB0eXBlb2YodGllci5xdWFudExlYXBUaHJlc2hvbGQpID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0p1bXAgdG8gdGhlIG5leHQgcmVnaW9uIHdpdGggYSBzY29yZSBhYm92ZSB0aGUgdGhyZXNob2xkIGluIHRoZSBzZWxlY3RlZCB0cmFjayBcIicgKyAodGllci5jb25maWcubmFtZSB8fCB0aWVyLmRhc1NvdXJjZS5uYW1lKSArICdcIlwiIChjdHJsK0xFRlQpJztcbiAgICAgICAgfSBlbHNlIGlmICh0aWVyICYmIHRpZXIuZmVhdHVyZVNvdXJjZSAmJiBiLnNvdXJjZUFkYXB0ZXJJc0NhcGFibGUodGllci5mZWF0dXJlU291cmNlLCAnbGVhcCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0p1bXAgdG8gdGhlIG5leHQgZmVhdHVyZSBpbiB0aGUgc2VsZWN0ZWQgdHJhY2sgXCInICsgKHRpZXIuY29uZmlnLm5hbWUgfHwgdGllci5kYXNTb3VyY2UubmFtZSkgKyAnXCIgKGN0cmwrTEVGVCknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdKdW1wIGxlZnQgKHNoaWZ0K0xFRlQpJztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGVhcFJpZ2h0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgYi5sZWFwKGIucmV2ZXJzZUtleVNjcm9sbGluZyA/IDEgOiAtMSwgZmFsc2UpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBiLm1ha2VUb29sdGlwKGxlYXBSaWdodEJ1dHRvbiwgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdmFyIHN0ID0gYi5nZXRTZWxlY3RlZFRpZXIoKTtcbiAgICAgICAgdmFyIHRpZXI7XG4gICAgICAgIGlmIChzdCA+PSAwKVxuICAgICAgICAgICAgdGllciA9IGIudGllcnNbc3RdO1xuXG4gICAgICAgIGlmICh0aWVyICYmIHRpZXIuZmVhdHVyZVNvdXJjZSAmJiBiLnNvdXJjZUFkYXB0ZXJJc0NhcGFibGUodGllci5mZWF0dXJlU291cmNlLCAncXVhbnRMZWFwJykgJiYgdHlwZW9mKHRpZXIucXVhbnRMZWFwVGhyZXNob2xkKSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuICdKdW1wIHRvIHRoZSBuZXh0IHJlZ2lvbiB3aXRoIGEgc2NvcmUgYWJvdmUgdGhlIHRocmVzaG9sZCBpbiB0aGUgc2VsZWN0ZWQgdHJhY2sgXCInICsgKHRpZXIuY29uZmlnLm5hbWUgfHwgdGllci5kYXNTb3VyY2UubmFtZSkgKyAnXCJcIiAoY3RybCtSSUdIVCknO1xuICAgICAgICB9IGVsc2UgaWYgKHRpZXIgJiYgdGllci5mZWF0dXJlU291cmNlICYmIGIuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aWVyLmZlYXR1cmVTb3VyY2UsICdsZWFwJykpIHtcbiAgICAgICAgICAgIHJldHVybiAnSnVtcCB0byB0aGUgbmV4dCBmZWF0dXJlIGluIHRoZSBzZWxlY3RlZCB0cmFjayBcIicgKyAodGllci5jb25maWcubmFtZSB8fCB0aWVyLmRhc1NvdXJjZS5uYW1lKSArICdcIiAoY3RybCtSSUdIVCknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdKdW1wIHJpZ2h0IChzaGlmdCtSSUdIVCknO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjbGVhckhpZ2hsaWdodHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBiLmNsZWFySGlnaGxpZ2h0cygpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBiLm1ha2VUb29sdGlwKGNsZWFySGlnaGxpZ2h0c0J1dHRvbiwgJ0NsZWFyIGhpZ2hsaWdodHMgKEMpJyk7XG5cbiAgICBiLmFkZFRpZXJTZWxlY3Rpb25XcmFwTGlzdGVuZXIoZnVuY3Rpb24oZGlyKSB7XG4gICAgICAgIGlmIChkaXIgPCAwKSB7XG4gICAgICAgICAgICBiLnNldFNlbGVjdGVkVGllcihudWxsKTtcbiAgICAgICAgICAgIGxvY0ZpZWxkLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGIuYWRkVGllclNlbGVjdGlvbkxpc3RlbmVyKGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICBpZiAoYi51aU1vZGUgPT09ICd0aWVyJykge1xuICAgICAgICAgICAgaWYgKHNlbC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGIuaGlkZVRvb2xQYW5lbCgpO1xuICAgICAgICAgICAgICAgIGIubWFuaXB1bGF0aW5nVGllciA9IG51bGw7XG4gICAgICAgICAgICAgICAgYi51aU1vZGUgPSAnbm9uZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBmdCA9IGIudGllcnNbc2VsWzBdXTtcbiAgICAgICAgICAgICAgICBpZiAoZnQgIT0gYi5tYW5pcHVsYXRpbmdUaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGIub3BlblRpZXJQYW5lbChmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdWlLZXlIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2J1a2g6ICcgKyBldi5rZXlDb2RlKTtcbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPT0gNjUgfHwgZXYua2V5Q29kZSA9PSA5NykgeyAgLy8gYVxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBiLnNob3dUcmFja0FkZGVyKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSA3MiB8fCBldi5rZXlDb2RlID09IDEwNCkgeyAvLyBoXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGIudG9nZ2xlSGVscFBvcHVwKGV2KTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDY5IHx8IGV2LmtleUNvZGUgPT0gMTAxKSB7IC8vZVxuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoYi5zZWxlY3RlZFRpZXJzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgYi5vcGVuVGllclBhbmVsKGIudGllcnNbYi5zZWxlY3RlZFRpZXJzWzBdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSA4OCB8fCBldi5rZXlDb2RlID09IDEyMCkgeyAvLyB4XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGIub3BlbkV4cG9ydFBhbmVsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSA2NyB8fCBldi5rZXlDb2RlID09IDk5KSB7IC8vIGNcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgYi5jbGVhckhpZ2hsaWdodHMoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBob2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbihldikge1xuICAgICAgICBob2xkZXIuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVpS2V5SGFuZGxlciwgZmFsc2UpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBob2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGhvbGRlci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdWlLZXlIYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgaG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldikge1xuICAgICAgICBpZiAoZXYua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGIudWlNb2RlID0gJ25vbmUnO1xuICAgICAgICAgICAgYi5oaWRlVG9vbFBhbmVsKCk7XG5cbiAgICAgICAgICAgIGlmIChiLnNlbGVjdGVkVGllcnMgJiYgYi5zZWxlY3RlZFRpZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBiLmJyb3dzZXJIb2xkZXIuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIGZhbHNlKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuc2hvd1Rvb2xQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsLCBub3dyYXApIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuYWN0aXZlVG9vbFBhbmVsKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlVG9vbFBhbmVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5hY3RpdmVUb29sUGFuZWwpO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50O1xuICAgIGlmIChub3dyYXApXG4gICAgICAgIGNvbnRlbnQgPSBwYW5lbDtcbiAgICBlbHNlXG4gICAgICAgIGNvbnRlbnQgPSBtYWtlRWxlbWVudCgnZGl2JywgcGFuZWwsIHt9LCB7b3ZlcmZsb3dZOiAnYXV0bycsIHdpZHRoOiAnMTAwJSd9KTtcblxuXG4gICAgdmFyIGRpdmlkZXIgPSBtYWtlRWxlbWVudCgnZGl2JywgbWFrZUVsZW1lbnQoJ2knLCBudWxsLCB7Y2xhc3NOYW1lOiAnZmEgZmEtY2FyZXQtcmlnaHQnfSksIHtjbGFzc05hbWU6ICd0b29sLWRpdmlkZXInfSk7XG4gICAgZGl2aWRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHRoaXNCLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpc0Iuc2V0VWlNb2RlKCdub25lJyk7XG4gICAgfSwgZmFsc2UpO1xuICAgIHRoaXMubWFrZVRvb2x0aXAoZGl2aWRlciwgJ0Nsb3NlIHRvb2wgcGFuZWwgKEVTQyknKTtcbiAgICB0aGlzLmFjdGl2ZVRvb2xQYW5lbCA9IG1ha2VFbGVtZW50KCdkaXYnLCBbZGl2aWRlciwgY29udGVudF0sIHtjbGFzc05hbWU6ICd0b29sLWhvbGRlcid9KTtcbiAgICB0aGlzLnN2Z0hvbGRlci5hcHBlbmRDaGlsZCh0aGlzLmFjdGl2ZVRvb2xQYW5lbCk7XG4gICAgdGhpcy5yZXNpemVWaWV3ZXIoKTtcblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmhpZGVUb29sUGFuZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVUb29sUGFuZWwpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUb29sUGFuZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmFjdGl2ZVRvb2xQYW5lbCk7XG4gICAgfVxuICAgIHRoaXMuc3ZnSG9sZGVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIHRoaXMuYWN0aXZlVG9vbFBhbmVsID0gbnVsbDtcbiAgICB0aGlzLnJlc2l6ZVZpZXdlcigpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS50b2dnbGVIZWxwUG9wdXAgPSBmdW5jdGlvbihldikge1xuICAgIGlmICh0aGlzLnVpTW9kZSA9PT0gJ2hlbHAnKSB7XG4gICAgICAgIHRoaXMuaGlkZVRvb2xQYW5lbCgpO1xuICAgICAgICB0aGlzLnNldFVpTW9kZSgnbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBoZWxwRnJhbWUgPSBtYWtlRWxlbWVudCgnaWZyYW1lJywgbnVsbCwge3Njcm9sbGluZzogJ3llcycsIHNlYW1sZXNzOiAnc2VhbWxlc3MnLCBzcmM6IHRoaXMucmVzb2x2ZVVSTCgnJCRoZWxwL2luZGV4Lmh0bWwnKSwgY2xhc3NOYW1lOiAnaGVscC1wYW5lbCd9KTtcbiAgICAgICAgdGhpcy5zaG93VG9vbFBhbmVsKGhlbHBGcmFtZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFVpTW9kZSgnaGVscCcpO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUudG9nZ2xlT3B0c1BvcHVwID0gZnVuY3Rpb24oZXYpIHtcbiAgICB2YXIgYiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy51aU1vZGUgPT09ICdvcHRzJykge1xuICAgICAgICB0aGlzLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ25vbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3B0c0Zvcm0gPSBtYWtlRWxlbWVudCgnZGl2JywgbnVsbCwge2NsYXNzTmFtZTogJ2Zvcm0taG9yaXpvbnRhbCd9LCB7Ym94U2l6aW5nOiAnYm9yZGVyLWJveCcsIE1vekJveFNpemluZzogJ2JvcmRlci1ib3gnLCBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywgdmVydGljYWxBbGlnbjogJ3RvcCd9KTtcbiAgICAgICAgdmFyIG9wdHNUYWJsZSA9IG1ha2VFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICBvcHRzVGFibGUuY2VsbFBhZGRpbmcgPSA1O1xuXG4gICAgICAgIHZhciBzY3JvbGxNb2RlQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgJycsIHt0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiBiLnJldmVyc2VTY3JvbGxpbmd9KTtcbiAgICAgICAgc2Nyb2xsTW9kZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgYi5yZXZlcnNlU2Nyb2xsaW5nID0gc2Nyb2xsTW9kZUJ1dHRvbi5jaGVja2VkO1xuICAgICAgICAgICAgYi5zdG9yZVN0YXR1cygpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIG9wdHNUYWJsZS5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgndHInLCBbbWFrZUVsZW1lbnQoJ3RkJywgJ1JldmVyc2UgdHJhY2twYWQgc2Nyb2xsaW5nJywge2FsaWduOiAncmlnaHQnfSksIG1ha2VFbGVtZW50KCd0ZCcsIHNjcm9sbE1vZGVCdXR0b24pXSkpO1xuXG4gICAgICAgIHZhciBzY3JvbGxLZXlCdXR0b24gPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJywge3R5cGU6ICdjaGVja2JveCcsIGNoZWNrZWQ6IGIucmV2ZXJzZUtleVNjcm9sbGluZ30pO1xuICAgICAgICBzY3JvbGxLZXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGIucmV2ZXJzZUtleVNjcm9sbGluZyA9IHNjcm9sbEtleUJ1dHRvbi5jaGVja2VkO1xuICAgICAgICAgICAgYi5zdG9yZVN0YXR1cygpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIG9wdHNUYWJsZS5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgndHInLCBbbWFrZUVsZW1lbnQoJ3RkJywgJ1JldmVyc2Ugc2Nyb2xsaW5nIGJ1dHRvbnMgYW5kIGtleXMnLCB7YWxpZ246ICdyaWdodCd9KSwgbWFrZUVsZW1lbnQoJ3RkJywgc2Nyb2xsS2V5QnV0dG9uKV0pKTtcblxuXG4gICAgICAgIHZhciBydWxlclNlbGVjdCA9IG1ha2VFbGVtZW50KCdzZWxlY3QnKTtcbiAgICAgICAgcnVsZXJTZWxlY3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdMZWZ0Jywge3ZhbHVlOiAnbGVmdCd9KSk7XG4gICAgICAgIHJ1bGVyU2VsZWN0LmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdvcHRpb24nLCAnQ2VudGVyJywge3ZhbHVlOiAnY2VudGVyJ30pKTtcbiAgICAgICAgcnVsZXJTZWxlY3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdSaWdodCcsIHt2YWx1ZTogJ3JpZ2h0J30pKTtcbiAgICAgICAgcnVsZXJTZWxlY3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdOb25lJywge3ZhbHVlOiAnbm9uZSd9KSk7XG4gICAgICAgIHJ1bGVyU2VsZWN0LnZhbHVlID0gYi5ydWxlckxvY2F0aW9uO1xuICAgICAgICBydWxlclNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgYi5ydWxlckxvY2F0aW9uID0gcnVsZXJTZWxlY3QudmFsdWU7XG4gICAgICAgICAgICBiLnBvc2l0aW9uUnVsZXIoKTtcbiAgICAgICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCBiLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgIGIudGllcnNbdGldLnBhaW50UXVhbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGIuc3RvcmVTdGF0dXMoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBvcHRzVGFibGUuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3RyJywgW21ha2VFbGVtZW50KCd0ZCcsICdWZXJ0aWNhbCBndWlkZWxpbmUnLCB7YWxpZ246ICdyaWdodCd9KSwgbWFrZUVsZW1lbnQoJ3RkJywgcnVsZXJTZWxlY3QpXSkpO1xuXG4gICAgICAgIG9wdHNGb3JtLmFwcGVuZENoaWxkKG9wdHNUYWJsZSk7XG5cbiAgICAgICAgdmFyIHJlc2V0QnV0dG9uID0gbWFrZUVsZW1lbnQoJ2J1dHRvbicsICdSZXNldCBicm93c2VyJywge2NsYXNzTmFtZTogJ2J0bid9LCB7bWFyZ2luTGVmdDogJ2F1dG8nLCBtYXJnaW5SaWdodDogJ2F1dG8nLCBkaXNwbGF5OiAnYmxvY2snfSk7XG4gICAgICAgIHJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGIucmVzZXQoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBvcHRzRm9ybS5hcHBlbmRDaGlsZChyZXNldEJ1dHRvbik7XG5cbiAgICAgICAgdGhpcy5zaG93VG9vbFBhbmVsKG9wdHNGb3JtKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ29wdHMnKTtcbiAgICB9XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMVxuLy9cbi8vIGNicm93c2VyLmpzOiBjYW52YXMgYnJvd3NlciBjb250YWluZXJcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgT2JzZXJ2ZWQgPSB1dGlscy5PYnNlcnZlZDtcbiAgICB2YXIgQXdhaXRlZCA9IHV0aWxzLkF3YWl0ZWQ7XG4gICAgdmFyIG1ha2VFbGVtZW50ID0gdXRpbHMubWFrZUVsZW1lbnQ7XG4gICAgdmFyIHJlbW92ZUNoaWxkcmVuID0gdXRpbHMucmVtb3ZlQ2hpbGRyZW47XG4gICAgdmFyIG1pbmlKU09OaWZ5ID0gdXRpbHMubWluaUpTT05pZnk7XG4gICAgdmFyIHNoYWxsb3dDb3B5ID0gdXRpbHMuc2hhbGxvd0NvcHk7XG5cbiAgICB2YXIgdGllciA9IHJlcXVpcmUoJy4vdGllcicpO1xuICAgIHZhciBEYXNUaWVyID0gdGllci5EYXNUaWVyO1xuXG4gICAgdmFyIHNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKTtcbiAgICB2YXIgaGV4X3NoYTEgPSBzaGExLmhleF9zaGExO1xuXG4gICAgdmFyIHRodWIgPSByZXF1aXJlKCcuL3RodWInKTtcbiAgICB2YXIgY29ubmVjdFRyYWNrSHViID0gdGh1Yi5jb25uZWN0VHJhY2tIdWI7XG5cbiAgICB2YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4vdmVyc2lvbicpO1xuXG4gICAgdmFyIG5mID0gcmVxdWlyZSgnLi9udW1mb3JtYXRzJyk7XG4gICAgdmFyIGZvcm1hdFF1YW50TGFiZWwgPSBuZi5mb3JtYXRRdWFudExhYmVsO1xuXG4gICAgdmFyIENoYWluc2V0ID0gcmVxdWlyZSgnLi9jaGFpbnNldCcpLkNoYWluc2V0O1xuXG4gICAgdmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG59XG5cbmZ1bmN0aW9uIFJlZ2lvbihjaHIsIG1pbiwgbWF4KSB7XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gICAgdGhpcy5jaHIgPSBjaHI7XG59XG5cbmZ1bmN0aW9uIEJyb3dzZXIob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5wcmVmaXggPSAnLy93d3cuYmlvZGFsbGlhbmNlLm9yZy9yZWxlYXNlLTAuMTIvJztcblxuICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgIHRoaXMudGllcnMgPSBbXTtcblxuICAgIHRoaXMuZmVhdHVyZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuZmVhdHVyZUhvdmVyTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy52aWV3TGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5yZWdpb25TZWxlY3RMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnRpZXJMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnRpZXJTZWxlY3Rpb25MaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnRpZXJTZWxlY3Rpb25XcmFwTGlzdGVuZXJzID0gW107XG5cbiAgICB0aGlzLmNvb2tpZUtleSA9ICdicm93c2VyJztcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gJy8vd3d3LmRhc3JlZ2lzdHJ5Lm9yZy9kYXMvc291cmNlcyc7XG4gICAgdGhpcy5jaGFpbnMgPSB7fTtcblxuICAgIHRoaXMucGFnZU5hbWUgPSAnc3ZnSG9sZGVyJ1xuICAgIHRoaXMubWF4RXh0cmEgPSAyLjU7XG4gICAgdGhpcy5taW5FeHRyYSA9IDAuNTtcbiAgICB0aGlzLnpvb21GYWN0b3IgPSAxLjA7XG4gICAgdGhpcy56b29tTWluID0gMTAuMDtcbiAgICAvLyB0aGlzLnpvb21NYXg7ICAgICAgIC8vIEFsbG93IGNvbmZpZ3VyYXRpb24gZm9yIGNvbXBhdGliaWxpdHksIGJ1dCBvdGhlcndpc2UgY2xvYmJlci5cbiAgICB0aGlzLm9yaWdpbiA9IDA7XG4gICAgdGhpcy50YXJnZXRRdWFudFJlcyA9IDEuMDtcbiAgICB0aGlzLmZlYXR1cmVQYW5lbFdpZHRoID0gNzUwO1xuICAgIHRoaXMuem9vbUJhc2UgPSAxMDA7XG4gICAgdGhpcy56b29tRXhwdCA9IDMwLjA7IC8vIEJhY2sgdG8gYmVpbmcgZml4ZWQuLi4uXG4gICAgdGhpcy56b29tU2xpZGVyVmFsdWUgPSAxMDA7XG4gICAgdGhpcy5lbnRyeVBvaW50cyA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50U2VxTWF4ID0gLTE7IC8vIGluaXQgb25jZSBFUHMgYXJlIGZldGNoZWQuXG5cbiAgICB0aGlzLmhpZ2hsaWdodHMgPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkVGllcnMgPSBbMV07XG5cbiAgICB0aGlzLm1heFZpZXdXaWR0aCA9IDUwMDAwMDtcblxuICAgIC8vIE9wdGlvbnMuXG4gICAgXG4gICAgdGhpcy5yZXZlcnNlU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5ydWxlckxvY2F0aW9uID0gJ2NlbnRlcic7XG4gICAgdGhpcy5kZWZhdWx0SGlnaGxpZ2h0RmlsbCA9ICdyZWQnO1xuICAgIHRoaXMuZGVmYXVsdEhpZ2hsaWdodEFscGhhID0gMC4zO1xuICAgIHRoaXMuZXhwb3J0SGlnaGxpZ2h0cyA9IHRydWU7XG4gICAgdGhpcy5leHBvcnRSdWxlciA9IHRydWU7XG5cbiAgICAvLyBWaXN1YWwgY29uZmlnLlxuXG4gICAgLy8gdGhpcy50aWVyQmFja2dyb3VuZENvbG9ycyA9IFtcInJnYigyNDUsMjQ1LDI0NSlcIiwgXCJyZ2IoMjMwLDIzMCwyNTApXCIgLyogJ3doaXRlJyAqL107XG4gICAgdGhpcy50aWVyQmFja2dyb3VuZENvbG9ycyA9IFtcInJnYigyNDUsMjQ1LDI0NSlcIiwgJ3doaXRlJ107XG4gICAgdGhpcy5taW5UaWVySGVpZ2h0ID0gMjA7XG4gICAgdGhpcy5ub0RlZmF1bHRMYWJlbHMgPSBmYWxzZTtcbiAgICB0aGlzLmJhc2VDb2xvcnMgPSB7XG4gICAgICAgIEE6ICdncmVlbicsIFxuICAgICAgICBDOiAnYmx1ZScsIFxuICAgICAgICBHOiAnYmxhY2snLCBcbiAgICAgICAgVDogJ3JlZCdcbiAgICB9O1xuXG4gICAgLy8gUmVnaXN0cnlcblxuICAgIHRoaXMuYXZhaWxhYmxlU291cmNlcyA9IG5ldyBPYnNlcnZlZCgpO1xuICAgIHRoaXMuZGVmYXVsdFNvdXJjZXMgPSBbXTtcbiAgICB0aGlzLm1hcHBhYmxlU291cmNlcyA9IHt9O1xuXG4gICAgdGhpcy5odWJzID0gW107XG4gICAgdGhpcy5odWJPYmplY3RzID0gW107XG5cbiAgICB0aGlzLnNvdXJjZUNhY2hlID0gbmV3IFNvdXJjZUNhY2hlKCk7XG4gICAgXG4gICAgdGhpcy5yZXRpbmEgPSB0cnVlO1xuXG4gICAgdGhpcy51c2VGZXRjaFdvcmtlcnMgPSB0cnVlO1xuICAgIHRoaXMubWF4V29ya2VycyA9IDI7XG4gICAgdGhpcy53b3JrZXJQYXRoID0gJyQkd29ya2VyLWFsbC5qcyc7XG5cbiAgICB0aGlzLmFzc2VtYmx5TmFtZVByaW1hcnkgPSB0cnVlO1xuICAgIHRoaXMuYXNzZW1ibHlOYW1lVWNzYyA9IHRydWU7XG5cbiAgICB0aGlzLmluaXRMaXN0ZW5lcnMgPSBbXTtcblxuICAgIGlmIChvcHRzLnZpZXdTdGFydCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZihvcHRzLnZpZXdTdGFydCkgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IEVycm9yKCd2aWV3U3RhcnQgbXVzdCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnZpZXdFbmQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Yob3B0cy52aWV3RW5kKSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ3ZpZXdFbmQgbXVzdCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgayBpbiBvcHRzKSB7XG4gICAgICAgIHRoaXNba10gPSBvcHRzW2tdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKG9wdHMudWlQcmVmaXgpID09PSAnc3RyaW5nJyAmJiB0eXBlb2Yob3B0cy5wcmVmaXgpICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnByZWZpeCA9IG9wdHMudWlQcmVmaXg7XG4gICAgfVxuICAgIGlmICh0aGlzLnByZWZpeC5pbmRleE9mKCcvLycpID09PSAwKSB7XG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG90b2wgPT09ICdodHRwOicgfHwgd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgICAgICAgLy8gUHJvdG9jb2wtcmVsYXRpdmUgVVJMcyBva2F5LlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcmVmaXggPSAnaHR0cDonICsgdGhpcy5wcmVmaXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29vcmRTeXN0ZW0pIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0Nvb3JkaW5hdGUgc3lzdGVtIG11c3QgYmUgY29uZmlndXJlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNociA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudmlld1N0YXJ0ID09PSB1bmRlZmluZWQgfHwgdGhpcy52aWV3RW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1ZpZXdlZCByZWdpb24gKGNocjpzdGFydC4uZW5kKSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgdGhpc0IucmVhbEluaXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKGV2KSB7dGhpc0IucmVhbEluaXQoKTt9LCBmYWxzZSk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZXNvbHZlVVJMID0gZnVuY3Rpb24odXJsKSB7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKCckJCcsIHRoaXMucHJlZml4KTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUucmVhbEluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy53YXNJbml0aWFsaXplZCkge1xuICAgICAgICBjb25zb2xlLmxvZygnQXR0ZW1waW5nIHRvIGNhbGwgcmVhbEluaXQgb24gYW4gYWxyZWFkeS1pbml0aWFsaXplZCBEYWxsaWFuY2UgaW5zdGFuY2UnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMud2FzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5kZWZhdWx0Q2hyID0gdGhpcy5jaHI7XG4gICAgdGhpcy5kZWZhdWx0U3RhcnQgPSB0aGlzLnZpZXdTdGFydDtcbiAgICB0aGlzLmRlZmF1bHRFbmQgPSB0aGlzLnZpZXdFbmQ7XG4gICAgdGhpcy5kZWZhdWx0U291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdFNvdXJjZXMucHVzaCh0aGlzLnNvdXJjZXNbaV0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc3RvcmVTdGF0dXMpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNSZXN0b3JlZCA9IHRoaXMucmVzdG9yZVN0YXR1cygpO1xuICAgIH1cblxuICAgIHZhciBoZWxwUG9wdXA7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmJyb3dzZXJIb2xkZXJIb2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnBhZ2VOYW1lKTtcbiAgICB0aGlzLmJyb3dzZXJIb2xkZXJIb2xkZXIuY2xhc3NMaXN0LmFkZCgnZGFsbGlhbmNlLWluamVjdGlvbi1wb2ludCcpO1xuICAgIHRoaXMuYnJvd3NlckhvbGRlciA9IG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7Y2xhc3NOYW1lOiAnZGFsbGlhbmNlIGRhbGxpYW5jZS1yb290JywgdGFiSW5kZXg6IC0xfSk7XG4gICAgaWYgKHRoaXMubWF4SGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuYnJvd3NlckhvbGRlci5zdHlsZS5tYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCArICdweCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1heEhlaWdodCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5icm93c2VySG9sZGVyLnN0eWxlLm1heEhlaWdodCA9IG51bGw7XG4gICAgfVxuICAgIHJlbW92ZUNoaWxkcmVuKHRoaXMuYnJvd3NlckhvbGRlckhvbGRlcik7XG4gICAgdGhpcy5icm93c2VySG9sZGVySG9sZGVyLmFwcGVuZENoaWxkKHRoaXMuYnJvd3NlckhvbGRlcik7XG4gICAgdGhpcy5zdmdIb2xkZXIgPSBtYWtlRWxlbWVudCgnZGl2JywgbnVsbCwge2NsYXNzTmFtZTogJ21haW4taG9sZGVyJ30pO1xuXG4gICAgdGhpcy5pbml0VUkodGhpcy5icm93c2VySG9sZGVyLCB0aGlzLnN2Z0hvbGRlcik7XG5cbiAgICB0aGlzLnBpbm5lZFRpZXJIb2xkZXIgPSBtYWtlRWxlbWVudCgnZGl2JywgbnVsbCwge2NsYXNzTmFtZTogJ3RpZXItaG9sZGVyIHRpZXItaG9sZGVyLXBpbm5lZCd9KTtcbiAgICB0aGlzLnRpZXJIb2xkZXIgPSBtYWtlRWxlbWVudCgnZGl2JywgdGhpcy5tYWtlTG9hZGVyKDI0KSwge2NsYXNzTmFtZTogJ3RpZXItaG9sZGVyIHRpZXItaG9sZGVyLXJlc3QnfSk7XG5cbiAgICB0aGlzLnRpZXJIb2xkZXJIb2xkZXIgPSBtYWtlRWxlbWVudCgnZGl2JywgW3RoaXMucGlubmVkVGllckhvbGRlciwgdGhpcy50aWVySG9sZGVyXSwge2NsYXNzTmFtZTogJ3RpZXItaG9sZGVyLWhvbGRlcid9KTtcbiAgICB0aGlzLnN2Z0hvbGRlci5hcHBlbmRDaGlsZCh0aGlzLnRpZXJIb2xkZXJIb2xkZXIpO1xuXG4gICAgdGhpcy5iaHRtbFJvb3QgPSBtYWtlRWxlbWVudCgnZGl2Jyk7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVQb3dlcmVkQnkpIHtcbiAgICAgICAgdGhpcy5iaHRtbFJvb3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3NwYW4nLCBbJ1Bvd2VyZWQgYnkgJywgbWFrZUVsZW1lbnQoJ2EnLCAnQmlvZGFsbGlhbmNlJywge2hyZWY6ICdodHRwOi8vd3d3LmJpb2RhbGxpYW5jZS5vcmcvJ30pLCAnICcgKyBWRVJTSU9OXSwge2NsYXNzTmFtZTogJ3Bvd2VyZWQtYnknfSkpO1xuICAgICAgICB0aGlzLmJodG1sUm9vdC5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnc3BhbicsIFsnIHwgJywgbWFrZUVsZW1lbnQoJ2EnLCAnTGluayB0byBFbnNlbWJsJywge2hyZWY6ICdodHRwOi8vd3d3LmVuc2VtYmwub3JnLycsIGlkOiAnZW5zbGluaycsIHRhcmdldDogJ19uZXd0YWInfSksICcgJyBdLCB7Y2xhc3NOYW1lOiAncG93ZXJlZC1ieSd9KSk7XG4gICAgfVxuICAgIHRoaXMuYnJvd3NlckhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLmJodG1sUm9vdCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdGhpc0IucmVzaXplVmlld2VyKCk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgdGhpcy5ydWxlciA9IG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7Y2xhc3NOYW1lOiAnZ3VpZGVsaW5lJ30pXG4gICAgdGhpcy5ydWxlcjIgPSBtYWtlRWxlbWVudCgnZGl2JywgbnVsbCwge2NsYXNzTmFtZTogJ2d1aWRlbGluZSd9LCB7YmFja2dyb3VuZENvbG9yOiAnZ3JheScsIG9wYWNpdHk6ICcwLjUnLCB6SW5kZXg6IDg5OX0pO1xuICAgIHRoaXMudGllckhvbGRlckhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLnJ1bGVyKTtcbiAgICB0aGlzLnRpZXJIb2xkZXJIb2xkZXIuYXBwZW5kQ2hpbGQodGhpcy5ydWxlcjIpO1xuXG4gICAgdGhpcy5jaGFpbkNvbmZpZ3MgPSB0aGlzLmNoYWlucyB8fCB7fTtcbiAgICB0aGlzLmNoYWlucyA9IHt9O1xuICAgIGZvciAodmFyIGsgaW4gdGhpcy5jaGFpbkNvbmZpZ3MpIHtcbiAgICAgICAgdmFyIGNjID0gdGhpcy5jaGFpbkNvbmZpZ3Nba107XG4gICAgICAgIGlmIChjYyBpbnN0YW5jZW9mIENoYWluc2V0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnV0FSTklORzogU2hvdWxkIG5vIGxvbmdlciB1c2UgXCJuZXcgQ2hhaW5zZXRcIiBpbiBCaW9kYWxsaWFuY2UgY29uZmlndXJhdGlvbnMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFpbnNba10gPSBuZXcgQ2hhaW5zZXQoY2MpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlZFdvcmtlcnM7XG4gICAgaWYgKHRoaXMubWF4V29ya2VycyA+IDApIHtcbiAgICAgICAgdmFyIHB3ID0gW107XG4gICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCB0aGlzLm1heFdvcmtlcnM7ICsrZmkpXG4gICAgICAgICAgICBwdy5wdXNoKG1ha2VGZXRjaFdvcmtlcih0aGlzKSk7XG4gICAgICAgIHByb21pc2VkV29ya2VycyA9IFByb21pc2UuYWxsKHB3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlZFdvcmtlcnMgPSBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hXb3JrZXJzID0gbnVsbDtcbiAgICB0aGlzLm5leHRXb3JrZXIgPSAwO1xuICAgIHByb21pc2VkV29ya2Vycy50aGVuKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Jvb3RlZCAnICsgdi5sZW5ndGggKyAnIHdvcmtlcnMnKTtcbiAgICAgICAgdGhpc0IuZmV0Y2hXb3JrZXJzID0gdjsgXG4gICAgfSwgZnVuY3Rpb24odikge1xuICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGJvb3Qgd29ya2VycycsIHYpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzQi5icm93c2VySG9sZGVySG9sZGVyKS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHt0aGlzQi5yZWFsSW5pdDIoKX0sIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBvbGxJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzQi5icm93c2VySG9sZGVySG9sZGVyKS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLnJlYWxJbml0MigpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnJlYWxJbml0MiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICAvLyBSZW1vdmUgdGhlIGxvYWRlciBpY29uLCBpZiBuZWVkZWRcbiAgICByZW1vdmVDaGlsZHJlbih0aGlzLnRpZXJIb2xkZXIpO1xuICAgIHJlbW92ZUNoaWxkcmVuKHRoaXMucGlubmVkVGllckhvbGRlcik7XG5cbiAgICB0aGlzLmZlYXR1cmVQYW5lbFdpZHRoID0gdGhpcy50aWVySG9sZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHwgMDtcbiAgICB0aGlzLnNjYWxlID0gdGhpcy5mZWF0dXJlUGFuZWxXaWR0aCAvICh0aGlzLnZpZXdFbmQgLSB0aGlzLnZpZXdTdGFydCk7XG4gICAgaWYgKCF0aGlzLnpvb21NYXgpIHtcbiAgICAgICAgdGhpcy56b29tTWF4ID0gdGhpcy56b29tRXhwdCAqIE1hdGgubG9nKHRoaXMubWF4Vmlld1dpZHRoIC8gdGhpcy56b29tQmFzZSk7XG4gICAgICAgIHRoaXMuem9vbU1pbiA9IHRoaXMuem9vbUV4cHQgKiBNYXRoLmxvZyh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoIC8gMTAgLyB0aGlzLnpvb21CYXNlKTtcbiAgICB9XG4gICAgdGhpcy56b29tU2xpZGVyVmFsdWUgPSB0aGlzLnpvb21FeHB0ICogTWF0aC5sb2coKHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMSkgLyB0aGlzLnpvb21CYXNlKTtcblxuICAgIC8vIEV2ZW50IGhhbmRsZXJzXG5cbiAgICB0aGlzLnRpZXJIb2xkZXJIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChldi53aGVlbERlbHRhWCkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gZXYud2hlZWxEZWx0YVgvNTtcbiAgICAgICAgICAgIGlmICghdGhpc0IucmV2ZXJzZVNjcm9sbGluZykge1xuICAgICAgICAgICAgICAgIGRlbHRhID0gLWRlbHRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc0IubW92ZShkZWx0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXYud2hlZWxEZWx0YVkpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGV2LndoZWVsRGVsdGFZO1xuICAgICAgICAgICAgaWYgKHRoaXNCLnJldmVyc2VTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgICAgICBkZWx0YSA9IC1kZWx0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNCLnRpZXJIb2xkZXIuc2Nyb2xsVG9wICs9IGRlbHRhO1xuICAgICAgICB9XG4gICAgfSwgZmFsc2UpOyBcblxuICAgIHRoaXMudGllckhvbGRlckhvbGRlci5hZGRFdmVudExpc3RlbmVyKCdNb3pNb3VzZVBpeGVsU2Nyb2xsJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChldi5heGlzID09IDEpIHtcbiAgICAgICAgICAgIGlmIChldi5kZXRhaWwgIT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGV2LmRldGFpbC80O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzQi5yZXZlcnNlU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbHRhID0gLWRlbHRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzQi5tb3ZlKGRlbHRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGV2LmRldGFpbDtcbiAgICAgICAgICAgIGlmICghdGhpc0IucmV2ZXJzZVNjcm9sbGluZykge1xuICAgICAgICAgICAgICBkZWx0YSA9IC1kZWx0YTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpc0IudGllckhvbGRlci5zY3JvbGxUb3AgKz0gZGVsdGE7XG4gICAgICAgIH1cbiAgICB9LCBmYWxzZSk7IFxuXG4gICAgdGhpcy50aWVySG9sZGVySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihldikge3JldHVybiB0aGlzQi50b3VjaFN0YXJ0SGFuZGxlcihldil9LCBmYWxzZSk7XG4gICAgdGhpcy50aWVySG9sZGVySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGV2KSB7cmV0dXJuIHRoaXNCLnRvdWNoTW92ZUhhbmRsZXIoZXYpfSwgZmFsc2UpO1xuICAgIHRoaXMudGllckhvbGRlckhvbGRlci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGV2KSB7cmV0dXJuIHRoaXNCLnRvdWNoRW5kSGFuZGxlcihldil9LCBmYWxzZSk7XG4gICAgdGhpcy50aWVySG9sZGVySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgZnVuY3Rpb24oZXYpIHtyZXR1cm4gdGhpc0IudG91Y2hDYW5jZWxIYW5kbGVyKGV2KX0sIGZhbHNlKTtcblxuICAgIHZhciBrZXlIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2Nia2g6ICcgKyBldi5rZXlDb2RlKTtcbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPT0gMTMpIHsgLy8gZW50ZXJcbiAgICAgICAgICAgIHZhciBsYXlvdXRzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXNCLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpc0IudGllcnNbdGldO1xuICAgICAgICAgICAgICAgIGlmICh0LndhbnRlZExheW91dEhlaWdodCAmJiB0LndhbnRlZExheW91dEhlaWdodCAhPSB0LmxheW91dEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0LmxheW91dEhlaWdodCA9IHQud2FudGVkTGF5b3V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0LmNsaXBUaWVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGxheW91dHNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGF5b3V0c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzQi5hcnJhbmdlVGllcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDMyIHx8IGV2LmNoYXJDb2RlID09IDMyKSB7IC8vIHNwYWNlXG4gICAgICAgICAgICBpZiAoIXRoaXNCLmlzU25hcFpvb21pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzQi5pc1NuYXBab29taW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Wm9vbSA9ICh0aGlzQi5zYXZlZFpvb20gfHwgMC4wKSArIHRoaXNCLnpvb21NaW47XG4gICAgICAgICAgICAgICAgdGhpc0Iuc2F2ZWRab29tID0gdGhpc0Iuem9vbVNsaWRlclZhbHVlIC0gdGhpc0Iuem9vbU1pbjtcbiAgICAgICAgICAgICAgICB0aGlzQi56b29tU2xpZGVyVmFsdWUgPSBuZXdab29tO1xuICAgICAgICAgICAgICAgIHRoaXNCLnpvb20oTWF0aC5leHAoKDEuMCAqIG5ld1pvb20pIC8gdGhpc0Iuem9vbUV4cHQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc0IuaXNTbmFwWm9vbWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBuZXdab29tID0gKHRoaXNCLnNhdmVkWm9vbSB8fCAyMC4wKSArIHRoaXNCLnpvb21NaW47XG4gICAgICAgICAgICAgICAgdGhpc0Iuc2F2ZWRab29tID0gdGhpc0Iuem9vbVNsaWRlclZhbHVlIC0gdGhpc0Iuem9vbU1pbjtcbiAgICAgICAgICAgICAgICB0aGlzQi56b29tU2xpZGVyVmFsdWUgPSBuZXdab29tO1xuICAgICAgICAgICAgICAgIHRoaXNCLnpvb20oTWF0aC5leHAoKDEuMCAqIG5ld1pvb20pIC8gdGhpc0Iuem9vbUV4cHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNCLnNuYXBab29tTG9ja291dCA9IHRydWU7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTsgICAgICBcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDM5KSB7IC8vIHJpZ2h0IGFycm93XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXNCLnNjcm9sbEFycm93S2V5KGV2LCAtMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSAzNykgeyAvLyBsZWZ0IGFycm93XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXNCLnNjcm9sbEFycm93S2V5KGV2LCAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDM4IHx8IGV2LmtleUNvZGUgPT0gODcpIHsgLy8gdXAgYXJyb3cgfCB3XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ID0gdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0IDwgMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciB0dCA9IHRoaXNCLnRpZXJzW3N0XTtcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSB0dC5mb3JjZUhlaWdodCB8fCB0dC5zdWJ0aWVyc1swXS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKGNoID49IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgIHR0Lm1lcmdlQ29uZmlnKHtoZWlnaHQ6IGNoLTEwfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3QgPSB0aGlzQi5nZXRTZWxlY3RlZFRpZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoc3QgPCAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHR0ID0gdGhpc0IudGllcnNbc3RdO1xuICBcbiAgICAgICAgICAgICAgICBpZiAodHQucXVhbnRMZWFwVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aCA9IHR0LnN1YnRpZXJzWzBdLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRxID0gdHQuc3VidGllcnNbMF0ucXVhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHEpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHFtaW4gPSAxLjAgKiB0cS5taW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBxbWF4ID0gMS4wICogdHEubWF4O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBxc2NhbGUgPSAocW1heCAtIHFtaW4pIC8gdGg7XG4gICAgICAgICAgICAgICAgICAgIHR0Lm1lcmdlQ29uZmlnKHtxdWFudExlYXBUaHJlc2hvbGQ6IHFtaW4gKyAoKE1hdGgucm91bmQoKHR0LnF1YW50TGVhcFRocmVzaG9sZCAtIHFtaW4pL3FzY2FsZSl8MCkrMSkqcXNjYWxlfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHQubm90aWZ5KCdUaHJlc2hvbGQ6ICcgKyBmb3JtYXRRdWFudExhYmVsKHR0LnF1YW50TGVhcFRocmVzaG9sZCkpO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2LmFsdEtleSkge1xuICAgICAgICAgICAgICAgIHZhciBjbnQgPSB0aGlzQi5zZWxlY3RlZFRpZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoY250ID09IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHZhciBzdCA9IHRoaXNCLnNlbGVjdGVkVGllcnNbMF07XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRpZ3VvdXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBtdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzQi5zZWxlY3RlZFRpZXJzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgICAgICAgICBtdC5wdXNoKHRoaXNCLnRpZXJzW3RoaXNCLnNlbGVjdGVkVGllcnNbc2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaSA+IDAgJiYgdGhpc0Iuc2VsZWN0ZWRUaWVyc1tzaV0gLSB0aGlzQi5zZWxlY3RlZFRpZXJzW3NpIC0gMV0gIT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpZ3VvdXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGlndW91cyAmJiBzdCA8PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSA9IHRoaXNCLnNlbGVjdGVkVGllcnMubGVuZ3RoIC0gMTsgc2kgPj0gMDsgLS1zaSlcbiAgICAgICAgICAgICAgICAgICAgdGhpc0IudGllcnMuc3BsaWNlKHRoaXNCLnNlbGVjdGVkVGllcnNbc2ldLCAxKTtcblxuICAgICAgICAgICAgICAgIHRoaXNCLnNlbGVjdGVkVGllcnMuc3BsaWNlKDAsIGNudCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXAgPSBjb250aWd1b3VzID8gc3QgLSAxIDogc3Q7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IG10Lmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi50aWVycy5zcGxpY2UoaXArc2ksIDAsIG10W3NpXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLnNlbGVjdGVkVGllcnMucHVzaChpcCArIHNpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzQi5tYXJrU2VsZWN0ZWRUaWVycygpO1xuICAgICAgICAgICAgICAgIHRoaXNCLm5vdGlmeVRpZXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzQi5yZW9yZGVyVGllcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlUaWVyKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzdCA9IHRoaXNCLmdldFNlbGVjdGVkVGllcigpO1xuICAgICAgICAgICAgICAgIGlmIChzdCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2V0U2VsZWN0ZWRUaWVyKHN0IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc3QgPSB0aGlzQi50aWVyc1t0aGlzQi5nZXRTZWxlY3RlZFRpZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBuc3Qucm93Lm9mZnNldFRvcCwgYm90dG9tID0gdG9wICsgbnN0LnJvdy5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3AgPCB0aGlzQi50aWVySG9sZGVyLnNjcm9sbFRvcCB8fCBib3R0b20gPiB0aGlzQi50aWVySG9sZGVyLnNjcm9sbFRvcCArIHRoaXNCLnRpZXJIb2xkZXIub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi50aWVySG9sZGVyLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLm5vdGlmeVRpZXJTZWxlY3Rpb25XcmFwKC0xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSA0MCB8fCBldi5rZXlDb2RlID09IDgzKSB7IC8vIGRvd24gYXJyb3cgfCBzXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ID0gdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0IDwgMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciB0dCA9IHRoaXNCLnRpZXJzW3N0XTtcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSB0dC5mb3JjZUhlaWdodCB8fCB0dC5zdWJ0aWVyc1swXS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdHQubWVyZ2VDb25maWcoe2hlaWdodDogY2grMTB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ID0gdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0IDwgMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciB0dCA9IHRoaXNCLnRpZXJzW3N0XTtcblxuICAgICAgICAgICAgICAgIGlmICh0dC5xdWFudExlYXBUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoID0gdHQuc3VidGllcnNbMF0uaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHEgPSB0dC5zdWJ0aWVyc1swXS5xdWFudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcW1pbiA9IDEuMCAqIHRxLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHFtYXggPSAxLjAgKiB0cS5tYXg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxc2NhbGUgPSAocW1heCAtIHFtaW4pIC8gdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ID0gTWF0aC5yb3VuZCgodHQucXVhbnRMZWFwVGhyZXNob2xkIC0gcW1pbikvcXNjYWxlKXwwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0dC5tZXJnZUNvbmZpZyh7cXVhbnRMZWFwVGhyZXNob2xkOiBxbWluICsgKGl0LTEpKnFzY2FsZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHQubm90aWZ5KCdUaHJlc2hvbGQ6ICcgKyBmb3JtYXRRdWFudExhYmVsKHR0LnF1YW50TGVhcFRocmVzaG9sZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChldi5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY250ID0gdGhpc0Iuc2VsZWN0ZWRUaWVycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGNudCA9PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB2YXIgc3QgPSB0aGlzQi5zZWxlY3RlZFRpZXJzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBkaXNjb250aWcgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBtdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzQi5zZWxlY3RlZFRpZXJzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgICAgICAgICBtdC5wdXNoKHRoaXNCLnRpZXJzW3RoaXNCLnNlbGVjdGVkVGllcnNbc2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaSA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNjb250aWcgKz0gKHRoaXNCLnNlbGVjdGVkVGllcnNbc2ldIC0gdGhpc0Iuc2VsZWN0ZWRUaWVyc1tzaSAtIDFdIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjb250aWd1b3VzID0gZGlzY29udGlnID09IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGlndW91cyAmJiBzdCArIGNudCA+PSB0aGlzQi50aWVycy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gdGhpc0Iuc2VsZWN0ZWRUaWVycy5sZW5ndGggLSAxOyBzaSA+PSAwOyAtLXNpKVxuICAgICAgICAgICAgICAgICAgICB0aGlzQi50aWVycy5zcGxpY2UodGhpc0Iuc2VsZWN0ZWRUaWVyc1tzaV0sIDEpO1xuXG4gICAgICAgICAgICAgICAgdGhpc0Iuc2VsZWN0ZWRUaWVycy5zcGxpY2UoMCwgY250KTtcblxuICAgICAgICAgICAgICAgIHZhciBpcCA9IGNvbnRpZ3VvdXMgPyBzdCArIDEgOiBzdCArIGRpc2NvbnRpZztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgbXQubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLnRpZXJzLnNwbGljZShpcCtzaSwgMCwgbXRbc2ldKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2VsZWN0ZWRUaWVycy5wdXNoKGlwICsgc2kpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXNCLm1hcmtTZWxlY3RlZFRpZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0Iubm90aWZ5VGllclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXNCLnJlb3JkZXJUaWVycygpO1xuICAgICAgICAgICAgICAgIHRoaXNCLm5vdGlmeVRpZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ID0gdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0IDwgdGhpc0IudGllcnMubGVuZ3RoIC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLnNldFNlbGVjdGVkVGllcihzdCArIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnN0ID0gdGhpc0IudGllcnNbdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gbnN0LnJvdy5vZmZzZXRUb3AsIGJvdHRvbSA9IHRvcCArIG5zdC5yb3cub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wIDwgdGhpc0IudGllckhvbGRlci5zY3JvbGxUb3AgfHwgYm90dG9tID4gdGhpc0IudGllckhvbGRlci5zY3JvbGxUb3AgKyB0aGlzQi50aWVySG9sZGVyLm9mZnNldEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IudGllckhvbGRlci5zY3JvbGxUb3AgPSBNYXRoLm1pbih0b3AsIGJvdHRvbSAtIHRoaXNCLnRpZXJIb2xkZXIub2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDE4NyB8fCBldi5rZXlDb2RlID09IDYxKSB7IC8vICtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpc0Iuem9vbVN0ZXAoLTEwKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDE4OSB8fCBldi5rZXlDb2RlID09IDE3MykgeyAvLyAtXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXNCLnpvb21TdGVwKDEwKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDczIHx8IGV2LmtleUNvZGUgPT0gMTA1KSB7IC8vIGlcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIHN0ID0gdGhpc0IuZ2V0U2VsZWN0ZWRUaWVyKCk7XG4gICAgICAgICAgICBpZiAoc3QgPCAwKSByZXR1cm47XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXNCLnRpZXJzW3N0XTtcbiAgICAgICAgICAgIGlmICghdC5pbmZvVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHQuaW5mb0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgdC51cGRhdGVIZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB0LmluZm9WaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdC5pbmZvRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIHQudXBkYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdC5pbmZvVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT0gODQgfHwgZXYua2V5Q29kZSA9PSAxMTYpIHsgLy8gdFxuICAgICAgICAgICAgdmFyIGJ1bXBTdGF0dXM7XG4gICAgICAgICAgICBpZiggZXYuc2hpZnRLZXkgKXtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpc0IudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpc0IudGllcnNbdGldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodC5kYXNTb3VyY2UuY29sbGFwc2VTdXBlckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1bXBTdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bXBTdGF0dXMgPSAhdC5idW1wZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmJ1bXBlZCA9IGJ1bXBTdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmxheW91dFdhc0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdC51cGRhdGVMYWJlbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSkge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHZhciBzdCA9IHRoaXNCLmdldFNlbGVjdGVkVGllcigpO1xuICAgICAgICAgICAgICAgIGlmIChzdCA8IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXNCLnRpZXJzW3N0XTtcbiAgICAgICAgICAgICAgICBpZiAodC5kYXNTb3VyY2UuY29sbGFwc2VTdXBlckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVtcFN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidW1wU3RhdHVzID0gIXQuYnVtcGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHQuYnVtcGVkID0gYnVtcFN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgdC5sYXlvdXRXYXNEb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHQuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB0LnVwZGF0ZUxhYmVsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT0gNzcgfHwgZXYua2V5Q29kZSA9PSAxMDkpIHsgLy8gbVxuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkgJiYgdGhpc0Iuc2VsZWN0ZWRUaWVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpc0IubWVyZ2VTZWxlY3RlZFRpZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSA2OCB8fCBldi5rZXlDb2RlID09IDEwMCkgeyAvLyBkXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3QgPSB0aGlzQi5nZXRTZWxlY3RlZFRpZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoc3QgPCAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpc0IuYWRkVGllcih0aGlzQi50aWVyc1tzdF0uZGFzU291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09IDgwIHx8IGV2LmtleUNvZGUgPT0gMTEyKSB7IC8vIHBcbiAgICAgICAgICAgIGlmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGJlIGNhcmVmdWwgYmVjYXVzZSBvcmRlciBvZiB0aWVycyBjb3VsZCBjaGFuZ2VcbiAgICAgICAgICAgICAgICAvLyBvbmNlIHdlIHN0YXJ0IHVwZGF0aW5nIHBpbm5pbmcuXG4gICAgICAgICAgICAgICAgdmFyIHR0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3QgPSAwOyBzdCA8IHRoaXNCLnNlbGVjdGVkVGllcnMubGVuZ3RoOyArK3N0KSB7XG4gICAgICAgICAgICAgICAgICAgIHR0LnB1c2godGhpc0IudGllcnNbdGhpc0Iuc2VsZWN0ZWRUaWVyc1tzdF1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHR0Lmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgICAgICB0dFt0aV0ubWVyZ2VDb25maWcoe3Bpbm5lZDogIXR0W3RpXS5waW5uZWR9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygna2V5OiAnICsgZXYua2V5Q29kZSArICc7IGNoYXI6ICcgKyBldi5jaGFyQ29kZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBrZXlVcEhhbmRsZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICB0aGlzQi5zbmFwWm9vbUxvY2tvdXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmJyb3dzZXJIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbihldikge1xuICAgICAgICB0aGlzQi5icm93c2VySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlIYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgZmFsc2UpO1xuICAgIHRoaXMuYnJvd3NlckhvbGRlci5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdGhpc0IuYnJvd3NlckhvbGRlci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5SGFuZGxlciwgZmFsc2UpO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIC8vIFBvcHVwIHN1cHBvcnQgKGRvZXMgdGhpcyByZWFsbHkgYmVsb25nIGhlcmU/IEZJWE1FKVxuICAgIHRoaXMuaFBvcHVwSG9sZGVyID0gbWFrZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuaFBvcHVwSG9sZGVyLnN0eWxlWydmb250LWZhbWlseSddID0gJ2hlbHZldGljYSc7XG4gICAgdGhpcy5oUG9wdXBIb2xkZXIuc3R5bGVbJ2ZvbnQtc2l6ZSddID0gJzEycHQnO1xuICAgIHRoaXMuaFBvcHVwSG9sZGVyLmNsYXNzTGlzdC5hZGQoJ2RhbGxpYW5jZScpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5oUG9wdXBIb2xkZXIpO1xuXG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLnNvdXJjZXMubGVuZ3RoOyArK3QpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlc1t0XTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5yZXN0b3JlZENvbmZpZ3MpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHRoaXMucmVzdG9yZWRDb25maWdzW3RdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzb3VyY2UuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWFrZVRpZXIoc291cmNlLCBjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpc0IuYXJyYW5nZVRpZXJzKCk7XG4gICAgdGhpc0IucmVmcmVzaCgpO1xuICAgIHRoaXNCLnNldFNlbGVjdGVkVGllcigxKTtcblxuICAgIHRoaXNCLnBvc2l0aW9uUnVsZXIoKTtcblxuXG4gICAgdmFyIHNzID0gdGhpcy5nZXRTZXF1ZW5jZVNvdXJjZSgpO1xuICAgIGlmIChzcykge1xuICAgICAgICBzcy5nZXRTZXFJbmZvKHRoaXMuY2hyLCBmdW5jdGlvbihzaSkge1xuICAgICAgICAgICAgdGhpc0IuY3VycmVudFNlcU1heCA9IHNpLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5xdWVyeVJlZ2lzdHJ5KCk7XG4gICAgZm9yICh2YXIgbSBpbiB0aGlzLmNoYWlucykge1xuICAgICAgICB0aGlzLnF1ZXJ5UmVnaXN0cnkobSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaHVicykge1xuICAgICAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgdGhpcy5odWJzLmxlbmd0aDsgKytoaSkge1xuICAgICAgICAgICAgdmFyIGhjID0gdGhpcy5odWJzW2hpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGMgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBoYyA9IHt1cmw6IGhjfTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIChmdW5jdGlvbihoYykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3RUcmFja0h1YihoYy51cmwsIGZ1bmN0aW9uKGh1YiwgZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGRiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhjLmdlbm9tZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZGIgPSBodWIuZ2Vub21lc1toYy5nZW5vbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZGIgPSBodWIuZ2Vub21lc1t0aGlzQi5jb29yZFN5c3RlbS51Y3NjTmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGMubWFwcGluZykgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkYi5tYXBwaW5nID0gaGMubWFwcGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5odWJPYmplY3RzLnB1c2godGRiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGhjKTtcbiAgICAgICAgICAgIH0pKGhjKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZ1bGxTY3JlZW4pIHtcbiAgICAgICAgdGhpcy5zZXRGdWxsU2NyZWVuSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0YXR1c1Jlc3RvcmVkICYmIHRoaXMuc3RvcmVTdGF0dXMpIHtcbiAgICAgICAgdGhpcy5zdG9yZVN0YXR1cygpO1xuICAgIH1cblxuICAgIC8vIFBpbmcgYW55IGluaXQgbGlzdGVuZXJzLlxuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLmluaXRMaXN0ZW5lcnMubGVuZ3RoOyArK2lpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmluaXRMaXN0ZW5lcnNbaWldLmNhbGwodGhpcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBcbi8vIGlPUyB0b3VjaCBzdXBwb3J0XG5cbkJyb3dzZXIucHJvdG90eXBlLnRvdWNoU3RhcnRIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICB0aGlzLnRvdWNoT3JpZ2luWCA9IGV2LnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdGhpcy50b3VjaE9yaWdpblkgPSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIGlmIChldi50b3VjaGVzLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgIHZhciBzZXAgPSBNYXRoLmFicyhldi50b3VjaGVzWzBdLnBhZ2VYIC0gZXYudG91Y2hlc1sxXS5wYWdlWCk7XG4gICAgICAgIHRoaXMuem9vbWluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuem9vbUxhc3RTZXAgPSB0aGlzLnpvb21Jbml0aWFsU2VwID0gc2VwO1xuICAgICAgICB0aGlzLnpvb21Jbml0aWFsU2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUudG91Y2hNb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgXG4gICAgaWYgKGV2LnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgdmFyIHRvdWNoWCA9IGV2LnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICAgIHZhciB0b3VjaFkgPSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICBpZiAodGhpcy50b3VjaE9yaWdpblggJiYgdG91Y2hYICE9IHRoaXMudG91Y2hPcmlnaW5YKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmUodG91Y2hYIC0gdGhpcy50b3VjaE9yaWdpblgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRvdWNoT3JpZ2luWSAmJiB0b3VjaFkgIT0gdGhpcy50b3VjaE9yaWdpblkpIHtcbiAgICAgICAgICAgIHRoaXMudGllckhvbGRlci5zY3JvbGxUb3AgLT0gKHRvdWNoWSAtIHRoaXMudG91Y2hPcmlnaW5ZKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvdWNoT3JpZ2luWCA9IHRvdWNoWDtcbiAgICAgICAgdGhpcy50b3VjaE9yaWdpblkgPSB0b3VjaFk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnpvb21pbmcgJiYgZXYudG91Y2hlcy5sZW5ndGggPT0gMikge1xuICAgICAgICB2YXIgc2VwID0gTWF0aC5hYnMoZXYudG91Y2hlc1swXS5wYWdlWCAtIGV2LnRvdWNoZXNbMV0ucGFnZVgpO1xuICAgICAgICBpZiAoc2VwICE9IHRoaXMuem9vbUxhc3RTZXApIHtcbiAgICAgICAgICAgIHZhciBjcCA9IChldi50b3VjaGVzWzBdLnBhZ2VYICsgZXYudG91Y2hlc1sxXS5wYWdlWCkvMjtcbiAgICAgICAgICAgIHZhciBzY3AgPSB0aGlzLnZpZXdTdGFydCArIChjcC90aGlzLnNjYWxlKXwwXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gdGhpcy56b29tSW5pdGlhbFNjYWxlICogKHNlcC90aGlzLnpvb21Jbml0aWFsU2VwKTtcbiAgICAgICAgICAgIHRoaXMudmlld1N0YXJ0ID0gc2NwIC0gKGNwL3RoaXMuc2NhbGUpfDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGllcnMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICB0aGlzLnRpZXJzW2ldLmRyYXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnpvb21MYXN0U2VwID0gc2VwO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUudG91Y2hFbmRIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUudG91Y2hDYW5jZWxIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbn1cblxuXG5Ccm93c2VyLnByb3RvdHlwZS5tYWtlVGllciA9IGZ1bmN0aW9uKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbE1ha2VUaWVyKHNvdXJjZSwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUuc3RhY2sgfHwgZSk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZWFsTWFrZVRpZXIgPSBmdW5jdGlvbihzb3VyY2UsIGNvbmZpZykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdmFyIGJhY2tncm91bmQgPSBudWxsO1xuICAgIGlmICh0aGlzLnRpZXJCYWNrZ3JvdW5kQ29sb3JzKSB7XG4gICAgICAgIGJhY2tncm91bmQgPSB0aGlzLnRpZXJCYWNrZ3JvdW5kQ29sb3JzW3RoaXMudGllcnMubGVuZ3RoICUgdGhpcy50aWVyQmFja2dyb3VuZENvbG9ycy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHZhciB0aWVyID0gbmV3IERhc1RpZXIodGhpcywgc291cmNlLCBjb25maWcsIGJhY2tncm91bmQpO1xuICAgIHRpZXIub29yaWdpbiA9IHRoaXMudmlld1N0YXJ0XG5cbiAgICB2YXIgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIHZhciBkcmFnT3JpZ2luLCBkcmFnTW92ZU9yaWdpbjtcbiAgICB2YXIgaG92ZXJUaW1lb3V0O1xuXG4gICAgdmFyIGZlYXR1cmVMb29rdXAgPSBmdW5jdGlvbihyeCwgcnkpIHtcbiAgICAgICAgdmFyIHN0ID0gdGllci5zdWJ0aWVycztcbiAgICAgICAgaWYgKCFzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0aSA9IDA7XG4gICAgICAgIHJ5IC09IHRpZXIucGFkZGluZzs7XG4gICAgICAgIHdoaWxlIChzdGkgPCBzdC5sZW5ndGggJiYgcnkgPiBzdFtzdGldLmhlaWdodCAmJiBzdGkgPCAoc3QubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgIHJ5ID0gcnkgLSBzdFtzdGldLmhlaWdodCAtIHRpZXIucGFkZGluZztcbiAgICAgICAgICAgICsrc3RpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGkgPj0gc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2x5cGhzID0gc3Rbc3RpXS5nbHlwaHM7XG4gICAgICAgIHZhciB2aWV3Q2VudGVyID0gKHRoaXNCLnZpZXdTdGFydCArIHRoaXNCLnZpZXdFbmQpLzI7XG4gICAgICAgIHZhciBvZmZzZXQgPSAodGllci5nbHlwaENhY2hlT3JpZ2luIC0gdGhpc0Iudmlld1N0YXJ0KSp0aGlzQi5zY2FsZTtcbiAgICAgICAgcnggLT0gb2Zmc2V0O1xuICAgICAgIFxuICAgICAgICByZXR1cm4gZ2x5cGhMb29rdXAoZ2x5cGhzLCByeCwgcnkpO1xuICAgIH1cblxuICAgIHZhciBkcmFnTW92ZUhhbmRsZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIHJ4ID0gZXYuY2xpZW50WDtcbiAgICAgICAgaWYgKHRpZXIuZGFzU291cmNlLnRpZXJfdHlwZSAhPT0gJ3NlcXVlbmNlJyAmJiByeCAhPSBkcmFnTW92ZU9yaWdpbikge1xuICAgICAgICAgICAgdGhpc0IubW92ZSgocnggLSBkcmFnTW92ZU9yaWdpbikpO1xuICAgICAgICAgICAgZHJhZ01vdmVPcmlnaW4gPSByeDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzQi5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ1VwSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkcmFnTW92ZUhhbmRsZXIsIHRydWUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGRyYWdVcEhhbmRsZXIsIHRydWUpO1xuICAgIH1cbiAgICAgICAgXG5cbiAgICB0aWVyLnZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHRoaXNCLmJyb3dzZXJIb2xkZXIuZm9jdXMoKTtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGJyID0gdGllci5yb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciByeCA9IGV2LmNsaWVudFgsIHJ5ID0gZXYuY2xpZW50WTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZ01vdmVIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBkcmFnVXBIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgZHJhZ09yaWdpbiA9IGRyYWdNb3ZlT3JpZ2luID0gcng7XG4gICAgICAgIHRoaXNCLmlzRHJhZ2dpbmcgPSBmYWxzZTsgLy8gTm90IGRyYWdnaW5nIHVudGlsIGEgbW92ZW1lbnQgZXZlbnQgYXJyaXZlcy5cbiAgICB9LCBmYWxzZSk7XG5cbiAgICB0aWVyLnZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHZhciBiciA9IHRpZXIucm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgcnggPSBldi5jbGllbnRYIC0gYnIubGVmdCwgcnkgPSBldi5jbGllbnRZIC0gYnIudG9wO1xuXG4gICAgICAgIGlmIChob3ZlclRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIC8vIGlmICh0aWVyLmRhc1NvdXJjZS50aWVyX3R5cGUgIT09ICdzZXF1ZW5jZScgJiYgcnggIT0gZHJhZ01vdmVPcmlnaW4pIHtcbiAgICAgICAgICAgIC8vICAgIHRoaXNCLm1vdmUoKHJ4IC0gZHJhZ01vdmVPcmlnaW4pKTtcbiAgICAgICAgICAgIC8vICAgIGRyYWdNb3ZlT3JpZ2luID0gcng7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob3ZlclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBoaXQgPSBmZWF0dXJlTG9va3VwKHJ4LCByeSk7XG4gICAgICAgICAgICAgICAgaWYgKGhpdCAmJiBoaXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlGZWF0dXJlSG92ZXIoZXYsIGhpdFtoaXQubGVuZ3RoIC0gMV0sIGhpdCwgdGllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBkb3VibGVDbGlja1RpbWVvdXQgPSBudWxsO1xuICAgIHRpZXIudmlld3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHZhciBiciA9IHRpZXIucm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgcnggPSBldi5jbGllbnRYIC0gYnIubGVmdCwgcnkgPSBldi5jbGllbnRZIC0gYnIudG9wO1xuXG4gICAgICAgIHZhciBoaXQgPSBmZWF0dXJlTG9va3VwKHJ4LCByeSk7XG4gICAgICAgIGlmIChoaXQgJiYgaGl0Lmxlbmd0aCA+IDAgJiYgIXRoaXNCLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIGlmIChkb3VibGVDbGlja1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZG91YmxlQ2xpY2tUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBkb3VibGVDbGlja1RpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXNCLmZlYXR1cmVEb3VibGVDbGljayhoaXQsIHJ4LCByeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLm5vdGlmeUZlYXR1cmUoZXYsIGhpdFtoaXQubGVuZ3RoLTFdLCBoaXQsIHRpZXIpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpc0IuaXNEcmFnZ2luZyAmJiByeCAhPSBkcmFnT3JpZ2luICYmIHRpZXIuZGFzU291cmNlLnRpZXJfdHlwZSA9PT0gJ3NlcXVlbmNlJykge1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzQi52aWV3U3RhcnQgKyAocngvdGhpc0Iuc2NhbGUpO1xuICAgICAgICAgICAgdmFyIGIgPSB0aGlzQi52aWV3U3RhcnQgKyAoZHJhZ09yaWdpbi90aGlzQi5zY2FsZSk7XG5cbiAgICAgICAgICAgIHZhciBtaW4sIG1heDtcbiAgICAgICAgICAgIGlmIChhIDwgYikge1xuICAgICAgICAgICAgICAgIG1pbiA9IGF8MDsgbWF4ID0gYnwwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBifDA7IG1heCA9IGF8MDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpc0Iubm90aWZ5UmVnaW9uU2VsZWN0KHRoaXNCLmNociwgbWluLCBtYXgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNCLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICB0aWVyLnZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgdGllci5yZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXNCLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgaWYgKHRoaXNCLnRpZXJzW3RpXSA9PT0gdGllcikge1xuICAgICAgICAgICAgICAgIHRoaXNCLnJlbW92ZVRpZXIoe2luZGV4OiB0aX0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgZmFsc2UpO1xuICAgIHRpZXIubmFtZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgdmFyIGhpdFRpZXIgPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0aGlzQi50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc0IudGllcnNbdGldID09PSB0aWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpdFRpZXIgPSB0aTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhpdFRpZXIgPj0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpc0Iuc2VsZWN0ZWRUaWVycy5pbmRleE9mKGhpdFRpZXIpO1xuICAgICAgICAgICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2VsZWN0ZWRUaWVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2VsZWN0ZWRUaWVycy5wdXNoKGhpdFRpZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5zZWxlY3RlZFRpZXJzLnNvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0IubWFya1NlbGVjdGVkVGllcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlUaWVyU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpc0Iuc2VsZWN0ZWRUaWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmJyb3dzZXJIb2xkZXIuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlUaWVyU2VsZWN0aW9uV3JhcCgtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXNCLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzQi50aWVyc1t0aV0gPT09IHRpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0IuYnJvd3NlckhvbGRlci5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0Iuc2VsZWN0ZWRUaWVycy5sZW5ndGggIT0gMSB8fCB0aGlzQi5zZWxlY3RlZFRpZXJzWzBdICE9IHRpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5zZXRTZWxlY3RlZFRpZXIodGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRpZXIuaW5mb1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aWVyLmluZm9FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHRpZXIudXBkYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdGllci5pbmZvVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpZXIuaW5mb0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB0aWVyLnVwZGF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHRpZXIuaW5mb1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIGZhbHNlKTtcbiAgICB0aWVyLmJ1bXBCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGJ1bXBTdGF0dXM7XG4gICAgICAgIHZhciB0ID0gdGllcjtcbiAgICAgICAgaWYgKHQuZGFzU291cmNlLmNvbGxhcHNlU3VwZXJHcm91cHMpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGJ1bXBTdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJ1bXBTdGF0dXMgPSAhdC5idW1wZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0LmJ1bXBlZCA9IGJ1bXBTdGF0dXM7XG4gICAgICAgICAgICB0LmxheW91dFdhc0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHQuZHJhdygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0LnVwZGF0ZUxhYmVsKCk7XG4gICAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICBcbiAgICB2YXIgZHJhZ0xhYmVsO1xuICAgIHZhciBkcmFnVGllckhvbGRlcjtcbiAgICB2YXIgZHJhZ1RpZXJIb2xkZXJTY3JvbGxMaW1pdDtcbiAgICB2YXIgdGllck9yZGluYWw7XG4gICAgdmFyIHlBdExhc3RSZW9yZGVyO1xuICAgIHZhciB0aWVyc1dlcmVSZW9yZGVyZWQgPSBmYWxzZTtcblxuICAgIHZhciBsYWJlbERyYWdIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdmFyIGxhYmVsID0gdGllci5sYWJlbDtcblxuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCFkcmFnTGFiZWwpIHtcbiAgICAgICAgICAgIGlmICh0aWVyLnBpbm5lZCkge1xuICAgICAgICAgICAgICAgIGRyYWdUaWVySG9sZGVyID0gdGhpc0IucGlubmVkVGllckhvbGRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJhZ1RpZXJIb2xkZXIgPSB0aGlzQi50aWVySG9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhZ1RpZXJIb2xkZXJTY3JvbGxMaW1pdCA9IGRyYWdUaWVySG9sZGVyLnNjcm9sbEhlaWdodCAtIGRyYWdUaWVySG9sZGVyLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgZHJhZ0xhYmVsID0gbGFiZWwuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgZHJhZ0xhYmVsLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgIGRyYWdUaWVySG9sZGVyLmFwcGVuZENoaWxkKGRyYWdMYWJlbCk7XG4gICAgICAgICAgICBsYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0aGlzQi50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc0IudGllcnNbdGldID09PSB0aWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpZXJPcmRpbmFsID0gdGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgeUF0TGFzdFJlb3JkZXIgPSBldi5jbGllbnRZO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaG9sZGVyQkNSID0gZHJhZ1RpZXJIb2xkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGRyYWdMYWJlbC5zdHlsZS5sZWZ0ID0gKGxhYmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBob2xkZXJCQ1IubGVmdCkgKyAncHgnOyBcbiAgICAgICAgZHJhZ0xhYmVsLnN0eWxlLnRvcCA9IChldi5jbGllbnRZIC0gaG9sZGVyQkNSLnRvcCArIGRyYWdUaWVySG9sZGVyLnNjcm9sbFRvcCAtIDEwKSArICdweCc7XG5cbiAgICAgICAgdmFyIHB0eSA9IGV2LmNsaWVudFkgLSBob2xkZXJCQ1IudG9wICsgZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wO1xuICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpc0IudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICB2YXIgdHQgPSB0aGlzQi50aWVyc1t0aV07XG4gICAgICAgICAgICBpZiAodHQucGlubmVkIF4gdGllci5waW5uZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7IFxuXG4gICAgICAgICAgICB2YXIgdHRyID0gdHQucm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcHR5IC09ICh0dHIuYm90dG9tIC0gdHRyLnRvcCk7XG4gICAgICAgICAgICBpZiAocHR5IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aSA8IHRpZXJPcmRpbmFsICYmIGV2LmNsaWVudFkgPCB5QXRMYXN0UmVvcmRlciB8fCB0aSA+IHRpZXJPcmRpbmFsICYmIGV2LmNsaWVudFkgPiB5QXRMYXN0UmVvcmRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi53aXRoUHJlc2VydmVkU2VsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IudGllcnMuc3BsaWNlKHRpZXJPcmRpbmFsLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLnRpZXJzLnNwbGljZSh0aSwgMCwgdGllcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRpZXJPcmRpbmFsID0gdGk7XG4gICAgICAgICAgICAgICAgICAgIHlBdExhc3RSZW9yZGVyID0gZXYuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0IucmVvcmRlclRpZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYWdUaWVySG9sZGVyLmFwcGVuZENoaWxkKGRyYWdMYWJlbCk7IC8vIEJlY2F1c2UgcmVvcmRlclRpZXJzIHJlbW92ZXMgYWxsIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgICAgICB0aWVyc1dlcmVSZW9yZGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkcmFnTGFiZWwub2Zmc2V0VG9wIDwgZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICBkcmFnVGllckhvbGRlci5zY3JvbGxUb3AgLT0gKGRyYWdUaWVySG9sZGVyLnNjcm9sbFRvcCAtIGRyYWdMYWJlbC5vZmZzZXRUb3ApO1xuICAgICAgICB9IGVsc2UgaWYgKChkcmFnTGFiZWwub2Zmc2V0VG9wICsgZHJhZ0xhYmVsLm9mZnNldEhlaWdodCkgPiAoZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wICsgZHJhZ1RpZXJIb2xkZXIub2Zmc2V0SGVpZ2h0KSkge1xuICAgICAgICAgICAgZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wID0gTWF0aC5taW4oZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZHJhZ0xhYmVsLm9mZnNldFRvcCArIGRyYWdMYWJlbC5vZmZzZXRIZWlnaHQpIC0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZHJhZ1RpZXJIb2xkZXIuc2Nyb2xsVG9wICsgZHJhZ1RpZXJIb2xkZXIub2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdUaWVySG9sZGVyU2Nyb2xsTGltaXQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBsYWJlbFJlbGVhc2VIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgdmFyIGxhYmVsID0gdGllci5sYWJlbDtcblxuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGRyYWdMYWJlbCkge1xuICAgICAgICAgICAgZHJhZ0xhYmVsLnN0eWxlLmN1cnNvciA9ICdhdXRvJztcbiAgICAgICAgICAgIGRyYWdUaWVySG9sZGVyLnJlbW92ZUNoaWxkKGRyYWdMYWJlbCk7XG4gICAgICAgICAgICBkcmFnTGFiZWwgPSBudWxsO1xuICAgICAgICAgICAgbGFiZWwuc3R5bGUudmlzaWJpbGl0eSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbGFiZWxEcmFnSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbGFiZWxSZWxlYXNlSGFuZGxlciwgZmFsc2UpO1xuXG4gICAgICAgIGlmICh0aWVyc1dlcmVSZW9yZGVyZWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0aGlzQi50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc0IudGllcnNbdGldID09IHRpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2V0U2VsZWN0ZWRUaWVyKHRpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc0Iubm90aWZ5VGllcigpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRpZXIubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRpZXJzV2VyZVJlb3JkZXJlZCA9IGZhbHNlO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBsYWJlbERyYWdIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBsYWJlbFJlbGVhc2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgdGhpcy50aWVycy5wdXNoKHRpZXIpOyAgLy8gTkIgdGhpcyBjdXJyZW50bHkgdGVsbHMgYW55IGV4dGFudCBrbm93blNwYWNlIGFib3V0IHRoZSBuZXcgdGllci5cbiAgICBcbiAgICB0aWVyLmluaXQoKTsgLy8gZmV0Y2hlcyBzdHlsZXNoZWV0XG4gICAgdGllci5jdXJyZW50bHlIZWlnaHQgPSA1MDtcbiAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xuICAgIHRpZXIudXBkYXRlTGFiZWwoKTtcblxuICAgIGlmICh0aWVyLmZlYXR1cmVTb3VyY2UgJiYgdGllci5mZWF0dXJlU291cmNlLmFkZEFjdGl2aXR5TGlzdGVuZXIpIHtcbiAgICAgICAgdGllci5mZWF0dXJlU291cmNlLmFkZEFjdGl2aXR5TGlzdGVuZXIoZnVuY3Rpb24oYnVzeSkge1xuICAgICAgICAgICAgaWYgKGJ1c3kgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGllci5sb2FkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aWVyLmxvYWRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc0IucGluZ0FjdGl2aXR5KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRpZXIuX3VwZGF0ZUZyb21Db25maWcoKTtcbiAgICB0aGlzLnJlb3JkZXJUaWVycygpO1xuXG4gICAgcmV0dXJuIHRpZXI7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnJlb3JkZXJUaWVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJlbW92ZUNoaWxkcmVuKHRoaXMudGllckhvbGRlcik7XG4gICAgcmVtb3ZlQ2hpbGRyZW4odGhpcy5waW5uZWRUaWVySG9sZGVyKTtcbiAgICB2YXIgaGFzUGlubmVkID0gZmFsc2U7XG4gICAgdmFyIHBpbm5lZFRpZXJzID0gW10sIHVucGlubmVkVGllcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnRpZXJzW2ldO1xuICAgICAgICBpZiAodC5waW5uZWQpIHtcbiAgICAgICAgICAgIHBpbm5lZFRpZXJzLnB1c2godCk7XG4gICAgICAgICAgICB0aGlzLnBpbm5lZFRpZXJIb2xkZXIuYXBwZW5kQ2hpbGQodGhpcy50aWVyc1tpXS5yb3cpO1xuICAgICAgICAgICAgaGFzUGlubmVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVucGlubmVkVGllcnMucHVzaCh0KTtcbiAgICAgICAgICAgIHRoaXMudGllckhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLnRpZXJzW2ldLnJvdyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLndpdGhQcmVzZXJ2ZWRTZWxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGllcnMuc3BsaWNlKDAsIHRoaXMudGllcnMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaW5uZWRUaWVycy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHRoaXMudGllcnMucHVzaChwaW5uZWRUaWVyc1tpXSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5waW5uZWRUaWVycy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHRoaXMudGllcnMucHVzaCh1bnBpbm5lZFRpZXJzW2ldKTtcbiAgICB9KTtcblxuICAgIGlmIChoYXNQaW5uZWQpXG4gICAgICAgIHRoaXMucGlubmVkVGllckhvbGRlci5jbGFzc0xpc3QuYWRkKCd0aWVyLWhvbGRlci1waW5uZWQtZnVsbCcpO1xuICAgIGVsc2VcbiAgICAgICAgdGhpcy5waW5uZWRUaWVySG9sZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3RpZXItaG9sZGVyLXBpbm5lZC1mdWxsJyk7XG5cbiAgICB0aGlzLmFycmFuZ2VUaWVycygpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS53aXRoUHJlc2VydmVkU2VsZWN0aW9uID0gZnVuY3Rpb24oZikge1xuICAgIHZhciBzdCA9IFtdO1xuICAgIGZvciAodmFyIHhpID0gMDsgeGkgPCB0aGlzLnNlbGVjdGVkVGllcnMubGVuZ3RoOyArK3hpKSB7XG4gICAgICAgIHN0LnB1c2godGhpcy50aWVyc1t0aGlzLnNlbGVjdGVkVGllcnNbeGldXSk7XG4gICAgfVxuXG4gICAgZi5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zZWxlY3RlZFRpZXJzID0gW107XG4gICAgZm9yICh2YXIgc3RpID0gMDsgc3RpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrc3RpKSB7XG4gICAgICAgIGlmIChzdC5pbmRleE9mKHRoaXMudGllcnNbc3RpXSkgPj0gMClcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUaWVycy5wdXNoKHN0aSk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZWZyZXNoVGllciA9IGZ1bmN0aW9uKHRpZXIpIHtcbiAgICBpZiAodGhpcy5rbm93blNwYWNlKSB7XG4gICAgICAgIHRoaXMua25vd25TcGFjZS5pbnZhbGlkYXRlKHRpZXIpO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuYXJyYW5nZVRpZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFycmFuZ2VkVGllcnMgPSBbXTtcbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnRpZXJzW3RpXTtcbiAgICAgICAgaWYgKHQucGlubmVkKSB7XG4gICAgICAgICAgICBhcnJhbmdlZFRpZXJzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXMudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy50aWVyc1t0aV07XG4gICAgICAgIGlmICghdC5waW5uZWQpIHtcbiAgICAgICAgICAgIGFycmFuZ2VkVGllcnMucHVzaCh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnRpZXJCYWNrZ3JvdW5kQ29sb3JzKSB7XG4gICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCBhcnJhbmdlZFRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgdmFyIHQgPSBhcnJhbmdlZFRpZXJzW3RpXTtcbiAgICAgICAgICAgIHQuYmFja2dyb3VuZCA9IHRoaXMudGllckJhY2tncm91bmRDb2xvcnNbdGkgJSB0aGlzLnRpZXJCYWNrZ3JvdW5kQ29sb3JzLmxlbmd0aF07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm5vdGlmeUxvY2F0aW9uKCk7XG4gICAgdmFyIHdpZHRoID0gKHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0KSArIDE7XG4gICAgdmFyIG1pbkV4dHJhVyA9ICgxMDAuMC90aGlzLnNjYWxlKXwwO1xuICAgIHZhciBtYXhFeHRyYVcgPSAoMTAwMC4wL3RoaXMuc2NhbGUpfDA7XG5cbiAgICB2YXIgbmV3T3JpZ2luID0gKHRoaXMudmlld1N0YXJ0ICsgdGhpcy52aWV3RW5kKSAvIDI7XG4gICAgdmFyIG9oID0gbmV3T3JpZ2luIC0gdGhpcy5vcmlnaW47XG4gICAgdGhpcy5vcmlnaW4gPSBuZXdPcmlnaW47XG4gICAgdGhpcy5zY2FsZUF0TGFzdFJlZHJhdyA9IHRoaXMuc2NhbGU7XG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLnRpZXJzLmxlbmd0aDsgKyt0KSB7XG4gICAgICAgIHZhciBvZCA9IG9oO1xuICAgICAgICBpZiAodGhpcy50aWVyc1t0XS5vcmlnaW5IYXh4KSB7XG4gICAgICAgICAgICBvZCArPSB0aGlzLnRpZXJzW3RdLm9yaWdpbkhheHg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aWVyc1t0XS5vcmlnaW5IYXh4ID0gb2Q7XG4gICAgfVxuXG4gICAgdmFyIHNjYWxlZFF1YW50UmVzID0gdGhpcy50YXJnZXRRdWFudFJlcyAvIHRoaXMuc2NhbGU7XG5cbiAgICB2YXIgaW5uZXJEcmF3blN0YXJ0ID0gTWF0aC5tYXgoMSwgKHRoaXMudmlld1N0YXJ0fDApIC0gbWluRXh0cmFXKTtcbiAgICB2YXIgaW5uZXJEcmF3bkVuZCA9IE1hdGgubWluKCh0aGlzLnZpZXdFbmR8MCkgKyBtaW5FeHRyYVcsICgodGhpcy5jdXJyZW50U2VxTWF4fDApID4gMCA/ICh0aGlzLmN1cnJlbnRTZXFNYXh8MCkgOiAxMDAwMDAwMDAwKSlcbiAgICB2YXIgb3V0ZXJEcmF3blN0YXJ0ID0gTWF0aC5tYXgoMSwgKHRoaXMudmlld1N0YXJ0fDApIC0gbWF4RXh0cmFXKTtcbiAgICB2YXIgb3V0ZXJEcmF3bkVuZCA9IE1hdGgubWluKCh0aGlzLnZpZXdFbmR8MCkgKyBtYXhFeHRyYVcsICgodGhpcy5jdXJyZW50U2VxTWF4fDApID4gMCA/ICh0aGlzLmN1cnJlbnRTZXFNYXh8MCkgOiAxMDAwMDAwMDAwKSk7XG5cbiAgICBpZiAoIXRoaXMua25vd25TcGFjZSB8fCB0aGlzLmtub3duU3BhY2UuY2hyICE9PSB0aGlzLmNocikge1xuICAgICAgICB2YXIgc3MgPSB0aGlzLmdldFNlcXVlbmNlU291cmNlKCk7XG4gICAgICAgIHRoaXMua25vd25TcGFjZSA9IG5ldyBLbm93blNwYWNlKHRoaXMudGllcnMsIHRoaXMuY2hyLCBvdXRlckRyYXduU3RhcnQsIG91dGVyRHJhd25FbmQsIHNjYWxlZFF1YW50UmVzLCBzcyk7XG4gICAgfVxuICAgIFxuICAgIHZhciBzZWcgPSB0aGlzLmtub3duU3BhY2UuYmVzdENhY2hlT3ZlcmxhcHBpbmcodGhpcy5jaHIsIGlubmVyRHJhd25TdGFydCwgaW5uZXJEcmF3bkVuZCk7XG4gICAgaWYgKHNlZyAmJiBzZWcubWluIDw9IGlubmVyRHJhd25TdGFydCAmJiBzZWcubWF4ID49IGlubmVyRHJhd25FbmQpIHtcbiAgICAgICAgdGhpcy5kcmF3blN0YXJ0ID0gTWF0aC5tYXgoc2VnLm1pbiwgb3V0ZXJEcmF3blN0YXJ0KTtcbiAgICAgICAgdGhpcy5kcmF3bkVuZCA9IE1hdGgubWluKHNlZy5tYXgsIG91dGVyRHJhd25FbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZHJhd25TdGFydCA9IG91dGVyRHJhd25TdGFydDtcbiAgICAgICAgdGhpcy5kcmF3bkVuZCA9IG91dGVyRHJhd25FbmQ7XG4gICAgfVxuICAgIFxuICAgIHRoaXMua25vd25TcGFjZS52aWV3RmVhdHVyZXModGhpcy5jaHIsIHRoaXMuZHJhd25TdGFydCwgdGhpcy5kcmF3bkVuZCwgc2NhbGVkUXVhbnRSZXMpO1xuICAgIHRoaXMuZHJhd092ZXJsYXlzKCk7XG59XG5cbmZ1bmN0aW9uIHNldFNvdXJjZXMobXNoLCBhdmFpbGFibGVTb3VyY2VzLCBtYXliZU1hcHBpbmcpIHtcbiAgICBpZiAobWF5YmVNYXBwaW5nKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgYXZhaWxhYmxlU291cmNlcy5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgYXZhaWxhYmxlU291cmNlc1tzXS5tYXBwaW5nID0gbWF5YmVNYXBwaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1zaC5zZXQoYXZhaWxhYmxlU291cmNlcyk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnF1ZXJ5UmVnaXN0cnkgPSBmdW5jdGlvbihtYXliZU1hcHBpbmcsIHRyeUNhY2hlKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgY29vcmRzLCBtc2g7XG4gICAgaWYgKG1heWJlTWFwcGluZykge1xuICAgICAgICBjb29yZHMgPSB0aGlzLmNoYWluc1ttYXliZU1hcHBpbmddLmNvb3JkcztcbiAgICAgICAgaWYgKCF0aGlzQi5tYXBwYWJsZVNvdXJjZXNbbWF5YmVNYXBwaW5nXSkge1xuICAgICAgICAgICAgdGhpc0IubWFwcGFibGVTb3VyY2VzW21heWJlTWFwcGluZ10gPSBuZXcgT2JzZXJ2ZWQoKTtcbiAgICAgICAgfVxuICAgICAgICBtc2ggPSB0aGlzQi5tYXBwYWJsZVNvdXJjZXNbbWF5YmVNYXBwaW5nXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb29yZHMgPSB0aGlzLmNvb3JkU3lzdGVtO1xuICAgICAgICBtc2ggPSB0aGlzLmF2YWlsYWJsZVNvdXJjZXM7XG4gICAgfVxuICAgIHZhciBjYWNoZUhhc2ggPSBoZXhfc2hhMShtaW5pSlNPTmlmeShjb29yZHMpKTtcbiAgICBpZiAodHJ5Q2FjaGUpIHtcbiAgICAgICAgdmFyIGNhY2hlVGltZSA9IGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLnJlZ2lzdHJ5LicgKyBjYWNoZUhhc2ggKyAnLmxhc3RfcXVlcmllZCddO1xuICAgICAgICBpZiAoY2FjaGVUaW1lKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNldFNvdXJjZXMobXNoLCBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLnJlZ2lzdHJ5LicgKyBjYWNoZUhhc2ggKyAnLnNvdXJjZXMnXSksIG1heWJlTWFwcGluZyk7XG4gICAgICAgICAgICAgICAgdmFyIGNhY2hlQWdlID0gKERhdGUubm93KCl8MCkgLSAoY2FjaGVUaW1lfDApO1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZUFnZSA8ICgxMiAqIDYwICogNjAgKiAxMDAwKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAocmV4KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0JhZCByZWdpc3RyeSBjYWNoZTogJyArIHJleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgICAgICAgICBcbiAgICBuZXcgREFTUmVnaXN0cnkodGhpcy5yZWdpc3RyeSkuc291cmNlcyhmdW5jdGlvbihzb3VyY2VzKSB7XG4gICAgICAgIHZhciBhdmFpbGFibGVTb3VyY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc291cmNlcy5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbc107XG4gICAgICAgICAgICBpZiAoIXNvdXJjZS5jb29yZHMgfHwgc291cmNlLmNvb3Jkcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNjb29yZHMgPSBzb3VyY2UuY29vcmRzWzBdO1xuICAgICAgICAgICAgaWYgKHNjb29yZHMudGF4b24gIT0gY29vcmRzLnRheG9uIHx8IHNjb29yZHMuYXV0aCAhPSBjb29yZHMuYXV0aCB8fCBzY29vcmRzLnZlcnNpb24gIT0gY29vcmRzLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gICBcbiAgICAgICAgICAgIGF2YWlsYWJsZVNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UucmVnaXN0cnkuJyArIGNhY2hlSGFzaCArICcuc291cmNlcyddID0gSlNPTi5zdHJpbmdpZnkoYXZhaWxhYmxlU291cmNlcyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLnJlZ2lzdHJ5LicgKyBjYWNoZUhhc2ggKyAnLmxhc3RfcXVlcmllZCddID0gJycgKyBEYXRlLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgc2V0U291cmNlcyhtc2gsIGF2YWlsYWJsZVNvdXJjZXMsIG1heWJlTWFwcGluZyk7XG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgLy8gbXNoLnNldChudWxsKTtcbiAgICB9LCBjb29yZHMpO1xufVxuXG4vL1xuLy8gTmF2aWdhdGlvblxuLy9cblxuQnJvd3Nlci5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHBvcylcbntcbiAgICB2YXIgd2lkID0gdGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQ7XG4gICAgdGhpcy52aWV3U3RhcnQgLT0gcG9zIC8gdGhpcy5zY2FsZTtcbiAgICB0aGlzLnZpZXdFbmQgPSB0aGlzLnZpZXdTdGFydCArIHdpZDtcbiAgICBpZiAodGhpcy5jdXJyZW50U2VxTWF4ID4gMCAmJiB0aGlzLnZpZXdFbmQgPiB0aGlzLmN1cnJlbnRTZXFNYXgpIHtcbiAgICAgICAgdGhpcy52aWV3RW5kID0gdGhpcy5jdXJyZW50U2VxTWF4O1xuICAgICAgICB0aGlzLnZpZXdTdGFydCA9IHRoaXMudmlld0VuZCAtIHdpZDtcbiAgICB9XG4gICAgaWYgKHRoaXMudmlld1N0YXJ0IDwgMSkge1xuICAgICAgICB0aGlzLnZpZXdTdGFydCA9IDE7XG4gICAgICAgIHRoaXMudmlld0VuZCA9IHRoaXMudmlld1N0YXJ0ICsgd2lkO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeUxvY2F0aW9uKCk7XG4gICAgXG4gICAgdmFyIHZpZXdDZW50ZXIgPSAodGhpcy52aWV3U3RhcnQgKyB0aGlzLnZpZXdFbmQpLzI7XG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRpZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSAodGhpcy52aWV3U3RhcnQgLSB0aGlzLnRpZXJzW2ldLm5vcmlnaW4pKnRoaXMuc2NhbGU7XG5cdHRoaXMudGllcnNbaV0udmlld3BvcnQuc3R5bGUubGVmdCA9ICcnICsgKCgtb2Zmc2V0fDApIC0gMTAwMCkgKyAncHgnO1xuICAgICAgICB2YXIgb29mZnNldCA9ICh0aGlzLnZpZXdTdGFydCAtIHRoaXMudGllcnNbaV0ub29yaWdpbikqdGhpcy5zY2FsZTtcbiAgICAgICAgdGhpcy50aWVyc1tpXS5vdmVybGF5LnN0eWxlLmxlZnQgPSAnJyArICgoLW9vZmZzZXR8MCkgLSAxMDAwKSArICdweCc7XG4gICAgfVxuXG4gICAgdGhpcy5zcGFjZUNoZWNrKCk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnpvb21TdGVwID0gZnVuY3Rpb24oZGVsdGEpIHtcbiAgICB2YXIgb3ogPSAxLjAgKiB0aGlzLnpvb21TbGlkZXJWYWx1ZTtcbiAgICB2YXIgbnogPSBveiArIGRlbHRhO1xuICAgIGlmIChueiA8IHRoaXMuem9vbU1pbikge1xuICAgICAgICBuej0gdGhpcy56b29tTWluO1xuICAgIH1cbiAgICBpZiAobnogPiB0aGlzLnpvb21NYXgpIHtcbiAgICAgICAgbnogPSB0aGlzLnpvb21NYXg7XG4gICAgfVxuXG4gICAgaWYgKG56ICE9IG96KSB7XG4gICAgICAgIHRoaXMuem9vbVNsaWRlclZhbHVlID0gbno7IC8vIEZJWE1FIG1heWJlIG91Z2h0IHRvIHNldCBpbnNpZGUgem9vbSFcbiAgICAgICAgdGhpcy56b29tKE1hdGguZXhwKCgxLjAgKiBueikgLyB0aGlzLnpvb21FeHB0KSk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS56b29tID0gZnVuY3Rpb24oZmFjdG9yKSB7XG4gICAgdGhpcy56b29tRmFjdG9yID0gZmFjdG9yO1xuICAgIHZhciB2aWV3Q2VudGVyID0gTWF0aC5yb3VuZCgodGhpcy52aWV3U3RhcnQgKyB0aGlzLnZpZXdFbmQpIC8gMi4wKXwwO1xuICAgIHRoaXMudmlld1N0YXJ0ID0gdmlld0NlbnRlciAtIHRoaXMuem9vbUJhc2UgKiB0aGlzLnpvb21GYWN0b3IgLyAyO1xuICAgIHRoaXMudmlld0VuZCA9IHZpZXdDZW50ZXIgKyB0aGlzLnpvb21CYXNlICogdGhpcy56b29tRmFjdG9yIC8gMjtcbiAgICBpZiAodGhpcy5jdXJyZW50U2VxTWF4ID4gMCAmJiAodGhpcy52aWV3RW5kID4gdGhpcy5jdXJyZW50U2VxTWF4ICsgNSkpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMTtcbiAgICAgICAgdGhpcy52aWV3RW5kID0gdGhpcy5jdXJyZW50U2VxTWF4O1xuICAgICAgICB0aGlzLnZpZXdTdGFydCA9IHRoaXMudmlld0VuZCAtIGxlbiArIDE7XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZXdTdGFydCA8IDEpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMTtcbiAgICAgICAgdGhpcy52aWV3U3RhcnQgPSAxO1xuICAgICAgICB0aGlzLnZpZXdFbmQgPSB0aGlzLnZpZXdTdGFydCArIGxlbiAtIDE7XG4gICAgfVxuICAgIHRoaXMuc2NhbGUgPSB0aGlzLmZlYXR1cmVQYW5lbFdpZHRoIC8gKHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0KVxuICAgIHZhciB3aWR0aCA9IHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMTtcbiAgICBcbiAgICB2YXIgc2NhbGVSYXQgPSAodGhpcy5zY2FsZSAvIHRoaXMuc2NhbGVBdExhc3RSZWRyYXcpO1xuXG4gICAgdGhpcy5yZWZyZXNoKCk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnNwYWNlQ2hlY2sgPSBmdW5jdGlvbihkb250UmVmcmVzaCkge1xuICAgIGlmICghdGhpcy5rbm93blNwYWNlIHx8IHRoaXMua25vd25TcGFjZS5jaHIgIT09IHRoaXMuY2hyKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfSBcblxuICAgIHZhciB3aWR0aCA9ICgodGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQpfDApICsgMTtcbiAgICB2YXIgbWluRXh0cmFXID0gKDEwMC4wL3RoaXMuc2NhbGUpfDA7XG4gICAgdmFyIG1heEV4dHJhVyA9ICgxMDAwLjAvdGhpcy5zY2FsZSl8MDtcblxuICAgIGlmICgodGhpcy5kcmF3blN0YXJ0fDApID4gTWF0aC5tYXgoMSwgKCh0aGlzLnZpZXdTdGFydHwwKSAtIG1pbkV4dHJhVyl8MCkgIHx8ICh0aGlzLmRyYXduRW5kfDApIDwgTWF0aC5taW4oKHRoaXMudmlld0VuZHwwKSArIG1pbkV4dHJhVywgKCh0aGlzLmN1cnJlbnRTZXFNYXh8MCkgPiAwID8gKHRoaXMuY3VycmVudFNlcU1heHwwKSA6IDEwMDAwMDAwMDApKSkgIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZXNpemVWaWV3ZXIgPSBmdW5jdGlvbihza2lwUmVmcmVzaCkge1xuICAgIHZhciB3aWR0aCA9IHRoaXMudGllckhvbGRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB8IDA7XG4gICAgaWYgKHdpZHRoID09IDApXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBvbGRGUFcgPSBNYXRoLm1heCh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoLCAzMDApOyAvLyBDYW4gZ2V0IHNpbGx5IHZhbHVlcyBzdG9yZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgYnJvd3NlciBpcyBoaWRkZW4uXG4gICAgdGhpcy5mZWF0dXJlUGFuZWxXaWR0aCA9IHdpZHRofDA7XG5cbiAgICBpZiAob2xkRlBXICE9IHRoaXMuZmVhdHVyZVBhbmVsV2lkdGgpIHtcbiAgICAgICAgdGhpcy56b29tTWF4ID0gdGhpcy56b29tRXhwdCAqIE1hdGgubG9nKHRoaXMubWF4Vmlld1dpZHRoIC8gdGhpcy56b29tQmFzZSk7XG4gICAgICAgIHRoaXMuem9vbU1pbiA9IHRoaXMuem9vbUV4cHQgKiBNYXRoLmxvZyh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoIC8gMTAgLyB0aGlzLnpvb21CYXNlKTtcbiAgICAgICAgdGhpcy56b29tU2xpZGVyVmFsdWUgPSB0aGlzLnpvb21FeHB0ICogTWF0aC5sb2coKHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMSkgLyB0aGlzLnpvb21CYXNlKTtcblxuICAgICAgICB2YXIgdmlld1dpZHRoID0gdGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQ7XG4gICAgICAgIHZhciBudmUgPSB0aGlzLnZpZXdTdGFydCArICh2aWV3V2lkdGggKiB0aGlzLmZlYXR1cmVQYW5lbFdpZHRoKSAvIG9sZEZQVztcblxuICAgICAgICB0aGlzLnZpZXdFbmQgPSBudmU7XG5cbiAgICAgICAgdmFyIHdpZCA9IHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFNlcU1heCA+IDAgJiYgdGhpcy52aWV3RW5kID4gdGhpcy5jdXJyZW50U2VxTWF4KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdFbmQgPSB0aGlzLmN1cnJlbnRTZXFNYXg7XG4gICAgICAgICAgICB0aGlzLnZpZXdTdGFydCA9IHRoaXMudmlld0VuZCAtIHdpZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmlld1N0YXJ0IDwgMSkge1xuICAgICAgICAgICAgdGhpcy52aWV3U3RhcnQgPSAxO1xuICAgICAgICAgICAgdGhpcy52aWV3RW5kID0gdGhpcy52aWV3U3RhcnQgKyB3aWQgLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvblJ1bGVyKCk7XG5cbiAgICAgICAgaWYgKCFza2lwUmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5zcGFjZUNoZWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlMb2NhdGlvbigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZ1bGxTY3JlZW4pIHtcbiAgICAgICAgdGhpcy5zZXRGdWxsU2NyZWVuSGVpZ2h0KCk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5zZXRGdWxsU2NyZWVuSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3QgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCAtIHRoaXMuYnJvd3NlckhvbGRlci5vZmZzZXRIZWlnaHQ7XG4gICAgdGhpcy5icm93c2VySG9sZGVyLnN0eWxlLm1heEhlaWdodCA9IE1hdGgubWF4KDEwMDAsIHdpbmRvdy5pbm5lckhlaWdodCAtIHJlc3QgLSAyMCkgKyAncHgnXG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmFkZFRpZXIgPSBmdW5jdGlvbihjb25mKSB7XG4gICAgY29uZiA9IHNoYWxsb3dDb3B5KGNvbmYpO1xuICAgIGNvbmYuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBcbiAgICB2YXIgdGllciA9IHRoaXMubWFrZVRpZXIoY29uZik7XG4gICAgdGhpcy5tYXJrU2VsZWN0ZWRUaWVycygpO1xuICAgIHRoaXMucG9zaXRpb25SdWxlcigpO1xuICAgIHRoaXMubm90aWZ5VGllcigpO1xuICAgIHJldHVybiB0aWVyO1xufVxuXG5mdW5jdGlvbiBzb3VyY2VEYXRhVVJJKGNvbmYpIHtcbiAgICBpZiAoY29uZi51cmkpIHtcbiAgICAgICAgcmV0dXJuIGNvbmYudXJpO1xuICAgIH0gZWxzZSBpZiAoY29uZi5ibG9iKSB7XG4gICAgICAgIHJldHVybiAnZmlsZTonICsgY29uZi5ibG9iLm5hbWU7XG4gICAgfSBlbHNlIGlmIChjb25mLmJ3Z0Jsb2IpIHtcbiAgICAgICAgcmV0dXJuICdmaWxlOicgKyBjb25mLmJ3Z0Jsb2IubmFtZTtcbiAgICB9IGVsc2UgaWYgKGNvbmYuYmFtQmxvYikge1xuICAgICAgICByZXR1cm4gJ2ZpbGU6JyArIGNvbmYuYmFtQmxvYi5uYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBjb25mLmJ3Z1VSSSB8fCBjb25mLmJhbVVSSSB8fCBjb25mLmpiVVJJIHx8IGNvbmYudHdvQml0VVJJIHx8ICdodHRwOi8vd3d3LmJpb2RhbGxpYW5jZS5vcmcvbWFnaWMvbm9fdXJpJztcbn1cblxuZnVuY3Rpb24gc291cmNlU3R5bGVVUkkoY29uZikge1xuICAgIGlmIChjb25mLnN0eWxlc2hlZXRfdXJpKVxuICAgICAgICByZXR1cm4gY29uZi5zdHlsZXNoZWV0X3VyaTtcbiAgICBlbHNlIGlmIChjb25mLnRpZXJfdHlwZSA9PSAnc2VxdWVuY2UnKVxuICAgICAgICByZXR1cm4gJ2h0dHA6Ly93d3cuYmlvZGFsbGlhbmNlLm9yZy9tYWdpYy9zZXF1ZW5jZSdcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBzb3VyY2VEYXRhVVJJKGNvbmYpO1xufVxuXG5mdW5jdGlvbiBzb3VyY2VzQXJlRXF1YWwoYSwgYikge1xuICAgIGlmIChzb3VyY2VEYXRhVVJJKGEpICE9IHNvdXJjZURhdGFVUkkoYikgfHxcbiAgICAgICAgc291cmNlU3R5bGVVUkkoYSkgIT0gc291cmNlU3R5bGVVUkkoYikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChhLm1hcHBpbmcgIT0gYi5tYXBwaW5nKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoYS50aWVyX3R5cGUgIT0gYi50aWVyX3R5cGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChhLm92ZXJsYXkpIHtcbiAgICAgICAgaWYgKCFiLm92ZXJsYXkgfHwgYi5vdmVybGF5Lmxlbmd0aCAhPSBhLm92ZXJsYXkubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBvaSA9IDA7IG9pIDwgYS5vdmVybGF5Lmxlbmd0aDsgKytvaSkge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2VzQXJlRXF1YWwoYS5vdmVybGF5W29pXSwgYi5vdmVybGF5W29pXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGIub3ZlcmxheSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUucmVtb3ZlVGllciA9IGZ1bmN0aW9uKGNvbmYsIGZvcmNlKSB7XG4gICAgdmFyIHRhcmdldCA9IC0xO1xuXG4gICAgaWYgKHR5cGVvZiBjb25mLmluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBjb25mLmluZGV4ID49MCAmJiBjb25mLmluZGV4IDwgdGhpcy50aWVycy5sZW5ndGgpIHtcbiAgICAgICAgdGFyZ2V0ID0gY29uZi5pbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgICAgIHZhciB0cyA9IHRoaXMudGllcnNbdGldLmRhc1NvdXJjZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNvdXJjZXNBcmVFcXVhbChjb25mLCB0cykpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0IDwgMCkge1xuICAgICAgICB0aHJvdyBcIkNvdWxkbid0IGZpbmQgcmVxdWVzdGVkIHRpZXJcIjtcbiAgICB9XG5cbiAgICB0aGlzLnRpZXJzLnNwbGljZSh0YXJnZXQsIDEpO1xuXG4gICAgdmFyIG5zdCA9IFtdO1xuICAgIGZvciAodmFyIHN0aSA9IDA7IHN0aSA8IHRoaXMuc2VsZWN0ZWRUaWVycy5sZW5ndGg7ICsrc3RpKSB7XG4gICAgICAgIHZhciBzdCA9IHRoaXMuc2VsZWN0ZWRUaWVyc1tzdGldO1xuICAgICAgICBpZiAoc3QgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgIG5zdC5wdXNoKHN0KTtcbiAgICAgICAgfSBlbHNlIGlmIChzdCA+IHRhcmdldCkge1xuICAgICAgICAgICAgbnN0LnB1c2goc3QgLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNlbGVjdGVkVGllcnMgPSBuc3Q7XG4gICAgdGhpcy5tYXJrU2VsZWN0ZWRUaWVycygpO1xuXG4gICAgdGhpcy5yZW9yZGVyVGllcnMoKTtcbiAgICB0aGlzLm5vdGlmeVRpZXIoKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuZ2V0U2VxdWVuY2VTb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc2VxdWVuY2VTb3VyY2UgPT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhpcy5fc2VxdWVuY2VTb3VyY2UgPSB0aGlzLl9nZXRTZXF1ZW5jZVNvdXJjZSgpO1xuICAgIHJldHVybiB0aGlzLl9zZXF1ZW5jZVNvdXJjZTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuX2dldFNlcXVlbmNlU291cmNlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXMudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIGlmICh0aGlzLnRpZXJzW3RpXS5zZXF1ZW5jZVNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGllcnNbdGldLnNlcXVlbmNlU291cmNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHRoaXMuZGVmYXVsdFNvdXJjZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5kZWZhdWx0U291cmNlc1tzaV07XG4gICAgICAgIGlmIChzLnByb3ZpZGVzX2VudHJ5cG9pbnRzIHx8IHMudGllcl90eXBlID09ICdzZXF1ZW5jZScgfHwgcy50d29CaXRVUkkpIHtcbiAgICAgICAgICAgIGlmIChzLnR3b0JpdFVSSSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVHdvQml0U2VxdWVuY2VTb3VyY2Uocyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgREFTU2VxdWVuY2VTb3VyY2Uocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnNldExvY2F0aW9uID0gZnVuY3Rpb24obmV3Q2hyLCBuZXdNaW4sIG5ld01heCwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mKG5ld01pbikgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdtaW5pbXVtIG11c3QgYmUgYSBudW1iZXIgKGdvdCAnICsgSlNPTi5zdHJpbmdpZnkobmV3TWluKSArICcpJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YobmV3TWF4KSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ21heGltdW0gbXVzdCBiZSBhIG51bWJlciAoZ290ICcgKyBKU09OLnN0cmluZ2lmeShuZXdNYXgpICsgJyknKTtcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICBpZiAoIW5ld0NociB8fCBuZXdDaHIgPT0gdGhpcy5jaHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldExvY2F0aW9uKG51bGwsIG5ld01pbiwgbmV3TWF4LCBudWxsLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNzID0gdGhpcy5nZXRTZXF1ZW5jZVNvdXJjZSgpO1xuICAgICAgICBpZiAoIXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soJ05lZWQgYSBzZXF1ZW5jZSBzb3VyY2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNzLmdldFNlcUluZm8obmV3Q2hyLCBmdW5jdGlvbihzaSkge1xuICAgICAgICAgICAgaWYgKCFzaSkge1xuICAgICAgICAgICAgICAgIHZhciBhbHRDaHI7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0Noci5pbmRleE9mKCdjaHInKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdENociA9IG5ld0Noci5zdWJzdHIoMyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0Q2hyID0gJ2NocicgKyBuZXdDaHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNzLmdldFNlcUluZm8oYWx0Q2hyLCBmdW5jdGlvbihzaTIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhcIkNvdWxkbid0IGZpbmQgc2VxdWVuY2UgJ1wiICsgbmV3Q2hyICsgXCInXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNCLl9zZXRMb2NhdGlvbihhbHRDaHIsIG5ld01pbiwgbmV3TWF4LCBzaTIsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0IuX3NldExvY2F0aW9uKG5ld0NociwgbmV3TWluLCBuZXdNYXgsIHNpLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuX3NldExvY2F0aW9uID0gZnVuY3Rpb24obmV3Q2hyLCBuZXdNaW4sIG5ld01heCwgbmV3Q2hySW5mbywgY2FsbGJhY2spIHtcbiAgICB2YXIgY2hyQ2hhbmdlZCA9IGZhbHNlO1xuICAgIGlmIChuZXdDaHIpIHtcbiAgICAgICAgaWYgKG5ld0Noci5pbmRleE9mKCdjaHInKSA9PSAwKVxuICAgICAgICAgICAgbmV3Q2hyID0gbmV3Q2hyLnN1YnN0cmluZygzKTtcblxuICAgICAgICBpZiAodGhpcy5jaHIgIT0gbmV3Q2hyKVxuICAgICAgICAgICAgY2hyQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hyID0gbmV3Q2hyO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZXFNYXggPSBuZXdDaHJJbmZvLmxlbmd0aDtcbiAgICB9XG5cbiAgICBuZXdNaW58PTA7IG5ld01heHw9MDtcbiAgICB2YXIgbmV3V2lkdGggPSBNYXRoLm1heCgxMCwgbmV3TWF4LW5ld01pbisxKTtcbiAgICBpZiAobmV3TWluIDwgMSkge1xuICAgICAgICBuZXdNaW4gPSAxOyBuZXdNYXggPSBuZXdNaW4gKyBuZXdXaWR0aCAtIDE7XG4gICAgfVxuICAgIGlmIChuZXdNYXggPiB0aGlzLmN1cnJlbnRTZXFNYXgpIHtcbiAgICAgICAgbmV3TWF4ID0gdGhpcy5jdXJyZW50U2VxTWF4O1xuICAgICAgICBuZXdNaW4gPSBNYXRoLm1heCgxLCBuZXdNYXggLSBuZXdXaWR0aCArIDEpO1xuICAgIH1cblxuICAgIHRoaXMudmlld1N0YXJ0ID0gbmV3TWluO1xuICAgIHRoaXMudmlld0VuZCA9IG5ld01heDtcbiAgICB2YXIgbmV3U2NhbGUgPSBNYXRoLm1heCh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoLCA1MCkgLyAodGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQpO1xuICAgIHZhciBvbGRTY2FsZSA9IHRoaXMuc2NhbGU7XG4gICAgdmFyIHNjYWxlQ2hhbmdlZCA9IChNYXRoLmFicyhuZXdTY2FsZSAtIG9sZFNjYWxlKSkgPiAwLjAwMDE7XG4gICAgdGhpcy5zY2FsZSA9IG5ld1NjYWxlO1xuXG4gICAgdmFyIG5ld1pTLCBvbGRaUztcbiAgICBvbGRaUyA9IHRoaXMuem9vbVNsaWRlclZhbHVlO1xuICAgIHRoaXMuem9vbVNsaWRlclZhbHVlID0gbmV3WlMgPSB0aGlzLnpvb21FeHB0ICogTWF0aC5sb2coKHRoaXMudmlld0VuZCAtIHRoaXMudmlld1N0YXJ0ICsgMSkgLyB0aGlzLnpvb21CYXNlKTtcbiAgICBcbiAgICBpZiAoc2NhbGVDaGFuZ2VkIHx8IGNockNoYW5nZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRpZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLnRpZXJzW2ldLnZpZXdwb3J0LnN0eWxlLmxlZnQgPSAnNTAwMHB4JztcbiAgICAgICAgICAgIHRoaXMudGllcnNbaV0ub3ZlcmxheS5zdHlsZS5sZWZ0ID0gJzUwMDBweCc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICBpZiAodGhpcy5zYXZlZFpvb20pIHtcbiAgICAgICAgICAgIG5ld1pTIC09IHRoaXMuem9vbU1pbjtcbiAgICAgICAgICAgIG9sZFpTIC09IHRoaXMuem9vbU1pbjtcbiAgICAgICAgICAgIHZhciBkaWZUb0FjdGl2ZSA9IG5ld1pTIC0gb2xkWlM7XG4gICAgICAgICAgICB2YXIgZGlmVG9TYXZlZCA9IG5ld1pTIC0gdGhpcy5zYXZlZFpvb207XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlmVG9BY3RpdmUpID4gTWF0aC5hYnMoZGlmVG9TYXZlZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU25hcFpvb21pbmcgPSAhdGhpcy5pc1NuYXBab29taW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWRab29tID0gb2xkWlM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU25hcFpvb21pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZWRab29tID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2aWV3Q2VudGVyID0gKHRoaXMudmlld1N0YXJ0ICsgdGhpcy52aWV3RW5kKS8yO1xuICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAodGhpcy52aWV3U3RhcnQgLSB0aGlzLnRpZXJzW2ldLm5vcmlnaW4pKnRoaXMuc2NhbGU7XG5cdCAgICAgICAgdGhpcy50aWVyc1tpXS52aWV3cG9ydC5zdHlsZS5sZWZ0ID0gJycgKyAoKC1vZmZzZXR8MCkgLSAxMDAwKSArICdweCc7XG4gICAgICAgICAgICB2YXIgb29mZnNldCA9ICh0aGlzLnZpZXdTdGFydCAtIHRoaXMudGllcnNbaV0ub29yaWdpbikqdGhpcy5zY2FsZTtcbiAgICAgICAgICAgIHRoaXMudGllcnNbaV0ub3ZlcmxheS5zdHlsZS5sZWZ0ID0gJycgKyAoKC1vb2Zmc2V0fDApIC0gMTAwMCkgKyAncHgnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMubm90aWZ5TG9jYXRpb24oKTtcblxuICAgIHRoaXMuc3BhY2VDaGVjaygpO1xuICAgIGlmICh0aGlzLmluc3RydW1lbnRBY3Rpdml0eSlcbiAgICAgICAgdGhpcy5hY3Rpdml0eVN0YXJ0VGltZSA9IERhdGUubm93KCl8MDtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUucGluZ0FjdGl2aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmluc3RydW1lbnRBY3Rpdml0eSB8fCAhdGhpcy5hY3Rpdml0eVN0YXJ0VGltZSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIGFjdGl2aXR5ID0gMDtcbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgaWYgKHRoaXMudGllcnNbdGldLmxvYWRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpXG4gICAgICAgICAgICArK2FjdGl2aXR5O1xuICAgIH1cblxuICAgIGlmIChhY3Rpdml0eSA9PSAwKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpfDA7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIHRvb2sgJyArIChub3ctdGhpcy5hY3Rpdml0eVN0YXJ0VGltZSkgKyAnbXMnKTtcbiAgICAgICAgdGhpcy5hY3Rpdml0eVN0YXJ0VGltZSA9IG51bGw7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5hZGRJbml0TGlzdGVuZXIgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgdGhpcy5pbml0TGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmFkZEZlYXR1cmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGhhbmRsZXIsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLmZlYXR1cmVMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubm90aWZ5RmVhdHVyZSA9IGZ1bmN0aW9uKGV2LCBmZWF0dXJlLCBoaXQsIHRpZXIpIHtcbiAgZm9yICh2YXIgZmxpID0gMDsgZmxpIDwgdGhpcy5mZWF0dXJlTGlzdGVuZXJzLmxlbmd0aDsgKytmbGkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHRoaXMuZmVhdHVyZUxpc3RlbmVyc1tmbGldKGV2LCBmZWF0dXJlLCBoaXQsIHRpZXIpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhleC5zdGFjayk7XG4gICAgICB9XG4gIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuYWRkRmVhdHVyZUhvdmVyTGlzdGVuZXIgPSBmdW5jdGlvbihoYW5kbGVyLCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdGhpcy5mZWF0dXJlSG92ZXJMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubm90aWZ5RmVhdHVyZUhvdmVyID0gZnVuY3Rpb24oZXYsIGZlYXR1cmUsIGhpdCwgdGllcikge1xuICAgIGZvciAodmFyIGZsaSA9IDA7IGZsaSA8IHRoaXMuZmVhdHVyZUhvdmVyTGlzdGVuZXJzLmxlbmd0aDsgKytmbGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZUhvdmVyTGlzdGVuZXJzW2ZsaV0oZXYsIGZlYXR1cmUsIGhpdCwgdGllcik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleC5zdGFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmFkZFZpZXdMaXN0ZW5lciA9IGZ1bmN0aW9uKGhhbmRsZXIsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLnZpZXdMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubm90aWZ5TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBsbGkgPSAwOyBsbGkgPCB0aGlzLnZpZXdMaXN0ZW5lcnMubGVuZ3RoOyArK2xsaSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy52aWV3TGlzdGVuZXJzW2xsaV0odGhpcy5jaHIsIHRoaXMudmlld1N0YXJ0fDAsIHRoaXMudmlld0VuZHwwLCB0aGlzLnpvb21TbGlkZXJWYWx1ZSwge2N1cnJlbnQ6IHRoaXMuem9vbVNsaWRlclZhbHVlLCBtaW46IHRoaXMuem9vbU1pbiwgbWF4OiB0aGlzLnpvb21NYXh9KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4LnN0YWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuYWRkVGllckxpc3RlbmVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIHRoaXMudGllckxpc3RlbmVycy5wdXNoKGhhbmRsZXIpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5ub3RpZnlUaWVyID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgdGxpID0gMDsgdGxpIDwgdGhpcy50aWVyTGlzdGVuZXJzLmxlbmd0aDsgKyt0bGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudGllckxpc3RlbmVyc1t0bGldKCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleC5zdGFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmFkZFJlZ2lvblNlbGVjdExpc3RlbmVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIHRoaXMucmVnaW9uU2VsZWN0TGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLm5vdGlmeVJlZ2lvblNlbGVjdCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgpIHtcbiAgICBmb3IgKHZhciBybGkgPSAwOyBybGkgPCB0aGlzLnJlZ2lvblNlbGVjdExpc3RlbmVycy5sZW5ndGg7ICsrcmxpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lvblNlbGVjdExpc3RlbmVyc1tybGldKGNociwgbWluLCBtYXgpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXguc3RhY2spO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbkJyb3dzZXIucHJvdG90eXBlLmhpZ2hsaWdodFJlZ2lvbiA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIFxuICAgIGlmIChjaHIgPT0gdGhpcy5jaHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hpZ2hsaWdodFJlZ2lvbihjaHIsIG1pbiwgbWF4KTtcbiAgICB9XG5cbiAgICB2YXIgc3MgPSB0aGlzLmdldFNlcXVlbmNlU291cmNlKCk7XG4gICAgaWYgKCFzcykge1xuICAgICAgICB0aHJvdyAnTmVlZCBhIHNlcXVlbmNlIHNvdXJjZSc7XG4gICAgfVxuXG4gICAgc3MuZ2V0U2VxSW5mbyhjaHIsIGZ1bmN0aW9uKHNpKSB7XG4gICAgICAgIGlmICghc2kpIHtcbiAgICAgICAgICAgIHZhciBhbHRDaHI7XG4gICAgICAgICAgICBpZiAoY2hyLmluZGV4T2YoJ2NocicpID09IDApIHtcbiAgICAgICAgICAgICAgICBhbHRDaHIgPSBjaHIuc3Vic3RyKDMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbHRDaHIgPSAnY2hyJyArIGNocjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNzLmdldFNlcUluZm8oYWx0Q2hyLCBmdW5jdGlvbihzaTIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNpMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBGYWlsIHNpbGVudGx5LlxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5faGlnaGxpZ2h0UmVnaW9uKGFsdENociwgbWluLCBtYXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNCLl9oaWdobGlnaHRSZWdpb24oY2hyLCBtaW4sIG1heCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuX2hpZ2hsaWdodFJlZ2lvbiA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgpIHtcbiAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgdGhpcy5oaWdobGlnaHRzLmxlbmd0aDsgKytoaSkge1xuICAgICAgICB2YXIgaCA9IHRoaXMuaGlnaGxpZ2h0c1toaV07XG4gICAgICAgIGlmIChoLmNociA9PSBjaHIgJiYgaC5taW4gPT0gbWluICYmIGgubWF4ID09IG1heClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhpZ2hsaWdodHMucHVzaChuZXcgUmVnaW9uKGNociwgbWluLCBtYXgpKTtcbiAgICB2YXIgdmlzU3RhcnQgPSB0aGlzLnZpZXdTdGFydCAtICgxMDAwL3RoaXMuc2NhbGUpO1xuICAgIHZhciB2aXNFbmQgPSB0aGlzLnZpZXdFbmQgKyAoMTAwMC90aGlzLnNjYWxlKTtcbiAgICBpZiAoKGNociA9PSB0aGlzLmNociB8fCBjaHIgPT0gKCdjaHInK3RoaXMuY2hyKSkgJiYgbWluIDwgdmlzRW5kICYmIG1heCA+IHZpc1N0YXJ0KSB7XG4gICAgICAgIHRoaXMuZHJhd092ZXJsYXlzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZnlMb2NhdGlvbigpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5jbGVhckhpZ2hsaWdodHMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmhpZ2hsaWdodHMgPSBbXTtcbiAgICB0aGlzLmRyYXdPdmVybGF5cygpO1xuICAgIHRoaXMubm90aWZ5TG9jYXRpb24oKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuZHJhd092ZXJsYXlzID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXMudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIHRoaXMudGllcnNbdGldLmRyYXdPdmVybGF5KCk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5mZWF0dXJlc0luUmVnaW9uID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCkge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIGlmIChjaHIgIT09IHRoaXMuY2hyKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgdmFyIGZsID0gdGhpcy50aWVyc1t0aV0uY3VycmVudEZlYXR1cmVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZmwubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsW2ZpXTtcbiAgICAgICAgICAgIGlmIChmLm1pbiA8PSBtYXggJiYgZi5tYXggPj0gbWluKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmVhdHVyZXM7XG59XG5cblxuQnJvd3Nlci5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRUaWVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRUaWVycy5sZW5ndGggPiAwKSBcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRUaWVyc1swXTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiAtMTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuc2V0U2VsZWN0ZWRUaWVyID0gZnVuY3Rpb24odCkge1xuICAgIGlmICh0ID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRpZXJzID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRpZXJzID0gW3RdO1xuICAgIH1cbiAgICB0aGlzLm1hcmtTZWxlY3RlZFRpZXJzKCk7XG4gICAgdGhpcy5ub3RpZnlUaWVyU2VsZWN0aW9uKCk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLm1hcmtTZWxlY3RlZFRpZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXMudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIHZhciBidXR0b24gPSB0aGlzLnRpZXJzW3RpXS5uYW1lQnV0dG9uO1xuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGllcnMuaW5kZXhPZih0aSkgPj0gMCkge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGVkVGllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmJyb3dzZXJIb2xkZXIuZm9jdXMoKTtcbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmFkZFRpZXJTZWxlY3Rpb25MaXN0ZW5lciA9IGZ1bmN0aW9uKGYpIHtcbiAgICB0aGlzLnRpZXJTZWxlY3Rpb25MaXN0ZW5lcnMucHVzaChmKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubm90aWZ5VGllclNlbGVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGZsaSA9IDA7IGZsaSA8IHRoaXMudGllclNlbGVjdGlvbkxpc3RlbmVycy5sZW5ndGg7ICsrZmxpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnRpZXJTZWxlY3Rpb25MaXN0ZW5lcnNbZmxpXSh0aGlzLnNlbGVjdGVkVGllcnMpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXguc3RhY2spO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5hZGRUaWVyU2VsZWN0aW9uV3JhcExpc3RlbmVyID0gZnVuY3Rpb24oZikge1xuICAgIHRoaXMudGllclNlbGVjdGlvbldyYXBMaXN0ZW5lcnMucHVzaChmKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubm90aWZ5VGllclNlbGVjdGlvbldyYXAgPSBmdW5jdGlvbihpKSB7XG4gICAgZm9yICh2YXIgZmxpID0gMDsgZmxpIDwgdGhpcy50aWVyU2VsZWN0aW9uV3JhcExpc3RlbmVycy5sZW5ndGg7ICsrZmxpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnRpZXJTZWxlY3Rpb25XcmFwTGlzdGVuZXJzW2ZsaV0oaSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleC5zdGFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnBvc2l0aW9uUnVsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlzcGxheSA9ICdub25lJztcbiAgICB2YXIgbGVmdCA9ICcnO1xuICAgIHZhciByaWdodCA9ICcnO1xuXG4gICAgaWYgKHRoaXMucnVsZXJMb2NhdGlvbiA9PSAnY2VudGVyJykge1xuICAgICAgICBkaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgbGVmdCA9ICcnICsgKCh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoLzIpfDApICsgJ3B4JztcbiAgICB9IGVsc2UgaWYgKHRoaXMucnVsZXJMb2NhdGlvbiA9PSAnbGVmdCcpIHtcbiAgICAgICAgZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGxlZnQgPSAnMHB4JztcbiAgICB9IGVsc2UgaWYgKHRoaXMucnVsZXJMb2NhdGlvbiA9PSAncmlnaHQnKSB7XG4gICAgICAgIGRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICByaWdodCA9ICcwcHgnXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVyLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuICAgIHRoaXMucnVsZXIuc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5ydWxlci5zdHlsZS5yaWdodCA9IHJpZ2h0O1xuXG4gICAgdGhpcy5ydWxlcjIuc3R5bGUuZGlzcGxheSA9IHRoaXMucnVsZXJMb2NhdGlvbiA9PSAnY2VudGVyJyA/ICdub25lJyA6ICdibG9jayc7XG4gICAgdGhpcy5ydWxlcjIuc3R5bGUubGVmdCA9ICcnICsgKCh0aGlzLmZlYXR1cmVQYW5lbFdpZHRoLzIpfDApICsgJ3B4JztcblxuICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0aGlzLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICB2YXIgdGllciA9IHRoaXMudGllcnNbdGldO1xuICAgICAgICB2YXIgcSA9IHRpZXIucXVhbnRPdmVybGF5O1xuXG4gICAgICAgIHZhciBxdWFudDtcbiAgICAgICAgaWYgKHRpZXIuc3VidGllcnMgJiYgdGllci5zdWJ0aWVycy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcXVhbnQgPSB0aWVyLnN1YnRpZXJzWzBdLnF1YW50O1xuXG4gICAgICAgIGlmIChxKSB7XG4gICAgICAgICAgICBxLnN0eWxlLmRpc3BsYXkgPSBxdWFudCA/IGRpc3BsYXkgOiAnbm9uZSc7XG4gICAgICAgICAgICBxLnN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgcS5zdHlsZS5yaWdodCA9IHJpZ2h0O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5mZWF0dXJlRG91YmxlQ2xpY2sgPSBmdW5jdGlvbihoaXQsIHJ4LCByeSkge1xuICAgIGlmICghaGl0IHx8IGhpdC5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIGYgPSBoaXRbaGl0Lmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKCFmLm1pbiB8fCAhZi5tYXgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmc3RhcnQgPSAoKChmLm1pbnwwKSAtICh0aGlzLnZpZXdTdGFydHwwKSkgKiB0aGlzLnNjYWxlKTtcbiAgICB2YXIgZndpZHRoID0gKCgoZi5tYXggLSBmLm1pbikgKyAxKSAqIHRoaXMuc2NhbGUpO1xuICAgIFxuICAgIHZhciBuZXdNaWQgPSAoKChmLm1pbnwwKSArIChmLm1heHwwKSkpLzI7XG4gICAgaWYgKGZ3aWR0aCA+IDEwKSB7XG4gICAgICAgIHZhciBmcmFjID0gKDEuMCAqIChyeCAtIGZzdGFydCkpIC8gZndpZHRoO1xuICAgICAgICBpZiAoZnJhYyA8IDAuMykge1xuICAgICAgICAgICAgbmV3TWlkID0gKGYubWlufDApO1xuICAgICAgICB9IGVsc2UgIGlmIChmcmFjID4gMC43KSB7XG4gICAgICAgICAgICBuZXdNaWQgPSAoZi5tYXh8MCkgKyAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoID0gdGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQ7XG4gICAgdGhpcy5zZXRMb2NhdGlvbihudWxsLCBuZXdNaWQgLSAod2lkdGgvMiksIG5ld01pZCArICh3aWR0aC8yKSk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnpvb21Gb3JTY2FsZSA9IGZ1bmN0aW9uKHNjYWxlKSB7XG4gICAgdmFyIHNzU2NhbGU7XG4gICAgaWYgKHNjYWxlID4gMC4yKSB7XG4gICAgICAgIHNzU2NhbGUgPSAnaGlnaCc7XG4gICAgfSBlbHNlIGlmIChzY2FsZSA+IDAuMDEpIHtcbiAgICAgICAgc3NTY2FsZSA9ICdtZWRpdW0nO1xuICAgIH0gZWxzZSAge1xuICAgICAgICBzc1NjYWxlID0gJ2xvdyc7XG4gICAgfVxuICAgIHJldHVybiBzc1NjYWxlO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS56b29tRm9yQ3VycmVudFNjYWxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuem9vbUZvclNjYWxlKHRoaXMuc2NhbGUpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS51cGRhdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGllclRvdGFsID0gMDtcbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIFxuICAgICAgICB0aWVyVG90YWwgKz0gKHRoaXMudGllcnNbdGldLmN1cnJlbnRIZWlnaHQgfHwgMzApO1xuICAgIHRoaXMucnVsZXIuc3R5bGUuaGVpZ2h0ID0gJycgKyB0aWVyVG90YWwgKyAncHgnO1xuICAgIHRoaXMucnVsZXIyLnN0eWxlLmhlaWdodCA9ICcnICsgdGllclRvdGFsICsgJ3B4JztcbiAgICAvLyB0aGlzLnN2Z0hvbGRlci5zdHlsZS5tYXhIZWlnaHQgPSAnJyArIE1hdGgubWF4KHRpZXJUb3RhbCwgNTAwKSArICdweCc7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnNjcm9sbEFycm93S2V5ID0gZnVuY3Rpb24oZXYsIGRpcikge1xuICAgIGlmICh0aGlzLnJldmVyc2VLZXlTY3JvbGxpbmcpXG4gICAgICAgIGRpciA9IC1kaXI7XG4gICAgXG4gICAgaWYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkge1xuICAgICAgICB2YXIgZmVkZ2UgPSBmYWxzZTtcbiAgICAgICAgaWYoZXYuc2hpZnRLZXkpe1xuICAgICAgICAgICAgZmVkZ2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sZWFwKGRpciwgZmVkZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubW92ZShldi5zaGlmdEtleSA/IDEwMCpkaXIgOiAyNSpkaXIpO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubGVhcCA9IGZ1bmN0aW9uKGRpciwgZmVkZ2UpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHZhciBwb3M9KCh0aGlzQi52aWV3U3RhcnQgKyB0aGlzQi52aWV3RW5kICsgMSkvMil8MDtcblxuICAgIHZhciBzdCA9IHRoaXNCLmdldFNlbGVjdGVkVGllcigpO1xuICAgIGlmIChzdCA8IDApIHJldHVybjtcbiAgICB2YXIgdGllciA9IHRoaXNCLnRpZXJzW3N0XTtcblxuICAgIGlmICh0aWVyICYmICgodGllci5mZWF0dXJlU291cmNlICYmIHRoaXMuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aWVyLmZlYXR1cmVTb3VyY2UsICdxdWFudExlYXAnKSAmJiB0eXBlb2YodGllci5xdWFudExlYXBUaHJlc2hvbGQpID09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICB8fCAodGllci5mZWF0dXJlU291cmNlICYmIHRoaXMuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aWVyLmZlYXR1cmVTb3VyY2UsICdsZWFwJykpKSkge1xuICAgICAgICB0aWVyLmZpbmROZXh0RmVhdHVyZShcbiAgICAgICAgICAgICAgdGhpc0IuY2hyLFxuICAgICAgICAgICAgICBwb3MsXG4gICAgICAgICAgICAgIC1kaXIsXG4gICAgICAgICAgICAgIGZlZGdlLFxuICAgICAgICAgICAgICBmdW5jdGlvbihueHQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChueHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbm1pbiA9IG54dC5taW47XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG5tYXggPSBueHQubWF4O1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWRnZSkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChubWluPnBvcysxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubWF4PW5taW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubWF4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubWluPW5tYXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm1heDxwb3MtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubWF4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5taW49bm1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubWF4PW5taW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZCA9IHRoaXNCLnZpZXdFbmQgLSB0aGlzQi52aWV3U3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcnNlRmxvYXQod2lkLzIpID09IHBhcnNlSW50KHdpZC8yKSl7d2lkLS07fVxuICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdTdGFydCA9IChubWluICsgbm1heCAtIHdpZCkvMiArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG5ld1N0YXJ0ICsgd2lkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zMj1wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpc0Iuc2V0TG9jYXRpb24obnh0LnNlZ21lbnQsIG5ld1N0YXJ0LCBuZXdFbmQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnbm8gbmV4dCBmZWF0dXJlJyk7IC8vIEZJWE1FIGJldHRlciByZXBvcnRpbmcgd291bGQgYmUgbmljZSFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tb3ZlKDEwMCpkaXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2x5cGhMb29rdXAoZ2x5cGhzLCByeCwgcnksIG1hdGNoZXMpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hlcyB8fCBbXTtcblxuICAgIGZvciAodmFyIGdpID0gZ2x5cGhzLmxlbmd0aCAtIDE7IGdpID49IDA7IC0tZ2kpIHtcbiAgICAgICAgdmFyIGcgPSBnbHlwaHNbZ2ldO1xuICAgICAgICBpZiAoIWcubm90U2VsZWN0YWJsZSAmJiBnLm1pbigpIDw9IHJ4ICYmIGcubWF4KCkgPj0gcngpIHtcbiAgICAgICAgICAgIGlmIChnLm1pblkpIHtcbiAgICAgICAgICAgICAgICBpZiAocnkgPCBnLm1pblkoKSB8fCByeSA+IGcubWF4WSgpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGcuZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChnLmZlYXR1cmUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChnLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGcuZ3JvdXApO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKGcuZ2x5cGhzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdseXBoTG9va3VwKGcuZ2x5cGhzLCByeCwgcnksIG1hdGNoZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChnLmdseXBoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdseXBoTG9va3VwKFtnLmdseXBoXSwgcngsIHJ5LCBtYXRjaGVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLm5hbWVGb3JDb29yZFN5c3RlbSA9IGZ1bmN0aW9uKGNzKSB7XG4gICAgdmFyIHByaW1hcnkgPSBudWxsLCB1Y3NjID0gbnVsbDtcbiAgICBpZiAodGhpcy5hc3NlbWJseU5hbWVQcmltYXJ5KSB7XG4gICAgICAgIHByaW1hcnkgPSAnJyArIGNzLmF1dGg7XG4gICAgICAgIGlmICh0eXBlb2YoY3MudmVyc2lvbikgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcHJpbWFyeSArPSBjcy52ZXJzaW9uO1xuICAgIH1cbiAgICBpZiAodGhpcy5hc3NlbWJseU5hbWVVY3NjKSB7XG4gICAgICAgIHVjc2MgPSBjcy51Y3NjTmFtZTtcbiAgICB9XG4gICAgaWYgKHByaW1hcnkgIT0gbnVsbCAmJiB1Y3NjICE9IG51bGwpXG4gICAgICAgIHJldHVybiBwcmltYXJ5ICsgJy8nICsgdWNzYztcbiAgICBlbHNlIFxuICAgICAgICByZXR1cm4gcHJpbWFyeSB8fCB1Y3NjIHx8ICd1bmtub3duJztcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubWFrZUxvYWRlciA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICBzaXplID0gc2l6ZSB8fCAxNjtcbiAgICB2YXIgcmV0aW5hID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxO1xuICAgIGlmIChzaXplIDwgMjApIHtcbiAgICAgICAgcmV0dXJuIG1ha2VFbGVtZW50KCdpbWcnLCBudWxsLCB7c3JjOiB0aGlzLnJlc29sdmVVUkwoJyQkaW1nL3NwaW5uZXJfJyArIChyZXRpbmEgPyAxNiA6IDMyKSArICcuZ2lmJyksIHdpZHRoOiAnMTYnLCBoZWlnaHQ6ICcxNid9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWFrZUVsZW1lbnQoJ2ltZycsIG51bGwsIHtzcmM6IHRoaXMucmVzb2x2ZVVSTCgnJCRpbWcvc3Bpbm5lcl8nICsgKHJldGluYSA/IDI0IDogNDgpICsgJy5naWYnKSwgd2lkdGg6ICcyNCcsIGhlaWdodDogJzI0J30pO1xuICAgIH1cbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuZ2V0V29ya2VyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnVzZUZldGNoV29ya2VycyB8fCAhdGhpcy5mZXRjaFdvcmtlcnMgfHwgdGhpcy5mZXRjaFdvcmtlcnMubGVuZ3RoPT0wKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIGlmICh0aGlzLm5leHRXb3JrZXIgPj0gdGhpcy5mZXRjaFdvcmtlcnMubGVuZ3RoKVxuICAgICAgICB0aGlzLm5leHRXb3JrZXIgPSAwO1xuICAgIHJldHVybiB0aGlzLmZldGNoV29ya2Vyc1t0aGlzLm5leHRXb3JrZXIrK107XG59XG5cbmZ1bmN0aW9uIEZldGNoV29ya2VyKGJyb3dzZXIsIHdvcmtlcikge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpcy50YWdTZWVkID0gMDtcbiAgICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMuYnJvd3NlciA9IGJyb3dzZXI7XG4gICAgdGhpcy53b3JrZXIgPSB3b3JrZXI7XG5cbiAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldikge1xuICAgICAgICB2YXIgY2IgPSB0aGlzQi5jYWxsYmFja3NbZXYuZGF0YS50YWddO1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGNiKGV2LmRhdGEucmVzdWx0LCBldi5kYXRhLmVycm9yKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzQi5jYWxsYmFja3NbZXYuZGF0YS50YWddO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZUZldGNoV29ya2VyKGJyb3dzZXIpIHtcbiAgICB2YXIgd3VybCA9IGJyb3dzZXIucmVzb2x2ZVVSTChicm93c2VyLndvcmtlclBhdGgpO1xuICAgIGlmICh3dXJsLmluZGV4T2YoJy8vJykgPT0gMCkge1xuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvdHlwZSA9PT0gJ2h0dHBzOicpXG4gICAgICAgICAgICB3dXJsID0gJ2h0dHBzOicgKyB3dXJsO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB3dXJsID0gJ2h0dHA6JyArIHd1cmw7XG4gICAgfVxuXG4gICAgdmFyIHdzY3JpcHQgPSAnaW1wb3J0U2NyaXB0cyhcIicgKyB3dXJsICsgJ1wiKTsnO1xuICAgIHZhciB3YmxvYiA9IG5ldyBCbG9iKFt3c2NyaXB0XSwge3R5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J30pO1xuXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKFVSTC5jcmVhdGVPYmplY3RVUkwod2Jsb2IpKTtcblxuICAgICAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGlmIChldi5kYXRhLnRhZyA9PT0gJ2luaXQnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dvcmtlciBpbml0aWFsaXplZCcpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEZldGNoV29ya2VyKGJyb3dzZXIsIHdvcmtlcikpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHdvcmtlci5vbmVycm9yID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHJlamVjdChldi5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH0pOyAgICBcbn1cblxuRmV0Y2hXb3JrZXIucHJvdG90eXBlLnBvc3RDb21tYW5kID0gZnVuY3Rpb24oY21kLCBjYWxsYmFjaywgdHJhbnNmZXIpIHtcbiAgICB2YXIgdGFnID0gJ3gnICsgKCsrdGhpcy50YWdTZWVkKTtcbiAgICBjbWQudGFnID0gdGFnO1xuICAgIHRoaXMuY2FsbGJhY2tzW3RhZ10gPSBjYWxsYmFjaztcbiAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShjbWQsIHRyYW5zZmVyKTtcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBCcm93c2VyOiBCcm93c2VyLFxuICAgICAgICBzb3VyY2VzQXJlRXF1YWw6IHNvdXJjZXNBcmVFcXVhbCxcbiAgICAgICAgc291cmNlRGF0YVVSSTogc291cmNlRGF0YVVSSVxuICAgIH07XG5cbiAgICAvLyBSZXF1aXJlZCBiZWNhdXNlIHRoZXkgYWRkIHN0dWZmIHRvIEJyb3dzZXIucHJvdG90eXBlXG4gICAgcmVxdWlyZSgnLi9icm93c2VyLXVpJyk7XG4gICAgcmVxdWlyZSgnLi90cmFjay1hZGRlcicpO1xuICAgIHJlcXVpcmUoJy4vdHJhY2stYWRkZXItY3VzdG9tJyk7XG4gICAgcmVxdWlyZSgnLi9mZWF0dXJlLXBvcHVwJyk7XG4gICAgcmVxdWlyZSgnLi90aWVyLWFjdGlvbnMnKTtcbiAgICByZXF1aXJlKCcuL2RvbXVpJyk7XG4gICAgcmVxdWlyZSgnLi9zZWFyY2gnKTtcblxuICAgIHZhciBzYSA9IHJlcXVpcmUoJy4vc291cmNlYWRhcHRlcnMnKTtcbiAgICB2YXIgVHdvQml0U2VxdWVuY2VTb3VyY2UgPSBzYS5Ud29CaXRTZXF1ZW5jZVNvdXJjZTtcbiAgICB2YXIgREFTU2VxdWVuY2VTb3VyY2UgPSBzYS5EQVNTZXF1ZW5jZVNvdXJjZTtcblxuICAgIHZhciBLbm93blNwYWNlID0gcmVxdWlyZSgnLi9rc3BhY2UnKS5Lbm93blNwYWNlO1xuXG4gICAgdmFyIERBU1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9kYXMnKS5EQVNSZWdpc3RyeTtcbn1cblxuZnVuY3Rpb24gU291cmNlQ2FjaGUoKSB7XG4gICAgdGhpcy5zb3VyY2VzQnlVUkkgPSB7fVxufVxuXG5Tb3VyY2VDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oY29uZikge1xuICAgIHZhciBzY2IgPSB0aGlzLnNvdXJjZXNCeVVSSVtzb3VyY2VEYXRhVVJJKGNvbmYpXTtcbiAgICBpZiAoc2NiKSB7XG4gICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzY2IuY29uZmlncy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2VzQXJlRXF1YWwoc2NiLmNvbmZpZ3Nbc2ldLCBjb25mKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2Iuc291cmNlc1tzaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblNvdXJjZUNhY2hlLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbihjb25mLCBzb3VyY2UpIHtcbiAgICB2YXIgdXJpID0gc291cmNlRGF0YVVSSShjb25mKTtcbiAgICB2YXIgc2NiID0gdGhpcy5zb3VyY2VzQnlVUklbdXJpXTtcbiAgICBpZiAoIXNjYikge1xuICAgICAgICBzY2IgPSB7Y29uZmlnczogW10sIHNvdXJjZXM6IFtdfTtcbiAgICAgICAgdGhpcy5zb3VyY2VzQnlVUklbdXJpXSA9IHNjYjtcbiAgICB9XG4gICAgc2NiLmNvbmZpZ3MucHVzaChjb25mKTtcbiAgICBzY2Iuc291cmNlcy5wdXNoKHNvdXJjZSk7XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gY2hhaW5zZXQuanM6IGxpZnRvdmVyIHN1cHBvcnRcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTb3VyY2UgPSBkYXMuREFTU291cmNlO1xuICAgIHZhciBEQVNTZWdtZW50ID0gZGFzLkRBU1NlZ21lbnQ7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIHB1c2hvID0gdXRpbHMucHVzaG87XG4gICAgdmFyIHNoYWxsb3dDb3B5ID0gdXRpbHMuc2hhbGxvd0NvcHk7XG5cbiAgICB2YXIgcGFyc2VDaWdhciA9IHJlcXVpcmUoJy4vY2lnYXInKS5wYXJzZUNpZ2FyO1xuXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIFVSTEZldGNoYWJsZSA9IGJpbi5VUkxGZXRjaGFibGU7XG5cbiAgICB2YXIgYmJpID0gcmVxdWlyZSgnLi9iaWd3aWcnKTtcbiAgICB2YXIgbWFrZUJ3ZyA9IGJiaS5tYWtlQndnO1xuXG4gICAgdmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG59XG5cbmZ1bmN0aW9uIENoYWluc2V0KGNvbmYsIHNyY1RhZywgZGVzdFRhZywgY29vcmRzKSB7XG4gICAgaWYgKHR5cGVvZihjb25mKSA9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnVyaSA9IGNvbmY7XG4gICAgICAgIHRoaXMuc3JjVGFnID0gc3JjVGFnO1xuICAgICAgICB0aGlzLmRlc3RUYWcgPSBkZXN0VGFnO1xuICAgICAgICB0aGlzLmNvb3JkcyA9IGNvb3JkcztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVyaSA9IGNvbmYudXJpO1xuICAgICAgICB0aGlzLnNyY1RhZyA9IGNvbmYuc3JjVGFnO1xuICAgICAgICB0aGlzLmRlc3RUYWcgPSBjb25mLmRlc3RUYWc7XG4gICAgICAgIHRoaXMuY29vcmRzID0gc2hhbGxvd0NvcHkoY29uZi5jb29yZHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSBjb25mLnR5cGU7XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjb25mLmNyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIHRoaXMuY2hhaW5zQnlTcmMgPSB7fTtcbiAgICB0aGlzLmNoYWluc0J5RGVzdCA9IHt9O1xuICAgIHRoaXMucG9zdEZldGNoUXVldWVzID0ge307XG5cbiAgICBpZiAodGhpcy50eXBlID09ICdiaWdiZWQnKSB7XG4gICAgICAgIHRoaXMuY2hhaW5GZXRjaGVyID0gbmV3IEJCSUNoYWluRmV0Y2hlcih0aGlzLnVyaSwgdGhpcy5jcmVkZW50aWFscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGFpbkZldGNoZXIgPSBuZXcgREFTQ2hhaW5GZXRjaGVyKHRoaXMudXJpLCB0aGlzLnNyY1RhZywgdGhpcy5kZXN0VGFnKTtcbiAgICB9XG59O1xuXG5DaGFpbnNldC5wcm90b3R5cGUuZXhwb3J0Q29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXJpOiB0aGlzLnVyaSxcbiAgICAgICAgc3JjVGFnOiB0aGlzLnNyY1RhZyxcbiAgICAgICAgZGVzdFRhZzogdGhpcy5kZXN0VGFnLFxuICAgICAgICBjb29yZHM6IHRoaXMuY29vcmRzLFxuICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLmNyZWRlbnRpYWxzXG4gICAgfTtcbn1cblxuQ2hhaW5zZXQucHJvdG90eXBlLm1hcFBvaW50ID0gZnVuY3Rpb24oY2hyLCBwb3MpIHtcbiAgICB2YXIgY2hhaW5zID0gdGhpcy5jaGFpbnNCeVNyY1tjaHJdIHx8IFtdO1xuICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBjaGFpbnMubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgIHZhciBjID0gY2hhaW5zW2NpXTtcbiAgICAgICAgaWYgKHBvcyA+PSBjLnNyY01pbiAmJiBwb3MgPD0gYy5zcmNNYXgpIHtcbiAgICAgICAgICAgIHZhciBjcG9zO1xuICAgICAgICAgICAgaWYgKGMuc3JjT3JpID09ICctJykge1xuICAgICAgICAgICAgICAgIGNwb3MgPSBjLnNyY01heCAtIHBvcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3BvcyA9IHBvcyAtIGMuc3JjTWluO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJsb2NrcyA9IGMuYmxvY2tzO1xuICAgICAgICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IGJsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGJsb2Nrc1tiaV07XG4gICAgICAgICAgICAgICAgdmFyIGJTcmMgPSBiWzBdO1xuICAgICAgICAgICAgICAgIHZhciBiRGVzdCA9IGJbMV07XG4gICAgICAgICAgICAgICAgdmFyIGJTaXplID0gYlsyXTtcbiAgICAgICAgICAgICAgICBpZiAoY3BvcyA+PSBiU3JjICYmIGNwb3MgPD0gKGJTcmMgKyBiU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwb3MgPSBjcG9zIC0gYlNyYztcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZHBvcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMuZGVzdE9yaSA9PSAnLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRwb3MgPSBjLmRlc3RNYXggLSBiRGVzdCAtIGFwb3M7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcG9zID0gYXBvcyArIGJEZXN0ICsgYy5kZXN0TWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7c2VxOiBjLmRlc3RDaHIsIHBvczogZHBvcywgZmxpcHBlZDogKGMuc3JjT3JpICE9IGMuZGVzdE9yaSl9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5DaGFpbnNldC5wcm90b3R5cGUudW5tYXBQb2ludCA9IGZ1bmN0aW9uKGNociwgcG9zKSB7XG4gICAgdmFyIGNoYWlucyA9IHRoaXMuY2hhaW5zQnlEZXN0W2Nocl0gfHwgW107XG4gICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNoYWlucy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgdmFyIGMgPSBjaGFpbnNbY2ldO1xuICAgICAgICBpZiAocG9zID49IGMuZGVzdE1pbiAmJiBwb3MgPD0gYy5kZXN0TWF4KSB7XG4gICAgICAgICAgICB2YXIgY3BvcztcbiAgICAgICAgICAgIGlmIChjLnNyY09yaSA9PSAnLScpIHtcbiAgICAgICAgICAgICAgICBjcG9zID0gYy5kZXN0TWF4IC0gcG9zO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjcG9zID0gcG9zIC0gYy5kZXN0TWluO1xuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGJsb2NrcyA9IGMuYmxvY2tzO1xuICAgICAgICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IGJsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGJsb2Nrc1tiaV07XG4gICAgICAgICAgICAgICAgdmFyIGJTcmMgPSBiWzBdO1xuICAgICAgICAgICAgICAgIHZhciBiRGVzdCA9IGJbMV07XG4gICAgICAgICAgICAgICAgdmFyIGJTaXplID0gYlsyXTtcblxuICAgICAgICAgICAgICAgIGlmIChjcG9zID49IGJEZXN0ICYmIGNwb3MgPD0gKGJEZXN0ICsgYlNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcG9zID0gY3BvcyAtIGJEZXN0O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcG9zID0gYXBvcyArIGJTcmMgKyBjLnNyY01pbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRwb3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmRlc3RPcmkgPT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcG9zID0gYy5zcmNNYXggLSBiU3JjIC0gYXBvcztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRwb3MgPSBhcG9zICsgYlNyYyArIGMuc3JjTWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7c2VxOiBjLnNyY0NociwgcG9zOiBkcG9zLCBmbGlwcGVkOiAoYy5zcmNPcmkgIT0gYy5kZXN0T3JpKX1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuQ2hhaW5zZXQucHJvdG90eXBlLnNvdXJjZUJsb2Nrc0ZvclJhbmdlID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuY2hhaW5zQnlEZXN0W2Nocl0pIHtcbiAgICAgICAgdmFyIGZldGNoTmVlZGVkID0gIXRoaXMucG9zdEZldGNoUXVldWVzW2Nocl07XG4gICAgICAgIHZhciB0aGlzQ1MgPSB0aGlzO1xuICAgICAgICBwdXNobyh0aGlzLnBvc3RGZXRjaFF1ZXVlcywgY2hyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXNDUy5zb3VyY2VCbG9ja3NGb3JSYW5nZShjaHIsIG1pbiwgbWF4LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZmV0Y2hOZWVkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhaW5GZXRjaGVyLmZldGNoQ2hhaW5zKGNocikudGhlbihmdW5jdGlvbihjaGFpbnMsIGVycikge1xuICAgICAgICAgICAgICAgIGlmICghdGhpc0NTLmNoYWluc0J5RGVzdClcbiAgICAgICAgICAgICAgICAgICAgdGhpc0NTLmNoYWluc0J5RGVzdFtjaHJdID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNoYWlucy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYWluID0gY2hhaW5zW2NpXTtcbiAgICAgICAgICAgICAgICAgICAgcHVzaG8odGhpc0NTLmNoYWluc0J5U3JjLCBjaGFpbi5zcmNDaHIsIGNoYWluKTtcbiAgICAgICAgICAgICAgICAgICAgcHVzaG8odGhpc0NTLmNoYWluc0J5RGVzdCwgY2hhaW4uZGVzdENociwgY2hhaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpc0NTLnBvc3RGZXRjaFF1ZXVlc1tjaHJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZnEgPSB0aGlzQ1MucG9zdEZldGNoUXVldWVzW2Nocl07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGZxLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZnFbaV0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzQ1MucG9zdEZldGNoUXVldWVzW2Nocl0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNyY0Jsb2NrcyA9IFtdO1xuICAgICAgICB2YXIgY2hhaW5zID0gdGhpcy5jaGFpbnNCeURlc3RbY2hyXSB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNoYWlucy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gY2hhaW5zW2NpXTtcbiAgICAgICAgICAgIGlmIChtaW4gPD0gYy5kZXN0TWF4ICYmIG1heCA+PSBjLmRlc3RNaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY21pbiwgY21heDtcbiAgICAgICAgICAgICAgICBpZiAoYy5zcmNPcmkgPT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtaW4gPSBjLmRlc3RNYXggLSBtYXg7XG4gICAgICAgICAgICAgICAgICAgIGNtYXggPSBjLmRlc3RNYXggLSBtaW47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY21pbiA9IG1pbiAtIGMuZGVzdE1pbjtcbiAgICAgICAgICAgICAgICAgICAgY21heCA9IG1heCAtIGMuZGVzdE1pbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tzID0gYy5ibG9ja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IGJsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBibG9ja3NbYmldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYlNyYyA9IGJbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBiRGVzdCA9IGJbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBiU2l6ZSA9IGJbMl07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtYXggPj0gYkRlc3QgJiYgY21pbiA8PSAoYkRlc3QgKyBiU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbWluID0gTWF0aC5tYXgoY21pbiwgYkRlc3QpIC0gYkRlc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW1heCA9IE1hdGgubWluKGNtYXgsIGJEZXN0ICsgYlNpemUpIC0gYkRlc3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmRlc3RPcmkgPT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjQmxvY2tzLnB1c2gobmV3IERBU1NlZ21lbnQoYy5zcmNDaHIsIGMuc3JjTWF4IC0gYlNyYyAtIGFtYXgsIGMuc3JjTWF4IC0gYlNyYyAtIGFtaW4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjQmxvY2tzLnB1c2gobmV3IERBU1NlZ21lbnQoYy5zcmNDaHIsIGMuc3JjTWluICsgYW1pbiArIGJTcmMsIGMuc3JjTWluICsgYW1heCArIGJTcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhzcmNCbG9ja3MpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gREFTQ2hhaW5GZXRjaGVyKHVyaSwgc3JjVGFnLCBkZXN0VGFnKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBuZXcgREFTU291cmNlKHVyaSk7XG4gICAgdGhpcy5zcmNUYWcgPSBzcmNUYWc7XG4gICAgdGhpcy5kZXN0VGFnID1kZXN0VGFnO1xufVxuXG5EQVNDaGFpbkZldGNoZXIucHJvdG90eXBlLmZldGNoQ2hhaW5zID0gZnVuY3Rpb24oY2hyLCBfbWluLCBfbWF4KSB7XG4gICAgdmFyIHRoaXNDUyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRoaXNDUy5zb3VyY2UuYWxpZ25tZW50cyhjaHIsIHt9LCBmdW5jdGlvbihhbGlnbnMpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbnMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgYWkgPSAwOyBhaSA8IGFsaWducy5sZW5ndGg7ICsrYWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxuID0gYWxpZ25zW2FpXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBiaSA9IDA7IGJpIDwgYWxuLmJsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gYWxuLmJsb2Nrc1tiaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcmNTZWcsIGRlc3RTZWc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBibG9jay5zZWdtZW50cy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBibG9jay5zZWdtZW50c1tzaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gYWxuLm9iamVjdHNbc2VnLm9iamVjdF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmRiU291cmNlID09PSB0aGlzQ1Muc3JjVGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjU2VnID0gc2VnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmouZGJTb3VyY2UgPT09IHRoaXNDUy5kZXN0VGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFNlZyA9IHNlZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjU2VnICYmIGRlc3RTZWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFpbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNDaHI6ICAgICBhbG4ub2JqZWN0c1tzcmNTZWcub2JqZWN0XS5hY2Nlc3Npb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjTWluOiAgICAgc3JjU2VnLm1pbnwwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY01heDogICAgIHNyY1NlZy5tYXh8MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNPcmk6ICAgICBzcmNTZWcuc3RyYW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RDaHI6ICAgIGFsbi5vYmplY3RzW2Rlc3RTZWcub2JqZWN0XS5hY2Nlc3Npb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdE1pbjogICAgZGVzdFNlZy5taW58MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0TWF4OiAgICBkZXN0U2VnLm1heHwwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RPcmk6ICAgIGRlc3RTZWcuc3RyYW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrczogICAgIFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcmNvcHMgPSBwYXJzZUNpZ2FyKHNyY1NlZy5jaWdhciksIGRlc3RvcHMgPSBwYXJzZUNpZ2FyKGRlc3RTZWcuY2lnYXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3JjT2Zmc2V0ID0gMCwgZGVzdE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3JjaSA9IDAsIGRlc3RpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzcmNpIDwgc3Jjb3BzLmxlbmd0aCAmJiBkZXN0aSA8IGRlc3RvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNyY29wc1tzcmNpXS5vcCA9PSAnTScgJiYgZGVzdG9wc1tkZXN0aV0ub3AgPT0gJ00nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9ja0xlbiA9IE1hdGgubWluKHNyY29wc1tzcmNpXS5jbnQsIGRlc3RvcHNbZGVzdGldLmNudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluLmJsb2Nrcy5wdXNoKFtzcmNPZmZzZXQsIGRlc3RPZmZzZXQsIGJsb2NrTGVuXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmNvcHNbc3JjaV0uY250ID09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3NyY2k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNvcHNbc3JjaV0uY250IC09IGJsb2NrTGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXN0b3BzW2Rlc3RpXS5jbnQgPT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrZGVzdGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0b3BzW2Rlc3RpXSAtPSBibG9ja0xlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNPZmZzZXQgKz0gYmxvY2tMZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RPZmZzZXQgKz0gYmxvY2tMZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcmNvcHNbc3JjaV0ub3AgPT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RPZmZzZXQgKz0gc3Jjb3BzW3NyY2krK10uY250O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdG9wc1tkZXN0aV0ub3AgPT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY09mZnNldCArPSBkZXN0b3BzW2Rlc3RpKytdLmNudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWlucy5wdXNoKGNoYWluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoY2hhaW5zKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIEJCSUNoYWluRmV0Y2hlcih1cmksIGNyZWRlbnRpYWxzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMudXJpID0gdXJpO1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcblxuICAgIHRoaXMuYndnID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG1ha2VCd2cobmV3IFVSTEZldGNoYWJsZShzZWxmLnVyaSwge2NyZWRlbnRpYWxzOiBzZWxmLmNyZWRlbnRpYWxzfSksIGZ1bmN0aW9uKGJ3ZywgZXJyKSB7XG4gICAgICAgICAgICBpZiAoYndnKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShid2cpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmJ3Zy50aGVuKGZ1bmN0aW9uKGJ3ZywgZXJyKSB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwaSh4KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHgpO1xufVxuXG5mdW5jdGlvbiBiYmlGZWF0dXJlVG9DaGFpbihmZWF0dXJlKSB7XG4gICAgdmFyIGNoYWluID0ge1xuICAgICAgICBzcmNDaHI6ICAgICBmZWF0dXJlLnNyY0Nocm9tLFxuICAgICAgICBzcmNNaW46ICAgICBwYXJzZUludChmZWF0dXJlLnNyY1N0YXJ0KSxcbiAgICAgICAgc3JjTWF4OiAgICAgcGFyc2VJbnQoZmVhdHVyZS5zcmNFbmQpLFxuICAgICAgICBzcmNPcmk6ICAgICBmZWF0dXJlLnNyY09yaSxcbiAgICAgICAgZGVzdENocjogICAgZmVhdHVyZS5zZWdtZW50LFxuICAgICAgICBkZXN0TWluOiAgICBmZWF0dXJlLm1pbiAtIDEsICAgICAvLyBDb252ZXJ0IGJhY2sgZnJvbSBiaWdiZWQgcGFyc2VyXG4gICAgICAgIGRlc3RNYXg6ICAgIGZlYXR1cmUubWF4LFxuICAgICAgICBkZXN0T3JpOiAgICBmZWF0dXJlLm9yaSxcbiAgICAgICAgYmxvY2tzOiAgICAgW11cbiAgICB9O1xuICAgIHZhciBzcmNTdGFydHMgPSBmZWF0dXJlLnNyY1N0YXJ0cy5zcGxpdCgnLCcpLm1hcChwaSk7XG4gICAgdmFyIGRlc3RTdGFydHMgPSBmZWF0dXJlLmRlc3RTdGFydHMuc3BsaXQoJywnKS5tYXAocGkpO1xuICAgIHZhciBibG9ja0xlbmd0aHMgPSBmZWF0dXJlLmJsb2NrTGVucy5zcGxpdCgnLCcpLm1hcChwaSk7XG4gICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IHNyY1N0YXJ0cy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgY2hhaW4uYmxvY2tzLnB1c2goW3NyY1N0YXJ0c1tiaV0sIGRlc3RTdGFydHNbYmldLCBibG9ja0xlbmd0aHNbYmldXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYWluO1xufVxuXG5CQklDaGFpbkZldGNoZXIucHJvdG90eXBlLmZldGNoQ2hhaW5zID0gZnVuY3Rpb24oY2hyLCBfbWluLCBfbWF4KSB7XG4gICAgcmV0dXJuIHRoaXMuYndnLnRoZW4oZnVuY3Rpb24oYndnLCBlcnIpIHtcbiAgICAgICAgaWYgKCFid2cpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5vIEJXR1wiKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBid2cuZ2V0VW56b29tZWRWaWV3KCkucmVhZFdpZ0RhdGEoY2hyLCAxLCAzMDAwMDAwMDAwMCwgZnVuY3Rpb24oZmVhdHMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZlYXRzLm1hcChiYmlGZWF0dXJlVG9DaGFpbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBDaGFpbnNldDogQ2hhaW5zZXRcbiAgICB9O1xufVxuIiwiXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTBcbi8vXG4vLyBjaGFpbnNldC5qczogbGlmdG92ZXIgc3VwcG9ydFxuLy9cblxudmFyIENJR0FSX1JFR0VYUCA9IG5ldyBSZWdFeHAoJyhbMC05XSopKFtNSURTXSknLCAnZycpO1xuXG5mdW5jdGlvbiBwYXJzZUNpZ2FyKGNpZ2FyKVxue1xuICAgIHZhciBjaWdvcHMgPSBbXTtcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IENJR0FSX1JFR0VYUC5leGVjKGNpZ2FyKSkgIT0gbnVsbCkge1xuICAgICAgICB2YXIgY291bnQgPSBtYXRjaFsxXTtcbiAgICAgICAgaWYgKGNvdW50Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb3VudCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgY2lnb3BzLnB1c2goe2NudDogY291bnR8MCwgb3A6IG1hdGNoWzJdfSk7XG4gICAgfVxuICAgIHJldHVybiBjaWdvcHM7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgcGFyc2VDaWdhcjogcGFyc2VDaWdhclxuICAgIH07XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIGNvbG9yLmpzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRENvbG91cihyZWQsIGdyZWVuLCBibHVlLCBuYW1lKSB7XG4gICAgdGhpcy5yZWQgPSByZWR8MDtcbiAgICB0aGlzLmdyZWVuID0gZ3JlZW58MDtcbiAgICB0aGlzLmJsdWUgPSBibHVlfDA7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG59XG5cbkRDb2xvdXIucHJvdG90eXBlLnRvU3ZnU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJyZ2IoXCIgKyB0aGlzLnJlZCArIFwiLFwiICsgdGhpcy5ncmVlbiArIFwiLFwiICsgdGhpcy5ibHVlICsgXCIpXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbn1cblxuZnVuY3Rpb24gaGV4Mih4KSB7XG4gICAgdmFyIHkgPSAnMDAnICsgeC50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIHkuc3Vic3RyaW5nKHkubGVuZ3RoIC0gMik7XG59XG5cbkRDb2xvdXIucHJvdG90eXBlLnRvSGV4U3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcjJyArIGhleDIodGhpcy5yZWQpICsgaGV4Mih0aGlzLmdyZWVuKSArIGhleDIodGhpcy5ibHVlKTtcbn1cblxudmFyIHBhbGV0dGUgPSB7XG4gICAgcmVkOiBuZXcgRENvbG91cigyNTUsIDAsIDAsICdyZWQnKSxcbiAgICBncmVlbjogbmV3IERDb2xvdXIoMCwgMjU1LCAwLCAnZ3JlZW4nKSxcbiAgICBibHVlOiBuZXcgRENvbG91cigwLCAwLCAyNTUsICdibHVlJyksXG4gICAgeWVsbG93OiBuZXcgRENvbG91cigyNTUsIDI1NSwgMCwgJ3llbGxvdycpLFxuICAgIHdoaXRlOiBuZXcgRENvbG91cigyNTUsIDI1NSwgMjU1LCAnd2hpdGUnKSxcbiAgICBibGFjazogbmV3IERDb2xvdXIoMCwgMCwgMCwgJ2JsYWNrJyksXG4gICAgZ3JheTogbmV3IERDb2xvdXIoMTgwLCAxODAsIDE4MCwgJ2dyYXknKSxcbiAgICBncmV5OiBuZXcgRENvbG91cigxODAsIDE4MCwgMTgwLCAnZ3JleScpXG59O1xuXG52YXIgQ09MT1JfUkUgPSBuZXcgUmVnRXhwKCdeIyhbMC05QS1GYS1mXXsyfSkoWzAtOUEtRmEtZl17Mn0pKFswLTlBLUZhLWZdezJ9KSQnKTtcbnZhciBDU1NfQ09MT1JfUkUgPSAvcmdiXFwoKFswLTldKyksKFswLTldKyksKFswLTldKylcXCkvXG5cbmZ1bmN0aW9uIGRhc0NvbG91ckZvck5hbWUobmFtZSkge1xuICAgIHZhciBjID0gcGFsZXR0ZVtuYW1lXTtcbiAgICBpZiAoIWMpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gQ09MT1JfUkUuZXhlYyhuYW1lKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjID0gbmV3IERDb2xvdXIoKCcweCcgKyBtYXRjaFsxXSl8MCwgKCcweCcgKyBtYXRjaFsyXSl8MCwgKCcweCcgKyBtYXRjaFszXSl8MCwgbmFtZSk7XG4gICAgICAgICAgICBwYWxldHRlW25hbWVdID0gYztcbiAgICAgICAgfSBlbHNlIHtcbiAgICBcdCAgICBtYXRjaCA9IENTU19DT0xPUl9SRS5leGVjKG5hbWUpO1xuICAgIFx0ICAgIGlmIChtYXRjaCkge1xuICAgICAgICBcdFx0YyA9IG5ldyBEQ29sb3VyKG1hdGNoWzFdfDAsIG1hdGNoWzJdfDAsIG1hdGNoWzNdfDAsIG5hbWUpO1xuICAgICAgICBcdFx0cGFsZXR0ZVtuYW1lXSA9IGM7XG5cdCAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgIGNvbnNvbGUubG9nKFwiY291bGRuJ3QgaGFuZGxlIGNvbG9yOiBcIiArIG5hbWUpO1xuXHRcdCAgICAgIGMgPSBwYWxldHRlLmJsYWNrO1xuXHRcdCAgICAgIHBhbGV0dGVbbmFtZV0gPSBjO1xuXHQgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBtYWtlQ29sb3VyU3RlcHMoc3RlcHMsIHN0b3BzLCBjb2xvdXJzKSB7XG4gICAgdmFyIGRjb2xvdXJzID0gW107XG4gICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNvbG91cnMubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgIGRjb2xvdXJzLnB1c2goZGFzQ29sb3VyRm9yTmFtZShjb2xvdXJzW2NpXSkpO1xuICAgIH1cblxuICAgIHZhciBncmFkID0gW107XG4gIFNURVBfTE9PUDpcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc3RlcHM7ICsrc2kpIHtcbiAgICAgICAgdmFyIHJzID0gKDEuMCAqIHNpKSAvIChzdGVwcy0xKTtcbiAgICAgICAgdmFyIHNjb3JlID0gc3RvcHNbMF0gKyAoc3RvcHNbc3RvcHMubGVuZ3RoIC0xXSAtIHN0b3BzWzBdKSAqIHJzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0b3BzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICAgICAgaWYgKHNjb3JlID49IHN0b3BzW2ldICYmIHNjb3JlIDw9IHN0b3BzW2krMV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhYyA9IChzY29yZSAtIHN0b3BzW2ldKSAvIChzdG9wc1tpKzFdIC0gc3RvcHNbaV0pO1xuICAgICAgICAgICAgICAgIHZhciBjYSA9IGRjb2xvdXJzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBjYiA9IGRjb2xvdXJzW2krMV07XG5cbiAgICAgICAgICAgICAgICB2YXIgZmlsbCA9IG5ldyBEQ29sb3VyKFxuICAgICAgICAgICAgICAgICAgICAoKGNhLnJlZCAqICgxLjAgLSBmcmFjKSkgKyAoY2IucmVkICogZnJhYykpfDAsXG4gICAgICAgICAgICAgICAgICAgICgoY2EuZ3JlZW4gKiAoMS4wIC0gZnJhYykpICsgKGNiLmdyZWVuICogZnJhYykpfDAsXG4gICAgICAgICAgICAgICAgICAgICgoY2EuYmx1ZSAqICgxLjAgLSBmcmFjKSkgKyAoY2IuYmx1ZSAqIGZyYWMpKXwwXG4gICAgICAgICAgICAgICAgKS50b1N2Z1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGdyYWQucHVzaChmaWxsKTtcblxuICAgICAgICAgICAgICAgIGNvbnRpbnVlIFNURVBfTE9PUDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAnQmFkIHN0ZXAnO1xuICAgIH1cblxuICAgIHJldHVybiBncmFkO1xufVxuXG5mdW5jdGlvbiBtYWtlR3JhZGllbnQoc3RlcHMsIGNvbG9yMSwgY29sb3IyLCBjb2xvcjMpIHtcbiAgICBpZiAoY29sb3IzKSB7XG4gICAgICAgIHJldHVybiBtYWtlQ29sb3VyU3RlcHMoc3RlcHMsIFswLCAwLjUsIDFdLCBbY29sb3IxLCBjb2xvcjIsIGNvbG9yM10pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYWtlQ29sb3VyU3RlcHMoc3RlcHMsIFswLCAxXSwgW2NvbG9yMSwgY29sb3IyXSk7XG4gICAgfVxufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIG1ha2VDb2xvdXJTdGVwczogbWFrZUNvbG91clN0ZXBzLFxuICAgICAgICBtYWtlR3JhZGllbnQ6IG1ha2VHcmFkaWVudCxcbiAgICAgICAgZGFzQ29sb3VyRm9yTmFtZTogZGFzQ29sb3VyRm9yTmFtZVxuICAgIH07XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gZGFzLmpzOiBxdWVyaWVzIGFuZCBsb3ctbGV2ZWwgZGF0YSBtb2RlbC5cbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgc2hhbGxvd0NvcHkgPSB1dGlscy5zaGFsbG93Q29weTtcbiAgICB2YXIgcHVzaG8gPSB1dGlscy5wdXNobztcblxuICAgIHZhciBjb2xvciA9IHJlcXVpcmUoJy4vY29sb3InKTtcbiAgICB2YXIgbWFrZUNvbG91clN0ZXBzID0gY29sb3IubWFrZUNvbG91clN0ZXBzO1xufVxuXG52YXIgZGFzTGliRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24oZXJyTXNnKSB7XG4gICAgYWxlcnQoZXJyTXNnKTtcbn1cbnZhciBkYXNMaWJSZXF1ZXN0UXVldWUgPSBuZXcgQXJyYXkoKTtcblxuXG5cbmZ1bmN0aW9uIERBU1NlZ21lbnQobmFtZSwgc3RhcnQsIGVuZCwgZGVzY3JpcHRpb24pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG59XG5EQVNTZWdtZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOicgKyB0aGlzLnN0YXJ0ICsgJy4uJyArIHRoaXMuZW5kO1xufTtcbkRBU1NlZ21lbnQucHJvdG90eXBlLmlzQm91bmRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ICYmIHRoaXMuZW5kO1xufVxuREFTU2VnbWVudC5wcm90b3R5cGUudG9EQVNRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBxID0gJ3NlZ21lbnQ9JyArIHRoaXMubmFtZTtcbiAgICBpZiAodGhpcy5zdGFydCAmJiB0aGlzLmVuZCkge1xuICAgICAgICBxICs9ICgnOicgKyB0aGlzLnN0YXJ0ICsgJywnICsgdGhpcy5lbmQpO1xuICAgIH1cbiAgICByZXR1cm4gcTtcbn1cblxuXG5mdW5jdGlvbiBEQVNTb3VyY2UoYTEsIGEyKSB7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBhMSA9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnVyaSA9IGExO1xuICAgICAgICBvcHRpb25zID0gYTIgfHwge307XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucyA9IGExIHx8IHt9O1xuICAgIH1cbiAgICBmb3IgKHZhciBrIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZihvcHRpb25zW2tdKSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzW2tdID0gb3B0aW9uc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLmNvb3Jkcykge1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJvcHMpIHtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMuZGFzQmFzZVVSSSA9IHRoaXMudXJpO1xuICAgIGlmICh0aGlzLmRhc0Jhc2VVUkkgJiYgdGhpcy5kYXNCYXNlVVJJLnN1YnN0cih0aGlzLnVyaS5sZW5ndGggLSAxKSAhPSAnLycpIHtcbiAgICAgICAgdGhpcy5kYXNCYXNlVVJJID0gdGhpcy5kYXNCYXNlVVJJICsgJy8nO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gREFTQ29vcmRzKCkge1xufVxuXG5mdW5jdGlvbiBjb29yZHNNYXRjaChjMSwgYzIpIHtcbiAgICByZXR1cm4gYzEudGF4b24gPT0gYzIudGF4b24gJiYgYzEuYXV0aCA9PSBjMi5hdXRoICYmIGMxLnZlcnNpb24gPT0gYzIudmVyc2lvbjtcbn1cblxuLy9cbi8vIERBUyAxLjYgZW50cnlfcG9pbnRzIGNvbW1hbmRcbi8vXG5cbkRBU1NvdXJjZS5wcm90b3R5cGUuZW50cnlQb2ludHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBkYXNVUkkgPSB0aGlzLmRhc0Jhc2VVUkkgKyAnZW50cnlfcG9pbnRzJztcbiAgICB0aGlzLmRvQ3Jvc3NEb21haW5SZXF1ZXN0KGRhc1VSSSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwpIHtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2VYTUwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soW10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5UG9pbnRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHNlZ3MgPSByZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU0VHTUVOVCcpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ0lkID0gc2VnLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdTaXplID0gc2VnLmdldEF0dHJpYnV0ZSgnc2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnTWluLCBzZWdNYXg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdNaW4gPSAxOyBzZWdNYXggPSBzZWdTaXplfDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdNaW4gPSBzZWcuZ2V0QXR0cmlidXRlKCdzdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ01pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ01pbiB8PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnTWF4ID0gc2VnLmdldEF0dHJpYnV0ZSgnc3RvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ01heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ01heCB8PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdEZXNjID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdEZXNjID0gc2VnLmZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5UG9pbnRzLnB1c2gobmV3IERBU1NlZ21lbnQoc2VnSWQsIHNlZ01pbiwgc2VnTWF4LCBzZWdEZXNjKSk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICAgICAgICAgIGNhbGxiYWNrKGVudHJ5UG9pbnRzKTtcbiAgICB9KTsgICAgICAgICBcbn1cblxuLy9cbi8vIERBUyAxLjYgc2VxdWVuY2UgY29tbWFuZFxuLy8gRG8gd2UgbmVlZCBhbiBvcHRpb24gdG8gZmFsbCBiYWNrIHRvIHRoZSBkbmEgY29tbWFuZD9cbi8vXG5cbmZ1bmN0aW9uIERBU1NlcXVlbmNlKG5hbWUsIHN0YXJ0LCBlbmQsIGFscGhhLCBzZXEpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLmFscGhhYmV0ID0gYWxwaGE7XG4gICAgdGhpcy5zZXEgPSBzZXE7XG59XG5cbkRBU1NvdXJjZS5wcm90b3R5cGUuc2VxdWVuY2UgPSBmdW5jdGlvbihzZWdtZW50LCBjYWxsYmFjaykge1xuICAgIHZhciBkYXNVUkkgPSB0aGlzLmRhc0Jhc2VVUkkgKyAnc2VxdWVuY2U/JyArIHNlZ21lbnQudG9EQVNRdWVyeSgpO1xuICAgIHRoaXMuZG9Dcm9zc0RvbWFpblJlcXVlc3QoZGFzVVJJLCBmdW5jdGlvbihyZXNwb25zZVhNTCkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhbXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2VncyA9IHJlc3BvbnNlWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdTRVFVRU5DRScpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ0lkID0gc2VnLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ01pbiA9IHNlZy5nZXRBdHRyaWJ1dGUoJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdNYXggPSBzZWcuZ2V0QXR0cmlidXRlKCdzdG9wJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdBbHBoYSA9ICdETkEnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnU2VxID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3U2VxID0gc2VnLmZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnU2VxID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYWNlID0gcmF3U2VxLmluZGV4T2YoJ1xcbicsIGlkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwYWNlID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnU2VxICs9IHJhd1NlcS5zdWJzdHJpbmcoaWR4LCBzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHNwYWNlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdTZXEgKz0gcmF3U2VxLnN1YnN0cmluZyhpZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2Vxcy5wdXNoKG5ldyBEQVNTZXF1ZW5jZShzZWdJZCwgc2VnTWluLCBzZWdNYXgsIHNlZ0FscGhhLCBzZWdTZXEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soc2Vxcyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy9cbi8vIERBUyAxLjYgZmVhdHVyZXMgY29tbWFuZFxuLy9cblxuZnVuY3Rpb24gREFTRmVhdHVyZSgpIHtcbn1cblxuZnVuY3Rpb24gREFTR3JvdXAoaWQpIHtcbiAgICBpZiAoaWQpXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbn1cblxuZnVuY3Rpb24gREFTTGluayhkZXNjLCB1cmkpIHtcbiAgICB0aGlzLmRlc2MgPSBkZXNjO1xuICAgIHRoaXMudXJpID0gdXJpO1xufVxuXG5EQVNTb3VyY2UucHJvdG90eXBlLmZlYXR1cmVzID0gZnVuY3Rpb24oc2VnbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgdmFyIGRhc1VSSTtcbiAgICBpZiAodGhpcy5mZWF0dXJlc191cmkpIHtcbiAgICAgICAgZGFzVVJJID0gdGhpcy5mZWF0dXJlc191cmk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBbXTtcblxuICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgICAgZmlsdGVycy5wdXNoKHNlZ21lbnQudG9EQVNRdWVyeSgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgZyA9IG9wdGlvbnMuZ3JvdXA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGcgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goJ2dyb3VwX2lkPScgKyBnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZ2kgPSAwOyBnaSA8IGcubGVuZ3RoOyArK2dpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCgnZ3JvdXBfaWQ9JyArIGdbZ2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hZGphY2VudCkge1xuICAgICAgICAgICAgdmFyIGFkaiA9IG9wdGlvbnMuYWRqYWNlbnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFkaiA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFkaiA9IFthZGpdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgYWkgPSAwOyBhaSA8IGFkai5sZW5ndGg7ICsrYWkpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goJ2FkamFjZW50PScgKyBhZGpbYWldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50eXBlID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKCd0eXBlPScgKyBvcHRpb25zLnR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgb3B0aW9ucy50eXBlLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goJ3R5cGU9JyArIG9wdGlvbnMudHlwZVt0aV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4Ymlucykge1xuICAgICAgICAgICAgZmlsdGVycy5wdXNoKCdtYXhiaW5zPScgKyBvcHRpb25zLm1heGJpbnMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkYXNVUkkgPSB0aGlzLmRhc0Jhc2VVUkkgKyAnZmVhdHVyZXM/JyArIGZpbHRlcnMuam9pbignOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soW10sICdObyBmaWx0ZXJzIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgfSBcbiAgIFxuXG4gICAgdGhpcy5kb0Nyb3NzRG9tYWluUmVxdWVzdChkYXNVUkksIGZ1bmN0aW9uKHJlc3BvbnNlWE1MLCByZXEpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZVhNTCkge1xuICAgICAgICAgICAgdmFyIG1zZztcbiAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09IDApIHtcbiAgICAgICAgICAgICAgICBtc2cgPSAnc2VydmVyIG1heSBub3Qgc3VwcG9ydCBDT1JTJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbXNnID0gJ3N0YXR1cz0nICsgcmVxLnN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKFtdLCAnRmFpbGVkIHJlcXVlc3Q6ICcgKyBtc2cpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4vKiAgICAgIGlmIChyZXEpIHtcbiAgICAgICAgICAgIHZhciBjYXBzID0gcmVxLmdldFJlc3BvbnNlSGVhZGVyKCdYLURBUy1DYXBhYmlsdGllcycpO1xuICAgICAgICAgICAgaWYgKGNhcHMpIHtcbiAgICAgICAgICAgICAgICBhbGVydChjYXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAqL1xuXG4gICAgICAgIHZhciBmZWF0dXJlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB2YXIgc2VnbWVudE1hcCA9IHt9O1xuXG4gICAgICAgIHZhciBzZWdzID0gcmVzcG9uc2VYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1NFR01FTlQnKTtcbiAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHNlZ3MubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICB2YXIgc2VnbWVudFhNTCA9IHNlZ3Nbc2ldO1xuICAgICAgICAgICAgdmFyIHNlZ21lbnRJRCA9IHNlZ21lbnRYTUwuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgc2VnbWVudE1hcFtzZWdtZW50SURdID0ge1xuICAgICAgICAgICAgICAgIG1pbjogc2VnbWVudFhNTC5nZXRBdHRyaWJ1dGUoJ3N0YXJ0JyksXG4gICAgICAgICAgICAgICAgbWF4OiBzZWdtZW50WE1MLmdldEF0dHJpYnV0ZSgnc3RvcCcpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZmVhdHVyZVhNTHMgPSBzZWdtZW50WE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdGRUFUVVJFJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZlYXR1cmVYTUxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlWE1Mc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGFzRmVhdHVyZSA9IG5ldyBEQVNGZWF0dXJlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5zZWdtZW50ID0gc2VnbWVudElEO1xuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUuaWQgPSBmZWF0dXJlLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLmxhYmVsID0gZmVhdHVyZS5nZXRBdHRyaWJ1dGUoJ2xhYmVsJyk7XG5cblxuLypcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlcyA9IGZlYXR1cmUuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNoaWxkTm9kZXMubGVuZ3RoOyArK2MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNuID0gY2hpbGROb2Rlc1tjXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNuLm5vZGVUeXBlID09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gY24udGFnTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHZhbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChjbi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHZhbCA9IGNuLmZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlW2tleV0gPSAneCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICovXG5cblxuICAgICAgICAgICAgICAgIHZhciBzcG9zID0gZWxlbWVudFZhbHVlKGZlYXR1cmUsIFwiU1RBUlRcIik7XG4gICAgICAgICAgICAgICAgdmFyIGVwb3MgPSBlbGVtZW50VmFsdWUoZmVhdHVyZSwgXCJFTkRcIik7XG4gICAgICAgICAgICAgICAgaWYgKChzcG9zfDApID4gKGVwb3N8MCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5taW4gPSBlcG9zfDA7XG4gICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubWF4ID0gc3Bvc3wwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubWluID0gc3Bvc3wwO1xuICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLm1heCA9IGVwb3N8MDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVjID0gZmVhdHVyZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnVFlQRScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZSA9IHRlY1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS50eXBlID0gdGUuZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnR5cGVJZCA9IHRlLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUudHlwZUN2ID0gdGUuZ2V0QXR0cmlidXRlKCdjdklkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGFzRmVhdHVyZS50eXBlID0gZWxlbWVudFZhbHVlKGZlYXR1cmUsIFwiVFlQRVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhc0ZlYXR1cmUudHlwZSAmJiBkYXNGZWF0dXJlLnR5cGVJZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnR5cGUgPSBkYXNGZWF0dXJlLnR5cGVJZDsgLy8gRklYTUU/XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubWV0aG9kID0gZWxlbWVudFZhbHVlKGZlYXR1cmUsIFwiTUVUSE9EXCIpO1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaSA9IGVsZW1lbnRWYWx1ZShmZWF0dXJlLCBcIk9SSUVOVEFUSU9OXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9yaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpID0gJzAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUub3JpZW50YXRpb24gPSBvcmk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUuc2NvcmUgPSBlbGVtZW50VmFsdWUoZmVhdHVyZSwgXCJTQ09SRVwiKTtcbiAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLmxpbmtzID0gZGFzTGlua3NPZihmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLm5vdGVzID0gZGFzTm90ZXNPZihmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBzID0gZmVhdHVyZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkdST1VQXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGdpICA9IDA7IGdpIDwgZ3JvdXBzLmxlbmd0aDsgKytnaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBYTUwgPSBncm91cHNbZ2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGFzR3JvdXAgPSBuZXcgREFTR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgZGFzR3JvdXAudHlwZSA9IGdyb3VwWE1MLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICAgICAgICAgICAgICBkYXNHcm91cC5pZCA9IGdyb3VwWE1MLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZGFzR3JvdXAubGlua3MgPSBkYXNMaW5rc09mKGdyb3VwWE1MKTtcbiAgICAgICAgICAgICAgICAgICAgZGFzR3JvdXAubm90ZXMgPSBkYXNOb3Rlc09mKGdyb3VwWE1MKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXNGZWF0dXJlLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5ncm91cHMgPSBuZXcgQXJyYXkoZGFzR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5ncm91cHMucHVzaChkYXNHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWdpYyBub3Rlcy4gIENoZWNrIHdpdGggVEFEIGJlZm9yZSBjaGFuZ2luZyB0aGlzLlxuICAgICAgICAgICAgICAgIGlmIChkYXNGZWF0dXJlLm5vdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5pID0gMDsgbmkgPCBkYXNGZWF0dXJlLm5vdGVzLmxlbmd0aDsgKytuaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBkYXNGZWF0dXJlLm5vdGVzW25pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmluZGV4T2YoJ0dlbmVuYW1lPScpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2cgPSBuZXcgREFTR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZy50eXBlPSdnZW5lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZy5pZCA9IG4uc3Vic3RyaW5nKDkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGFzRmVhdHVyZS5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5ncm91cHMgPSBuZXcgQXJyYXkoZ2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUuZ3JvdXBzLnB1c2goZ2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZWMgPSBmZWF0dXJlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdQQVJUJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwaSA9IDA7IHBpIDwgcGVjLmxlbmd0aDsgKytwaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2gocGVjW3BpXS5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5wYXJ0cyA9IHBhcnRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlYyA9IGZlYXR1cmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1BBUkVOVCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwaSA9IDA7IHBpIDwgcGVjLmxlbmd0aDsgKytwaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChwZWNbcGldLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnBhcmVudHMgPSBwYXJlbnRzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZGFzRmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgY2FsbGJhY2soZmVhdHVyZXMsIHVuZGVmaW5lZCwgc2VnbWVudE1hcCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKFtdLCBlcnIpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBEQVNBbGlnbm1lbnQodHlwZSkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5vYmplY3RzID0ge307XG4gICAgdGhpcy5ibG9ja3MgPSBbXTtcbn1cblxuREFTU291cmNlLnByb3RvdHlwZS5hbGlnbm1lbnRzID0gZnVuY3Rpb24oc2VnbWVudCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgZGFzVVJJID0gdGhpcy5kYXNCYXNlVVJJICsgJ2FsaWdubWVudD9xdWVyeT0nICsgc2VnbWVudDtcbiAgICB0aGlzLmRvQ3Jvc3NEb21haW5SZXF1ZXN0KGRhc1VSSSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZVhNTCkge1xuICAgICAgICAgICAgY2FsbGJhY2soW10sICdGYWlsZWQgcmVxdWVzdCAnICsgZGFzVVJJKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbGlnbm1lbnRzID0gW107XG4gICAgICAgIHZhciBhbGlYTUxzID0gcmVzcG9uc2VYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FsaWdubWVudCcpO1xuICAgICAgICBmb3IgKHZhciBhaSA9IDA7IGFpIDwgYWxpWE1Mcy5sZW5ndGg7ICsrYWkpIHtcbiAgICAgICAgICAgIHZhciBhbGlYTUwgPSBhbGlYTUxzW2FpXTtcbiAgICAgICAgICAgIHZhciBhbGkgPSBuZXcgREFTQWxpZ25tZW50KGFsaVhNTC5nZXRBdHRyaWJ1dGUoJ2FsaWduVHlwZScpKTtcbiAgICAgICAgICAgIHZhciBvYmpYTUxzID0gYWxpWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhbGlnbk9iamVjdCcpO1xuICAgICAgICAgICAgZm9yICh2YXIgb2kgPSAwOyBvaSA8IG9ialhNTHMubGVuZ3RoOyArK29pKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ialhNTCA9IG9ialhNTHNbb2ldO1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiAgICAgICAgICBvYmpYTUwuZ2V0QXR0cmlidXRlKCdpbnRPYmplY3RJZCcpLFxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3Npb246ICAgb2JqWE1MLmdldEF0dHJpYnV0ZSgnZGJBY2Nlc3Npb25JZCcpLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAgICAgb2JqWE1MLmdldEF0dHJpYnV0ZSgnb2JqZWN0VmVyc2lvbicpLFxuICAgICAgICAgICAgICAgICAgICBkYlNvdXJjZTogICAgb2JqWE1MLmdldEF0dHJpYnV0ZSgnZGJTb3VyY2UnKSxcbiAgICAgICAgICAgICAgICAgICAgZGJWZXJzaW9uOiAgIG9ialhNTC5nZXRBdHRyaWJ1dGUoJ2RiVmVyc2lvbicpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhbGkub2JqZWN0c1tvYmouaWRdID0gb2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYmxvY2tYTUxzID0gYWxpWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdibG9jaycpO1xuICAgICAgICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IGJsb2NrWE1Mcy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tYTUwgPSBibG9ja1hNTHNbYmldO1xuICAgICAgICAgICAgICAgIHZhciBibG9jayA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICAgICAgYmxvY2tYTUwuZ2V0QXR0cmlidXRlKCdibG9ja09yZGVyJyksXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzOiAgIFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgc2VnWE1McyA9IGJsb2NrWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzZWdtZW50Jyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHNlZ1hNTHMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdYTUwgPSBzZWdYTUxzW3NpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogICAgICBzZWdYTUwuZ2V0QXR0cmlidXRlKCdpbnRPYmplY3RJZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAgICAgICAgIHNlZ1hNTC5nZXRBdHRyaWJ1dGUoJ3N0YXJ0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6ICAgICAgICAgc2VnWE1MLmdldEF0dHJpYnV0ZSgnZW5kJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJhbmQ6ICAgICAgc2VnWE1MLmdldEF0dHJpYnV0ZSgnc3RyYW5kJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaWdhcjogICAgICAgZWxlbWVudFZhbHVlKHNlZ1hNTCwgJ2NpZ2FyJylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suc2VnbWVudHMucHVzaChzZWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbGkuYmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgfSAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBhbGlnbm1lbnRzLnB1c2goYWxpKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhhbGlnbm1lbnRzKTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBEQVNTdHlsZXNoZWV0KCkge1xuLypcbiAgICB0aGlzLmhpZ2hab29tU3R5bGVzID0gbmV3IE9iamVjdCgpO1xuICAgIHRoaXMubWVkaXVtWm9vbVN0eWxlcyA9IG5ldyBPYmplY3QoKTtcbiAgICB0aGlzLmxvd1pvb21TdHlsZXMgPSBuZXcgT2JqZWN0KCk7XG4qL1xuXG4gICAgdGhpcy5zdHlsZXMgPSBbXTtcbn1cblxuREFTU3R5bGVzaGVldC5wcm90b3R5cGUucHVzaFN0eWxlID0gZnVuY3Rpb24oZmlsdGVycywgem9vbSwgc3R5bGUpIHtcbiAgICAvKlxuXG4gICAgaWYgKCF6b29tKSB7XG4gICAgICAgIHRoaXMuaGlnaFpvb21TdHlsZXNbdHlwZV0gPSBzdHlsZTtcbiAgICAgICAgdGhpcy5tZWRpdW1ab29tU3R5bGVzW3R5cGVdID0gc3R5bGU7XG4gICAgICAgIHRoaXMubG93Wm9vbVN0eWxlc1t0eXBlXSA9IHN0eWxlO1xuICAgIH0gZWxzZSBpZiAoem9vbSA9PSAnaGlnaCcpIHtcbiAgICAgICAgdGhpcy5oaWdoWm9vbVN0eWxlc1t0eXBlXSA9IHN0eWxlO1xuICAgIH0gZWxzZSBpZiAoem9vbSA9PSAnbWVkaXVtJykge1xuICAgICAgICB0aGlzLm1lZGl1bVpvb21TdHlsZXNbdHlwZV0gPSBzdHlsZTtcbiAgICB9IGVsc2UgaWYgKHpvb20gPT0gJ2xvdycpIHtcbiAgICAgICAgdGhpcy5sb3dab29tU3R5bGVzW3R5cGVdID0gc3R5bGU7XG4gICAgfVxuXG4gICAgKi9cblxuICAgIGlmICghZmlsdGVycykge1xuICAgICAgICBmaWx0ZXJzID0ge3R5cGU6ICdkZWZhdWx0J307XG4gICAgfVxuICAgIHZhciBzdHlsZUhvbGRlciA9IHNoYWxsb3dDb3B5KGZpbHRlcnMpO1xuICAgIGlmICh6b29tKSB7XG4gICAgICAgIHN0eWxlSG9sZGVyLnpvb20gPSB6b29tO1xuICAgIH1cbiAgICBzdHlsZUhvbGRlci5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMuc3R5bGVzLnB1c2goc3R5bGVIb2xkZXIpO1xufVxuXG5mdW5jdGlvbiBEQVNTdHlsZSgpIHtcbn1cblxuZnVuY3Rpb24gcGFyc2VHcmFkaWVudChncmFkKSB7XG4gICAgdmFyIHN0ZXBzID0gZ3JhZC5nZXRBdHRyaWJ1dGUoJ3N0ZXBzJyk7XG4gICAgaWYgKHN0ZXBzKSB7XG4gICAgICAgIHN0ZXBzID0gc3RlcHN8MDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwcyA9IDUwO1xuICAgIH1cblxuXG4gICAgdmFyIHN0b3BzID0gW107XG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuICAgIHZhciBzZSA9IGdyYWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1NUT1AnKTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc2UubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzdG9wID0gc2Vbc2ldO1xuICAgICAgICBzdG9wcy5wdXNoKDEuMCAqIHN0b3AuZ2V0QXR0cmlidXRlKCdzY29yZScpKTtcbiAgICAgICAgY29sb3JzLnB1c2goc3RvcC5maXJzdENoaWxkLm5vZGVWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VDb2xvdXJTdGVwcyhzdGVwcywgc3RvcHMsIGNvbG9ycyk7XG59XG5cbkRBU1NvdXJjZS5wcm90b3R5cGUuc3R5bGVzaGVldCA9IGZ1bmN0aW9uKHN1Y2Nlc3NDQiwgZmFpbHVyZUNCKSB7XG4gICAgdmFyIGRhc1VSSSwgY3JlZHMgPSB0aGlzLmNyZWRlbnRpYWxzO1xuICAgIGlmICh0aGlzLnN0eWxlc2hlZXRfdXJpKSB7XG4gICAgICAgIGRhc1VSSSA9IHRoaXMuc3R5bGVzaGVldF91cmk7XG4gICAgICAgIGNyZWRzID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGFzVVJJID0gdGhpcy5kYXNCYXNlVVJJICsgJ3N0eWxlc2hlZXQnO1xuICAgIH1cblxuICAgIGRvQ3Jvc3NEb21haW5SZXF1ZXN0KGRhc1VSSSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZVhNTCkge1xuICAgICAgICAgICAgaWYgKGZhaWx1cmVDQikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVDQigpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3R5bGVzaGVldCA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG4gICAgICAgIHZhciB0eXBlWE1McyA9IHJlc3BvbnNlWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdUWVBFJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZVhNTHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciB0eXBlU3R5bGUgPSB0eXBlWE1Mc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGZpbHRlciA9IHt9O1xuICAgICAgICAgICAgZmlsdGVyLnR5cGUgPSB0eXBlU3R5bGUuZ2V0QXR0cmlidXRlKCdpZCcpOyAvLyBBbSBJIHJpZ2h0IGluIHRoaW5raW5nIHRoYXQgdGhpcyBtYWtlcyBEQVNTVFlMRSBYTUwgaW52YWxpZD8gIFVnaC5cbiAgICAgICAgICAgIGZpbHRlci5sYWJlbCA9IHR5cGVTdHlsZS5nZXRBdHRyaWJ1dGUoJ2xhYmVsJyk7XG4gICAgICAgICAgICBmaWx0ZXIubWV0aG9kID0gdHlwZVN0eWxlLmdldEF0dHJpYnV0ZSgnbWV0aG9kJyk7XG4gICAgICAgICAgICB2YXIgZ2x5cGhYTUxzID0gdHlwZVN0eWxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdHTFlQSCcpO1xuICAgICAgICAgICAgZm9yICh2YXIgZ2kgPSAwOyBnaSA8IGdseXBoWE1Mcy5sZW5ndGg7ICsrZ2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGhYTUwgPSBnbHlwaFhNTHNbZ2ldO1xuICAgICAgICAgICAgICAgIHZhciB6b29tID0gZ2x5cGhYTUwuZ2V0QXR0cmlidXRlKCd6b29tJyk7XG4gICAgICAgICAgICAgICAgdmFyIGdseXBoID0gY2hpbGRFbGVtZW50T2YoZ2x5cGhYTUwpO1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgICAgIHN0eWxlLmdseXBoID0gZ2x5cGgubG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGdseXBoLmZpcnN0Q2hpbGQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsZXJ0KGNoaWxkLmxvY2FsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubG9jYWxOYW1lID09ICdCR0dSQUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbY2hpbGQubG9jYWxOYW1lXSA9IHBhcnNlR3JhZGllbnQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVtjaGlsZC5sb2NhbE5hbWVdID0gY2hpbGQuZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoZmlsdGVyLCB6b29tLCBzdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VjY2Vzc0NCKHN0eWxlc2hlZXQpO1xuICAgIH0sIGNyZWRzKTtcbn1cblxuLy9cbi8vIHNvdXJjZXMgY29tbWFuZFxuLy8gXG5cbmZ1bmN0aW9uIERBU1JlZ2lzdHJ5KHVyaSwgb3B0cylcbntcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzOyAgIFxufVxuXG5EQVNSZWdpc3RyeS5wcm90b3R5cGUuc291cmNlcyA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBmYWlsdXJlLCBvcHRzKVxue1xuICAgIGlmICghb3B0cykge1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIGZpbHRlcnMgPSBbXTtcbiAgICBpZiAob3B0cy50YXhvbikge1xuICAgICAgICBmaWx0ZXJzLnB1c2goJ29yZ2FuaXNtPScgKyBvcHRzLnRheG9uKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuYXV0aCkge1xuICAgICAgICBmaWx0ZXJzLnB1c2goJ2F1dGhvcml0eT0nICsgb3B0cy5hdXRoKTtcbiAgICB9XG4gICAgaWYgKG9wdHMudmVyc2lvbikge1xuICAgICAgICBmaWx0ZXJzLnB1c2goJ3ZlcnNpb249JyArIG9wdHMudmVyc2lvbik7XG4gICAgfVxuICAgIHZhciBxdXJpID0gdGhpcy51cmk7XG4gICAgaWYgKGZpbHRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBxdXJpID0gcXVyaSArICc/JyArIGZpbHRlcnMuam9pbignJicpOyAgIC8vICcmJyBhcyBhIHNlcGFyYXRvciB0byBoYWNrIGFyb3VuZCBkYXNyZWdpc3RyeS5vcmcgYnVnLlxuICAgIH1cblxuICAgIGRvQ3Jvc3NEb21haW5SZXF1ZXN0KHF1cmksIGZ1bmN0aW9uKHJlc3BvbnNlWE1MKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2VYTUwgJiYgZmFpbHVyZSkge1xuICAgICAgICAgICAgZmFpbHVyZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTsgICAgICAgXG4gICAgICAgIHZhciBzb3VyY2VYTUxzID0gcmVzcG9uc2VYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1NPVVJDRScpO1xuICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc291cmNlWE1Mcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VYTUwgPSBzb3VyY2VYTUxzW3NpXTtcbiAgICAgICAgICAgIHZhciB2ZXJzaW9uWE1McyA9IHNvdXJjZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnVkVSU0lPTicpO1xuICAgICAgICAgICAgaWYgKHZlcnNpb25YTUxzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2ZXJzaW9uWE1MID0gdmVyc2lvblhNTHNbMF07XG5cbiAgICAgICAgICAgIHZhciBjb29yZFhNTHMgPSB2ZXJzaW9uWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdDT09SRElOQVRFUycpO1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNvb3JkWE1Mcy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29vcmRYTUwgPSBjb29yZFhNTHNbY2ldO1xuICAgICAgICAgICAgICAgIHZhciBjb29yZCA9IG5ldyBEQVNDb29yZHMoKTtcbiAgICAgICAgICAgICAgICBjb29yZC5hdXRoID0gY29vcmRYTUwuZ2V0QXR0cmlidXRlKCdhdXRob3JpdHknKTtcbiAgICAgICAgICAgICAgICBjb29yZC50YXhvbiA9IGNvb3JkWE1MLmdldEF0dHJpYnV0ZSgndGF4aWQnKTtcbiAgICAgICAgICAgICAgICBjb29yZC52ZXJzaW9uID0gY29vcmRYTUwuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJyk7XG4gICAgICAgICAgICAgICAgY29vcmRzLnB1c2goY29vcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY2FwcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGNhcFhNTHMgPSB2ZXJzaW9uWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdDQVBBQklMSVRZJyk7XG4gICAgICAgICAgICB2YXIgdXJpO1xuICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGNhcFhNTHMubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhcFhNTCA9IGNhcFhNTHNbY2ldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNhcHMucHVzaChjYXBYTUwuZ2V0QXR0cmlidXRlKCd0eXBlJykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhcFhNTC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PSAnZGFzMTpmZWF0dXJlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZlcCA9IGNhcFhNTC5nZXRBdHRyaWJ1dGUoJ3F1ZXJ5X3VyaScpO1xuICAgICAgICAgICAgICAgICAgICB1cmkgPSBmZXAuc3Vic3RyaW5nKDAsIGZlcC5sZW5ndGggLSAoJ2ZlYXR1cmVzJy5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xuICAgICAgICAgICAgdmFyIHByb3BYTUxzID0gdmVyc2lvblhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnUFJPUCcpO1xuICAgICAgICAgICAgZm9yICh2YXIgcGkgPSAwOyBwaSA8IHByb3BYTUxzLmxlbmd0aDsgKytwaSkge1xuICAgICAgICAgICAgICAgIHB1c2hvKHByb3BzLCBwcm9wWE1Mc1twaV0uZ2V0QXR0cmlidXRlKCduYW1lJyksIHByb3BYTUxzW3BpXS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodXJpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBEQVNTb3VyY2UodXJpLCB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZV91cmk6IHNvdXJjZVhNTC5nZXRBdHRyaWJ1dGUoJ3VyaScpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAgc291cmNlWE1MLmdldEF0dHJpYnV0ZSgndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogIHNvdXJjZVhNTC5nZXRBdHRyaWJ1dGUoJ2Rlc2NyaXB0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkczogY29vcmRzLFxuICAgICAgICAgICAgICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdGllczogY2Fwc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjYWxsYmFjayhzb3VyY2VzKTtcbiAgICB9KTtcbn1cblxuXG4vL1xuLy8gVXRpbGl0eSBmdW5jdGlvbnNcbi8vXG5cbmZ1bmN0aW9uIGVsZW1lbnRWYWx1ZShlbGVtZW50LCB0YWcpXG57XG4gICAgdmFyIGNoaWxkcmVuID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpO1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwICYmIGNoaWxkcmVuWzBdLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgdmFyIGMgPSBjaGlsZHJlblswXTtcbiAgICAgICAgaWYgKGMuY2hpbGROb2Rlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGMuZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcyA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgbmkgPSAwOyBuaSA8IGMuY2hpbGROb2Rlcy5sZW5ndGg7ICsrbmkpIHtcbiAgICAgICAgICAgICAgICBzICs9IGMuY2hpbGROb2Rlc1tuaV0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hpbGRFbGVtZW50T2YoZWxlbWVudClcbntcbiAgICBpZiAoZWxlbWVudC5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gZWxlbWVudC5maXJzdENoaWxkO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoY2hpbGQgIT0gbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5cbmZ1bmN0aW9uIGRhc0xpbmtzT2YoZWxlbWVudClcbntcbiAgICB2YXIgbGlua3MgPSBuZXcgQXJyYXkoKTtcbiAgICB2YXIgbWF5YmVMaW5rQ2hpbGRlbiA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0xJTksnKTtcbiAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgbWF5YmVMaW5rQ2hpbGRlbi5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgdmFyIGxpbmtYTUwgPSBtYXliZUxpbmtDaGlsZGVuW2NpXTtcbiAgICAgICAgaWYgKGxpbmtYTUwucGFyZW50Tm9kZSA9PSBlbGVtZW50KSB7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKG5ldyBEQVNMaW5rKGxpbmtYTUwuZmlyc3RDaGlsZCA/IGxpbmtYTUwuZmlyc3RDaGlsZC5ub2RlVmFsdWUgOiAnVW5rbm93bicsIGxpbmtYTUwuZ2V0QXR0cmlidXRlKCdocmVmJykpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmZ1bmN0aW9uIGRhc05vdGVzT2YoZWxlbWVudClcbntcbiAgICB2YXIgbm90ZXMgPSBbXTtcbiAgICB2YXIgbWF5YmVOb3RlcyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ05PVEUnKTtcbiAgICBmb3IgKHZhciBuaSA9IDA7IG5pIDwgbWF5YmVOb3Rlcy5sZW5ndGg7ICsrbmkpIHtcbiAgICAgICAgaWYgKG1heWJlTm90ZXNbbmldLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIG5vdGVzLnB1c2gobWF5YmVOb3Rlc1tuaV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3Rlcztcbn1cblxuZnVuY3Rpb24gZG9Dcm9zc0RvbWFpblJlcXVlc3QodXJsLCBoYW5kbGVyLCBjcmVkZW50aWFscywgY3VzdEF1dGgpIHtcbiAgICAvLyBUT0RPOiBleHBsaWNpdCBlcnJvciBoYW5kbGVycz9cblxuICAgIGlmICh3aW5kb3cuWERvbWFpblJlcXVlc3QpIHtcbiAgICAgICAgdmFyIHJlcSA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZG9tID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpO1xuICAgICAgICAgICAgZG9tLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICBkb20ubG9hZFhNTChyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGhhbmRsZXIoZG9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXEub3BlbihcImdldFwiLCB1cmwpO1xuICAgICAgICByZXEuc2VuZCgnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlcVN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID49IDIwMCB8fCByZXEuc3RhdHVzID09IDApIHtcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXIocmVxLnJlc3BvbnNlWE1MLCByZXEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlcS5vcGVuKFwiZ2V0XCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIGlmIChjcmVkZW50aWFscykge1xuICAgICAgICAgICAgcmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1c3RBdXRoKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignWC1EQVMtQXV0aG9yaXNhdGlvbicsIGN1c3RBdXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL3htbCwqLyonKTtcbiAgICAgICAgcmVxLnNlbmQoJycpO1xuICAgIH1cbn1cblxuREFTU291cmNlLnByb3RvdHlwZS5kb0Nyb3NzRG9tYWluUmVxdWVzdCA9IGZ1bmN0aW9uKHVybCwgaGFuZGxlciwgZXJySGFuZGxlcikge1xuICAgIHZhciBjdXN0QXV0aDtcbiAgICBpZiAodGhpcy54VXNlcikge1xuICAgICAgICBjdXN0QXV0aCA9ICdCYXNpYyAnICsgYnRvYSh0aGlzLnhVc2VyICsgJzonICsgdGhpcy54UGFzcyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRvQ3Jvc3NEb21haW5SZXF1ZXN0KHVybCwgaGFuZGxlciwgdGhpcy5jcmVkZW50aWFscywgY3VzdEF1dGgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJySGFuZGxlcikge1xuICAgICAgICAgICAgZXJySGFuZGxlcihlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0Rhc0Jvb2xlYW5UcnVlKHMpIHtcbiAgICBzID0gKCcnICsgcykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gcz09PSd5ZXMnIHx8IHM9PT0ndHJ1ZSc7XG59XG5cbmZ1bmN0aW9uIGlzRGFzQm9vbGVhbk5vdEZhbHNlKHMpIHtcbiAgICBpZiAoIXMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHMgPSAoJycgKyBzKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBzIT09J25vJyB8fCBzIT09J2ZhbHNlJztcbn1cblxuZnVuY3Rpb24gY29weVN0eWxlc2hlZXQoc3MpIHtcbiAgICB2YXIgbnNzID0gc2hhbGxvd0NvcHkoc3MpO1xuICAgIG5zcy5zdHlsZXMgPSBbXTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc3Muc3R5bGVzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICB2YXIgc2ggPSBuc3Muc3R5bGVzW3NpXSA9IHNoYWxsb3dDb3B5KHNzLnN0eWxlc1tzaV0pO1xuICAgICAgICBzaC5fbWV0aG9kUkUgPSBzaC5fbGFiZWxSRSA9IHNoLl90eXBlUkUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHNoLnN0eWxlID0gc2hhbGxvd0NvcHkoc2guc3R5bGUpO1xuICAgICAgICBzaC5zdHlsZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG5zcztcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBEQVNHcm91cDogREFTR3JvdXAsXG4gICAgICAgIERBU0ZlYXR1cmU6IERBU0ZlYXR1cmUsXG4gICAgICAgIERBU1N0eWxlc2hlZXQ6IERBU1N0eWxlc2hlZXQsXG4gICAgICAgIERBU1N0eWxlOiBEQVNTdHlsZSxcbiAgICAgICAgREFTU291cmNlOiBEQVNTb3VyY2UsXG4gICAgICAgIERBU1NlZ21lbnQ6IERBU1NlZ21lbnQsXG4gICAgICAgIERBU1JlZ2lzdHJ5OiBEQVNSZWdpc3RyeSxcbiAgICAgICAgREFTU2VxdWVuY2U6IERBU1NlcXVlbmNlLFxuXG4gICAgICAgIGlzRGFzQm9vbGVhblRydWU6IGlzRGFzQm9vbGVhblRydWUsXG4gICAgICAgIGlzRGFzQm9vbGVhbk5vdEZhbHNlOiBpc0Rhc0Jvb2xlYW5Ob3RGYWxzZSxcbiAgICAgICAgY29weVN0eWxlc2hlZXQ6IGNvcHlTdHlsZXNoZWV0XG4gICAgfTtcbn0iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gZG9tdWkuanM6IFNWRyBVSSBjb21wb25lbnRzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYnJvd3NlciA9IHJlcXVpcmUoJy4vY2Jyb3dzZXInKTtcbiAgICB2YXIgQnJvd3NlciA9IGJyb3dzZXIuQnJvd3NlcjtcblxuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgbWFrZUVsZW1lbnQgPSB1dGlscy5tYWtlRWxlbWVudDtcbiAgICB2YXIgcmVtb3ZlQ2hpbGRyZW4gPSB1dGlscy5yZW1vdmVDaGlsZHJlbjtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUucmVtb3ZlQWxsUG9wdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgcmVtb3ZlQ2hpbGRyZW4odGhpcy5oUG9wdXBIb2xkZXIpO1xuICAgIHJlbW92ZUNoaWxkcmVuKHRoaXMucG9wdXBIb2xkZXIpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5tYWtlVG9vbHRpcCA9IGZ1bmN0aW9uKGVsZSwgdGV4dClcbntcbiAgICB2YXIgaXNpbiA9IGZhbHNlO1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgb3V0bGlzdGVuZXI7XG4gICAgb3V0bGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICBpc2luID0gZmFsc2U7XG4gICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBvdXRsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH07XG5cbiAgICB2YXIgc2V0dXAgPSBmdW5jdGlvbihldikge1xuICAgICAgICB2YXIgbXggPSBldi5jbGllbnRYICsgd2luZG93LnNjcm9sbFgsIG15ID0gZXYuY2xpZW50WSArIHdpbmRvdy5zY3JvbGxZO1xuICAgICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR0dDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHRleHQpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHR0dCA9IHRleHQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0dHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwb3B1cCA9IG1ha2VFbGVtZW50KCdkaXYnLFxuICAgICAgICAgICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHtjbGFzc05hbWU6ICd0b29sdGlwLWFycm93J30pLFxuICAgICAgICAgICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ2RpdicsIHR0dCwge2NsYXNzTmFtZTogJ3Rvb2x0aXAtaW5uZXInfSldLCBcbiAgICAgICAgICAgICAgICAgICAge2NsYXNzTmFtZTogJ3Rvb2x0aXAgYm90dG9tIGluJ30sIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAnJyArIChteSArIDIwKSArICdweCcsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICcnICsgTWF0aC5tYXgobXggLSAzMCwgMjApICsgJ3B4J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXNCLmhQb3B1cEhvbGRlci5hcHBlbmRDaGlsZChwb3B1cCk7XG4gICAgICAgICAgICAgICAgdmFyIG1vdmVIYW5kbGVyO1xuICAgICAgICAgICAgICAgIG1vdmVIYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmhQb3B1cEhvbGRlci5yZW1vdmVDaGlsZChwb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1heSBoYXZlIGJlZW4gcmVtb3ZlZCBieSBvdGhlciBjb2RlIHdoaWNoIGNsZWFycyB0aGUgcG9wdXAgbGF5ZXIuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdmVIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlLm9mZnNldFBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGxvZygnTnVsbCBwYXJlbnQuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXAoZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbihldikge1xuICAgICAgICBpc2luID0gdHJ1ZVxuICAgICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBvdXRsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICBzZXR1cChldik7XG4gICAgfSwgZmFsc2UpO1xuICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlUmVtb3ZlZEZyb21Eb2N1bWVudCcsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlzaW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSwgZmFsc2UpO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5wb3BpdCA9IGZ1bmN0aW9uKGV2LCBuYW1lLCBlbGUsIG9wdHMpXG57XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAoIW9wdHMpIFxuICAgICAgICBvcHRzID0ge307XG4gICAgaWYgKCFldikgXG4gICAgICAgIGV2ID0ge307XG5cbiAgICB2YXIgd2lkdGggPSBvcHRzLndpZHRoIHx8IDIwMDtcblxuICAgIHZhciBteCwgbXk7XG5cbiAgICBpZiAoZXYuY2xpZW50WCkge1xuICAgICAgICB2YXIgbXggPSAgZXYuY2xpZW50WCwgbXkgPSBldi5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG14ID0gNTAwOyBteT0gNTA7XG4gICAgfVxuICAgIG14ICs9ICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XG4gICAgbXkgKz0gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgdmFyIHdpbldpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICB2YXIgdG9wID0gbXk7XG4gICAgdmFyIGxlZnQgPSBNYXRoLm1pbihteCAtICh3aWR0aC8yKSAtIDQsICh3aW5XaWR0aCAtIHdpZHRoIC0gMzApKTtcblxuICAgIHZhciBwb3B1cCA9IG1ha2VFbGVtZW50KCdkaXYnKTtcbiAgICBwb3B1cC5jbGFzc05hbWUgPSAncG9wb3ZlciBmYWRlICcgKyAoZXYuY2xpZW50WCA/ICdib3R0b20gJyA6ICcnKSArICdpbic7XG4gICAgcG9wdXAuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgcG9wdXAuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIHBvcHVwLnN0eWxlLnRvcCA9ICcnICsgdG9wICsgJ3B4JztcbiAgICBwb3B1cC5zdHlsZS5sZWZ0ID0gJycgKyBsZWZ0ICsgJ3B4JztcbiAgICBwb3B1cC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICBpZiAod2lkdGggPiAyNzYpIHtcbiAgICAgICAgLy8gSEFDSyBCb290c3RyYXBwaWZpY2F0aW9uLi4uXG4gICAgICAgIHBvcHVwLnN0eWxlLm1heFdpZHRoID0gd2lkdGggKyAncHgnO1xuICAgIH1cblxuICAgIHBvcHVwLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7Y2xhc3NOYW1lOiAnYXJyb3cnfSkpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgICAgdmFyIGNsb3NlQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2J1dHRvbicsICcnLCB7Y2xhc3NOYW1lOiAnY2xvc2UnfSk7XG4gICAgICAgIGNsb3NlQnV0dG9uLmlubmVySFRNTCA9ICcmdGltZXM7J1xuXG4gICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5zdHlsZS5jb2xvciA9ICdyZWQnO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGNsb3NlQnV0dG9uLnN0eWxlLmNvbG9yID0gJ2JsYWNrJztcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXNCLnJlbW92ZUFsbFBvcHVwcygpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIHZhciB0YmFyID0gbWFrZUVsZW1lbnQoJ2g0JywgW21ha2VFbGVtZW50KCdzcGFuJywgbmFtZSwgbnVsbCwge21heFdpZHRoOiAnMjAwcHgnfSksIGNsb3NlQnV0dG9uXSwgey8qY2xhc3NOYW1lOiAncG9wb3Zlci10aXRsZScgKi99LCB7cGFkZGluZ0xlZnQ6ICcxMHB4JywgcGFkZGluZ1JpZ2h0OiAnMTBweCd9KTtcblxuICAgICAgICB2YXIgZHJhZ09YLCBkcmFnT1k7XG4gICAgICAgIHZhciBtb3ZlSGFuZGxlciwgdXBIYW5kbGVyO1xuICAgICAgICBtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxlZnQgPSBsZWZ0ICsgKGV2LmNsaWVudFggLSBkcmFnT1gpO1xuICAgICAgICAgICAgaWYgKGxlZnQgPCA4KSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IDg7XG4gICAgICAgICAgICB9IGlmIChsZWZ0ID4gKHdpbldpZHRoIC0gd2lkdGggLSAzMikpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gKHdpbldpZHRoIC0gd2lkdGggLSAyNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3AgPSB0b3AgKyAoZXYuY2xpZW50WSAtIGRyYWdPWSk7XG4gICAgICAgICAgICB0b3AgPSBNYXRoLm1heCgxMCwgdG9wKTtcbiAgICAgICAgICAgIHBvcHVwLnN0eWxlLnRvcCA9ICcnICsgdG9wICsgJ3B4JztcbiAgICAgICAgICAgIHBvcHVwLnN0eWxlLmxlZnQgPSAnJyArIE1hdGgubWluKGxlZnQsICh3aW5XaWR0aCAtIHdpZHRoIC0gMTApKSArICdweCc7XG4gICAgICAgICAgICBkcmFnT1ggPSBldi5jbGllbnRYOyBkcmFnT1kgPSBldi5jbGllbnRZO1xuICAgICAgICB9XG4gICAgICAgIHVwSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB1cEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0YmFyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGRyYWdPWCA9IGV2LmNsaWVudFg7IGRyYWdPWSA9IGV2LmNsaWVudFk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW92ZUhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdXBIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIHBvcHVwLmFwcGVuZENoaWxkKHRiYXIpO1xuICAgIH1cblxuICAgIHBvcHVwLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdkaXYnLCBlbGUsIHtjbGFzc05hbWU6ICdwb3BvdmVyLWNvbnRlbnQnfSwge1xuICAgICAgICBwYWRkaW5nOiAnMHB4J1xuICAgIH0pKTtcbiAgICB0aGlzLmhQb3B1cEhvbGRlci5hcHBlbmRDaGlsZChwb3B1cCk7XG5cbiAgICB2YXIgcG9wdXBIYW5kbGUgPSB7XG4gICAgICAgIG5vZGU6IHBvcHVwLFxuICAgICAgICBkaXNwbGF5ZWQ6IHRydWVcbiAgICB9O1xuICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU5vZGVSZW1vdmVkJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldCA9PSBwb3B1cCkge1xuICAgICAgICAgICAgcG9wdXBIYW5kbGUuZGlzcGxheWVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG4gICAgcmV0dXJuIHBvcHVwSGFuZGxlO1xufVxuXG5mdW5jdGlvbiBtYWtlVHJlZVRhYmxlU2VjdGlvbih0aXRsZSwgY29udGVudCwgdmlzaWJsZSkge1xuICAgIHZhciB0dEJ1dHRvbiA9IG1ha2VFbGVtZW50KCdpJyk7XG4gICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdHRCdXR0b24uY2xhc3NOYW1lID0gJ2ZhIGZhLWNhcmV0LWRvd24nO1xuICAgICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR0QnV0dG9uLmNsYXNzTmFtZSA9ICdmYSBmYS1jYXJldC1yaWdodCc7XG4gICAgICAgICAgICBjb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKCk7XG5cbiAgICB0dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7IGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB2aXNpYmxlID0gIXZpc2libGU7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgIH0sIGZhbHNlKTtcblxuICAgIHZhciBoZWFkaW5nID0gbWFrZUVsZW1lbnQoJ2g2JywgW3R0QnV0dG9uLCAnICcsIHRpdGxlXSwge30sIHtkaXNwbGF5OiAnYmxvY2snLCBiYWNrZ3JvdW5kOiAnZ3JheScsIGNvbG9yOiAnd2hpdGUnLCB3aWR0aDogJzEwMCUnLCBwYWRkaW5nOiAnNXB4IDJweCcsIG1hcmdpbjogJzBweCd9KTtcbiAgICByZXR1cm4gbWFrZUVsZW1lbnQoJ2RpdicsIFtoZWFkaW5nLCBjb250ZW50XSwge30pO1xufVxuXG5mdW5jdGlvbiBkbG9nKG1zZykge1xuICAgIGNvbnNvbGUubG9nKG1zZyk7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZVRyZWVUYWJsZVNlY3Rpb246IG1ha2VUcmVlVGFibGVTZWN0aW9uXG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTNcbi8vXG4vLyBlbnNlbWJsanNvbi5qcyAtLSBxdWVyeSB0aGUgRW5zZW1ibCBSRVNUIEFQSS5cbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBzYSA9IHJlcXVpcmUoJy4vc291cmNlYWRhcHRlcnMnKTtcbiAgICB2YXIgZGFsbGlhbmNlX3JlZ2lzdGVyU291cmNlQWRhcHRlckZhY3RvcnkgPSBzYS5yZWdpc3RlclNvdXJjZUFkYXB0ZXJGYWN0b3J5O1xuXG4gICAgdmFyIGRhcyA9IHJlcXVpcmUoJy4vZGFzJyk7XG4gICAgdmFyIERBU1N0eWxlc2hlZXQgPSBkYXMuREFTU3R5bGVzaGVldDtcbiAgICB2YXIgREFTU3R5bGUgPSBkYXMuREFTU3R5bGU7XG4gICAgdmFyIERBU0ZlYXR1cmUgPSBkYXMuREFTRmVhdHVyZTtcbiAgICB2YXIgREFTR3JvdXAgPSBkYXMuREFTR3JvdXA7XG59XG5cbmZ1bmN0aW9uIEVuc2VtYmxGZWF0dXJlU291cmNlKHNvdXJjZSkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuYmFzZSA9IHNvdXJjZS51cmkgfHwgJ2h0dHA6Ly9iZXRhLnJlc3QuZW5zZW1ibC5vcmcnO1xuICAgIHRoaXMuc3BlY2llcyA9IHNvdXJjZS5zcGVjaWVzIHx8ICdodW1hbic7XG5cbiAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5idXN5ID0gMDtcblxuICAgIGlmICh0eXBlb2Ygc291cmNlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IFtzb3VyY2UudHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50eXBlID0gc291cmNlLnR5cGUgfHwgWydyZWd1bGF0b3J5J107XG4gICAgfVxufVxuXG5FbnNlbWJsRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuYWRkQWN0aXZpdHlMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5hY3Rpdml0eUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbn1cblxuRW5zZW1ibEZlYXR1cmVTb3VyY2UucHJvdG90eXBlLm5vdGlmeUFjdGl2aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgbGkgPSAwOyBsaSA8IHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzW2xpXSh0aGlzLmJ1c3kpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5FbnNlbWJsRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuXG4gICAgdmFyIHRzU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICB0c1N0eWxlLmdseXBoID0gJ19fTk9ORSc7XG4gICAgaWYgKHRoaXMudHlwZS5pbmRleE9mKCdleG9uJykgPj0gMClcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICd0cmFuc2NyaXB0J30sIG51bGwsIHRzU3R5bGUpO1xuICAgIGlmICh0aGlzLnR5cGUuaW5kZXhPZignZXhvbicpID49IDAgfHwgdGhpcy50eXBlLmluZGV4T2YoJ3RyYW5zY3JpcHQnKSA+PSAwKVxuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2dlbmUnfSwgbnVsbCwgdHNTdHlsZSk7XG5cbiAgICB2YXIgY2RzU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICBjZHNTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgIGNkc1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgIGNkc1N0eWxlLkJHQ09MT1IgPSAncmVkJ1xuICAgIGNkc1N0eWxlLkhFSUdIVCA9IDg7XG4gICAgY2RzU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgY2RzU3R5bGUuTEFCRUwgPSB0cnVlO1xuICAgIGNkc1N0eWxlLlpJTkRFWCA9IDEwO1xuICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnY2RzJ30sIG51bGwsIGNkc1N0eWxlKTtcblxuICAgIHtcbiAgICAgICAgdmFyIHZhclN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHZhclN0eWxlLmdseXBoID0gJ1NRVUFSRSc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICAvLyB2YXJTdHlsZS5CR0NPTE9SID0gJyM4ODg4ODgnO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ2JsdWUnO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ3ZhcmlhdGlvbicsIG1ldGhvZDogJy4rX1VUUl92YXJpYW50J30sIG51bGwsIHZhclN0eWxlKTtcbiAgICB9XG4gICAge1xuICAgICAgICB2YXIgdmFyU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICAgICAgdmFyU3R5bGUuZ2x5cGggPSAnVFJJQU5HTEUnO1xuICAgICAgICB2YXJTdHlsZS5ESVJFQ1RJT04gPSAnUyc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICAvLyB2YXJTdHlsZS5CR0NPTE9SID0gJyM4ODg4ODgnO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ2JsdWUnO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ3ZhcmlhdGlvbicsIG1ldGhvZDogJ21pc3NlbnNlX3ZhcmlhbnQnfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdUUklBTkdMRSc7XG4gICAgICAgIHZhclN0eWxlLkRJUkVDVElPTiA9ICdOJztcbiAgICAgICAgdmFyU3R5bGUuQlVNUCA9ICd5ZXMnO1xuICAgICAgICB2YXJTdHlsZS5MQUJFTCA9ICdubyc7XG4gICAgICAgIC8vIHZhclN0eWxlLkJHQ09MT1IgPSAnIzg4ODg4OCc7XG4gICAgICAgIHZhclN0eWxlLkZHQ09MT1IgPSAnYmx1ZSc7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndmFyaWF0aW9uJywgbWV0aG9kOiAnc3BsaWNlXy4rX3ZhcmlhbnQnfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdTVEFSJztcbiAgICAgICAgdmFyU3R5bGUuUE9JTlRTID0gNjtcbiAgICAgICAgdmFyU3R5bGUuQlVNUCA9ICd5ZXMnO1xuICAgICAgICB2YXJTdHlsZS5MQUJFTCA9ICdubyc7XG4gICAgICAgIC8vIHZhclN0eWxlLkJHQ09MT1IgPSAnIzg4ODg4OCc7XG4gICAgICAgIHZhclN0eWxlLkZHQ09MT1IgPSAnYmx1ZSc7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndmFyaWF0aW9uJywgbWV0aG9kOiAncmVndWxhdG9yeV9yZWdpb25fdmFyaWFudCd9LCBudWxsLCB2YXJTdHlsZSk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgdmFyIHZhclN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHZhclN0eWxlLmdseXBoID0gJ1BMSU1TT0xMJztcbiAgICAgICAgdmFyU3R5bGUuQlVNUCA9ICd5ZXMnO1xuICAgICAgICB2YXJTdHlsZS5MQUJFTCA9ICdubyc7XG4gICAgICAgIC8vIHZhclN0eWxlLkJHQ09MT1IgPSAnIzg4ODg4OCc7XG4gICAgICAgIHZhclN0eWxlLkZHQ09MT1IgPSAncmdiKDUwLDgwLDI1NSknO1xuICAgICAgICB2YXJTdHlsZS5TVFJPS0VDT0xPUiA9ICdibGFjayc7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndmFyaWF0aW9uJ30sIG51bGwsIHZhclN0eWxlKTtcbiAgICB9XG4gICAgICAgIHtcbiAgICAgICAgdmFyIHZhclN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHZhclN0eWxlLmdseXBoID0gJ1NRVUFSRSc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICB2YXJTdHlsZS5CR0NPTE9SID0gJyM4ODg4ODgnO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ3JlZCc7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnaW5kZWwnLCBtZXRob2Q6ICcuK19VVFJfdmFyaWFudCd9LCBudWxsLCB2YXJTdHlsZSk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgdmFyIHZhclN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHZhclN0eWxlLmdseXBoID0gJ1RSSUFOR0xFJztcbiAgICAgICAgdmFyU3R5bGUuRElSRUNUSU9OID0gJ1MnO1xuICAgICAgICB2YXJTdHlsZS5CVU1QID0gJ3llcyc7XG4gICAgICAgIHZhclN0eWxlLkxBQkVMID0gJ25vJztcbiAgICAgICAgdmFyU3R5bGUuQkdDT0xPUiA9ICcjODg4ODg4JztcbiAgICAgICAgdmFyU3R5bGUuRkdDT0xPUiA9ICdyZWQnO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2luZGVsJywgbWV0aG9kOiAnbWlzc2Vuc2VfdmFyaWFudCd9LCBudWxsLCB2YXJTdHlsZSk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgdmFyIHZhclN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIHZhclN0eWxlLmdseXBoID0gJ1RSSUFOR0xFJztcbiAgICAgICAgdmFyU3R5bGUuRElSRUNUSU9OID0gJ04nO1xuICAgICAgICB2YXJTdHlsZS5CVU1QID0gJ3llcyc7XG4gICAgICAgIHZhclN0eWxlLkxBQkVMID0gJ25vJztcbiAgICAgICAgdmFyU3R5bGUuQkdDT0xPUiA9ICcjODg4ODg4JztcbiAgICAgICAgdmFyU3R5bGUuRkdDT0xPUiA9ICdyZWQnO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2luZGVsJywgbWV0aG9kOiAnc3BsaWNlXy4rX3ZhcmlhbnQnfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdTVEFSJztcbiAgICAgICAgdmFyU3R5bGUuUE9JTlRTID0gNjtcbiAgICAgICAgdmFyU3R5bGUuQlVNUCA9ICd5ZXMnO1xuICAgICAgICB2YXJTdHlsZS5MQUJFTCA9ICdubyc7XG4gICAgICAgIHZhclN0eWxlLkJHQ09MT1IgPSAnIzg4ODg4OCc7XG4gICAgICAgIHZhclN0eWxlLkZHQ09MT1IgPSAncmVkJztcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdpbmRlbCcsIG1ldGhvZDogJ3JlZ3VsYXRvcnlfcmVnaW9uX3ZhcmlhbnQnfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdQTElNU09MTCc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICB2YXJTdHlsZS5CR0NPTE9SID0gJyM4ODg4ODgnO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ3JlZCc7XG4gICAgICAgIHZhclN0eWxlLlNUUk9LRUNPTE9SID0gJ2JsYWNrJztcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdpbmRlbCd9LCBudWxsLCB2YXJTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgd2lnU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICB3aWdTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICB3aWdTdHlsZS5CR0NPTE9SID0gJ29yYW5nZSdcbiAgICB3aWdTdHlsZS5IRUlHSFQgPSA4O1xuICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgIHdpZ1N0eWxlLkxBQkVMID0gdHJ1ZTtcbiAgICB3aWdTdHlsZS5aSU5ERVggPSAyMDtcbiAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgd2lnU3R5bGUpO1xuICAgIHJldHVybiBjYWxsYmFjayhzdHlsZXNoZWV0KTtcbn1cblxuXG5FbnNlbWJsRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U2NhbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtdO1xufVxuXG5FbnNlbWJsRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgdXJsID0gdGhpcy5iYXNlICsgJy9mZWF0dXJlL3JlZ2lvbi8nICsgdGhpcy5zcGVjaWVzICsgJy8nICsgY2hyICsgJzonICsgbWluICsgJy0nICsgbWF4O1xuXG4gICAgdmFyIGZpbHRlcnMgPSBbXTtcbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50eXBlLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICBmaWx0ZXJzLnB1c2goJ2ZlYXR1cmU9JyArIHRoaXMudHlwZVt0aV0pO1xuICAgIH1cbiAgICBmaWx0ZXJzLnB1c2goJ2NvbnRlbnQtdHlwZT1hcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgdXJsID0gdXJsICsgJz8nICsgZmlsdGVycy5qb2luKCc7Jyk7XG5cbiAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIFx0aWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgIHRoaXNCLmJ1c3ktLTtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG5cbiAgICBcdCAgICBpZiAocmVxLnN0YXR1cyA+PSAzMDApIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gJ0Vycm9yIGNvZGUgJyArIHJlcS5zdGF0dXM7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpyID0gSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoanIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IGpyLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHt9O1xuXG4gICAgXHRcdCAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgIFx0ICAgIH0gZWxzZSB7XG4gICAgICAgIFx0XHR2YXIgamYgPSBKU09OLnBhcnNlKHJlcS5yZXNwb25zZSk7XG4gICAgICAgIFx0XHR2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgXHRcdGZvciAodmFyIGZpID0gMDsgZmkgPCBqZi5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgXHRcdCAgICB2YXIgaiA9IGpmW2ZpXTtcblxuICAgICAgICBcdFx0ICAgIHZhciBub3RlcyA9IFtdO1xuICAgICAgICBcdFx0ICAgIHZhciBmID0gbmV3IERBU0ZlYXR1cmUoKTtcbiAgICAgICAgXHRcdCAgICBmLnNlZ21lbnQgPSBjaHI7XG4gICAgICAgIFx0XHQgICAgZi5taW4gPSBqWydzdGFydCddIHwgMDtcbiAgICAgICAgXHRcdCAgICBmLm1heCA9IGpbJ2VuZCddIHwgMDtcbiAgICAgICAgXHRcdCAgICBmLnR5cGUgPSBqLmZlYXR1cmVfdHlwZSB8fCAndW5rbm93bic7XG4gICAgICAgIFx0XHQgICAgZi5pZCA9IGouSUQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGouUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JwID0gbmV3IERBU0dyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncnAuaWQgPSBqLlBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGYuZ3JvdXBzID0gW2dycF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoai5zdHJhbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqLnN0cmFuZCA8IDApIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYub3JpZW50YXRpb24gPSAnLSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqLnN0cmFuZCA+IDApIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYub3JpZW50YXRpb24gPSAnKyc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoai5jb25zZXF1ZW5jZV90eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZi5tZXRob2QgPSBqLmNvbnNlcXVlbmNlX3R5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGouYWx0X2FsbGVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzLnB1c2goJ0FsbGVsZXM9JyArIGouYWx0X2FsbGVsZXMuam9pbignLycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqLmFsdF9hbGxlbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoai5hbHRfYWxsZWxlc1sxXS5sZW5ndGggIT0gai5hbHRfYWxsZWxlc1swXS5sZW5ndGggfHwgai5hbHRfYWxsZWxlc1sxXSA9PSAnLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi50eXBlID0gJ2luZGVsJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXHRcdCAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGYubm90ZXMgPSBub3RlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcdFx0ICAgIGZlYXR1cmVzLnB1c2goZik7XG4gICAgICAgIFx0XHR9XG4gICAgICAgIFx0XHRjYWxsYmFjayhudWxsLCBmZWF0dXJlcyk7XG4gICAgXHQgICAgfVxuICAgIFx0fVxuXHRcbiAgICB9O1xuICAgIFxuICAgIHRoaXNCLmJ1c3krKztcbiAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuXG4gICAgcmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxLnJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICByZXEuc2VuZCgnJyk7XG59XG5cbmRhbGxpYW5jZV9yZWdpc3RlclNvdXJjZUFkYXB0ZXJGYWN0b3J5KCdlbnNlbWJsJywgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgcmV0dXJuIHtmZWF0dXJlczogbmV3IEVuc2VtYmxGZWF0dXJlU291cmNlKHNvdXJjZSl9O1xufSk7XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gZXhwb3J0LWNvbmZpZy5qc1xuLy9cblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYnJvd3NlciA9IHJlcXVpcmUoJy4vY2Jyb3dzZXInKTtcbiAgICB2YXIgQnJvd3NlciA9IGJyb3dzZXIuQnJvd3NlcjtcblxuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgc2hhbGxvd0NvcHkgPSB1dGlscy5zaGFsbG93Q29weTtcblxuICAgIHZhciBzaGExID0gcmVxdWlyZSgnLi9zaGExJyk7XG4gICAgdmFyIGhleF9zaGExID0gc2hhMS5oZXhfc2hhMTtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBjb3B5U3R5bGVzaGVldCA9IGRhcy5jb3B5U3R5bGVzaGVldDtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuZXhwb3J0RnVsbENvbmZpZyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGNocjogdGhpcy5jaHIsXG4gICAgICAgIHZpZXdTdGFydDogdGhpcy52aWV3U3RhcnR8MCxcbiAgICAgICAgdmlld0VuZDogdGhpcy52aWV3RW5kfDAsXG4gICAgICAgIGNvb2tpZUtleTogJ2RhbGxpYW5jZV8nICsgaGV4X3NoYTEoRGF0ZS5ub3coKSksXG5cbiAgICAgICAgY29vcmRTeXN0ZW06IHRoaXMuY29vcmRTeXN0ZW0sXG5cbiAgICAgICAgc291cmNlczogdGhpcy5leHBvcnRTb3VyY2VDb25maWcoKSxcblxuICAgICAgICBjaGFpbnM6IHRoaXMuZXhwb3J0Q2hhaW5zKClcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJlZml4KVxuICAgICAgICBjb25maWcucHJlZml4ID0gdGhpcy5wcmVmaXg7XG5cbiAgICByZXR1cm4gY29uZmlnO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5leHBvcnRDaGFpbnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2MgPSB7fTtcbiAgICB2YXIgY3MgPSB0aGlzLmNoYWlucyB8fCB7fTtcbiAgICBmb3IgKHZhciBrIGluIGNzKSB7XG4gICAgICAgIGNjW2tdID0gY3Nba10uZXhwb3J0Q29uZmlnKCk7XG4gICAgfVxuICAgIHJldHVybiBjYztcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuZXhwb3J0U291cmNlQ29uZmlnID0gZnVuY3Rpb24ob3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgdmFyIHNvdXJjZUNvbmZpZyA9IFtdO1xuICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0aGlzLnRpZXJzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICB2YXIgdGllciA9IHRoaXMudGllcnNbdGldO1xuICAgICAgICB2YXIgc291cmNlID0gc2hhbGxvd0NvcHkodGllci5kYXNTb3VyY2UpO1xuICAgICAgICBzb3VyY2UuY29vcmRzID0gdW5kZWZpbmVkO1xuICAgICAgICBzb3VyY2UucHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghc291cmNlLmRpc2FibGVkKVxuICAgICAgICAgICAgc291cmNlLmRpc2FibGVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aWVyLmNvbmZpZy5zdHlsZXNoZWV0KSB7XG4gICAgICAgICAgICBzb3VyY2Uuc3R5bGUgPSB0aWVyLmNvbmZpZy5zdHlsZXNoZWV0LnN0eWxlcztcbiAgICAgICAgICAgIHNvdXJjZS5zdHlsZXNoZWV0X3VyaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2Uuc3R5bGUpIHtcbiAgICAgICAgICAgIHNvdXJjZS5zdHlsZSA9IGNvcHlTdHlsZXNoZWV0KHtzdHlsZXM6IHNvdXJjZS5zdHlsZX0pLnN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YodGllci5jb25maWcubmFtZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzb3VyY2UubmFtZSA9IHRpZXIuY29uZmlnLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGllci5jb25maWcuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNvdXJjZS5mb3JjZUhlaWdodCA9IHRpZXIuY29uZmlnLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGllci5jb25maWcuZm9yY2VNaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc291cmNlLmZvcmNlTWluID0gdGllci5jb25maWcuZm9yY2VNaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpZXIuY29uZmlnLmZvcmNlTWluRHluYW1pYylcbiAgICAgICAgICAgIHNvdXJjZS5mb3JjZU1pbkR5bmFtaWMgPSB0aWVyLmNvbmZpZy5mb3JjZU1pbkR5bmFtaWM7XG4gICAgICAgIGlmICh0aWVyLmNvbmZpZy5mb3JjZU1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzb3VyY2UuZm9yY2VNYXggPSB0aWVyLmNvbmZpZy5mb3JjZU1heDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGllci5jb25maWcuZm9yY2VNYXhEeW5hbWljKVxuICAgICAgICAgICAgc291cmNlLmZvcmNlTWF4RHluYW1pYyA9IHRpZXIuY29uZmlnLmZvcmNlTWF4RHluYW1pYztcblxuICAgICAgICBzb3VyY2VDb25maWcucHVzaChzb3VyY2UpO1xuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2VDb25maWc7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmV4cG9ydFBhZ2VUZW1wbGF0ZSA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgdGVtcGxhdGUgPSAnPGh0bWw+XFxuJyArXG4gICAgICAgICAgICAgICAgICAgJyAgPGhlYWQ+XFxuJyArXG4gICAgICAgICAgICAgICAgICAgJyAgICA8c2NyaXB0IGxhbmd1YWdlPVwiamF2YXNjcmlwdFwiIHNyYz1cIicgKyB0aGlzLnJlc29sdmVVUkwoJyQkZGFsbGlhbmNlLWNvbXBpbGVkLmpzJykgKyAnXCI+PC9zY3JpcHQ+XFxuJyArXG4gICAgICAgICAgICAgICAgICAgJyAgICA8c2NyaXB0IGxhbmd1YWdlPVwiamF2YXNjcmlwdFwiPlxcbicgK1xuICAgICAgICAgICAgICAgICAgICcgICAgICB2YXIgZGFsbGlhbmNlX2Jyb3dzZXIgPSBuZXcgQnJvd3NlcignICsgSlNPTi5zdHJpbmdpZnkodGhpcy5leHBvcnRGdWxsQ29uZmlnKG9wdHMpLCBudWxsLCAyKSArICcpO1xcbicgK1xuICAgICAgICAgICAgICAgICAgICcgICAgPC9zY3JpcHQ+XFxuJyArICBcbiAgICAgICAgICAgICAgICAgICAnICA8L2hlYWQ+XFxuJyArXG4gICAgICAgICAgICAgICAgICAgJyAgPGJvZHk+XFxuJyArXG4gICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2IGlkPVwic3ZnSG9sZGVyXCI+RGFsbGlhbmNlIGdvZXMgaGVyZTwvZGl2PlxcbicgK1xuICAgICAgICAgICAgICAgICAgICcgIDwvYm9keT5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAnPGh0bWw+XFxuJztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn0iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gZXhwb3J0LXVpLmpzXG4vL1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBtYWtlRWxlbWVudCA9IHV0aWxzLm1ha2VFbGVtZW50O1xuICAgIHZhciByZW1vdmVDaGlsZHJlbiA9IHV0aWxzLnJlbW92ZUNoaWxkcmVuO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5vcGVuRXhwb3J0UGFuZWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYiA9IHRoaXM7XG4gICAgaWYgKHRoaXMudWlNb2RlID09PSAnZXhwb3J0Jykge1xuICAgICAgICB0aGlzLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ25vbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhwb3J0Rm9ybSA9IG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7Y2xhc3NOYW1lOiAnZXhwb3J0LWZvcm0nfSk7XG4gICAgICAgIHZhciBleHBvcnRTZWxlY3QgPSBtYWtlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgIGV4cG9ydFNlbGVjdC5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnb3B0aW9uJywgJ1NWRycsIHt2YWx1ZTogJ3N2Zyd9KSk7XG4gICAgICAgIGV4cG9ydFNlbGVjdC5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnb3B0aW9uJywgJ0RhbGxpYW5jZSBjb25maWcnLCB7dmFsdWU6ICdjb25maWcnfSkpO1xuICAgICAgICBleHBvcnRTZWxlY3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdEYWxsaWFuY2Ugc291cmNlcycsIHt2YWx1ZTogJ3NvdXJjZXMnfSkpO1xuICAgICAgICBleHBvcnRTZWxlY3QuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdEYWxsaWFuY2UgcGFnZScsIHt2YWx1ZTogJ3BhZ2UnfSkpO1xuICAgICAgICBleHBvcnRTZWxlY3QudmFsdWUgPSAnc3ZnJztcbiAgICAgICAgZXhwb3J0U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihleHBvcnRDb250ZW50KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBleHBvcnRGb3JtLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdwJywgWydFeHBvcnQgYXM6ICcsIGV4cG9ydFNlbGVjdF0pKTtcblxuICAgICAgICB2YXIgZXhwb3J0SGlnaGxpZ2h0c1RvZ2dsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiB0aGlzLmV4cG9ydEhpZ2hsaWdodHN9KTtcbiAgICAgICAgZXhwb3J0SGlnaGxpZ2h0c1RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgYi5leHBvcnRIaWdobGlnaHRzID0gZXhwb3J0SGlnaGxpZ2h0c1RvZ2dsZS5jaGVja2VkO1xuICAgICAgICAgICAgYi5zdG9yZVN0YXR1cygpO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIHZhciBleHBvcnRSdWxlclRvZ2dsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiB0aGlzLmV4cG9ydFJ1bGVyfSk7XG4gICAgICAgIGV4cG9ydFJ1bGVyVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBiLmV4cG9ydFJ1bGVyID0gZXhwb3J0UnVsZXJUb2dnbGUuY2hlY2tlZDtcbiAgICAgICAgICAgIGIuc3RvcmVTdGF0dXMoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHZhciBleHBvcnRCdXR0b24gPSBtYWtlRWxlbWVudCgnYnV0dG9uJywgJ0V4cG9ydCcsIHtjbGFzc05hbWU6ICdidG4gYnRuLXByaW1hcnknfSk7XG4gICAgICAgIGV4cG9ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihleHBvcnRDb250ZW50KTtcblxuICAgICAgICAgICAgdmFyIGJsb2JVUkw7XG4gICAgICAgICAgICB2YXIgbm90ZSwgdHlwZSwgbmFtZTtcbiAgICAgICAgICAgIGlmIChleHBvcnRTZWxlY3QudmFsdWUgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICAgICAgYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYi5tYWtlU1ZHKHtoaWdobGlnaHRzOiBleHBvcnRIaWdobGlnaHRzVG9nZ2xlLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcjogZXhwb3J0UnVsZXJUb2dnbGUuY2hlY2tlZCA/IGIucnVsZXJMb2NhdGlvbiA6ICdub25lJ30pKTtcbiAgICAgICAgICAgICAgICBub3RlID0gJ1NWRyc7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdpbWFnZS9zdmcnO1xuICAgICAgICAgICAgICAgIG5hbWUgPSAnZGFsbGlhbmNlLXZpZXcuc3ZnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwb3J0U2VsZWN0LnZhbHVlID09PSAnY29uZmlnJykge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBKU09OLnN0cmluZ2lmeShiLmV4cG9ydEZ1bGxDb25maWcoKSwgbnVsbCwgMik7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbY29uZmlnXSwge3R5cGU6ICd0ZXh0L3BsYWluJ30pO1xuICAgICAgICAgICAgICAgIGJsb2JVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIG5vdGUgPSAnQ29uZmlndXJhdGlvbic7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICd0ZXh0L3BsYWluJztcbiAgICAgICAgICAgICAgICBuYW1lID0gJ2RhbGxpYW5jZS1jb25maWcuanNvbic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4cG9ydFNlbGVjdC52YWx1ZSA9PT0gJ3NvdXJjZXMnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IEpTT04uc3RyaW5naWZ5KGIuZXhwb3J0U291cmNlQ29uZmlnKCksIG51bGwsIDIpO1xuICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbmZpZ10sIHt0eXBlOiAndGV4dC9wbGFpbid9KTtcbiAgICAgICAgICAgICAgICBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgICAgICBub3RlID0gJ1NvdXJjZSBhcnJheSc7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICd0ZXh0L3BsYWluJztcbiAgICAgICAgICAgICAgICBuYW1lID0gJ2RhbGxpYW5jZS1zb3VyY2VzLmpzb24nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChleHBvcnRTZWxlY3QudmFsdWUgPT09ICdwYWdlJykge1xuICAgICAgICAgICAgICAgIHZhciBwYWdlID0gYi5leHBvcnRQYWdlVGVtcGxhdGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9ICd0ZXh0L2h0bWwnO1xuICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3BhZ2VdLCB7dHlwZTogdHlwZX0pO1xuICAgICAgICAgICAgICAgIGJsb2JVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIG5vdGUgPSAnUGFnZSB0ZW1wbGF0ZSc7XG4gICAgICAgICAgICAgICAgbmFtZSA9ICdkYWxsaWFuY2Utdmlldy5odG1sJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJsb2JVUkwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG93bmxvYWRMaW5rID0gbWFrZUVsZW1lbnQoJ2EnLCAnW0Rvd25sb2FkXScsIHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogYmxvYlVSTCxcbiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWQ6ICdkYWxsaWFuY2Utdmlldy5zdmcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJldmlld0xpbmsgPSBtYWtlRWxlbWVudCgnYScsICdbUHJldmlldyBpbiBicm93c2VyXScsIHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogYmxvYlVSTCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnX25ldydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV4cG9ydENvbnRlbnQuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBbJycgKyBub3RlICsgJyBjcmVhdGVkOiAnLCBkb3dubG9hZExpbmssIHByZXZpZXdMaW5rXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgYi5hZGRWaWV3TGlzdGVuZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZW1vdmVDaGlsZHJlbihleHBvcnRDb250ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGIuYWRkVGllckxpc3RlbmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oZXhwb3J0Q29udGVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBleHBvcnRDb250ZW50ID0gbWFrZUVsZW1lbnQoJ3AnLCAnJyk7XG5cbiAgICAgICAgdmFyIGV4cG9ydE9wdHNUYWJsZSA9IG1ha2VFbGVtZW50KCd0YWJsZScsXG4gICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ3RyJyxcbiAgICAgICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ3RoJywgJ0luY2x1ZGUgaGlnaGxpZ2h0cycsIHt9LCB7d2lkdGg6ICcyMDBweCcsIHRleHRBbGlnbjogJ3JpZ2h0J30pLFxuICAgICAgICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCBleHBvcnRIaWdobGlnaHRzVG9nZ2xlKV0pLFxuICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdJbmNsdWRlIHZlcnRpY2FsIGd1aWRlbGluZScpLFxuICAgICAgICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCBleHBvcnRSdWxlclRvZ2dsZSldKVxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgZXhwb3J0Rm9ybS5hcHBlbmRDaGlsZChleHBvcnRPcHRzVGFibGUpO1xuICAgICAgICBleHBvcnRGb3JtLmFwcGVuZENoaWxkKGV4cG9ydEJ1dHRvbik7XG4gICAgICAgIGV4cG9ydEZvcm0uYXBwZW5kQ2hpbGQoZXhwb3J0Q29udGVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMudWlNb2RlICE9PSAnbm9uZScpXG4gICAgICAgICAgICB0aGlzLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpcy5icm93c2VySG9sZGVyLmluc2VydEJlZm9yZShleHBvcnRGb3JtLCB0aGlzLnN2Z0hvbGRlcik7XG4gICAgICAgIHRoaXMuYWN0aXZlVG9vbFBhbmVsID0gZXhwb3J0Rm9ybTtcblxuICAgICAgICB0aGlzLnNldFVpTW9kZSgnZXhwb3J0Jyk7XG4gICAgfVxufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxNFxuLy9cbi8vIGV4cG9ydHMuanM6IHNoaW0gdG8gZXhwb3J0IHN5bWJvbHMgaW50byBnbG9iYWwgbmFtZXNwYWNlIGZvciBlYXNlIG9mIGVtYmVkZGluZ1xuLy9cblxudmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Nicm93c2VyJyk7XG52YXIgY2hhaW5zZXQgPSByZXF1aXJlKCcuL2NoYWluc2V0Jyk7XG52YXIgc2EgPSByZXF1aXJlKCcuL3NvdXJjZWFkYXB0ZXJzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZGFzID0gcmVxdWlyZSgnLi9kYXMnKTtcblxud2luZG93LkJyb3dzZXIgPSBicm93c2VyLkJyb3dzZXI7XG53aW5kb3cuQ2hhaW5zZXQgPSBjaGFpbnNldC5DaGFpbnNldDsgICAgLy8gUHJlLTAuMTIgY29uZmlndXJhdGlvbnMgbmVlZCB0aGlzLlxuXG4vLyBVc2VmdWwgZm9yIGluZm8gcGx1Z2lucy4gIFNob3VsZCBiZSByZWNvbnNpZGVyZWQgaW4gdGhlIGZ1dHVyZS5cbndpbmRvdy5tYWtlRWxlbWVudCA9IHV0aWxzLm1ha2VFbGVtZW50O1xuXG4vLyBBbGxvdyBzb3VyY2UgcGx1Z2lucyB0byBiZSBsb2FkZWQgc2VwYXJhdGVseS5cbndpbmRvdy5kYWxsaWFuY2VfcmVnaXN0ZXJTb3VyY2VBZGFwdGVyRmFjdG9yeSA9IHNhLnJlZ2lzdGVyU291cmNlQWRhcHRlckZhY3Rvcnk7XG53aW5kb3cuZGFsbGlhbmNlX3JlZ2lzdGVyUGFyc2VyRmFjdG9yeSA9IHNhLnJlZ2lzdGVyUGFyc2VyRmFjdG9yeTtcbndpbmRvdy5kYWxsaWFuY2VfbWFrZVBhcnNlciA9IHNhLm1ha2VQYXJzZXI7XG5cbi8vIERBUyogb2JqZWN0cyBmb3Igc29tZSBwbHVnaW5zIC0tIHJlbW92ZSB3aGVuIHBsdWdpbiBBUEkgY2hhbmdlcy4uLlxuXG53aW5kb3cuREFTRmVhdHVyZSA9IGRhcy5EQVNGZWF0dXJlO1xud2luZG93LkRBU0dyb3VwID0gZGFzLkRBU0dyb3VwO1xud2luZG93LkRBU1N0eWxlc2hlZXQgPSBkYXMuREFTU3R5bGVzaGVldDtcbndpbmRvdy5EQVNTdHlsZSA9IGRhcy5EQVNTdHlsZTtcbndpbmRvdy5EQVNTb3VyY2UgPSBkYXMuREFTU291cmNlOyAgICAvLyBQcmUtMC44IGNvbmZpZ3VyYXRpb25zIHVzZWQgdGhpcy4gIFN0aWxsIHNvbWUgYXJvdW5kLi4uIiwiLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gZmVhdHVyZS1kcmF3LmpzOiBuZXcgZmVhdHVyZS10aWVyIHJlbmRlcmVyXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIHNoYWxsb3dDb3B5ID0gdXRpbHMuc2hhbGxvd0NvcHk7XG4gICAgdmFyIHB1c2hvID0gdXRpbHMucHVzaG87XG5cbiAgICB2YXIgdGllciA9IHJlcXVpcmUoJy4vdGllcicpO1xuICAgIHZhciBEYXNUaWVyID0gdGllci5EYXNUaWVyO1xuXG4gICAgdmFyIHNvcnRGZWF0dXJlcyA9IHJlcXVpcmUoJy4vZmVhdHVyZXMnKS5zb3J0RmVhdHVyZXM7XG5cbiAgICB2YXIgZyA9IHJlcXVpcmUoJy4vZ2x5cGhzJyk7XG4gICAgdmFyIEJveEdseXBoID0gZy5Cb3hHbHlwaDtcbiAgICB2YXIgR3JvdXBHbHlwaCA9IGcuR3JvdXBHbHlwaDtcbiAgICB2YXIgTGluZUdyYXBoR2x5cGggPSBnLkxpbmVHcmFwaEdseXBoO1xuICAgIHZhciBMYWJlbGxlZEdseXBoID0gZy5MYWJlbGxlZEdseXBoO1xuICAgIHZhciBDcm9zc0dseXBoID0gZy5Dcm9zc0dseXBoO1xuICAgIHZhciBFeEdseXBoID0gZy5FeEdseXBoO1xuICAgIHZhciBUcmlhbmdsZUdseXBoID0gZy5UcmlhbmdsZUdseXBoO1xuICAgIHZhciBEb3RHbHlwaCA9IGcuRG90R2x5cGg7XG4gICAgdmFyIFBhZGRlZEdseXBoID0gZy5QYWRkZWRHbHlwaDtcbiAgICB2YXIgQUFycm93R2x5cGggPSBnLkFBcnJvd0dseXBoO1xuICAgIHZhciBTcGFuR2x5cGggPSBnLlNwYW5HbHlwaDtcbiAgICB2YXIgTGluZUdseXBoID0gZy5MaW5lR2x5cGg7XG4gICAgdmFyIFByaW1lcnNHbHlwaCA9IGcuUHJpbWVyc0dseXBoO1xuICAgIHZhciBBcnJvd0dseXBoID0gZy5BcnJvd0dseXBoO1xuICAgIHZhciBUb29NYW55R2x5cGggPSBnLlRvb01hbnlHbHlwaDtcbiAgICB2YXIgVGV4dEdseXBoID0gZy5UZXh0R2x5cGg7XG4gICAgdmFyIFNlcXVlbmNlR2x5cGggPSBnLlNlcXVlbmNlR2x5cGg7XG4gICAgdmFyIFRyYW5zbGF0ZWRHbHlwaCA9IGcuVHJhbnNsYXRlZEdseXBoO1xuICAgIHZhciBQb2ludEdseXBoID0gZy5Qb2ludEdseXBoO1xuICAgIHZhciBHcmlkR2x5cGggPSBnLkdyaWRHbHlwaDtcbiAgICB2YXIgU3RhckdseXBoID0gZy5TdGFyR2x5cGg7XG4gICAgdmFyIFBsaW1zb2xsR2x5cGggPSBnLlBsaW1zb2xsR2x5cGg7XG5cbiAgICB2YXIgY29sb3IgPSByZXF1aXJlKCcuL2NvbG9yJyk7XG4gICAgdmFyIG1ha2VHcmFkaWVudCA9IGNvbG9yLm1ha2VHcmFkaWVudDtcblxuICAgIHZhciBzcGFucyA9IHJlcXVpcmUoJy4vc3BhbnMnKTtcbiAgICB2YXIgUmFuZ2UgPSBzcGFucy5SYW5nZTtcbiAgICB2YXIgdW5pb24gPSBzcGFucy51bmlvbjtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNGZWF0dXJlID0gZGFzLkRBU0ZlYXR1cmU7XG4gICAgdmFyIGlzRGFzQm9vbGVhblRydWUgPSBkYXMuaXNEYXNCb29sZWFuVHJ1ZTtcbiAgICB2YXIgaXNEYXNCb29sZWFuTm90RmFsc2UgPSBkYXMuaXNEYXNCb29sZWFuTm90RmFsc2U7XG5cbiAgICB2YXIgcGFyc2VDaWdhciA9IHJlcXVpcmUoJy4vY2lnYXInKS5wYXJzZUNpZ2FyO1xuXG4gICAgdmFyIG5mID0gcmVxdWlyZSgnLi9udW1mb3JtYXRzJyk7XG4gICAgdmFyIGZvcm1hdFF1YW50TGFiZWwgPSBuZi5mb3JtYXRRdWFudExhYmVsO1xufVxuXG52YXIgTUlOX1BBRERJTkcgPSAzO1xudmFyIERFRkFVTFRfU1VCVElFUl9NQVggPSAxMDA7XG5cblxuZnVuY3Rpb24gU3ViVGllcigpIHtcbiAgICB0aGlzLmdseXBocyA9IFtdO1xuICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLnF1YW50ID0gbnVsbDtcbn1cblxuU3ViVGllci5wcm90b3R5cGUuaW5kZXhGb3IgPSBmdW5jdGlvbihnbHlwaCkge1xuICAgIHZhciBnbWluID0gZ2x5cGgubWluKCk7XG4gICAgdmFyIGxiID0gMCwgdWIgPSB0aGlzLmdseXBocy5sZW5ndGg7XG4gICAgd2hpbGUgKHViID4gbGIpIHtcbiAgICAgICAgdmFyIG1pZCA9ICgobGIgKyB1YikvMil8MDtcbiAgICAgICAgaWYgKG1pZCA+PSB0aGlzLmdseXBocy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbHlwaHMubGVuZ3RoO1xuICAgICAgICB2YXIgbWcgPSB0aGlzLmdseXBoc1ttaWRdO1xuICAgICAgICBpZiAoZ21pbiA8IG1nLm1pbigpKSB7XG4gICAgICAgICAgICB1YiA9IG1pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxiID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdWI7XG59XG5cblN1YlRpZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGdseXBoKSB7XG4gICAgdmFyIGluZCA9IHRoaXMuaW5kZXhGb3IoZ2x5cGgpO1xuICAgIHRoaXMuZ2x5cGhzLnNwbGljZShpbmQsIDAsIGdseXBoKTtcbiAgICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KHRoaXMuaGVpZ2h0LCBnbHlwaC5oZWlnaHQoKSk7XG4gICAgaWYgKGdseXBoLnF1YW50ICYmIHRoaXMucXVhbnQgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnF1YW50ID0gZ2x5cGgucXVhbnQ7XG4gICAgfVxufVxuXG5TdWJUaWVyLnByb3RvdHlwZS5oYXNTcGFjZUZvciA9IGZ1bmN0aW9uKGdseXBoKSB7XG4gICAgdmFyIGluZCA9IHRoaXMuaW5kZXhGb3IoZ2x5cGgpO1xuICAgIGlmIChpbmQgPiAwICYmIHRoaXMuZ2x5cGhzW2luZC0xXS5tYXgoKSA+PSBnbHlwaC5taW4oKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChpbmQgPCB0aGlzLmdseXBocy5sZW5ndGggJiYgdGhpcy5nbHlwaHNbaW5kXS5taW4oKSA8PSBnbHlwaC5tYXgoKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBHTE9CQUxfR0M7XG5cbmZ1bmN0aW9uIGRyYXdGZWF0dXJlVGllcih0aWVyKVxue1xuICAgIHZhciBzdGFydCA9IERhdGUubm93KCl8MDtcbiAgICBHTE9CQUxfR0MgPSB0aWVyLnZpZXdwb3J0LmdldENvbnRleHQoJzJkJyk7IC8vIFNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIG1ldHJpY3MuXG4gICAgc29ydEZlYXR1cmVzKHRpZXIpO1xuICAgIGlmICh0eXBlb2YodGllci5kYXNTb3VyY2UucGFkZGluZykgPT09ICdudW1iZXInKVxuICAgICAgICB0aWVyLnBhZGRpbmcgPSB0aWVyLmRhc1NvdXJjZS5wYWRkaW5nO1xuICAgIGVsc2VcbiAgICAgICAgdGllci5wYWRkaW5nID0gTUlOX1BBRERJTkc7XG5cbiAgICB2YXIgZ2x5cGhzID0gW107XG4gICAgdmFyIHNwZWNpYWxzID0gZmFsc2U7XG5cbiAgICAvLyBncm91cCBieSBzdHlsZVxuICAgIHZhciBnYnNGZWF0dXJlcyA9IHt9O1xuICAgIHZhciBnYnNTdHlsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIHVmdCBpbiB0aWVyLnVuZ3JvdXBlZEZlYXR1cmVzKSB7XG4gICAgICAgIHZhciB1ZmwgPSB0aWVyLnVuZ3JvdXBlZEZlYXR1cmVzW3VmdF07XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBwZ2lkID0gMDsgcGdpZCA8IHVmbC5sZW5ndGg7ICsrcGdpZCkge1xuICAgICAgICAgICAgdmFyIGYgPSB1ZmxbcGdpZF07XG4gICAgICAgICAgICBpZiAoZi5wYXJ0cykgeyAgLy8gRklYTUUgc2hvdWxkbid0IHJlYWxseSBiZSBuZWVkZWRcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGllci5zdHlsZUZvckZlYXR1cmUoZik7XG4gICAgICAgICAgICBpZiAoIXN0eWxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoc3R5bGUuZ2x5cGggPT0gJ0xJTkVQTE9UJykge1xuICAgICAgICAgICAgICAgIHB1c2hvKGdic0ZlYXR1cmVzLCBzdHlsZS5pZCwgZik7XG4gICAgICAgICAgICAgICAgZ2JzU3R5bGVzW3N0eWxlLmlkXSA9IHN0eWxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZyA9IGdseXBoRm9yRmVhdHVyZShmLCAwLCBzdHlsZSwgdGllcik7XG4gICAgICAgICAgICAgICAgaWYgKGcpXG4gICAgICAgICAgICAgICAgICAgIGdseXBocy5wdXNoKGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ2JzIGluIGdic0ZlYXR1cmVzKSB7XG4gICAgICAgIHZhciBnZiA9IGdic0ZlYXR1cmVzW2dic107XG4gICAgICAgIHZhciBzdHlsZSA9IGdic1N0eWxlc1tnYnNdO1xuICAgICAgICBpZiAoc3R5bGUuZ2x5cGggPT0gJ0xJTkVQTE9UJykge1xuICAgICAgICAgICAgZ2x5cGhzLnB1c2gobWFrZUxpbmVHbHlwaChnZiwgc3R5bGUsIHRpZXIpKTtcbiAgICAgICAgICAgIHNwZWNpYWxzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1lcmdlIHN1cGVyZ3JvdXBzICAgIFxuXG4gICAgaWYgKHRpZXIuZGFzU291cmNlLmNvbGxhcHNlU3VwZXJHcm91cHMgJiYgIXRpZXIuYnVtcGVkKSB7XG4gICAgICAgIGZvciAodmFyIHNnIGluIHRpZXIuc3VwZXJHcm91cHMpIHtcbiAgICAgICAgICAgIHZhciBzZ2cgPSB0aWVyLnN1cGVyR3JvdXBzW3NnXTtcbiAgICAgICAgICAgIHRpZXIuZ3JvdXBzW3NnXSA9IHNoYWxsb3dDb3B5KHRpZXIuZ3JvdXBzW3NnXSk7XG4gICAgICAgICAgICB0aWVyLmdyb3Vwc1tzZ10uaXNTdXBlckdyb3VwID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBmZWF0c0J5VHlwZSA9IHt9O1xuXG4gICAgICAgICAgICB2YXIgc2dNaW4gPSAxMDAwMDAwMDAwMCwgc2dNYXggPSAtMTAwMDAwMDAwMDA7XG4gICAgICAgICAgICB2YXIgc2dTZWcgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBzZ2cubGVuZ3RoOyArK2cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2YgPSB0aWVyLmdyb3VwZWRGZWF0dXJlc1tzZ2dbZ11dO1xuICAgICAgICAgICAgICAgIGlmICghZ2YpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGdmLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGdmW2ZpXTtcbiAgICAgICAgICAgICAgICAgICAgcHVzaG8oZmVhdHNCeVR5cGUsIGYudHlwZSwgZik7XG4gICAgICAgICAgICAgICAgICAgIHNnTWluID0gTWF0aC5taW4oZi5taW4sIHNnTWluKTtcbiAgICAgICAgICAgICAgICAgICAgc2dNYXggPSBNYXRoLm1heChmLm1heCwgc2dNYXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZi5zZWdtZW50ICYmICFzZ1NlZylcbiAgICAgICAgICAgICAgICAgICAgICAgIHNnU2VnID0gZi5zZWdtZW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aWVyLmdyb3Vwc1tzZ10gJiYgIXRpZXIuZ3JvdXBzW3NnXS5saW5rcyB8fCB0aWVyLmdyb3Vwc1tzZ10ubGlua3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICB0aWVyLmdyb3Vwc1tzZ10ubGlua3MgPSB0aWVyLmdyb3Vwc1tzZ2dbMF1dLmxpbmtzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aWVyLmdyb3VwZWRGZWF0dXJlc1tzZ2dbZ11dOyAgLy8gJ2NvcyB3ZSBkb24ndCB3YW50IHRvIHJlbmRlciB0aGUgdW5tZXJnZWQgdmVyc2lvbi5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGllci5ncm91cHNbc2ddLm1heCA9IHNnTWF4O1xuICAgICAgICAgICAgdGllci5ncm91cHNbc2ddLm1pbiA9IHNnTWluO1xuICAgICAgICAgICAgdGllci5ncm91cHNbc2ddLnNlZ21lbnQgPSBzZ1NlZztcblxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBmZWF0c0J5VHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBmZWF0cyA9IGZlYXRzQnlUeXBlW3RdO1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGZlYXRzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBsb2MgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBmZWF0cy5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmZWF0c1tmaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbCA9IG5ldyBSYW5nZShmLm1pbiwgZi5tYXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jID0gZmw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2MgPSB1bmlvbihsb2MsIGZsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkUmFuZ2VzID0gbG9jLnJhbmdlcygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBtZXJnZWRSYW5nZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gbWVyZ2VkUmFuZ2VzW3NpXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBiZWdpbiBjb3ZlcmFnZS1jb3VudGluZ1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zQ292ZXJhZ2UgPSAoKHIubWF4KCl8MCkgLSAoci5taW4oKXwwKSArIDEpICogc2dnLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdENvdmVyYWdlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXRzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmZWF0c1tmaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGYubWlufDApIDw9IHIubWF4KCkgJiYgKGYubWF4fDApID49IHIubWluKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW1pbiA9IE1hdGgubWF4KGYubWlufDAsIHIubWluKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bWF4ID0gTWF0aC5taW4oZi5tYXh8MCwgci5tYXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0Q292ZXJhZ2UgKz0gKHVtYXggLSB1bWluICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc3VhbFdlaWdodCA9ICgoMS4wICogYWN0Q292ZXJhZ2UpIC8gcG9zQ292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBlbmQgY292ZXJhZ2UtY291bnRpbmdcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3ZiA9IG5ldyBEQVNGZWF0dXJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld2Zba10gPSB0ZW1wbGF0ZVtrXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXdmLm1pbiA9IHIubWluKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld2YubWF4ID0gci5tYXgoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld2YubGFiZWwgJiYgc2dnLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld2YubGFiZWwgKz0gJyAoJyArIHNnZy5sZW5ndGggKyAnIHZhcnMpJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXdmLnZpc3VhbFdlaWdodCA9ICgoMS4wICogYWN0Q292ZXJhZ2UpIC8gcG9zQ292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBwdXNobyh0aWVyLmdyb3VwZWRGZWF0dXJlcywgc2csIG5ld2YpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzdXBlcmdyb3VwcyBhcmUgYWxyZWFkeSBpbiB0aWVyLmdyb3Vwcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aWVyLnN1cGVyR3JvdXBzW3NnXTsgLy8gRG8gd2Ugd2FudCB0aGlzP1xuICAgICAgICB9ICAgICAgIFxuICAgIH1cblxuICAgIC8vIEdseXBoaWZ5IGdyb3Vwcy5cblxuICAgIHZhciBnbCA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAodmFyIGdpZCBpbiB0aWVyLmdyb3VwZWRGZWF0dXJlcykge1xuICAgICAgICBnbC5wdXNoKGdpZCk7XG4gICAgfVxuICAgIGdsLnNvcnQoZnVuY3Rpb24oZzEsIGcyKSB7XG4gICAgICAgIHZhciBkID0gdGllci5ncm91cGVkRmVhdHVyZXNbZzFdWzBdLnNjb3JlIC0gdGllci5ncm91cGVkRmVhdHVyZXNbZzJdWzBdLnNjb3JlO1xuICAgICAgICBpZiAoZCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChkID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBncm91cEdseXBocyA9IHt9O1xuICAgIGZvciAodmFyIGd4ID0gMDsgZ3ggPCBnbC5sZW5ndGg7ICsrZ3gpIHtcbiAgICAgICAgdmFyIGdpZCA9IGdsW2d4XTtcbiAgICAgICAgdmFyIGcgPSBnbHlwaHNGb3JHcm91cCh0aWVyLmdyb3VwZWRGZWF0dXJlc1tnaWRdLCAwLCB0aWVyLmdyb3Vwc1tnaWRdLCB0aWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aWVyLmRhc1NvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzICYmICF0aWVyLmJ1bXBlZCkgPyAnY29sbGFwc2VkX2dlbmUnIDogJ3RlbnQnKTtcbiAgICAgICAgaWYgKGcpIHtcbiAgICAgICAgICAgIGcuZ3JvdXAgPSB0aWVyLmdyb3Vwc1tnaWRdO1xuICAgICAgICAgICAgZ3JvdXBHbHlwaHNbZ2lkXSA9IGc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBzZyBpbiB0aWVyLnN1cGVyR3JvdXBzKSB7XG4gICAgICAgIHZhciBzZ2cgPSB0aWVyLnN1cGVyR3JvdXBzW3NnXTtcbiAgICAgICAgdmFyIHNnR2x5cGhzID0gW107XG4gICAgICAgIHZhciBzZ01pbiA9IDEwMDAwMDAwMDAwO1xuICAgICAgICB2YXIgc2dNYXggPSAtMTAwMDAwMDAwMDA7XG4gICAgICAgIGZvciAodmFyIHNnaSA9IDA7IHNnaSA8IHNnZy5sZW5ndGg7ICsrc2dpKSB7XG4gICAgICAgICAgICB2YXIgZ2cgPSBncm91cEdseXBoc1tzZ2dbc2dpXV07XG4gICAgICAgICAgICBncm91cEdseXBoc1tzZ2dbc2dpXV0gPSBudWxsO1xuICAgICAgICAgICAgaWYgKGdnKSB7XG4gICAgICAgICAgICAgICAgc2dHbHlwaHMucHVzaChnZyk7XG4gICAgICAgICAgICAgICAgc2dNaW4gPSBNYXRoLm1pbihzZ01pbiwgZ2cubWluKCkpO1xuICAgICAgICAgICAgICAgIHNnTWF4ID0gTWF0aC5tYXgoc2dNYXgsIGdnLm1heCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBzZ2kgPSAwOyBzZ2kgPCBzZ0dseXBocy5sZW5ndGg7ICsrc2dpKSB7XG4gICAgICAgICAgICB2YXIgZ2cgPSBzZ0dseXBoc1tzZ2ldO1xuICAgICAgICAgICAgZ2x5cGhzLnB1c2gobmV3IFBhZGRlZEdseXBoKGdnLCBzZ01pbiwgc2dNYXgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBnIGluIGdyb3VwR2x5cGhzKSB7XG4gICAgICAgIHZhciBnZyA9IGdyb3VwR2x5cGhzW2ddO1xuICAgICAgICBpZiAoZ2cpIHtcbiAgICAgICAgICAgIGdseXBocy5wdXNoKGdnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1bXBpbmdcblxuICAgIHZhciB1bmJ1bXBlZFNUID0gbmV3IFN1YlRpZXIoKTtcbiAgICB2YXIgYnVtcGVkU1RzID0gW107XG4gICAgdmFyIGhhc0J1bXBlZEZlYXR1cmVzID0gZmFsc2U7XG4gICAgdmFyIHN1YnRpZXJNYXggPSB0aWVyLmRhc1NvdXJjZS5zdWJ0aWVyTWF4IHx8IERFRkFVTFRfU1VCVElFUl9NQVg7XG4gICAgXG4gIEdMWVBIX0xPT1A6XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGcgPSBnbHlwaHNbaV07XG4gICAgICAgIGlmIChnLmJ1bXApIHtcbiAgICAgICAgICAgIGhhc0J1bXBlZEZlYXR1cmVzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZy5idW1wICYmICh0aWVyLmJ1bXBlZCB8fCB0aWVyLmRhc1NvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzKSkgeyAgICAgICAvLyBraW5kLW9mIG5hc3R5LiAgc3VwZXJncm91cCBjb2xsYXBzaW5nIGlzIGRpZmZlcmVudCBmcm9tIFwibm9ybWFsXCIgdW5idW1waW5nXG4gICAgICAgICAgICBmb3IgKHZhciBzdGkgPSAwOyBzdGkgPCBidW1wZWRTVHMubGVuZ3RoOyAgKytzdGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3QgPSBidW1wZWRTVHNbc3RpXTtcbiAgICAgICAgICAgICAgICBpZiAoc3QuaGFzU3BhY2VGb3IoZykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3QuYWRkKGcpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBHTFlQSF9MT09QO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidW1wZWRTVHMubGVuZ3RoID49IHN1YnRpZXJNYXgpIHtcbiAgICAgICAgICAgICAgICAvLyB0aWVyLnN0YXR1cyA9ICdUb28gbWFueSBvdmVybGFwcGluZyBmZWF0dXJlcywgdHJ1bmNhdGluZyBhdCAnICsgc3VidGllck1heDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0ID0gbmV3IFN1YlRpZXIoKTtcbiAgICAgICAgICAgICAgICBzdC5hZGQoZyk7XG4gICAgICAgICAgICAgICAgYnVtcGVkU1RzLnB1c2goc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5idW1wZWRTVC5hZGQoZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodW5idW1wZWRTVC5nbHlwaHMubGVuZ3RoID4gMCkge1xuICAgICAgICBidW1wZWRTVHMgPSBbdW5idW1wZWRTVF0uY29uY2F0KGJ1bXBlZFNUcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgc3RpID0gMDsgc3RpIDwgYnVtcGVkU1RzLmxlbmd0aDsgKytzdGkpIHtcbiAgICAgICAgdmFyIHN0ID0gYnVtcGVkU1RzW3N0aV07XG4gICAgICAgIGlmIChzdC5xdWFudCkge1xuICAgICAgICAgICAgc3QuZ2x5cGhzLnVuc2hpZnQobmV3IEdyaWRHbHlwaChzdC5oZWlnaHQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIHN0aSA9IDA7IHN0aSA8IGJ1bXBlZFNUcy5sZW5ndGg7ICsrc3RpKSB7XG4gICAgICAgIHZhciBzdCA9IGJ1bXBlZFNUc1tzdGldO1xuICAgICAgICBzdC5nbHlwaHMuc29ydChmdW5jdGlvbiAoZzEsIGcyKSB7XG4gICAgICAgICAgICB2YXIgejEgPSBnMS56aW5kZXggfHwgMDtcbiAgICAgICAgICAgIHZhciB6MiA9IGcyLnppbmRleCB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuIHoxIC0gejI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRpZXIuc3VidGllcnMgPSBidW1wZWRTVHM7XG4gICAgdGllci5nbHlwaENhY2hlT3JpZ2luID0gdGllci5icm93c2VyLnZpZXdTdGFydDtcblxuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpfDA7XG4gICAgLy8gY29uc29sZS5sb2coJ2RmdCB0b29rICcgKyAoZW5kLXN0YXJ0KSArICdtcycpO1xufVxuXG5cblxuRGFzVGllci5wcm90b3R5cGUucGFpbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpfDA7XG4gICAgdmFyIHJldGluYSA9IHRoaXMuYnJvd3Nlci5yZXRpbmEgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxO1xuXG4gICAgdmFyIHN1YnRpZXJzID0gdGhpcy5zdWJ0aWVycztcbiAgICBpZiAoIXN1YnRpZXJzKSB7XG5cdCAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVzaXJlZFdpZHRoID0gdGhpcy5icm93c2VyLmZlYXR1cmVQYW5lbFdpZHRoICsgMjAwMDtcbiAgICBpZiAocmV0aW5hKSB7XG4gICAgICAgIGRlc2lyZWRXaWR0aCAqPSAyO1xuICAgIH1cbiAgICB2YXIgZnB3ID0gdGhpcy52aWV3cG9ydC53aWR0aHwwO1xuICAgIGlmIChmcHcgPCBkZXNpcmVkV2lkdGggLSA1MCkge1xuICAgICAgICB0aGlzLnZpZXdwb3J0LndpZHRoID0gZnB3ID0gZGVzaXJlZFdpZHRoO1xuICAgIH1cblxuICAgIHZhciBsaCA9IHRoaXMucGFkZGluZztcbiAgICBmb3IgKHZhciBzID0gMDsgcyA8IHN1YnRpZXJzLmxlbmd0aDsgKytzKSB7XG4gICAgICAgIGxoID0gbGggKyBzdWJ0aWVyc1tzXS5oZWlnaHQgKyB0aGlzLnBhZGRpbmc7XG4gICAgfVxuICAgIGxoICs9IDZcbiAgICBsaCA9IE1hdGgubWF4KGxoLCB0aGlzLmJyb3dzZXIubWluVGllckhlaWdodCk7XG5cbiAgICB2YXIgY2FudmFzSGVpZ2h0ID0gbGg7XG4gICAgaWYgKHJldGluYSkge1xuICAgICAgICBjYW52YXNIZWlnaHQgKj0gMjtcbiAgICB9XG5cbiAgICBpZiAoY2FudmFzSGVpZ2h0ICE9IHRoaXMudmlld3BvcnQuaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMudmlld3BvcnQuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuICAgIH1cbiAgICBcbiAgICB2YXIgdGllckhlaWdodCA9IE1hdGgubWF4KGxoLCB0aGlzLmJyb3dzZXIubWluVGllckhlaWdodCk7XG4gICAgdGhpcy52aWV3cG9ydC5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIHRoaXMudmlld3BvcnQuc3R5bGUud2lkdGggPSByZXRpbmEgPyAoJycgKyAoZnB3LzIpICsgJ3B4JykgOiAoJycgKyBmcHcgKyAncHgnKTtcbiAgICB0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodCA9ICcnICsgbGggKyAncHgnO1xuICAgIHRoaXMubGF5b3V0SGVpZ2h0ID0gIE1hdGgubWF4KGxoLCB0aGlzLmJyb3dzZXIubWluVGllckhlaWdodCk7XG5cbiAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xuICAgIHRoaXMuZHJhd092ZXJsYXkoKTtcbiAgICB0aGlzLm5vcmlnaW4gPSB0aGlzLmJyb3dzZXIudmlld1N0YXJ0O1xuXG4gICAgdmFyIGdjID0gdGhpcy52aWV3cG9ydC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGdjLmNsZWFyUmVjdCgwLCAwLCBmcHcsIGNhbnZhc0hlaWdodCk7XG5cbiAgICBnYy5zYXZlKCk7XG4gICAgaWYgKHJldGluYSkge1xuICAgICAgICBnYy5zY2FsZSgyLCAyKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kKSB7XG4gICAgICAgIGdjLmZpbGxTdHlsZSA9IHRoaXMuYmFja2dyb3VuZDtcblxuICAgICAgICBpZiAodGhpcy5rbm93bkNvdmVyYWdlKSB7XG4gICAgICAgICAgICB2YXIga25vd25SYW5nZXMgPSB0aGlzLmtub3duQ292ZXJhZ2UucmFuZ2VzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciByaSA9IDA7IHJpIDwga25vd25SYW5nZXMubGVuZ3RoOyArK3JpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBrbm93blJhbmdlc1tyaV07XG4gICAgICAgICAgICAgICAgdmFyIGtub3duTWluID0gKHIubWluKCkgLSB0aGlzLmJyb3dzZXIudmlld1N0YXJ0KSAqIHRoaXMuYnJvd3Nlci5zY2FsZSArIDEwMDA7XG4gICAgICAgICAgICAgICAgdmFyIGtub3duTWF4ID0gKHIubWF4KCkgLSB0aGlzLmJyb3dzZXIudmlld1N0YXJ0KSAqIHRoaXMuYnJvd3Nlci5zY2FsZSArIDEwMDA7XG4gICAgICAgICAgICAgICAgZ2MuZmlsbFJlY3Qoa25vd25NaW4sIDAsIGtub3duTWF4IC0ga25vd25NaW4sIGxoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvZmZzZXQgPSAoKHRoaXMuZ2x5cGhDYWNoZU9yaWdpbiAtIHRoaXMuYnJvd3Nlci52aWV3U3RhcnQpKnRoaXMuYnJvd3Nlci5zY2FsZSkrMTAwMDtcbiAgICBnYy50cmFuc2xhdGUob2Zmc2V0LCB0aGlzLnBhZGRpbmcpO1xuICAgXG4gICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdWJ0aWVycy5sZW5ndGg7ICsrcykge1xuICAgICAgICB2YXIgcXVhbnQgPSBudWxsO1xuICAgICAgICB2YXIgZ2x5cGhzID0gc3VidGllcnNbc10uZ2x5cGhzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzW2ldO1xuICAgICAgICAgICAgaWYgKGdseXBoLm1pbigpIDwgZnB3LW9mZnNldCAmJiBnbHlwaC5tYXgoKSA+IC1vZmZzZXQpIHsgXG4gICAgICAgICAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzW2ldO1xuICAgICAgICAgICAgICAgIGdseXBoLmRyYXcoZ2MpO1xuICAgICAgICAgICAgICAgIGlmIChnbHlwaC5xdWFudCkge1xuICAgICAgICAgICAgICAgICAgICBxdWFudCA9IGdseXBoLnF1YW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnYy50cmFuc2xhdGUoMCwgc3VidGllcnNbc10uaGVpZ2h0ICsgdGhpcy5wYWRkaW5nKTtcbiAgICB9XG4gICAgZ2MucmVzdG9yZSgpO1xuXG4gICAgaWYgKHF1YW50ICYmIHRoaXMucXVhbnRMZWFwVGhyZXNob2xkICYmIHRoaXMuZmVhdHVyZVNvdXJjZSAmJiB0aGlzLmJyb3dzZXIuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aGlzLmZlYXR1cmVTb3VyY2UsICdxdWFudExlYXAnKSkge1xuICAgICAgICB2YXIgcnkgPSAzICsgc3VidGllcnNbMF0uaGVpZ2h0ICogKDEuMCAtICgodGhpcy5xdWFudExlYXBUaHJlc2hvbGQgLSBxdWFudC5taW4pIC8gKHF1YW50Lm1heCAtIHF1YW50Lm1pbikpKTtcblxuICAgICAgICBnYy5zYXZlKCk7XG4gICAgICAgIGlmIChyZXRpbmEpXG4gICAgICAgICAgICBnYy5zY2FsZSgyLCAyKTtcbiAgICAgICAgZ2Muc3Ryb2tlU3R5bGUgPSAncmVkJztcbiAgICAgICAgZ2MubGluZVdpZHRoID0gMC4zO1xuICAgICAgICBnYy5iZWdpblBhdGgoKTtcbiAgICAgICAgZ2MubW92ZVRvKDAsIHJ5KTtcbiAgICAgICAgZ2MubGluZVRvKDUwMDAsIHJ5KTtcbiAgICAgICAgZ2Muc3Ryb2tlKCk7XG4gICAgICAgIGdjLnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhaW50UXVhbnQoKTtcblxuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpfDA7XG4gICAgLy8gY29uc29sZS5sb2coJ3BhaW50IHRvb2sgJyArIChlbmQtc3RhcnQpICsgJ21zJyk7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnBhaW50UXVhbnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMucXVhbnRPdmVybGF5KVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgcmV0aW5hID0gdGhpcy5icm93c2VyLnJldGluYSAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDE7XG5cbiAgICB2YXIgcXVhbnQ7XG4gICAgaWYgKHRoaXMuc3VidGllcnMgJiYgdGhpcy5zdWJ0aWVycy5sZW5ndGggPiAwKVxuICAgICAgICBxdWFudCA9IHRoaXMuc3VidGllcnNbMF0ucXVhbnQ7XG5cbiAgICBpZiAocXVhbnQpIHtcbiAgICAgICAgdmFyIGggPSB0aGlzLnN1YnRpZXJzWzBdLmhlaWdodDtcbiAgICAgICAgdmFyIHcgPSA1MDtcbiAgICAgICAgdGhpcy5xdWFudE92ZXJsYXkuaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XG4gICAgICAgIHRoaXMucXVhbnRPdmVybGF5LndpZHRoID0gcmV0aW5hID8gdyoyIDogdztcbiAgICAgICAgdGhpcy5xdWFudE92ZXJsYXkuc3R5bGUuaGVpZ2h0ID0gJycgKyAocmV0aW5hID8gdGhpcy5xdWFudE92ZXJsYXkuaGVpZ2h0LzIgOiB0aGlzLnF1YW50T3ZlcmxheS5oZWlnaHQpICsgJ3B4JztcbiAgICAgICAgdGhpcy5xdWFudE92ZXJsYXkuc3R5bGUud2lkdGggPSAnJyArIHcgKyAncHgnO1xuICAgICAgICB0aGlzLnF1YW50T3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMucXVhbnRPdmVybGF5LmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChyZXRpbmEpXG4gICAgICAgICAgICBjdHguc2NhbGUoMiwgMik7XG5cbiAgICAgICAgdmFyIG51bVRpY3MgPSAyO1xuICAgICAgICBpZiAoaCA+IDQwKSB7XG4gICAgICAgICAgICBudW1UaWNzID0gMSArICgoaC8yMCkgfCAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGljU3BhY2luZyA9IChoICsgdGhpcy5wYWRkaW5nKjIpIC8gKG51bVRpY3MgLSAxKTtcbiAgICAgICAgdmFyIHRpY0ludGVydmFsID0gKHF1YW50Lm1heCAtIHF1YW50Lm1pbikgLyAobnVtVGljcyAtIDEpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnXG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuNjtcbiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5ydWxlckxvY2F0aW9uID09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh3LTMwLCAwLCAzMCwgaCArIHRoaXMucGFkZGluZyoyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCAzMCwgaCArIHRoaXMucGFkZGluZyoyKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG5cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICBpZiAodGhpcy5icm93c2VyLnJ1bGVyTG9jYXRpb24gPT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh3IC0gOCwgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8odywgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8odywgaCArIHRoaXMucGFkZGluZyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHcgLSA4LCBoICsgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDwgbnVtVGljcy0xOyArK3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHkgPSB0KnRpY1NwYWNpbmc7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh3LCB0eSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh3IC0gNSwgdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyg4LCB0aGlzLnBhZGRpbmcpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbygwLCB0aGlzLnBhZGRpbmcpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbygwLCBoICsgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oOCwgaCArIHRoaXMucGFkZGluZyk7XG4gICAgICAgICAgICBmb3IgKHZhciB0ID0gMTsgdCA8IG51bVRpY3MtMTsgKyt0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5ID0gdCp0aWNTcGFjaW5nO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgdHkpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oNSwgdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcblxuICAgICAgICBpZiAodGhpcy5icm93c2VyLnJ1bGVyTG9jYXRpb24gPT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQoZm9ybWF0UXVhbnRMYWJlbChxdWFudC5tYXgpLCB3LTksIDgpO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvcm1hdFF1YW50TGFiZWwocXVhbnQubWluKSwgdy05LCBoICsgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDwgbnVtVGljcy0xOyArK3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHkgPSB0KnRpY1NwYWNpbmc7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvcm1hdFF1YW50TGFiZWwoKDEuMCpxdWFudC5tYXgpIC0gKHQqdGljSW50ZXJ2YWwpKSwgdyAtIDksIHR5ICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvcm1hdFF1YW50TGFiZWwocXVhbnQubWF4KSwgOSwgOCk7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQoZm9ybWF0UXVhbnRMYWJlbChxdWFudC5taW4pLCA5LCBoICsgdGhpcy5wYWRkaW5nKTtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDwgbnVtVGljcy0xOyArK3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHkgPSB0KnRpY1NwYWNpbmc7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGZvcm1hdFF1YW50TGFiZWwoKDEuMCpxdWFudC5tYXgpIC0gKHQqdGljSW50ZXJ2YWwpKSwgOSwgdHkgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVhbnRPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnbHlwaHNGb3JHcm91cChmZWF0dXJlcywgeSwgZ3JvdXBFbGVtZW50LCB0aWVyLCBjb25uZWN0b3JUeXBlKSB7XG4gICAgdmFyIGdzdHlsZSA9IHRpZXIuc3R5bGVGb3JGZWF0dXJlKGdyb3VwRWxlbWVudCk7XG4gICAgdmFyIGxhYmVsO1xuICAgIHZhciBsYWJlbFdhbnRlZCA9IGZhbHNlO1xuXG4gICAgdmFyIGdseXBocyA9IFtdO1xuICAgIHZhciBzdHJhbmQgPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGYgPSBmZWF0dXJlc1tpXTtcbiAgICAgICAgaWYgKGYub3JpZW50YXRpb24gJiYgc3RyYW5kPT1udWxsKSB7XG4gICAgICAgICAgICBzdHJhbmQgPSBmLm9yaWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgICBpZiAoIWxhYmVsICYmIGYubGFiZWwpIHtcbiAgICAgICAgICAgIGxhYmVsID0gZi5sYWJlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHlsZSA9IHRpZXIuc3R5bGVGb3JGZWF0dXJlKGYpO1xuICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZi5wYXJ0cykgeyAgLy8gRklYTUUgc2hvdWxkbid0IHJlYWxseSBiZSBuZWVkZWRcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Rhc0Jvb2xlYW5UcnVlKHN0eWxlLkxBQkVMKSlcbiAgICAgICAgICAgIGxhYmVsV2FudGVkID0gdHJ1ZTtcblxuICAgICAgICB2YXIgZyA9IGdseXBoRm9yRmVhdHVyZShmLCAwLCBzdHlsZSwgdGllciwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIGlmIChnKSB7XG4gICAgICAgICAgICBnbHlwaHMucHVzaChnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChnbHlwaHMubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgIHZhciBjb25uZWN0b3IgPSAnZmxhdCc7XG4gICAgaWYgKGdzdHlsZSAmJiBnc3R5bGUuZ2x5cGggPT09ICdMSU5FJykge1xuICAgICAgICAvLyBTdGljayB3aXRoIGZsYXQuLi5cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGllci5kYXNTb3VyY2UuY29sbGFwc2VTdXBlckdyb3VwcyAmJiAhdGllci5idW1wZWQpIHtcbiAgICAgICAgICAgIGlmIChzdHJhbmQgPT09ICcrJykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3RvciA9ICdjb2xsYXBzZWQrJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyYW5kID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0b3IgPSAnY29sbGFwc2VkLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3RyYW5kID09PSAnKycpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0b3IgPSAnaGF0Kyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmFuZCA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdG9yID0gJ2hhdC0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSAgIFxuXG4gICAgdmFyIGxhYmVsVGV4dCA9IG51bGw7XG4gICAgaWYgKChsYWJlbCAmJiBsYWJlbFdhbnRlZCkgfHwgKGdzdHlsZSAmJiAoaXNEYXNCb29sZWFuVHJ1ZShnc3R5bGUuTEFCRUwpIHx8IGlzRGFzQm9vbGVhblRydWUoZ3N0eWxlLkxBQkVMUykpKSkgeyAgLy8gSEFDSywgTEFCRUxTIHNob3VsZCB3b3JrLlxuICAgICAgICBsYWJlbFRleHQgPSBncm91cEVsZW1lbnQubGFiZWwgfHwgbGFiZWw7XG4gICAgfVxuXG4gICAgdmFyIGdnID0gbmV3IEdyb3VwR2x5cGgoZ2x5cGhzLCBjb25uZWN0b3IpO1xuICAgIGlmIChsYWJlbFRleHQpIHtcbiAgICAgICAgaWYgKHN0cmFuZCA9PT0gJysnKSB7XG4gICAgICAgICAgICBsYWJlbFRleHQgPSAnPicgKyBsYWJlbFRleHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyYW5kID09PSAnLScpIHtcbiAgICAgICAgICAgIGxhYmVsVGV4dCA9ICc8JyArIGxhYmVsVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBnZyA9IG5ldyBMYWJlbGxlZEdseXBoKEdMT0JBTF9HQywgZ2csIGxhYmVsVGV4dCwgZmFsc2UpO1xuICAgIH1cbiAgICBnZy5idW1wID0gdHJ1ZTtcbiAgICByZXR1cm4gZ2c7XG59XG5cbmZ1bmN0aW9uIGdseXBoRm9yRmVhdHVyZShmZWF0dXJlLCB5LCBzdHlsZSwgdGllciwgZm9yY2VIZWlnaHQsIG5vTGFiZWwpXG57XG4gICAgdmFyIHNjYWxlID0gdGllci5icm93c2VyLnNjYWxlLCBvcmlnaW4gPSB0aWVyLmJyb3dzZXIudmlld1N0YXJ0O1xuICAgIHZhciBndHlwZSA9IHN0eWxlLmdseXBoIHx8ICdCT1gnO1xuICAgIHZhciBnbHlwaDtcblxuICAgIHZhciBtaW4gPSBmZWF0dXJlLm1pbjtcbiAgICB2YXIgbWF4ID0gZmVhdHVyZS5tYXg7XG4gICAgdmFyIHR5cGUgPSBmZWF0dXJlLnR5cGU7XG4gICAgdmFyIHN0cmFuZCA9IGZlYXR1cmUub3JpZW50YXRpb247XG4gICAgdmFyIHNjb3JlID0gZmVhdHVyZS5zY29yZTtcbiAgICB2YXIgbGFiZWwgPSBmZWF0dXJlLmxhYmVsIHx8IGZlYXR1cmUuaWQ7XG5cbiAgICB2YXIgbWluUG9zID0gKG1pbiAtIG9yaWdpbikgKiBzY2FsZTtcbiAgICB2YXIgcmF3TWF4UG9zID0gKChtYXggLSBvcmlnaW4gKyAxKSAqIHNjYWxlKTtcbiAgICB2YXIgbWF4UG9zID0gTWF0aC5tYXgocmF3TWF4UG9zLCBtaW5Qb3MgKyAxKTtcblxuICAgIHZhciBoZWlnaHQgPSB0aWVyLmZvcmNlSGVpZ2h0IHx8IHN0eWxlLkhFSUdIVCB8fCBmb3JjZUhlaWdodCB8fCAxMjtcbiAgICB2YXIgcmVxdWlyZWRIZWlnaHQgPSBoZWlnaHQgPSAxLjAgKiBoZWlnaHQ7XG4gICAgdmFyIGJ1bXAgPSBzdHlsZS5CVU1QICYmIGlzRGFzQm9vbGVhblRydWUoc3R5bGUuQlVNUCk7XG5cbiAgICB2YXIgZ2csIHF1YW50O1xuXG4gICAgaWYgKGd0eXBlID09PSAnQ1JPU1MnIHx8IGd0eXBlID09PSAnRVgnIHx8IGd0eXBlID09PSAnVFJJQU5HTEUnIHx8IGd0eXBlID09PSAnRE9UJyB8fCBndHlwZSA9PT0gJ1NRVUFSRScgfHwgZ3R5cGUgPT09ICdTVEFSJyB8fCBndHlwZSA9PT0gJ1BMSU1TT0xMJykge1xuICAgICAgICB2YXIgc3Ryb2tlID0gc3R5bGUuRkdDT0xPUiB8fCAnYmxhY2snO1xuICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkJHQ09MT1IgfHwgJ25vbmUnO1xuICAgICAgICB2YXIgb3V0bGluZSA9IHN0eWxlLlNUUk9LRUNPTE9SO1xuXG4gICAgICAgIGlmIChzdHlsZS5CR0lURU0gJiYgZmVhdHVyZS5pdGVtUmdiKSB7XG4gICAgICAgICAgICBzdHJva2UgPSBmZWF0dXJlLml0ZW1SZ2I7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXNCb29sZWFuVHJ1ZShzdHlsZS5DT0xPUl9CWV9TQ09SRTIpKSB7XG4gICAgICAgICAgICB2YXIgZ3JhZCA9IHN0eWxlLkJHR1JBRCB8fCBzdHlsZS5fZ3JhZGllbnQ7XG4gICAgICAgICAgICBpZiAoIWdyYWQpIHtcbiAgICAgICAgICAgICAgICBncmFkID0gbWFrZUdyYWRpZW50KDUwLCBzdHlsZS5DT0xPUjEsIHN0eWxlLkNPTE9SMiwgc3R5bGUuQ09MT1IzKTtcbiAgICAgICAgICAgICAgICBzdHlsZS5fZ3JhZGllbnQgPSBncmFkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2MyID0gZmVhdHVyZS5zY29yZTI7XG4gICAgICAgICAgICBpZiAoc2MyICE9IHVuZGVmaW5lZCB8fCAhc3Ryb2tlKSB7XG4gICAgICAgICAgICAgICAgc2MyID0gc2MyIHx8IDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgc21pbjIgPSBzdHlsZS5NSU4yID8gKDEuMCAqIHN0eWxlLk1JTjIpIDogMC4wO1xuICAgICAgICAgICAgICAgIHZhciBzbWF4MiA9IHN0eWxlLk1BWDIgPyAoMS4wICogc3R5bGUuTUFYMikgOiAxLjA7XG4gICAgICAgICAgICAgICAgdmFyIHJlbFNjb3JlMiA9ICgoMS4wICogc2MyKSAtIHNtaW4yKSAvIChzbWF4Mi1zbWluMik7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IChyZWxTY29yZTIqZ3JhZC5sZW5ndGgpfDA7XG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPCAwKSBzdGVwID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA+PSBncmFkLmxlbmd0aCkgc3RlcCA9IGdyYWQubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBzdHJva2UgPSBncmFkW3N0ZXBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG4gICAgICAgIHZhciBoZWlnaHQgPSB0aWVyLmZvcmNlSGVpZ2h0IHx8IHN0eWxlLkhFSUdIVCB8fCBmb3JjZUhlaWdodCB8fCAxMjtcbiAgICAgICAgcmVxdWlyZWRIZWlnaHQgPSBoZWlnaHQgPSAxLjAgKiBoZWlnaHQ7XG5cbiAgICAgICAgdmFyIHNpemUgPSBzdHlsZS5TSVpFIHx8IGhlaWdodDtcbiAgICAgICAgaWYgKHN0eWxlLlJTSVpFKSB7XG4gICAgICAgICAgICBzaXplID0gKDEuMCAqIHN0eWxlLlJTSVpFKSAqIGhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZS5TVFJPS0VUSFJFU0hPTEQpIHtcbiAgICAgICAgICAgIGlmIChzaXplIDwgKDEuMCAqIHN0eWxlLlNUUk9LRVRIUkVTSE9MRCkpXG4gICAgICAgICAgICAgICAgb3V0bGluZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNpemUgPSAxLjAgKiBzaXplO1xuXG4gICAgICAgIHZhciBtaWQgPSAobWluUG9zICsgbWF4UG9zKS8yO1xuICAgICAgICB2YXIgaGggPSBzaXplLzI7XG5cbiAgICAgICAgdmFyIG1hcms7XG4gICAgICAgIHZhciBiTWluUG9zID0gbWluUG9zLCBiTWF4UG9zID0gbWF4UG9zO1xuXG4gICAgICAgIGlmIChndHlwZSA9PT0gJ0VYJykge1xuICAgICAgICAgICAgZ2cgPSBuZXcgRXhHbHlwaChtaWQsIHNpemUsIHN0cm9rZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ3R5cGUgPT09ICdUUklBTkdMRScpIHtcbiAgICAgICAgICAgIHZhciBkaXIgPSBzdHlsZS5ESVJFQ1RJT04gfHwgJ04nO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gc3R5bGUuTElORVdJRFRIIHx8IHNpemU7XG4gICAgICAgICAgICBnZyA9IG5ldyBUcmlhbmdsZUdseXBoKG1pZCwgc2l6ZSwgZGlyLCB3aWR0aCwgc3Ryb2tlLCBvdXRsaW5lKTtcbiAgICAgICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ0RPVCcpIHtcbiAgICAgICAgICAgIGdnID0gbmV3IERvdEdseXBoKG1pZCwgc2l6ZSwgc3Ryb2tlLCBvdXRsaW5lKTtcbiAgICAgICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ1BMSU1TT0xMJykge1xuICAgICAgICAgICAgZ2cgPSBuZXcgUGxpbXNvbGxHbHlwaChtaWQsIHNpemUsIDAuMiAqIHNpemUsIHN0cm9rZSwgb3V0bGluZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ3R5cGUgPT09ICdTUVVBUkUnKSB7XG4gICAgICAgICAgICBnZyA9IG5ldyBCb3hHbHlwaChtaWQgLSBoaCwgMCwgc2l6ZSwgc2l6ZSwgc3Ryb2tlLCBvdXRsaW5lKTtcbiAgICAgICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ1NUQVInKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnRzID0gNTtcbiAgICAgICAgICAgIGlmIChzdHlsZS5QT0lOVFMpIFxuICAgICAgICAgICAgICAgIHBvaW50cyA9IHN0eWxlLlBPSU5UUyB8IDA7XG4gICAgICAgICAgICBnZyA9IG5ldyBTdGFyR2x5cGgobWlkLCBoaCwgcG9pbnRzLCBzdHJva2UsIG91dGxpbmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2cgPSBuZXcgQ3Jvc3NHbHlwaChtaWQsIHNpemUsIHN0cm9rZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsbCAmJiBmaWxsICE9ICdub25lJyAmJiAobWF4UG9zIC0gbWluUG9zKSA+IDUpIHtcbiAgICAgICAgICAgIHZhciBiZ2cgPSBuZXcgQm94R2x5cGgobWluUG9zLCAwLCAobWF4UG9zIC0gbWluUG9zKSwgc2l6ZSwgZmlsbCk7XG4gICAgICAgICAgICBnZyA9IG5ldyBHcm91cEdseXBoKFtiZ2csIGdnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEYXNCb29sZWFuVHJ1ZShzdHlsZS5TQ0FUVEVSKSkge1xuICAgICAgICAgICAgdmFyIHNtaW4gPSB0aWVyLnF1YW50TWluKHN0eWxlKTtcbiAgICAgICAgICAgIHZhciBzbWF4ID0gdGllci5xdWFudE1heChzdHlsZSk7XG5cbiAgICAgICAgICAgIGlmICghc21heCkge1xuICAgICAgICAgICAgICAgIGlmIChzbWluIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBzbWF4ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzbWF4ID0gMTA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzbWluKSB7XG4gICAgICAgICAgICAgICAgc21pbiA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZWxTY29yZSA9ICgoMS4wICogc2NvcmUpIC0gc21pbikgLyAoc21heC1zbWluKTtcbiAgICAgICAgICAgIHZhciByZWxPcmlnaW4gPSAoLTEuMCAqIHNtaW4pIC8gKHNtYXggLSBzbWluKTtcblxuICAgICAgICAgICAgaWYgKHJlbFNjb3JlIDwgMC4wIHx8IHJlbFNjb3JlID4gMS4wKSB7XG4gICAgICAgICAgICAgICAgLy8gR2x5cGggaXMgb3V0IG9mIGJvdW5kcy5cbiAgICAgICAgICAgICAgICAvLyBTaG91bGQgd2UgYWxsb3cgZm9yIFwicGFydGlhbGx5IHNob3dpbmdcIiBnbHlwaHM/XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbFNjb3JlID49IHJlbE9yaWdpbikge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCgxLCAocmVsU2NvcmUgLSByZWxPcmlnaW4pICogcmVxdWlyZWRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB5ID0geSArICgoMS4wIC0gcmVsT3JpZ2luKSAqIHJlcXVpcmVkSGVpZ2h0KSAtIGhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCgxLCAocmVsU2NvcmUgLSByZWxPcmlnaW4pICogcmVxdWlyZWRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB5ID0geSArICgoMS4wIC0gcmVsT3JpZ2luKSAqIHJlcXVpcmVkSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcXVhbnQgPSB7bWluOiBzbWluLCBtYXg6IHNtYXh9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodEZ1ZGdlID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZUxhYmVsO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoZmVhdHVyZS5mb3JjZUxhYmVsKSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMYWJlbCA9IGZlYXR1cmUuZm9yY2VMYWJlbDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMYWJlbCA9IHN0eWxlLkxBQkVMO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRGFzQm9vbGVhbk5vdEZhbHNlKGZlYXR1cmVMYWJlbCkgJiYgbGFiZWwgJiYgIW5vTGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2cgPSBuZXcgTGFiZWxsZWRHbHlwaChHTE9CQUxfR0MsIGdnLCBsYWJlbCwgdHJ1ZSwgbnVsbCwgZmVhdHVyZUxhYmVsID09ICdhYm92ZScgPyAnYWJvdmUnIDogJ2JlbG93Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlTGFiZWwgPT0gJ2Fib3ZlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0RnVkZ2UgPSBnZy50ZXh0SGVpZ2h0ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub0xhYmVsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2cgPSBuZXcgVHJhbnNsYXRlZEdseXBoKGdnLCAwLCB5IC0gaGggLSBoZWlnaHRGdWRnZSwgcmVxdWlyZWRIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ0hJU1RPR1JBTScgfHwgZ3R5cGUgPT09ICdHUkFESUVOVCcgJiYgc2NvcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBzbWluID0gdGllci5xdWFudE1pbihzdHlsZSk7XG4gICAgICAgIHZhciBzbWF4ID0gdGllci5xdWFudE1heChzdHlsZSk7XG5cbiAgICAgICAgaWYgKCFzbWF4KSB7XG4gICAgICAgICAgICBpZiAoc21pbiA8IDApIHtcbiAgICAgICAgICAgICAgICBzbWF4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc21heCA9IDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc21pbikge1xuICAgICAgICAgICAgc21pbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKDEuMCAqIHNjb3JlKSA8ICgxLjAgKnNtaW4pKSB7XG4gICAgICAgICAgICBzY29yZSA9IHNtaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgxLjAgKiBzY29yZSkgPiAoMS4wICogc21heCkpIHtcbiAgICAgICAgICAgIHNjb3JlID0gc21heDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVsU2NvcmUgPSAoKDEuMCAqIHNjb3JlKSAtIHNtaW4pIC8gKHNtYXgtc21pbik7XG4gICAgICAgIHZhciByZWxPcmlnaW4gPSAoLTEuMCAqIHNtaW4pIC8gKHNtYXggLSBzbWluKTtcblxuICAgICAgICBpZiAoZ3R5cGUgPT09ICdISVNUT0dSQU0nKSB7XG4gICAgICAgICAgICBpZiAocmVsU2NvcmUgPj0gcmVsT3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoMSwgKHJlbFNjb3JlIC0gcmVsT3JpZ2luKSAqIHJlcXVpcmVkSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB5ID0geSArICgoMS4wIC0gcmVsT3JpZ2luKSAqIHJlcXVpcmVkSGVpZ2h0KSAtIGhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoMSwgKHJlbE9yaWdpbiAtIHJlbFNjb3JlKSAqIHJlcXVpcmVkSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB5ID0geSArICgoMS4wIC0gcmVsT3JpZ2luKSAqIHJlcXVpcmVkSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1YW50ID0ge21pbjogc21pbiwgbWF4OiBzbWF4fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHJva2UgPSBzdHlsZS5GR0NPTE9SIHx8IG51bGw7XG4gICAgICAgIHZhciBmaWxsID0gc3R5bGUuQkdDT0xPUiB8fCBzdHlsZS5DT0xPUjEgfHwgJ2dyZWVuJztcbiAgICAgICAgaWYgKHN0eWxlLkJHSVRFTSAmJiBmZWF0dXJlLml0ZW1SZ2IpXG4gICAgICAgICAgICBmaWxsID0gZmVhdHVyZS5pdGVtUmdiO1xuICAgICAgICB2YXIgYWxwaGEgPSBzdHlsZS5BTFBIQSA/ICgxLjAgKiBzdHlsZS5BTFBIQSkgOiBudWxsO1xuXG4gICAgICAgIGlmIChzdHlsZS5CR0dSQUQpIHtcbiAgICAgICAgICAgIHZhciBncmFkID0gc3R5bGUuQkdHUkFEO1xuICAgICAgICAgICAgdmFyIHN0ZXAgPSAocmVsU2NvcmUqZ3JhZC5sZW5ndGgpfDA7XG4gICAgICAgICAgICBpZiAoc3RlcCA8IDApIHN0ZXAgPSAwO1xuICAgICAgICAgICAgaWYgKHN0ZXAgPj0gZ3JhZC5sZW5ndGgpIHN0ZXAgPSBncmFkLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBmaWxsID0gZ3JhZFtzdGVwXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGUuQ09MT1IyKSB7XG4gICAgICAgICAgICB2YXIgZ3JhZCA9IHN0eWxlLl9ncmFkaWVudDtcbiAgICAgICAgICAgIGlmICghZ3JhZCkge1xuICAgICAgICAgICAgICAgIGdyYWQgPSBtYWtlR3JhZGllbnQoNTAsIHN0eWxlLkNPTE9SMSwgc3R5bGUuQ09MT1IyLCBzdHlsZS5DT0xPUjMpO1xuICAgICAgICAgICAgICAgIHN0eWxlLl9ncmFkaWVudCA9IGdyYWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGVwID0gKHJlbFNjb3JlKmdyYWQubGVuZ3RoKXwwO1xuICAgICAgICAgICAgaWYgKHN0ZXAgPCAwKSBzdGVwID0gMDtcbiAgICAgICAgICAgIGlmIChzdGVwID49IGdyYWQubGVuZ3RoKSBzdGVwID0gZ3JhZC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgZmlsbCA9IGdyYWRbc3RlcF07XG4gICAgICAgIH1cblxuICAgICAgICBnZyA9IG5ldyBCb3hHbHlwaChtaW5Qb3MsIHksIChtYXhQb3MgLSBtaW5Qb3MpLCBoZWlnaHQsIGZpbGwsIHN0cm9rZSwgYWxwaGEpO1xuICAgIH0gZWxzZSBpZiAoZ3R5cGUgPT09ICdISURERU4nKSB7XG4gICAgICAgIGdnID0gbmV3IFBhZGRlZEdseXBoKG51bGwsIG1pblBvcywgbWF4UG9zKTtcbiAgICAgICAgbm9MYWJlbCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ0FSUk9XJykge1xuICAgICAgICB2YXIgY29sb3IgPSBzdHlsZS5GR0NPTE9SIHx8ICdwdXJwbGUnO1xuICAgICAgICB2YXIgcGFyYWxsZWwgPSBpc0Rhc0Jvb2xlYW5UcnVlKHN0eWxlLlBBUkFMTEVMKTtcbiAgICAgICAgdmFyIHN3ID0gaXNEYXNCb29sZWFuVHJ1ZShzdHlsZS5TT1VUSFdFU1QpO1xuICAgICAgICB2YXIgbmUgPSBpc0Rhc0Jvb2xlYW5UcnVlKHN0eWxlLk5PUlRIRUFTVCk7XG4gICAgICAgIGdnID0gbmV3IEFycm93R2x5cGgobWluUG9zLCBtYXhQb3MsIGhlaWdodCwgY29sb3IsIHBhcmFsbGVsLCBzdywgbmUpO1xuICAgIH0gZWxzZSBpZiAoZ3R5cGUgPT09ICdBTkNIT1JFRF9BUlJPVycpIHtcbiAgICAgICAgdmFyIHN0cm9rZSA9IHN0eWxlLkZHQ09MT1IgfHwgJ25vbmUnO1xuICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkJHQ09MT1IgfHwgJ2dyZWVuJztcbiAgICAgICAgZ2cgPSBuZXcgQUFycm93R2x5cGgobWluUG9zLCBtYXhQb3MsIGhlaWdodCwgZmlsbCwgc3Ryb2tlLCBzdHJhbmQpO1xuICAgICAgICBnZy5idW1wID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGd0eXBlID09PSAnU1BBTicpIHtcbiAgICAgICAgdmFyIHN0cm9rZSA9IHN0eWxlLkZHQ09MT1IgfHwgJ2JsYWNrJztcbiAgICAgICAgZ2cgPSBuZXcgU3BhbkdseXBoKG1pblBvcywgbWF4UG9zLCBoZWlnaHQsIHN0cm9rZSk7XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ0xJTkUnKSB7XG4gICAgICAgIHZhciBzdHJva2UgPSBzdHlsZS5GR0NPTE9SIHx8ICdibGFjayc7XG4gICAgICAgIHZhciBsaW5lU3R5bGUgPSBzdHlsZS5TVFlMRSB8fCAnc29saWQnO1xuICAgICAgICBnZyA9IG5ldyBMaW5lR2x5cGgobWluUG9zLCBtYXhQb3MsIGhlaWdodCwgbGluZVN0eWxlLCBzdHJhbmQsIHN0cm9rZSk7XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ1BSSU1FUlMnKSB7XG4gICAgICAgIHZhciBzdHJva2UgPSBzdHlsZS5GR0NPTE9SIHx8ICdibGFjayc7XG4gICAgICAgIHZhciBmaWxsID0gc3R5bGUuQkdDT0xPUiB8fCAncmVkJztcbiAgICAgICAgZ2cgPSBuZXcgUHJpbWVyc0dseXBoKG1pblBvcywgbWF4UG9zLCBoZWlnaHQsIGZpbGwsIHN0cm9rZSk7XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ1RFWFQnKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBzdHlsZS5TVFJJTkcgfHwgJ3RleHQnO1xuICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkZHQ09MT1IgfHwgJ2JsYWNrJztcbiAgICAgICAgZ2cgPSBuZXcgVGV4dEdseXBoKEdMT0JBTF9HQywgbWluUG9zLCBtYXhQb3MsIGhlaWdodCwgZmlsbCwgc3RyaW5nKTtcbiAgICB9IGVsc2UgaWYgKGd0eXBlID09PSAnVE9PTUFOWScpIHtcbiAgICAgICAgdmFyIHN0cm9rZSA9IHN0eWxlLkZHQ09MT1IgfHwgJ2dyYXknO1xuICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkJHQ09MT1IgfHwgJ29yYW5nZSc7XG4gICAgICAgIGdnID0gbmV3IFRvb01hbnlHbHlwaChtaW5Qb3MsIG1heFBvcywgaGVpZ2h0LCBmaWxsLCBzdHJva2UpO1xuICAgIH0gZWxzZSBpZiAoZ3R5cGUgPT09ICdQT0lOVCcpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHRpZXIuZm9yY2VIZWlnaHQgfHwgc3R5bGUuSEVJR0hUIHx8IDMwO1xuICAgICAgICB2YXIgc21pbiA9IHRpZXIucXVhbnRNaW4oc3R5bGUpO1xuICAgICAgICB2YXIgc21heCA9IHRpZXIucXVhbnRNYXgoc3R5bGUpO1xuICAgICAgICB2YXIgeXNjYWxlID0gKCgxLjAgKiBoZWlnaHQpIC8gKHNtYXggLSBzbWluKSk7XG4gICAgICAgIHZhciByZWxTY29yZSA9ICgoMS4wICogc2NvcmUpIC0gc21pbikgLyAoc21heC1zbWluKTtcbiAgICAgICAgdmFyIHNjID0gKChzY29yZSAtICgxLjAqc21pbikpICogeXNjYWxlKXwwO1xuICAgICAgICBxdWFudCA9IHttaW46IHNtaW4sIG1heDogc21heH07XG5cbiAgICAgICAgdmFyIGZpbGwgPSBzdHlsZS5GR0NPTE9SIHx8IHN0eWxlLkNPTE9SMSB8fCAnYmxhY2snO1xuICAgICAgICBpZiAoc3R5bGUuQ09MT1IyKSB7XG4gICAgICAgICAgICB2YXIgZ3JhZCA9IHN0eWxlLl9ncmFkaWVudDtcbiAgICAgICAgICAgIGlmICghZ3JhZCkge1xuICAgICAgICAgICAgICAgIGdyYWQgPSBtYWtlR3JhZGllbnQoNTAsIHN0eWxlLkNPTE9SMSwgc3R5bGUuQ09MT1IyLCBzdHlsZS5DT0xPUjMpO1xuICAgICAgICAgICAgICAgIHN0eWxlLl9ncmFkaWVudCA9IGdyYWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGVwID0gKHJlbFNjb3JlKmdyYWQubGVuZ3RoKXwwO1xuICAgICAgICAgICAgaWYgKHN0ZXAgPCAwKSBzdGVwID0gMDtcbiAgICAgICAgICAgIGlmIChzdGVwID49IGdyYWQubGVuZ3RoKSBzdGVwID0gZ3JhZC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgZmlsbCA9IGdyYWRbc3RlcF07XG4gICAgICAgIH0gXG5cbiAgICAgICAgZ2cgPSBuZXcgUG9pbnRHbHlwaCgobWluUG9zICsgbWF4UG9zKS8yLCBoZWlnaHQtc2MsIGhlaWdodCwgZmlsbCk7XG4gICAgfSBlbHNlIGlmIChndHlwZSA9PT0gJ19fU0VRVUVOQ0UnKSB7XG4gICAgICAgIHZhciByYXdzZXEgPSBmZWF0dXJlLnNlcTtcbiAgICAgICAgdmFyIHNlcSA9IHJhd3NlcTtcbiAgICAgICAgdmFyIHJhd3F1YWxzID0gZmVhdHVyZS5xdWFscztcbiAgICAgICAgdmFyIHF1YWxzID0gcmF3cXVhbHM7XG4gICAgICAgIHZhciBpbnNlcnRpb25MYWJlbHMgPSBpc0Rhc0Jvb2xlYW5UcnVlKHN0eWxlLl9fSU5TRVJUSU9OUyk7XG5cbiAgICAgICAgdmFyIGluZGVscyA9IFtdO1xuICAgICAgICBpZiAoZmVhdHVyZS5jaWdhcikge1xuICAgICAgICAgICAgdmFyIG9wcyA9IHBhcnNlQ2lnYXIoZmVhdHVyZS5jaWdhcik7XG4gICAgICAgICAgICBzZXEgPSAnJ1xuICAgICAgICAgICAgcXVhbHMgPSAnJztcbiAgICAgICAgICAgIHZhciBjdXJzb3IgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IG9wcy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgY28gPSBvcHNbY2ldO1xuICAgICAgICAgICAgICAgIGlmIChjby5vcCA9PSAnTScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VxICs9IHJhd3NlcS5zdWJzdHIoY3Vyc29yLCBjby5jbnQpO1xuICAgICAgICAgICAgICAgICAgICBxdWFscyArPSByYXdxdWFscy5zdWJzdHIoY3Vyc29yLCBjby5jbnQpO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IgKz0gY28uY250O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY28ub3AgPT0gJ0QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG9pID0gMDsgb2kgPCBjby5jbnQ7ICsrb2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcSArPSAnLSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFscyArPSAnWic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvLm9wID09ICdJJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zZXEgPSAgcmF3c2VxLnN1YnN0cihjdXJzb3IsIGNvLmNudCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZyA9IG5ldyBUcmlhbmdsZUdseXBoKG1pblBvcyArIChzZXEubGVuZ3RoKnNjYWxlKSwgNSwgJ1MnLCA1LCAncmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnNlcnRpb25MYWJlbHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZyA9IG5ldyBMYWJlbGxlZEdseXBoKEdMT0JBTF9HQywgaWcsIGluc2VxLCBmYWxzZSwgJ2NlbnRlcicsICdhYm92ZScsICc3cHggc2Fucy1zZXJpZicpO1xuICAgICAgICAgICAgICAgICAgICBpZy5mZWF0dXJlID0ge2xhYmVsOiAnSW5zZXJ0aW9uOiAnICsgaW5zZXEsIHR5cGU6ICdpbnNlcnRpb24nLCBtZXRob2Q6ICdpbnNlcnRpb24nfTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZWxzLnB1c2goaWcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvciArPSBjby5jbnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjby5vcCA9PSAnUycpIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yICs9IGNvLmNudDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndW5rbm93biBjaWdvcCcgKyBjby5vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlZlNlcSA9IG51bGw7XG4gICAgICAgIGlmICh0aWVyLmN1cnJlbnRTZXF1ZW5jZSkge1xuICAgICAgICAgICAgdmFyIGNzU3RhcnQgPSB0aWVyLmN1cnJlbnRTZXF1ZW5jZS5zdGFydHwwO1xuICAgICAgICAgICAgdmFyIGNzRW5kID0gdGllci5jdXJyZW50U2VxdWVuY2UuZW5kfDA7XG4gICAgICAgICAgICBpZiAoY3NTdGFydCA8PSBtYXggJiYgY3NFbmQgPj0gbWluKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNmTWluID0gTWF0aC5tYXgobWluLCBjc1N0YXJ0KTtcbiAgICAgICAgICAgICAgICB2YXIgc2ZNYXggPSBNYXRoLm1pbihtYXgsIGNzRW5kKTtcblxuICAgICAgICAgICAgICAgIHJlZlNlcSA9IHRpZXIuY3VycmVudFNlcXVlbmNlLnNlcS5zdWJzdHIoc2ZNaW4gLSBjc1N0YXJ0LCBzZk1heCAtIHNmTWluICsgMSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG1pbiA8IHNmTWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZlNlcSA9ICdOJyArIHJlZlNlcTtcbiAgICAgICAgICAgICAgICAgICAgc2ZNaW4tLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpbGUgKG1heCA+IHNmTWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZlNlcSA9IHJlZlNlcSArICdOJztcbiAgICAgICAgICAgICAgICAgICAgc2ZNYXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2cgPSBuZXcgU2VxdWVuY2VHbHlwaCh0aWVyLmJyb3dzZXIuYmFzZUNvbG9ycywgbWluUG9zLCBtYXhQb3MsIGhlaWdodCwgc2VxLCByZWZTZXEsIHN0eWxlLl9fU0VRQ09MT1IsIHF1YWxzKTtcbiAgICAgICAgaWYgKGluc2VydGlvbkxhYmVscylcbiAgICAgICAgICAgIGdnID0gbmV3IFRyYW5zbGF0ZWRHbHlwaChnZywgMCwgNyk7XG4gICAgICAgIGlmIChpbmRlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaW5kZWxzLnNwbGljZSgwLCAwLCBnZyk7XG4gICAgICAgICAgICBnZyA9IG5ldyBHcm91cEdseXBoKGluZGVscyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGd0eXBlID09PSAnX19JTlNFUlRJT04nKSB7XG4gICAgICAgIHZhciBpZyA9IG5ldyBUcmlhbmdsZUdseXBoKG1pblBvcywgNSwgJ1MnLCA1LCAncmVkJyk7XG4gICAgICAgIGdnID0gbmV3IExhYmVsbGVkR2x5cGgoR0xPQkFMX0dDLCBpZywgZmVhdHVyZS5pbnNlcnRpb24gfHwgZmVhdHVyZS5hbHRBbGxlbGVzWzBdLCBmYWxzZSwgJ2NlbnRlcicsICdhYm92ZScsICc3cHggc2Fucy1zZXJpZicpO1xuICAgICAgICBpZiAoKG1heFBvcyAtIG1pblBvcykgPiAxKSB7XG4gICAgICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkJHQ09MT1IgfHwgc3R5bGUuQ09MT1IxIHx8ICdncmVlbic7XG4gICAgICAgICAgICB2YXIgYmcgPSBuZXcgQm94R2x5cGgobWluUG9zLCA1LCAobWF4UG9zIC0gbWluUG9zKSwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpO1xuICAgICAgICAgICAgZ2cgPSBuZXcgR3JvdXBHbHlwaChbYmcsIGdnXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGd0eXBlID09PSAnX19OT05FJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgLyogZGVmYXVsdCB0byBCT1ggKi8ge1xuICAgICAgICB2YXIgc3Ryb2tlID0gc3R5bGUuRkdDT0xPUiB8fCBudWxsO1xuICAgICAgICB2YXIgZmlsbCA9IHN0eWxlLkJHQ09MT1IgfHwgc3R5bGUuQ09MT1IxIHx8ICdncmVlbic7XG4gICAgICAgIGlmIChzdHlsZS5CR0lURU0gJiYgZmVhdHVyZS5pdGVtUmdiKVxuICAgICAgICAgICAgZmlsbCA9IGZlYXR1cmUuaXRlbVJnYjtcbiAgICAgICAgZ2cgPSBuZXcgQm94R2x5cGgobWluUG9zLCAwLCAobWF4UG9zIC0gbWluUG9zKSwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpO1xuICAgICAgICAvLyBnZy5idW1wID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoKGlzRGFzQm9vbGVhblRydWUoc3R5bGUuTEFCRUwpIHx8IGZlYXR1cmUuZm9yY2VMYWJlbCkgJiYgbGFiZWwgJiYgIW5vTGFiZWwpIHtcbiAgICAgICAgZ2cgPSBuZXcgTGFiZWxsZWRHbHlwaChHTE9CQUxfR0MsIGdnLCBsYWJlbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChidW1wKSB7XG4gICAgICAgIGdnLmJ1bXAgPSB0cnVlO1xuICAgIH1cblxuICAgIGdnLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgIGlmIChxdWFudCkge1xuICAgICAgICBnZy5xdWFudCA9IHF1YW50O1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5aSU5ERVgpIHtcbiAgICAgICAgZ2cuemluZGV4ID0gc3R5bGUuWklOREVYIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2c7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnN0eWxlRm9yRmVhdHVyZSA9IGZ1bmN0aW9uKGYpIHtcbiAgICB2YXIgc3NTY2FsZSA9IHRoaXMuYnJvd3Nlci56b29tRm9yQ3VycmVudFNjYWxlKCk7XG5cbiAgICBpZiAoIXRoaXMuc3R5bGVzaGVldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmUgPSBudWxsO1xuICAgIHZhciBzcyA9IHRoaXMuc3R5bGVzaGVldC5zdHlsZXM7XG4gICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHNzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICB2YXIgc2ggPSBzc1tzaV07XG4gICAgICAgIGlmIChzaC56b29tICYmIHNoLnpvb20gIT0gc3NTY2FsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2gub3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIGlmIChzaC5vcmllbnRhdGlvbiAhPSBmLm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFiZWxSRSA9IHNoLl9sYWJlbFJFO1xuICAgICAgICBpZiAoIWxhYmVsUkUgfHwgIWxhYmVsUkUudGVzdCkge1xuICAgICAgICAgICAgbGFiZWxSRSA9IG5ldyBSZWdFeHAoJ14nICsgc2gubGFiZWwgKyAnJCcpO1xuICAgICAgICAgICAgc2guX2xhYmVsUkUgPSBsYWJlbFJFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaC5sYWJlbCAmJiAhKGxhYmVsUkUudGVzdChmLmxhYmVsKSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXRob2RSRSA9IHNoLl9tZXRob2RSRTtcbiAgICAgICAgaWYgKCFtZXRob2RSRSB8fCAhbWV0aG9kUkUudGVzdCkge1xuICAgICAgICAgICAgbWV0aG9kUkUgPSBuZXcgUmVnRXhwKCdeJyArIHNoLm1ldGhvZCArICckJyk7XG4gICAgICAgICAgICBzaC5fbWV0aG9kUkUgPSBtZXRob2RSRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2gubWV0aG9kICYmICEobWV0aG9kUkUudGVzdChmLm1ldGhvZCkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2gudHlwZSkge1xuICAgICAgICAgICAgaWYgKHNoLnR5cGUgPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXliZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXliZSA9IHNoLnN0eWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVSRSA9IHNoLl90eXBlUkU7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlUkUgfHwgIXR5cGVSRS50ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVSRSA9IG5ldyBSZWdFeHAoJ14nICsgc2gudHlwZSArICckJyk7XG4gICAgICAgICAgICAgICAgICAgIHNoLl90eXBlUkUgPSB0eXBlUkU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdHlwZVJFLnRlc3QoZi50eXBlKSkgXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaC5zdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIG1heWJlO1xufVxuXG5mdW5jdGlvbiBtYWtlTGluZUdseXBoKGZlYXR1cmVzLCBzdHlsZSwgdGllcikge1xuICAgIHZhciBvcmlnaW4gPSB0aWVyLmJyb3dzZXIudmlld1N0YXJ0LCBzY2FsZSA9IHRpZXIuYnJvd3Nlci5zY2FsZTtcbiAgICB2YXIgaGVpZ2h0ID0gdGllci5mb3JjZUhlaWdodCB8fCBzdHlsZS5IRUlHSFQgfHwgMzA7XG4gICAgdmFyIG1pbiA9IHRpZXIucXVhbnRNaW4oc3R5bGUpO1xuICAgIHZhciBtYXggPSB0aWVyLnF1YW50TWF4KHN0eWxlKTtcbiAgICB2YXIgeXNjYWxlID0gKCgxLjAgKiBoZWlnaHQpIC8gKG1heCAtIG1pbikpO1xuICAgIHZhciB3aWR0aCA9IHN0eWxlLkxJTkVXSURUSCB8fCAxO1xuICAgIHZhciBjb2xvciA9IHN0eWxlLkZHQ09MT1IgfHwgc3R5bGUuQ09MT1IxIHx8ICdibGFjayc7XG5cbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICB2YXIgZiA9IGZlYXR1cmVzW2ZpXTtcblxuICAgICAgICB2YXIgcHggPSAoKCgoZi5taW58MCkgKyAoZi5tYXh8MCkpIC8gMikgLSBvcmlnaW4pICogc2NhbGU7XG4gICAgICAgIHZhciBzYyA9ICgoZi5zY29yZSAtICgxLjAqbWluKSkgKiB5c2NhbGUpfDA7XG4gICAgICAgIHZhciBweSA9IChoZWlnaHQgLSBzYyk7ICAvLyBGSVhNRSB5Pz8/XG4gICAgICAgIHBvaW50cy5wdXNoKHB4KTtcbiAgICAgICAgcG9pbnRzLnB1c2gocHkpO1xuICAgIH1cbiAgICB2YXIgbGdnID0gbmV3IExpbmVHcmFwaEdseXBoKHBvaW50cywgY29sb3IsIGhlaWdodCk7XG4gICAgbGdnLnF1YW50ID0ge21pbjogbWluLCBtYXg6IG1heH07XG5cbiAgICBpZiAoc3R5bGUuWklOREVYKSBcbiAgICAgICAgbGdnLnppbmRleCA9IHN0eWxlLlpJTkRFWHwwO1xuXG4gICAgcmV0dXJuIGxnZztcbn1cblxuRGFzVGllci5wcm90b3R5cGUucXVhbnRNaW4gPSBmdW5jdGlvbihzdHlsZSkge1xuICAgIGlmICh0aGlzLmZvcmNlTWluRHluYW1pYykge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RmVhdHVyZXNNaW5TY29yZSB8fCAwO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKHRoaXMuZm9yY2VNaW4pID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZU1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3R5bGUuTUlOIHx8IHRoaXMuY3VycmVudEZlYXR1cmVzTWluU2NvcmUgfHwgMDtcbiAgICB9XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnF1YW50TWF4ID0gZnVuY3Rpb24oc3R5bGUpIHtcbiAgICBpZiAodGhpcy5mb3JjZU1heER5bmFtaWMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEZlYXR1cmVzTWF4U2NvcmUgfHwgMDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZih0aGlzLmZvcmNlTWF4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yY2VNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlLk1BWCB8fCB0aGlzLmN1cnJlbnRGZWF0dXJlc01heFNjb3JlIHx8IDA7XG4gICAgfVxufVxuXG5cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBkcmF3RmVhdHVyZVRpZXI6IGRyYXdGZWF0dXJlVGllclxuICAgIH07XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMVxuLy9cbi8vIGZlYXR1cmUtcG9wdXAuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBwaWNrID0gdXRpbHMucGljaztcbiAgICB2YXIgcHVzaG5ldyA9IHV0aWxzLnB1c2huZXc7XG4gICAgdmFyIG1ha2VFbGVtZW50ID0gdXRpbHMubWFrZUVsZW1lbnQ7XG59XG5cblxudmFyIFRBR1ZBTF9OT1RFX1JFID0gbmV3IFJlZ0V4cCgnXihbQS1aYS16XSspPSguKyknKTtcblxuQnJvd3Nlci5wcm90b3R5cGUuYWRkRmVhdHVyZUluZm9QbHVnaW4gPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaWYgKCF0aGlzLmZlYXR1cmVJbmZvUGx1Z2lucykge1xuICAgICAgICB0aGlzLmZlYXR1cmVJbmZvUGx1Z2lucyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLmZlYXR1cmVJbmZvUGx1Z2lucy5wdXNoKGhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBGZWF0dXJlSW5mbyhoaXQsIGZlYXR1cmUsIGdyb3VwKSB7XG4gICAgdmFyIG5hbWUgPSBwaWNrKGdyb3VwLnR5cGUsIGZlYXR1cmUudHlwZSk7XG4gICAgdmFyIGZpZCA9IHBpY2soZ3JvdXAubGFiZWwsIGZlYXR1cmUubGFiZWwsIGdyb3VwLmlkLCBmZWF0dXJlLmlkKTtcbiAgICBpZiAoZmlkICYmIGZpZC5pbmRleE9mKCdfX2RhenpsZScpICE9IDApIHtcbiAgICAgICAgbmFtZSA9IG5hbWUgKyAnOiAnICsgZmlkO1xuICAgIH1cblxuICAgIHRoaXMuaGl0ID0gaGl0O1xuICAgIHRoaXMuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgIHRoaXMudGl0bGUgPSBuYW1lO1xuICAgIHRoaXMuc2VjdGlvbnMgPSBbXTtcbn1cblxuRmVhdHVyZUluZm8ucHJvdG90eXBlLnNldFRpdGxlID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMudGl0bGUgPSB0O1xufVxuXG5GZWF0dXJlSW5mby5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24obGFiZWwsIGluZm8pIHtcbiAgICBpZiAodHlwZW9mIGluZm8gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGluZm8gPSBtYWtlRWxlbWVudCgnc3BhbicsIGluZm8pO1xuICAgIH1cbiAgICB0aGlzLnNlY3Rpb25zLnB1c2goe2xhYmVsOiBsYWJlbCwgaW5mbzogaW5mb30pO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5mZWF0dXJlUG9wdXAgPSBmdW5jdGlvbihldiwgX19pZ25vcmVkX2ZlYXR1cmUsIGhpdCwgdGllcikge1xuICAgIHZhciBoaSA9IGhpdC5sZW5ndGg7XG4gICAgdmFyIGZlYXR1cmUgPSAtLWhpID49IDAgPyBoaXRbaGldIDoge307XG4gICAgdmFyIGdyb3VwID0gLS1oaSA+PSAwID8gaGl0W2hpXSA6IHt9O1xuXG4gICAgdmFyIGZlYXR1cmVJbmZvID0gbmV3IEZlYXR1cmVJbmZvKGhpdCwgZmVhdHVyZSwgZ3JvdXApO1xuICAgIGZlYXR1cmVJbmZvLnRpZXIgPSB0aWVyO1xuICAgIHZhciBmaXBzID0gdGhpcy5mZWF0dXJlSW5mb1BsdWdpbnMgfHwgW107XG4gICAgZm9yICh2YXIgZmlwaSA9IDA7IGZpcGkgPCBmaXBzLmxlbmd0aDsgKytmaXBpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaXBzW2ZpcGldKGZlYXR1cmUsIGZlYXR1cmVJbmZvKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZS5zdGFjayB8fCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXBzID0gdGllci5mZWF0dXJlSW5mb1BsdWdpbnMgfHwgW107XG4gICAgZm9yIChmaXBpID0gMDsgZmlwaSA8IGZpcHMubGVuZ3RoOyArK2ZpcGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpcHNbZmlwaV0oZmVhdHVyZSwgZmVhdHVyZUluZm8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnN0YWNrIHx8IGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVBbGxQb3B1cHMoKTtcblxuICAgIHZhciB0YWJsZSA9IG1ha2VFbGVtZW50KCd0YWJsZScsIG51bGwsIHtjbGFzc05hbWU6ICd0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWNvbmRlbnNlZCd9KTtcbiAgICB0YWJsZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICB0YWJsZS5zdHlsZS5tYXJnaW4gPSAnMHB4JztcblxuICAgIHZhciBpZHggPSAwO1xuICAgIGlmIChmZWF0dXJlLm1ldGhvZCkge1xuICAgICAgICB2YXIgcm93ID0gbWFrZUVsZW1lbnQoJ3RyJywgW1xuICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RoJywgJ01ldGhvZCcpLFxuICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RkJywgZmVhdHVyZS5tZXRob2QpXG4gICAgICAgIF0pO1xuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICArK2lkeDtcbiAgICB9XG4gICAge1xuICAgICAgICB2YXIgbG9jO1xuICAgICAgICBpZiAoZ3JvdXAuc2VnbWVudCkge1xuICAgICAgICAgICAgbG9jID0gZ3JvdXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2MgPSBmZWF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByb3cgPSBtYWtlRWxlbWVudCgndHInLCBbXG4gICAgICAgICAgICBtYWtlRWxlbWVudCgndGgnLCAnTG9jYXRpb24nKSxcbiAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIGxvYy5zZWdtZW50ICsgJzonICsgbG9jLm1pbiArICctJyArIGxvYy5tYXgsIHt9LCB7bWluV2lkdGg6ICcyMDBweCd9KVxuICAgICAgICBdKTtcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgKytpZHg7XG4gICAgfVxuICAgIGlmIChmZWF0dXJlLnNjb3JlICE9PSB1bmRlZmluZWQgJiYgZmVhdHVyZS5zY29yZSAhPT0gbnVsbCAmJiBmZWF0dXJlLnNjb3JlICE9ICctJykge1xuICAgICAgICB2YXIgcm93ID0gbWFrZUVsZW1lbnQoJ3RyJywgW1xuICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RoJywgJ1Njb3JlJyksXG4gICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCAnJyArIGZlYXR1cmUuc2NvcmUpXG4gICAgICAgIF0pO1xuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICArK2lkeDtcbiAgICB9XG4gICAge1xuICAgICAgICB2YXIgbGlua3MgPSBtYXliZUNvbmNhdChncm91cC5saW5rcywgZmVhdHVyZS5saW5rcyk7XG4gICAgICAgIGlmIChsaW5rcyAmJiBsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gbWFrZUVsZW1lbnQoJ3RyJywgW1xuICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0aCcsICdMaW5rcycpLFxuICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIGxpbmtzLm1hcChmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRWxlbWVudCgnZGl2JywgbWFrZUVsZW1lbnQoJ2EnLCBsLmRlc2MsIHtocmVmOiBsLnVyaSwgdGFyZ2V0OiAnX25ldyd9KSk7XG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICArK2lkeDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciBub3RlcyA9IG1heWJlQ29uY2F0KGdyb3VwLm5vdGVzLCBmZWF0dXJlLm5vdGVzKTtcbiAgICAgICAgZm9yICh2YXIgbmkgPSAwOyBuaSA8IG5vdGVzLmxlbmd0aDsgKytuaSkge1xuICAgICAgICAgICAgdmFyIGsgPSAnTm90ZSc7XG4gICAgICAgICAgICB2YXIgdiA9IG5vdGVzW25pXTtcbiAgICAgICAgICAgIHZhciBtID0gdi5tYXRjaChUQUdWQUxfTk9URV9SRSk7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgIGsgPSBtWzFdO1xuICAgICAgICAgICAgICAgIHYgPSBtWzJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcm93ID0gbWFrZUVsZW1lbnQoJ3RyJywgW1xuICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0aCcsIGspLFxuICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIHYpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICArK2lkeDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGZpc2kgPSAwOyBmaXNpIDwgZmVhdHVyZUluZm8uc2VjdGlvbnMubGVuZ3RoOyArK2Zpc2kpIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSBmZWF0dXJlSW5mby5zZWN0aW9uc1tmaXNpXTtcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3RyJywgW1xuICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RoJywgc2VjdGlvbi5sYWJlbCksXG4gICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCBzZWN0aW9uLmluZm8pXSkpO1xuICAgIH0gICAgICAgIFxuXG4gICAgdGhpcy5wb3BpdChldiwgZmVhdHVyZUluZm8udGl0bGUgfHwgJ0ZlYXR1cmUnLCB0YWJsZSwge3dpZHRoOiA0NTB9KTtcbn1cblxuZnVuY3Rpb24gbWF5YmVDb25jYXQoYSwgYikge1xuICAgIHZhciBsID0gW107XG4gICAgaWYgKGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBwdXNobmV3KGwsIGFbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChiKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcHVzaG5ldyhsLCBiW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgcHVzaG8gPSB1dGlscy5wdXNobztcbiAgICB2YXIgcHVzaG5ld28gPSB1dGlscy5wdXNobmV3bztcbn1cblxuZnVuY3Rpb24gc29ydEZlYXR1cmVzKHRpZXIpXG57XG4gICAgdmFyIGRtaW4gPSB0aWVyLmJyb3dzZXIuZHJhd25TdGFydCwgZG1heCA9IHRpZXIuYnJvd3Nlci5kcmF3bkVuZDtcbiAgICB2YXIgdW5ncm91cGVkRmVhdHVyZXMgPSB7fTtcbiAgICB2YXIgZ3JvdXBlZEZlYXR1cmVzID0ge307XG4gICAgdmFyIGRyYXduR3JvdXBlZEZlYXR1cmVzID0ge307XG4gICAgdmFyIGdyb3VwTWlucyA9IHt9LCBncm91cE1heGVzID0ge307XG4gICAgdmFyIGdyb3VwcyA9IHt9O1xuICAgIHZhciBzdXBlckdyb3VwcyA9IHt9O1xuICAgIHZhciBncm91cHNUb1N1cGVycyA9IHt9O1xuICAgIHZhciBub25Qb3NpdGlvbmFsID0gW107XG4gICAgdmFyIG1pblNjb3JlLCBtYXhTY29yZTtcbiAgICB2YXIgZmJpZDtcblxuICAgIHZhciBpbml0X2ZiaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZmJpZCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgdGllci5jdXJyZW50RmVhdHVyZXMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICB2YXIgZiA9IHRpZXIuY3VycmVudEZlYXR1cmVzW2ZpXTtcbiAgICAgICAgICAgIGlmIChmLmlkKSB7XG4gICAgICAgICAgICAgICAgZmJpZFtmLmlkXSA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHZhciBzdXBlclBhcmVudHNPZiA9IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgLy8gRklYTUU6IHNob3VsZCByZWN1ci5cbiAgICAgICAgdmFyIHNwaWRzID0gW107XG4gICAgICAgIGlmIChmLnBhcmVudHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHBpID0gMDsgcGkgPCBmLnBhcmVudHMubGVuZ3RoOyArK3BpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBpZCA9IGYucGFyZW50c1twaV07XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBmYmlkW3BpZF07XG4gICAgICAgICAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhbGVydChwLnR5cGUgKyAnOicgKyBwLnR5cGVDdik7XG4gICAgICAgICAgICAgICAgaWYgKHAudHlwZUN2ID09ICdTTzowMDAwNzA0Jykge1xuICAgICAgICAgICAgICAgICAgICBwdXNobmV3KHNwaWRzLCBwaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BpZHM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IHRpZXIuY3VycmVudEZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICB2YXIgZiA9IHRpZXIuY3VycmVudEZlYXR1cmVzW2ZpXTtcbiAgICAgICAgaWYgKGYucGFydHMpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRyYXduID0gZi5taW4gPD0gZG1heCAmJiBmLm1heCA+PSBkbWluO1xuXG4gICAgICAgIGlmICghZi5taW4gfHwgIWYubWF4KSB7XG4gICAgICAgICAgICBub25Qb3NpdGlvbmFsLnB1c2goZik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmLnNjb3JlICYmIGYuc2NvcmUgIT0gJy4nICYmIGYuc2NvcmUgIT0gJy0nKSB7XG4gICAgICAgICAgICB2YXIgc2MgPSAxLjAgKiBmLnNjb3JlO1xuICAgICAgICAgICAgaWYgKCFtaW5TY29yZSB8fCBzYyA8IG1pblNjb3JlKSB7XG4gICAgICAgICAgICAgICAgbWluU2NvcmUgPSBzYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4U2NvcmUgfHwgc2MgPiBtYXhTY29yZSkge1xuICAgICAgICAgICAgICAgIG1heFNjb3JlID0gc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZkdyb3VwcyA9IFtdO1xuICAgICAgICB2YXIgZlN1cGVyR3JvdXAgPSBudWxsO1xuICAgICAgICBpZiAoZi5ncm91cHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGdpID0gMDsgZ2kgPCBmLmdyb3Vwcy5sZW5ndGg7ICsrZ2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZyA9IGYuZ3JvdXBzW2dpXTtcbiAgICAgICAgICAgICAgICB2YXIgZ2lkID0gZy5pZDtcbiAgICAgICAgICAgICAgICBpZiAoZy50eXBlID09ICdnZW5lJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBMaWtlIGEgc3VwZXItZ3JvdXBlci4uLlxuICAgICAgICAgICAgICAgICAgICBmU3VwZXJHcm91cCA9IGdpZDsgXG4gICAgICAgICAgICAgICAgICAgIGdyb3Vwc1tnaWRdID0gZztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGcudHlwZSA9PSAndHJhbnNsYXRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gaWdub3JlIHRoaXMgdG8gZ2V0IHNlbnNpYmxlIHJlc3VsdHMgZnJvbSBiai1lIDotKC5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwdXNobyhncm91cGVkRmVhdHVyZXMsIGdpZCwgZik7XG4gICAgICAgICAgICAgICAgICAgIGdyb3Vwc1tnaWRdID0gZztcbiAgICAgICAgICAgICAgICAgICAgZkdyb3Vwcy5wdXNoKGdpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9nbSA9IGdyb3VwTWluc1tnaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9nbSB8fCBmLm1pbiA8IG9nbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTWluc1tnaWRdID0gZi5taW47XG5cbiAgICAgICAgICAgICAgICAgICAgb2dtID0gZ3JvdXBNYXhlc1tnaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9nbSB8fCBmLm1heCA+IG9nbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTWF4ZXNbZ2lkXSA9IGYubWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmLnBhcmVudHMpIHtcbiAgICAgICAgICAgIGlmICghZmJpZCkge1xuICAgICAgICAgICAgICAgIGluaXRfZmJpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgcGkgPSAwOyBwaSA8IGYucGFyZW50cy5sZW5ndGg7ICsrcGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGlkID0gZi5wYXJlbnRzW3BpXTtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IGZiaWRbcGlkXTtcbiAgICAgICAgICAgICAgICBpZiAoIXApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxlcnQoXCJjb3VsZG4ndCBmaW5kIFwiICsgcGlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcC5wYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICBwLnBhcnRzID0gW2ZdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwdXNobmV3byhncm91cGVkRmVhdHVyZXMsIHBpZCwgcCk7XG4gICAgICAgICAgICAgICAgcHVzaG8oZ3JvdXBlZEZlYXR1cmVzLCBwaWQsIGYpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBzW3BpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBzW3BpZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBwLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBwLmxhYmVsIHx8IHAuaWRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZkdyb3Vwcy5wdXNoKHBpZCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2dtID0gZ3JvdXBNaW5zW3BpZF07XG4gICAgICAgICAgICAgICAgaWYgKCFvZ20gfHwgZi5taW4gPCBvZ20pXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTWluc1twaWRdID0gZi5taW47XG5cbiAgICAgICAgICAgICAgICBvZ20gPSBncm91cE1heGVzW3BpZF07XG4gICAgICAgICAgICAgICAgaWYgKCFvZ20gfHwgZi5tYXggPiBvZ20pXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTWF4ZXNbcGlkXSA9IGYubWF4O1xuXG4gICAgICAgICAgICAgICAgdmFyIHNncyA9IHN1cGVyUGFyZW50c09mKHApO1xuICAgICAgICAgICAgICAgIGlmIChzZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmU3VwZXJHcm91cCA9IHNnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwID0gZmJpZFtzZ3NbMF1dO1xuICAgICAgICAgICAgICAgICAgICBncm91cHNbc2dzWzBdXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHNwLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogc3AuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogc3AubGFiZWwgfHwgc3AuaWRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aWVyLmRhc1NvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWVyLmRhc1NvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmR3JvdXBzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBpZiAoZHJhd24pXG4gICAgICAgICAgICAgICAgcHVzaG8odW5ncm91cGVkRmVhdHVyZXMsIGYudHlwZSwgZik7XG4gICAgICAgIH0gZWxzZSBpZiAoZlN1cGVyR3JvdXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZkdyb3Vwcy5sZW5ndGg7ICsrZykge1xuICAgICAgICAgICAgICAgIHZhciBnaWQgPSBmR3JvdXBzW2ddO1xuICAgICAgICAgICAgICAgIHB1c2huZXdvKHN1cGVyR3JvdXBzLCBmU3VwZXJHcm91cCwgZ2lkKTtcbiAgICAgICAgICAgICAgICBncm91cHNUb1N1cGVyc1tnaWRdID0gZlN1cGVyR3JvdXA7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9ICAgICAgIFxuICAgIH1cblxuICAgIGZvciAodmFyIGdpZCBpbiBncm91cGVkRmVhdHVyZXMpIHtcbiAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzW2dpZF07XG4gICAgICAgIGlmICh0eXBlb2YoZ3JvdXAubWluKSAhPT0gJ251bWJlcicpIFxuICAgICAgICAgICAgZ3JvdXAubWluID0gZ3JvdXBNaW5zW2dpZF07XG4gICAgICAgIGlmICh0eXBlb2YoZ3JvdXAubWF4KSAhPT0gJ251bWJlcicpIFxuICAgICAgICAgICAgZ3JvdXAubWF4ID0gZ3JvdXBNYXhlc1tnaWRdO1xuXG4gICAgICAgIGlmIChncm91cE1heGVzW2dpZF0gPj0gZG1pbiAmJiBncm91cE1pbnNbZ2lkXSA8PSBkbWF4KVxuICAgICAgICAgICAgZHJhd25Hcm91cGVkRmVhdHVyZXNbZ2lkXSA9IGdyb3VwZWRGZWF0dXJlc1tnaWRdO1xuICAgIH1cblxuICAgIHRpZXIudW5ncm91cGVkRmVhdHVyZXMgPSB1bmdyb3VwZWRGZWF0dXJlcztcbiAgICB0aWVyLmdyb3VwZWRGZWF0dXJlcyA9IGRyYXduR3JvdXBlZEZlYXR1cmVzO1xuICAgIHRpZXIuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIHRpZXIuc3VwZXJHcm91cHMgPSBzdXBlckdyb3VwcztcbiAgICB0aWVyLmdyb3Vwc1RvU3VwZXJzID0gZ3JvdXBzVG9TdXBlcnM7XG5cbiAgICBpZiAobWluU2NvcmUpIHtcbiAgICAgICAgaWYgKG1pblNjb3JlID4gMCkge1xuICAgICAgICAgICAgbWluU2NvcmUgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKG1heFNjb3JlIDwgMCkge1xuICAgICAgICAgICAgbWF4U2NvcmUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRpZXIuY3VycmVudEZlYXR1cmVzTWluU2NvcmUgPSBtaW5TY29yZTtcbiAgICAgICAgdGllci5jdXJyZW50RmVhdHVyZXNNYXhTY29yZSA9IG1heFNjb3JlO1xuICAgIH1cbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBzb3J0RmVhdHVyZXM6IHNvcnRGZWF0dXJlc1xuICAgIH07XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gZ2x5cGhzLmpzOiBjb21wb25lbnRzIHdoaWNoIGtub3cgaG93IHRvIGRyYXcgdGhlbXNlbHZlc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHNwYW5zID0gcmVxdWlyZSgnLi9zcGFucycpO1xuICAgIHZhciB1bmlvbiA9IHNwYW5zLnVuaW9uO1xuICAgIHZhciBSYW5nZSA9IHNwYW5zLlJhbmdlO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBtYWtlRWxlbWVudE5TID0gdXRpbHMubWFrZUVsZW1lbnROUztcblxuICAgIHZhciBzdmd1ID0gcmVxdWlyZSgnLi9zdmctdXRpbHMnKTtcbiAgICB2YXIgTlNfU1ZHID0gc3ZndS5OU19TVkc7XG4gICAgdmFyIE5TX1hMSU5LID0gc3ZndS5OU19YTElOSztcbiAgICB2YXIgU1ZHUGF0aCA9IHN2Z3UuU1ZHUGF0aDtcbn1cblxuZnVuY3Rpb24gUGF0aEdseXBoQmFzZShzdHJva2UsIGZpbGwpIHtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG4gICAgdGhpcy5fZmlsbCA9IGZpbGw7XG59XG5cblBhdGhHbHlwaEJhc2UucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmRyYXdQYXRoKGcpO1xuXG4gICAgaWYgKHRoaXMuX2ZpbGwpIHtcbiAgICAgICAgZy5maWxsU3R5bGUgPSB0aGlzLl9maWxsO1xuICAgICAgICBnLmZpbGwoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N0cm9rZSkge1xuICAgICAgICBnLnN0cm9rZVN0eWxlID0gdGhpcy5fc3Ryb2tlO1xuICAgICAgICBnLnN0cm9rZSgpO1xuICAgIH1cbn1cblxuUGF0aEdseXBoQmFzZS5wcm90b3R5cGUudG9TVkcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZyA9IG5ldyBTVkdQYXRoKCk7XG4gICAgdGhpcy5kcmF3UGF0aChnKTtcbiAgICBcbiAgICByZXR1cm4gbWFrZUVsZW1lbnROUyhcbiAgICAgICAgTlNfU1ZHLCAncGF0aCcsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHtkOiBnLnRvUGF0aERhdGEoKSxcbiAgICAgICAgIGZpbGw6IHRoaXMuX2ZpbGwgfHwgJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlOiB0aGlzLl9zdHJva2UgfHwgJ25vbmUnfSk7XG59XG5cblBhdGhHbHlwaEJhc2UucHJvdG90eXBlLmRyYXdQYXRoID0gZnVuY3Rpb24oZykge1xuICAgIHRocm93ICdkcmF3UGF0aCBtZXRob2Qgb24gUGF0aEdseXBoQmFzZSBtdXN0IGJlIG92ZXJyaWRkZW4nO1xufVxuXG5mdW5jdGlvbiBCb3hHbHlwaCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmaWxsLCBzdHJva2UsIGFscGhhLCByYWRpdXMpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5maWxsID0gZmlsbDtcbiAgICB0aGlzLnN0cm9rZSA9IHN0cm9rZTtcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICAgIHRoaXMuX3JhZGl1cyA9IHJhZGl1cyB8fCAwO1xufVxuXG5Cb3hHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICB2YXIgciA9IHRoaXMuX3JhZGl1cztcblxuICAgIGlmIChyID4gMCkge1xuICAgICAgICBnLmJlZ2luUGF0aCgpO1xuICAgICAgICBnLm1vdmVUbyh0aGlzLnggKyByLCB0aGlzLnkpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLnggKyB0aGlzLl93aWR0aCAtIHIsIHRoaXMueSk7XG4gICAgICAgIGcuYXJjVG8odGhpcy54ICsgdGhpcy5fd2lkdGgsIHRoaXMueSwgdGhpcy54ICsgdGhpcy5fd2lkdGgsIHRoaXMueSArIHIsIHIpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLnggKyB0aGlzLl93aWR0aCwgdGhpcy55ICsgdGhpcy5faGVpZ2h0IC0gcik7XG4gICAgICAgIGcuYXJjVG8odGhpcy54ICsgdGhpcy5fd2lkdGgsIHRoaXMueSArIHRoaXMuX2hlaWdodCwgdGhpcy54ICsgdGhpcy5fd2lkdGggLSByLCB0aGlzLnkgKyB0aGlzLl9oZWlnaHQsIHIpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLnggKyByLCB0aGlzLnkgKyB0aGlzLl9oZWlnaHQpO1xuICAgICAgICBnLmFyY1RvKHRoaXMueCwgdGhpcy55ICsgdGhpcy5faGVpZ2h0LCB0aGlzLngsIHRoaXMueSArIHRoaXMuX2hlaWdodCAtIHIsIHIpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLngsIHRoaXMueSArIHIpO1xuICAgICAgICBnLmFyY1RvKHRoaXMueCwgdGhpcy55LCB0aGlzLnggKyByLCB0aGlzLnksIHIpO1xuICAgICAgICBnLmNsb3NlUGF0aCgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9hbHBoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICBnLnNhdmUoKTtcbiAgICAgICAgICAgIGcuZ2xvYmFsQWxwaGEgPSB0aGlzLl9hbHBoYTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuZmlsbCkge1xuICAgICAgICAgICAgZy5maWxsU3R5bGUgPSB0aGlzLmZpbGw7XG4gICAgICAgICAgICBnLmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgICAgIGcuc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZTtcbiAgICAgICAgICAgIGcubGluZVdpZHRoID0gMC41O1xuICAgICAgICAgICAgZy5zdHJva2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hbHBoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICBnLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9hbHBoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICBnLnNhdmUoKTtcbiAgICAgICAgICAgIGcuZ2xvYmFsQWxwaGEgPSB0aGlzLl9hbHBoYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgICAgIGcuZmlsbFN0eWxlID0gdGhpcy5maWxsO1xuICAgICAgICAgICAgZy5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgICAgIGcuc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZTtcbiAgICAgICAgICAgIGcubGluZVdpZHRoID0gMC41O1xuICAgICAgICAgICAgZy5zdHJva2VSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2FscGhhICE9IG51bGwpIHtcbiAgICAgICAgICAgIGcucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5Cb3hHbHlwaC5wcm90b3R5cGUudG9TVkcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcyA9IG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAncmVjdCcsIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAge3g6IHRoaXMueCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMueSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLl93aWR0aCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5faGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuc3Ryb2tlIHx8ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogdGhpcy5maWxsIHx8ICdub25lJ30pO1xuICAgIGlmICh0aGlzLl9hbHBoYSAhPSBudWxsKSB7XG4gICAgICAgIHMuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgdGhpcy5fYWxwaGEpO1xuICAgIH1cblxuICAgIHJldHVybiBzO1xufVxuXG5Cb3hHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMueDtcbn1cblxuQm94R2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnggKyB0aGlzLl93aWR0aDtcbn1cblxuQm94R2x5cGgucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLl9oZWlnaHQ7XG59XG5cblxuZnVuY3Rpb24gR3JvdXBHbHlwaChnbHlwaHMsIGNvbm5lY3Rvcikge1xuICAgIHRoaXMuZ2x5cGhzID0gZ2x5cGhzO1xuICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yO1xuICAgIHRoaXMuaCA9IGdseXBoc1swXS5oZWlnaHQoKTtcblxuICAgIHZhciBjb3ZMaXN0ID0gW107XG4gICAgZm9yICh2YXIgZyA9IDA7IGcgPCBnbHlwaHMubGVuZ3RoOyArK2cpIHtcbiAgICAgICAgdmFyIGdnID0gZ2x5cGhzW2ddO1xuICAgICAgICBjb3ZMaXN0LnB1c2gobmV3IFJhbmdlKGdnLm1pbigpLCBnZy5tYXgoKSkpO1xuICAgICAgICB0aGlzLmggPSBNYXRoLm1heCh0aGlzLmgsIGdnLmhlaWdodCgpKTtcbiAgICB9XG4gICAgdGhpcy5jb3ZlcmFnZSA9IHVuaW9uKGNvdkxpc3QpO1xufVxuXG5Hcm91cEdseXBoLnByb3RvdHlwZS5kcmF3Q29ubmVjdG9ycyA9IGZ1bmN0aW9uKGcpIHtcbiAgICB2YXIgcmFuZ2VzID0gdGhpcy5jb3ZlcmFnZS5yYW5nZXMoKTtcbiAgICBmb3IgKHZhciByID0gMTsgciA8IHJhbmdlcy5sZW5ndGg7ICsrcikge1xuICAgICAgICB2YXIgZ2wgPSByYW5nZXNbcl07XG4gICAgICAgIHZhciBsYXN0ID0gcmFuZ2VzW3IgLSAxXTtcbiAgICAgICAgaWYgKGxhc3QgJiYgZ2wubWluKCkgPiBsYXN0Lm1heCgpKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBsYXN0Lm1heCgpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGdsLm1pbigpO1xuICAgICAgICAgICAgdmFyIG1pZCA9IChzdGFydCtlbmQpLzJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdG9yID09PSAnaGF0KycpIHtcbiAgICAgICAgICAgICAgICBnLm1vdmVUbyhzdGFydCwgdGhpcy5oLzIpO1xuICAgICAgICAgICAgICAgIGcubGluZVRvKG1pZCwgMCk7XG4gICAgICAgICAgICAgICAgZy5saW5lVG8oZW5kLCB0aGlzLmgvMik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29ubmVjdG9yID09PSAnaGF0LScpIHtcbiAgICAgICAgICAgICAgICBnLm1vdmVUbyhzdGFydCwgdGhpcy5oLzIpO1xuICAgICAgICAgICAgICAgIGcubGluZVRvKG1pZCwgdGhpcy5oKTtcbiAgICAgICAgICAgICAgICBnLmxpbmVUbyhlbmQsIHRoaXMuaC8yKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25uZWN0b3IgPT09ICdjb2xsYXBzZWQrJykge1xuICAgICAgICAgICAgICAgIGcubW92ZVRvKHN0YXJ0LCB0aGlzLmgvMik7XG4gICAgICAgICAgICAgICAgZy5saW5lVG8oZW5kLCB0aGlzLmgvMik7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCAtIHN0YXJ0ID4gNCkge1xuICAgICAgICAgICAgICAgICAgICBnLm1vdmVUbyhtaWQgLSAyLCAodGhpcy5oLzIpIC0gMyk7XG4gICAgICAgICAgICAgICAgICAgIGcubGluZVRvKG1pZCArIDIsIHRoaXMuaC8yKTtcbiAgICAgICAgICAgICAgICAgICAgZy5saW5lVG8obWlkIC0gMiwgKHRoaXMuaC8yKSArIDMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25uZWN0b3IgPT09ICdjb2xsYXBzZWQtJykge1xuICAgICAgICAgICAgICAgIGcubW92ZVRvKHN0YXJ0LCB0aGlzLmgvMik7XG4gICAgICAgICAgICAgICAgZy5saW5lVG8oZW5kLCB0aGlzLmgvMik7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCAtIHN0YXJ0ID4gNCkge1xuICAgICAgICAgICAgICAgICAgICBnLm1vdmVUbyhtaWQgKyAyLCAodGhpcy5oLzIpIC0gMyk7XG4gICAgICAgICAgICAgICAgICAgIGcubGluZVRvKG1pZCAtIDIsIHRoaXMuaC8yKTtcbiAgICAgICAgICAgICAgICAgICAgZy5saW5lVG8obWlkICsgMiwgKHRoaXMuaC8yKSArIDMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZy5tb3ZlVG8oc3RhcnQsIHRoaXMuaC8yKTtcbiAgICAgICAgICAgICAgICBnLmxpbmVUbyhlbmQsIHRoaXMuaC8yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0ID0gZ2w7XG4gICAgfVxufVxuXG5Hcm91cEdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5nbHlwaHNbaV07XG4gICAgICAgIGdsLmRyYXcoZyk7XG4gICAgfVxuXG4gICAgZy5zdHJva2VTdHlsZSA9ICdibGFjayc7XG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmRyYXdDb25uZWN0b3JzKGcpO1xuICAgIGcuc3Ryb2tlKCk7XG59XG5cbkdyb3VwR2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGcgPSBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ2cnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2x5cGhzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGcuYXBwZW5kQ2hpbGQodGhpcy5nbHlwaHNbaV0udG9TVkcoKSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSBuZXcgU1ZHUGF0aCgpO1xuICAgIHRoaXMuZHJhd0Nvbm5lY3RvcnMocCk7XG5cbiAgICB2YXIgcGF0aERhdGEgPSBwLnRvUGF0aERhdGEoKTtcbiAgICBpZiAocGF0aERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGF0aCA9IG1ha2VFbGVtZW50TlMoXG4gICAgICAgICAgICBOU19TVkcsICdwYXRoJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB7ZDogcC50b1BhdGhEYXRhKCksXG4gICAgICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgICAgIHN0cm9rZTogJ2JsYWNrJyxcbiAgICAgICAgICAgICBzdHJva2VXaWR0aDogMC41fSk7XG4gICAgICAgIGcuYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGc7XG59XG5cbkdyb3VwR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvdmVyYWdlLm1pbigpO1xufVxuXG5Hcm91cEdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb3ZlcmFnZS5tYXgoKTtcbn1cblxuR3JvdXBHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaDtcbn1cblxuXG5mdW5jdGlvbiBMaW5lR3JhcGhHbHlwaChwb2ludHMsIGNvbG9yLCBoZWlnaHQpIHtcbiAgICB0aGlzLnBvaW50cyA9IHBvaW50cztcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0IHx8IDUwO1xufVxuXG5MaW5lR3JhcGhHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRzWzBdO1xufTtcblxuTGluZUdyYXBoR2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBvaW50c1t0aGlzLnBvaW50cy5sZW5ndGggLSAyXTtcbn07XG5cbkxpbmVHcmFwaEdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xufVxuXG5MaW5lR3JhcGhHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICBnLnNhdmUoKTtcbiAgICBnLnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICBnLmxpbmVXaWR0aCA9IDI7XG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciB4ID0gdGhpcy5wb2ludHNbaV07XG4gICAgICAgIHZhciB5ID0gdGhpcy5wb2ludHNbaSArIDFdO1xuICAgICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgICAgICBnLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGcubGluZVRvKHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGcuc3Ryb2tlKCk7XG4gICAgZy5yZXN0b3JlKCk7XG59XG5cbkxpbmVHcmFwaEdseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwID0gbmV3IFNWR1BhdGgoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciB4ID0gdGhpcy5wb2ludHNbaV07XG4gICAgICAgIHZhciB5ID0gdGhpcy5wb2ludHNbaSArIDFdO1xuICAgICAgICBpZiAoaSA9PSAwKSB7XG4gICAgICAgICAgICBwLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAubGluZVRvKHgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKFxuICAgICAgICBOU19TVkcsICdwYXRoJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAge2Q6IHAudG9QYXRoRGF0YSgpLFxuICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlOiB0aGlzLmNvbG9yLFxuICAgICAgICAgc3Ryb2tlV2lkdGg6ICcycHgnfSk7XG59XG5cbmZ1bmN0aW9uIExhYmVsbGVkR2x5cGgoR0xPQkFMX0dDLCBnbHlwaCwgdGV4dCwgdW5tZWFzdXJlZCwgYW5jaG9yLCBhbGlnbiwgZm9udCkge1xuICAgIHRoaXMuZ2x5cGggPSBnbHlwaDtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yIHx8ICdsZWZ0JztcbiAgICB0aGlzLmFsaWduID0gYWxpZ24gfHwgJ2JlbG93JztcbiAgICBpZiAoZm9udCkge1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgIH1cbiAgICBpZiAodGhpcy5mb250KSB7XG4gICAgICAgIEdMT0JBTF9HQy5zYXZlKCk7XG4gICAgICAgIEdMT0JBTF9HQy5mb250ID0gdGhpcy5mb250O1xuICAgIH1cbiAgICB2YXIgbWV0cmljcyA9IEdMT0JBTF9HQy5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICBpZiAodGhpcy5mb250KSB7XG4gICAgICAgIEdMT0JBTF9HQy5yZXN0b3JlKCk7XG4gICAgfVxuICAgIHRoaXMudGV4dExlbiA9IG1ldHJpY3Mud2lkdGg7XG4gICAgdGhpcy50ZXh0SGVpZ2h0ID0gNTtcbiAgICB0aGlzLmJ1bXAgPSBnbHlwaC5idW1wO1xuICAgIHRoaXMubWVhc3VyZWQgPSAhdW5tZWFzdXJlZDtcbn1cblxuTGFiZWxsZWRHbHlwaC5wcm90b3R5cGUudG9TVkcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLmdseXBoLnRvU1ZHKCk7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBcbiAgICBpZiAodGhpcy5hbGlnbiA9PSAnYWJvdmUnKSB7XG4gICAgICAgIGNoaWxkID0gbWFrZUVsZW1lbnROUyhOU19TVkcsICdnJywgY2hpbGQsIHt0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDAsIFwiICsgKHRoaXMudGV4dEhlaWdodHwwICsgMikgKyBcIilcIn0pO1xuICAgICAgICBvcHRzLnkgPSB0aGlzLnRleHRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3B0cy55ID0gdGhpcy5nbHlwaC5oZWlnaHQoKSArIDE1O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvbnQpIHtcbiAgICAgICAgb3B0cy5mb250U2l6ZSAgPSA3O1xuICAgIH1cblxuICAgIGlmICgnY2VudGVyJyA9PSB0aGlzLmFuY2hvcikge1xuICAgICAgICBvcHRzLnggPSAodGhpcy5nbHlwaC5taW4oKSArIHRoaXMuZ2x5cGgubWF4KCkgLSB0aGlzLnRleHRMZW4pIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvcHRzLnggPSB0aGlzLmdseXBoLm1pbigpO1xuICAgIH1cblxuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ2cnLFxuICAgICAgICBbY2hpbGQsXG4gICAgICAgICBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3RleHQnLCB0aGlzLnRleHQsIG9wdHMpXSk7XG59XG5cbkxhYmVsbGVkR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdseXBoLm1pbigpO1xufVxuXG5MYWJlbGxlZEdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5tZWFzdXJlZClcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuZ2x5cGgubWF4KCksICgxLjAqdGhpcy5nbHlwaC5taW4oKSkgKyB0aGlzLnRleHRMZW4gKyAxMCk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gdGhpcy5nbHlwaC5tYXgoKTtcbn1cblxuTGFiZWxsZWRHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmdseXBoLmhlaWdodCgpO1xuICAgIGlmICh0aGlzLm1lYXN1cmVkKSB7XG4gICAgICAgIGlmICh0aGlzLmFsaWduID09ICdhYm92ZScpIHtcbiAgICAgICAgICAgIGggKz0gdGhpcy50ZXh0SGVpZ2h0ICsgMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGggKz0gMjA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGg7XG59XG5cbkxhYmVsbGVkR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgaWYgKHRoaXMuYWxpZ24gPT0gJ2Fib3ZlJykge1xuICAgICAgICBnLnNhdmUoKTtcbiAgICAgICAgZy50cmFuc2xhdGUoMCwgdGhpcy50ZXh0SGVpZ2h0ICsgMik7XG4gICAgfVxuICAgIHRoaXMuZ2x5cGguZHJhdyhnKTtcbiAgICBpZiAodGhpcy5hbGlnbiA9PSAnYWJvdmUnKSB7XG4gICAgICAgIGcucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIGcuZmlsbFN0eWxlID0gJ2JsYWNrJztcbiAgICBpZiAodGhpcy5mb250KSB7XG4gICAgICAgIGcuc2F2ZSgpO1xuICAgICAgICBnLmZvbnQgPSB0aGlzLmZvbnQ7XG4gICAgfVxuICAgIHZhciBwO1xuICAgIGlmICgnY2VudGVyJyA9PSB0aGlzLmFuY2hvcikge1xuICAgICAgICBwID0gKHRoaXMuZ2x5cGgubWluKCkgKyB0aGlzLmdseXBoLm1heCgpIC0gdGhpcy50ZXh0TGVuKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcCA9IHRoaXMuZ2x5cGgubWluKCk7XG4gICAgfVxuICAgIGcuZmlsbFRleHQodGhpcy50ZXh0LCBwLCB0aGlzLmFsaWduID09ICdhYm92ZScgPyB0aGlzLnRleHRIZWlnaHQgOiB0aGlzLmdseXBoLmhlaWdodCgpICsgMTUpO1xuICAgIGlmICh0aGlzLmZvbnQpIHtcbiAgICAgICAgZy5yZXN0b3JlKCk7XG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gQ3Jvc3NHbHlwaCh4LCBoZWlnaHQsIHN0cm9rZSkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG59XG5cbkNyb3NzR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgdmFyIGhoID0gdGhpcy5faGVpZ2h0LzI7XG4gICAgXG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICBnLm1vdmVUbyh0aGlzLl94LCAwKTtcbiAgICBnLmxpbmVUbyh0aGlzLl94LCB0aGlzLl9oZWlnaHQpO1xuICAgIGcubW92ZVRvKHRoaXMuX3ggLSBoaCwgaGgpO1xuICAgIGcubGluZVRvKHRoaXMuX3ggKyBoaCwgaGgpO1xuXG4gICAgZy5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZTtcbiAgICBnLmxpbmVXaWR0aCA9IDE7XG5cbiAgICBnLnN0cm9rZSgpO1xufVxuXG5Dcm9zc0dseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaCA9IHRoaXMuX2hlaWdodC8yO1xuXG4gICAgdmFyIGcgPSBuZXcgU1ZHUGF0aCgpO1xuICAgIGcubW92ZVRvKHRoaXMuX3gsIDApO1xuICAgIGcubGluZVRvKHRoaXMuX3gsIHRoaXMuX2hlaWdodCk7XG4gICAgZy5tb3ZlVG8odGhpcy5feCAtIGhoLCBoaCk7XG4gICAgZy5saW5lVG8odGhpcy5feCArIGhoLCBoaCk7XG4gICAgXG4gICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoXG4gICAgICAgIE5TX1NWRywgJ3BhdGgnLFxuICAgICAgICBudWxsLFxuICAgICAgICB7ZDogZy50b1BhdGhEYXRhKCksXG4gICAgICAgICBmaWxsOiAnbm9uZScsXG4gICAgICAgICBzdHJva2U6IHRoaXMuX3N0cm9rZSxcbiAgICAgICAgIHN0cm9rZVdpZHRoOiAnMXB4J30pO1xufVxuXG5Dcm9zc0dseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCAtIHRoaXMuX2hlaWdodC8yO1xufVxuXG5Dcm9zc0dseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCArIHRoaXMuX2hlaWdodC8yO1xufVxuXG5Dcm9zc0dseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xufVxuXG5mdW5jdGlvbiBFeEdseXBoKHgsIGhlaWdodCwgc3Ryb2tlKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX3N0cm9rZSA9IHN0cm9rZTtcbn1cblxuRXhHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICB2YXIgaGggPSB0aGlzLl9oZWlnaHQvMjtcbiAgICBcbiAgICBnLmJlZ2luUGF0aCgpO1xuICAgIGcubW92ZVRvKHRoaXMuX3ggLSBoaCwgMCk7XG4gICAgZy5saW5lVG8odGhpcy5feCArIGhoLCB0aGlzLl9oZWlnaHQpO1xuICAgIGcubW92ZVRvKHRoaXMuX3ggLSBoaCwgdGhpcy5faGVpZ2h0KTtcbiAgICBnLmxpbmVUbyh0aGlzLl94ICsgaGgsIDApO1xuXG4gICAgZy5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZTtcbiAgICBnLmxpbmVXaWR0aCA9IDE7XG5cbiAgICBnLnN0cm9rZSgpO1xufVxuXG5FeEdseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaCA9IHRoaXMuX2hlaWdodC8yO1xuXG4gICAgdmFyIGcgPSBuZXcgU1ZHUGF0aCgpO1xuICAgIGcubW92ZVRvKHRoaXMuX3ggLSBoaCwgMCk7XG4gICAgZy5saW5lVG8odGhpcy5feCArIGhoLCB0aGlzLl9oZWlnaHQpO1xuICAgIGcubW92ZVRvKHRoaXMuX3ggLSBoaCwgdGhpcy5faGVpZ2h0KTtcbiAgICBnLmxpbmVUbyh0aGlzLl94ICsgaGgsIDApO1xuICAgIFxuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKFxuICAgICAgICBOU19TVkcsICdwYXRoJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAge2Q6IGcudG9QYXRoRGF0YSgpLFxuICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlOiB0aGlzLl9zdHJva2UsXG4gICAgICAgICBzdHJva2VXaWR0aDogJzFweCd9KTtcbn1cblxuRXhHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ggLSB0aGlzLl9oZWlnaHQvMjtcbn1cblxuRXhHbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ggKyB0aGlzLl9oZWlnaHQvMjtcbn1cblxuRXhHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbn1cblxuXG5cbmZ1bmN0aW9uIFRyaWFuZ2xlR2x5cGgoeCwgaGVpZ2h0LCBkaXIsIHdpZHRoLCBmaWxsLCBzdHJva2UpIHtcbiAgICBQYXRoR2x5cGhCYXNlLmNhbGwodGhpcywgc3Ryb2tlLCBmaWxsKTtcblxuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9kaXIgPSBkaXI7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbn1cblxuVHJpYW5nbGVHbHlwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBhdGhHbHlwaEJhc2UucHJvdG90eXBlKTtcblxuVHJpYW5nbGVHbHlwaC5wcm90b3R5cGUuZHJhd1BhdGggPSBmdW5jdGlvbihnKSB7XG4gICAgdmFyIGhoID0gdGhpcy5faGVpZ2h0LzI7XG4gICAgdmFyIGh3ID0gdGhpcy5fd2lkdGgvMjtcblxuICAgIGlmICh0aGlzLl9kaXIgPT09ICdTJykge1xuICAgICAgICBnLm1vdmVUbyh0aGlzLl94LCB0aGlzLl9oZWlnaHQpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLl94IC0gaHcsIDApO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLl94ICsgaHcsIDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGlyID09PSAnVycpIHtcbiAgICAgICAgZy5tb3ZlVG8odGhpcy5feCArIGh3LCBoaCk7XG4gICAgICAgIGcubGluZVRvKHRoaXMuX3ggLSBodywgMCk7XG4gICAgICAgIGcubGluZVRvKHRoaXMuX3ggLSBodywgdGhpcy5faGVpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2RpciA9PT0gJ0UnKSB7XG4gICAgICAgIGcubW92ZVRvKHRoaXMuX3ggLSBodywgaGgpO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLl94ICsgaHcsIDApO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLl94ICsgaHcsIHRoaXMuX2hlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZy5tb3ZlVG8odGhpcy5feCAsIDApO1xuICAgICAgICBnLmxpbmVUbyh0aGlzLl94ICsgaHcsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgIGcubGluZVRvKHRoaXMuX3ggLSBodywgdGhpcy5faGVpZ2h0KTtcbiAgICB9XG5cbiAgICBnLmNsb3NlUGF0aCgpO1xufVxuXG5UcmlhbmdsZUdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCAtIHRoaXMuX2hlaWdodC8yO1xufVxuXG5UcmlhbmdsZUdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCArIHRoaXMuX2hlaWdodC8yO1xufVxuXG5UcmlhbmdsZUdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xufVxuXG5cblxuXG5mdW5jdGlvbiBEb3RHbHlwaCh4LCBoZWlnaHQsIGZpbGwsIHN0cm9rZSkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9maWxsID0gZmlsbDtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG59XG5cbkRvdEdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZykge1xuICAgIHZhciBoaCA9IHRoaXMuX2hlaWdodC8yO1xuICAgIGcuZmlsbFN0eWxlID0gdGhpcy5fc3Ryb2tlO1xuICAgIGcuYmVnaW5QYXRoKCk7XG4gICAgZy5hcmModGhpcy5feCwgaGgsIGhoLCAwLCA2LjI5KTtcblxuICAgIGlmICh0aGlzLl9maWxsKSB7XG4gICAgICAgIGcuZmlsbFN0eWxlID0gdGhpcy5fZmlsbDtcbiAgICAgICAgZy5maWxsKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0cm9rZSkge1xuICAgICAgICBnLnN0cm9rZVN0eWxlID0gdGhpcy5fc3Ryb2tlO1xuICAgICAgICBnLnN0cm9rZSgpO1xuICAgIH1cbn1cblxuRG90R2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhoID0gdGhpcy5faGVpZ2h0LzI7XG4gICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoXG4gICAgICAgIE5TX1NWRywgJ2NpcmNsZScsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHtjeDogdGhpcy5feCwgY3k6IGhoLCByOiBoaCxcbiAgICAgICAgIGZpbGw6IHRoaXMuX2ZpbGwgfHwgJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlOiB0aGlzLl9zdHJva2UgfHwgJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxcHgnfSk7XG59XG5cbkRvdEdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCAtIHRoaXMuX2hlaWdodC8yO1xufVxuXG5Eb3RHbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ggKyB0aGlzLl9oZWlnaHQvMjtcbn1cblxuRG90R2x5cGgucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG59XG5cblxuZnVuY3Rpb24gUGFkZGVkR2x5cGgoZ2x5cGgsIG1pbnAsIG1heHApIHtcbiAgICB0aGlzLmdseXBoID0gZ2x5cGg7XG4gICAgdGhpcy5fbWluID0gbWlucDtcbiAgICB0aGlzLl9tYXggPSBtYXhwO1xuICAgIGlmIChnbHlwaCkge1xuICAgICAgICB0aGlzLmJ1bXAgPSBnbHlwaC5idW1wO1xuICAgIH1cbn1cblxuUGFkZGVkR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgaWYgKHRoaXMuZ2x5cGgpIFxuICAgICAgICB0aGlzLmdseXBoLmRyYXcoZyk7XG59XG5cblBhZGRlZEdseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmdseXBoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdseXBoLnRvU1ZHKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycpO1xuICAgIH1cbn1cblxuUGFkZGVkR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9taW47XG59XG5cblBhZGRlZEdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4O1xufVxuXG5QYWRkZWRHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2x5cGguaGVpZ2h0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIEFBcnJvd0dseXBoKG1pbiwgbWF4LCBoZWlnaHQsIGZpbGwsIHN0cm9rZSwgb3JpKSB7XG4gICAgUGF0aEdseXBoQmFzZS5jYWxsKHRoaXMsIHN0cm9rZSwgZmlsbCk7XG4gICAgdGhpcy5fbWluID0gbWluO1xuICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fb3JpID0gb3JpO1xufVxuXG5BQXJyb3dHbHlwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBhdGhHbHlwaEJhc2UucHJvdG90eXBlKTtcblxuQUFycm93R2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9taW47XG59XG5cbkFBcnJvd0dseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4O1xufVxuXG5BQXJyb3dHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbn1cblxuQUFycm93R2x5cGgucHJvdG90eXBlLmRyYXdQYXRoID0gZnVuY3Rpb24oZykge1xuICAgIHZhciBtYXhQb3MgPSB0aGlzLl9tYXg7XG4gICAgdmFyIG1pblBvcyA9IHRoaXMuX21pbjtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5faGVpZ2h0O1xuICAgIHZhciBsSW5zZXQgPSAwO1xuICAgIHZhciBySW5zZXQgPSAwO1xuICAgIHZhciBtaW5MZW5ndGggPSB0aGlzLl9oZWlnaHQgKyAyO1xuICAgIHZhciBpbnN0ZXAgPSAwLjMzMzMzMyAqIHRoaXMuX2hlaWdodDtcbiAgICB2YXIgeSA9IDA7XG5cbiAgICBpZiAodGhpcy5fb3JpKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcmkgPT09ICcrJykge1xuICAgICAgICAgICAgckluc2V0ID0gMC41ICogdGhpcy5faGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX29yaSA9PT0gJy0nKSB7XG4gICAgICAgICAgICBsSW5zZXQgPSAwLjUgKiB0aGlzLl9oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF4UG9zIC0gbWluUG9zIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIG1pblBvcyA9IChtYXhQb3MgKyBtaW5Qb3MgLSBtaW5MZW5ndGgpIC8gMjtcbiAgICAgICAgbWF4UG9zID0gbWluUG9zICsgbWluTGVuZ3RoO1xuICAgIH1cblxuICAgIGcubW92ZVRvKG1pblBvcyArIGxJbnNldCwgeStpbnN0ZXApO1xuICAgIGcubGluZVRvKG1heFBvcyAtIHJJbnNldCwgeStpbnN0ZXApO1xuICAgIGcubGluZVRvKG1heFBvcyAtIHJJbnNldCwgeSk7XG4gICAgZy5saW5lVG8obWF4UG9zLCB5ICsgdGhpcy5faGVpZ2h0LzIpO1xuICAgIGcubGluZVRvKG1heFBvcyAtIHJJbnNldCwgeStoZWlnaHQpO1xuICAgIGcubGluZVRvKG1heFBvcyAtIHJJbnNldCwgeStpbnN0ZXAraW5zdGVwKTtcbiAgICBnLmxpbmVUbyhtaW5Qb3MgKyBsSW5zZXQsIHkraW5zdGVwK2luc3RlcCk7XG4gICAgZy5saW5lVG8obWluUG9zICsgbEluc2V0LCB5K2hlaWdodCk7XG4gICAgZy5saW5lVG8obWluUG9zLCB5K2hlaWdodC8yKTtcbiAgICBnLmxpbmVUbyhtaW5Qb3MgKyBsSW5zZXQsIHkpO1xuICAgIGcubGluZVRvKG1pblBvcyArIGxJbnNldCwgeStpbnN0ZXApO1xufVxuXG5mdW5jdGlvbiBTcGFuR2x5cGgobWluLCBtYXgsIGhlaWdodCwgc3Ryb2tlKSB7XG4gICAgUGF0aEdseXBoQmFzZS5jYWxsKHRoaXMsIHN0cm9rZSwgbnVsbCk7XG4gICAgdGhpcy5fbWluID0gbWluO1xuICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG59XG5cblNwYW5HbHlwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBhdGhHbHlwaEJhc2UucHJvdG90eXBlKTtcblxuU3BhbkdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5fbWlufTtcblNwYW5HbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX21heH07XG5TcGFuR2x5cGgucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9oZWlnaHR9O1xuXG5TcGFuR2x5cGgucHJvdG90eXBlLmRyYXdQYXRoID0gZnVuY3Rpb24oZykge1xuICAgIHZhciBtaW5Qb3MgPSB0aGlzLl9taW4sIG1heFBvcyA9IHRoaXMuX21heDtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5faGVpZ2h0LCBoaCA9IGhlaWdodC8yO1xuICAgIGcubW92ZVRvKG1pblBvcywgaGgpO1xuICAgIGcubGluZVRvKG1heFBvcywgaGgpO1xuICAgIGcubW92ZVRvKG1pblBvcywgMCk7XG4gICAgZy5saW5lVG8obWluUG9zLCBoZWlnaHQpO1xuICAgIGcubW92ZVRvKG1heFBvcywgMCk7XG4gICAgZy5saW5lVG8obWF4UG9zLCBoZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBMaW5lR2x5cGgobWluLCBtYXgsIGhlaWdodCwgc3R5bGUsIHN0cmFuZCwgc3Ryb2tlKSB7XG4gICAgdGhpcy5fbWluID0gbWluO1xuICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLl9zdHJhbmQgPSBzdHJhbmQ7XG4gICAgdGhpcy5fc3Ryb2tlID0gc3Ryb2tlO1xufVxuXG5MaW5lR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9taW59O1xuTGluZUdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5fbWF4fTtcbkxpbmVHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX2hlaWdodH07XG5cbkxpbmVHbHlwaC5wcm90b3R5cGUuZHJhd1BhdGggPSBmdW5jdGlvbihnKSB7XG4gICAgdmFyIG1pblBvcyA9IHRoaXMuX21pbiwgbWF4UG9zID0gdGhpcy5fbWF4O1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLl9oZWlnaHQsIGhoID0gaGVpZ2h0LzI7XG5cbiAgICBpZiAodGhpcy5fc3R5bGUgPT09ICdoYXQnKSB7XG4gICAgICAgIGcubW92ZVRvKG1pblBvcywgaGgpO1xuICAgICAgICBnLmxpbmVUbygobWluUG9zICsgbWF4UG9zKS8yLCB0aGlzLl9zdHJhbmQgPT09ICctJyA/IGhlaWdodCA6IDApO1xuICAgICAgICBnLmxpbmVUbyhtYXhQb3MsIGhoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnLm1vdmVUbyhtaW5Qb3MsIGhoKTtcbiAgICAgICAgZy5saW5lVG8obWF4UG9zLCBoaCk7XG4gICAgfVxufVxuXG5cbkxpbmVHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICBnLmJlZ2luUGF0aCgpO1xuICAgIHRoaXMuZHJhd1BhdGgoZyk7XG4gICAgZy5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZTtcbiAgICBpZiAodGhpcy5fc3R5bGUgPT09ICdkYXNoZWQnICYmIGcuc2V0TGluZURhc2gpIHtcbiAgICAgICAgZy5zYXZlKCk7XG4gICAgICAgIGcuc2V0TGluZURhc2goWzNdKTtcbiAgICAgICAgZy5zdHJva2UoKTtcbiAgICAgICAgZy5yZXN0b3JlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZy5zdHJva2UoKTtcbiAgICB9XG59XG5cbkxpbmVHbHlwaC5wcm90b3R5cGUudG9TVkcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZyA9IG5ldyBTVkdQYXRoKCk7XG4gICAgdGhpcy5kcmF3UGF0aChnKTtcbiAgICBcbiAgICB2YXIgb3B0cyA9IHtkOiBnLnRvUGF0aERhdGEoKSxcbiAgICAgICAgICAgIHN0cm9rZTogdGhpcy5fc3Ryb2tlIHx8ICdub25lJ307XG4gICAgaWYgKHRoaXMuX3N0eWxlID09PSAnZGFzaGVkJykge1xuICAgICAgICBvcHRzWydzdHJva2VEYXNoYXJyYXknXSA9ICczJztcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZUVsZW1lbnROUyhcbiAgICAgICAgTlNfU1ZHLCAncGF0aCcsXG4gICAgICAgIG51bGwsIG9wdHNcbiAgICApO1xufVxuXG5cblxuXG5cbmZ1bmN0aW9uIFByaW1lcnNHbHlwaChtaW4sIG1heCwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpIHtcbiAgICB0aGlzLl9taW4gPSBtaW47XG4gICAgdGhpcy5fbWF4ID0gbWF4O1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9maWxsID0gZmlsbDtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG59XG5cblByaW1lcnNHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX21pbn07XG5QcmltZXJzR2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9tYXh9O1xuUHJpbWVyc0dseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5faGVpZ2h0fTtcblxuXG5QcmltZXJzR2x5cGgucHJvdG90eXBlLmRyYXdTdGVtUGF0aCA9IGZ1bmN0aW9uKGcpIHtcbiAgICB2YXIgbWluUG9zID0gdGhpcy5fbWluLCBtYXhQb3MgPSB0aGlzLl9tYXg7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuX2hlaWdodCwgaGggPSBoZWlnaHQvMjtcbiAgICBnLm1vdmVUbyhtaW5Qb3MsIGhoKTtcbiAgICBnLmxpbmVUbyhtYXhQb3MsIGhoKTtcbn1cblxuUHJpbWVyc0dseXBoLnByb3RvdHlwZS5kcmF3VHJpZ3NQYXRoID0gZnVuY3Rpb24oZykge1xuICAgIHZhciBtaW5Qb3MgPSB0aGlzLl9taW4sIG1heFBvcyA9IHRoaXMuX21heDtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5faGVpZ2h0LCBoaCA9IGhlaWdodC8yO1xuICAgIGcubW92ZVRvKG1pblBvcywgMCk7XG4gICAgZy5saW5lVG8obWluUG9zICsgaGVpZ2h0LCBoaCk7XG4gICAgZy5saW5lVG8obWluUG9zLCBoZWlnaHQpO1xuICAgIGcubGluZVRvKG1pblBvcywgMCk7XG4gICAgZy5tb3ZlVG8obWF4UG9zLCAwKTtcbiAgICBnLmxpbmVUbyhtYXhQb3MgLSBoZWlnaHQsIGhoKTtcbiAgICBnLmxpbmVUbyhtYXhQb3MsIGhlaWdodCk7XG4gICAgZy5saW5lVG8obWF4UG9zLCAwKTtcbn1cblxuXG5QcmltZXJzR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmRyYXdTdGVtUGF0aChnKTtcbiAgICBnLnN0cm9rZVN0eWxlID0gdGhpcy5fc3Ryb2tlO1xuICAgIGcuc3Ryb2tlKCk7XG4gICAgZy5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmRyYXdUcmlnc1BhdGgoZyk7XG4gICAgZy5maWxsU3R5bGUgPSB0aGlzLl9maWxsO1xuICAgIGcuZmlsbCgpO1xufVxuXG5QcmltZXJzR2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHMgPSBuZXcgU1ZHUGF0aCgpO1xuICAgIHRoaXMuZHJhd1N0ZW1QYXRoKHMpO1xuICAgIHZhciB0ID0gbmV3IFNWR1BhdGgoKTtcbiAgICB0aGlzLmRyYXdUcmlnc1BhdGgodCk7XG4gICAgXG4gICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoXG4gICAgICAgIE5TX1NWRywgJ2cnLFxuICAgICAgICBbbWFrZUVsZW1lbnROUyhcbiAgICAgICAgICAgIE5TX1NWRywgJ3BhdGgnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHtkOiBzLnRvUGF0aERhdGEoKSxcbiAgICAgICAgICAgICBzdHJva2U6IHRoaXMuX3N0cm9rZSB8fCAnbm9uZSd9KSxcbiAgICAgICAgIG1ha2VFbGVtZW50TlMoXG4gICAgICAgICAgICAgTlNfU1ZHLCAncGF0aCcsXG4gICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICB7ZDogdC50b1BhdGhEYXRhKCksXG4gICAgICAgICAgICAgIGZpbGw6IHRoaXMuX2ZpbGwgfHwgJ25vbmUnfSldKTtcbn1cblxuZnVuY3Rpb24gQXJyb3dHbHlwaChtaW4sIG1heCwgaGVpZ2h0LCBjb2xvciwgcGFyYWxsZWwsIHN3LCBuZSkge1xuICAgIFBhdGhHbHlwaEJhc2UuY2FsbCh0aGlzLCBudWxsLCBjb2xvcik7XG4gICAgdGhpcy5fbWluID0gbWluO1xuICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLl9wYXJhbGxlbCA9IHBhcmFsbGVsO1xuICAgIHRoaXMuX3N3ID0gc3c7XG4gICAgdGhpcy5fbmUgPSBuZTtcbn1cblxuQXJyb3dHbHlwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBhdGhHbHlwaEJhc2UucHJvdG90eXBlKTtcblxuQXJyb3dHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX21pbn07XG5BcnJvd0dseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5fbWF4fTtcbkFycm93R2x5cGgucHJvdG90eXBlLmhlaWdodCA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9oZWlnaHR9O1xuXG5BcnJvd0dseXBoLnByb3RvdHlwZS5kcmF3UGF0aCA9IGZ1bmN0aW9uKGcpIHtcbiAgICB2YXIgbWluID0gdGhpcy5fbWluLCBtYXggPSB0aGlzLl9tYXgsIGhlaWdodCA9IHRoaXMuX2hlaWdodDtcbiAgICBcbiAgICBpZiAodGhpcy5fcGFyYWxsZWwpIHtcbiAgICAgICAgdmFyIGhoID0gaGVpZ2h0LzI7XG4gICAgICAgIHZhciBpbnN0ZXAgPSAwLjQgKiBoZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLl9zdykge1xuICAgICAgICAgICAgZy5tb3ZlVG8obWluICsgaGgsIGhlaWdodC1pbnN0ZXApO1xuICAgICAgICAgICAgZy5saW5lVG8obWluICsgaGgsIGhlaWdodCk7XG4gICAgICAgICAgICBnLmxpbmVUbyhtaW4sIGhoKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pbiArIGhoLCAwKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pbiArIGhoLCBpbnN0ZXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZy5tb3ZlVG8obWluLCBoZWlnaHQtaW5zdGVwKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pbiwgaW5zdGVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbmUpIHtcbiAgICAgICAgICAgIGcubGluZVRvKG1heCAtIGhoLCBpbnN0ZXApO1xuICAgICAgICAgICAgZy5saW5lVG8obWF4IC0gaGgsIDApO1xuICAgICAgICAgICAgZy5saW5lVG8obWF4LCBoaCk7XG4gICAgICAgICAgICBnLmxpbmVUbyhtYXggLSBoaCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGcubGluZVRvKG1heCAtIGhoLCBoZWlnaHQgLSBpbnN0ZXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZy5saW5lVG8obWF4LCBpbnN0ZXApO1xuICAgICAgICAgICAgZy5saW5lVG8obWF4LCBoZWlnaHQtaW5zdGVwKTtcbiAgICAgICAgfVxuICAgICAgICBnLmNsb3NlUGF0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtaWQgPSAobWluK21heCkvMjtcbiAgICAgICAgdmFyIGluc3RlcCA9IDAuNCoobWF4LW1pbik7XG4gICAgICAgIHZhciB0aCA9IGhlaWdodC8zO1xuXG4gICAgICAgIGlmICh0aGlzLl9uZSkge1xuICAgICAgICAgICAgZy5tb3ZlVG8obWluICsgaW5zdGVwLCB0aCk7XG4gICAgICAgICAgICBnLmxpbmVUbyhtaW4sIHRoKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pZCwgMCk7XG4gICAgICAgICAgICBnLmxpbmVUbyhtYXgsIHRoKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1heCAtIGluc3RlcCwgdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZy5tb3ZlVG8obWluK2luc3RlcCwgMCk7XG4gICAgICAgICAgICBnLmxpbmVUbyhtYXgtaW5zdGVwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3cpIHtcbiAgICAgICAgICAgIGcubGluZVRvKG1heCAtIGluc3RlcCwgaGVpZ2h0LXRoKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1heCwgaGVpZ2h0LXRoKTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pZCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGcubGluZVRvKG1pbiwgaGVpZ2h0LXRoKVxuICAgICAgICAgICAgZy5saW5lVG8obWluICsgaW5zdGVwLCBoZWlnaHQtdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZy5saW5lVG8obWF4IC0gaW5zdGVwLCBoZWlnaHQpO1xuICAgICAgICAgICAgZy5saW5lVG8obWluICsgaW5zdGVwLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGcuY2xvc2VQYXRoKCk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIFRvb01hbnlHbHlwaChtaW4sIG1heCwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpIHtcbiAgICB0aGlzLl9taW4gPSBtaW47XG4gICAgdGhpcy5fbWF4ID0gbWF4O1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9maWxsID0gZmlsbDtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG59XG5cblRvb01hbnlHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX21pbn07XG5Ub29NYW55R2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9tYXh9O1xuVG9vTWFueUdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5faGVpZ2h0fTtcblxuVG9vTWFueUdseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3JlY3QnLCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHt4OiB0aGlzLl9taW4sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuX21heCAtIHRoaXMuX21pbiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5faGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuX3N0cm9rZSB8fCAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IHRoaXMuX2ZpbGwgfHwgJ25vbmUnfSk7XG59XG5cblRvb01hbnlHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICBpZiAodGhpcy5fZmlsbCkge1xuICAgICAgICBnLmZpbGxTdHlsZSA9IHRoaXMuX2ZpbGw7XG4gICAgICAgIGcuZmlsbFJlY3QodGhpcy5fbWluLCAwLCB0aGlzLl9tYXggLSB0aGlzLl9taW4sIHRoaXMuX2hlaWdodCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdHJva2UpIHtcbiAgICAgICAgZy5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZTtcbiAgICAgICAgZy5zdHJva2VSZWN0KHRoaXMuX21pbiwgMCwgdGhpcy5fbWF4IC0gdGhpcy5fbWluLCB0aGlzLl9oZWlnaHQpO1xuICAgICAgICBnLmJlZ2luUGF0aCgpO1xuICAgICAgICBmb3IgKHZhciBuID0gMjsgbiA8IHRoaXMuX2hlaWdodDsgbiArPSAzKSB7XG4gICAgICAgICAgICBnLm1vdmVUbyh0aGlzLl9taW4sIG4pO1xuICAgICAgICAgICAgZy5saW5lVG8odGhpcy5fbWF4LCBuKTtcbiAgICAgICAgfVxuICAgICAgICBnLnN0cm9rZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gVGV4dEdseXBoKEdMT0JBTF9HQywgbWluLCBtYXgsIGhlaWdodCwgZmlsbCwgc3RyaW5nKSB7XG4gICAgdGhpcy5fbWluID0gbWluO1xuICAgIHRoaXMuX21heCA9IG1heDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fZmlsbCA9IGZpbGw7XG4gICAgdGhpcy5fc3RyaW5nID0gc3RyaW5nO1xuICAgIHRoaXMuX3RleHRMZW4gPSBHTE9CQUxfR0MubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbn1cblxuVGV4dEdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5fbWlufTtcblRleHRHbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7cmV0dXJuIE1hdGgubWF4KHRoaXMuX21heCwgdGhpcy5fbWluICsgdGhpcy5fdGV4dExlbil9O1xuVGV4dEdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5faGVpZ2h0fTtcblxuVGV4dEdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZykge1xuICAgIGcuZmlsbFN0eWxlID0gdGhpcy5fZmlsbDtcbiAgICBnLmZpbGxUZXh0KHRoaXMuX3N0cmluZywgdGhpcy5fbWluLCB0aGlzLl9oZWlnaHQgLSA0KTtcbn1cblxuVGV4dEdseXBoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3RleHQnLCB0aGlzLl9zdHJpbmcsIHt4OiB0aGlzLl9taW4sIHk6IHRoaXMuX2hlaWdodCAtIDR9KTtcbn07XG5cbihmdW5jdGlvbihzY29wZSkge1xuXG52YXIgaXNSZXRpbmEgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDE7XG52YXIgX19kYWxsaWFuY2VfU2VxdWVuY2VHbHlwaENhY2hlID0ge307XG5cbmZ1bmN0aW9uIFNlcXVlbmNlR2x5cGgoYmFzZUNvbG9ycywgbWluLCBtYXgsIGhlaWdodCwgc2VxLCByZWYsIHNjaGVtZSwgcXVhbHMpIHtcbiAgICB0aGlzLmJhc2VDb2xvcnMgPSBiYXNlQ29sb3JzO1xuICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB0aGlzLl9tYXggPSBtYXg7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX3NlcSA9IHNlcTtcbiAgICB0aGlzLl9yZWYgPSByZWY7XG4gICAgdGhpcy5fc2NoZW1lID0gc2NoZW1lO1xuICAgIHRoaXMuX3F1YWxzID0gcXVhbHM7XG59XG5cblNlcXVlbmNlR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLl9taW59O1xuU2VxdWVuY2VHbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuX21heH07XG5TZXF1ZW5jZUdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5faGVpZ2h0fTtcblxuXG5TZXF1ZW5jZUdseXBoLnByb3RvdHlwZS5hbHBoYUZvclF1YWwgPSBmdW5jdGlvbihxdWFsKSB7XG4gICAgcmV0dXJuIDAuMSArIDAuOSpNYXRoLm1heCgwLjAsIE1hdGgubWluKCgxLjAgKiBxdWFsKSAvIDMwLjAsIDEuMCkpO1xufVxuXG5TZXF1ZW5jZUdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZ2MpIHtcbiAgICB2YXIgc2VxID0gdGhpcy5fc2VxO1xuICAgIGlmICghc2VxKVxuICAgICAgICBzZXEgPSAnTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OTk5OJzsgICAgLy8gRklYTUUgICAgICAgXG5cbiAgICB2YXIgc2NhbGUgPSAodGhpcy5fbWF4IC0gdGhpcy5fbWluICsgMSkgLyBzZXEubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgcCA9IDA7IHAgPCBzZXEubGVuZ3RoOyArK3ApIHtcbiAgICAgICAgdmFyIGJhc2UgPSBzZXEuc3Vic3RyKHAsIDEpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHZhciBjb2xvciA9IHRoaXMuYmFzZUNvbG9yc1tiYXNlXTtcbiAgICAgICAgaWYgKCFjb2xvcikge1xuICAgICAgICAgICAgY29sb3IgPSAnZ3JheSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc2NoZW1lID09PSAnbWlzbWF0Y2gnICYmIHRoaXMuX3JlZikge1xuICAgICAgICAgICAgdmFyIHJlZmJhc2UgPSB0aGlzLl9yZWYuc3Vic3RyKHAsIDEpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocmVmYmFzZSA9PT0gJ04nKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSAnZ3JheSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlZmJhc2UgPT09IGJhc2UpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9ICdibGFjayc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gJ3JlZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9xdWFscykge1xuICAgICAgICAgICAgdmFyIHFjID0gdGhpcy5fcXVhbHMuY2hhckNvZGVBdChwKSAtIDMzO1xuICAgICAgICAgICAgdmFyIG9sZEFscGhhID0gZ2MuZ2xvYmFsQWxwaGE7ICAgICAgICAgICAgLy8gTkIgaG9pc3RlZCFcbiAgICAgICAgICAgIGdjLmdsb2JhbEFscGhhID0gdGhpcy5hbHBoYUZvclF1YWwocWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjYWxlID49IDgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBjb2xvciArICdfJyArIGJhc2VcbiAgICAgICAgICAgIHZhciBpbWcgPSBfX2RhbGxpYW5jZV9TZXF1ZW5jZUdseXBoQ2FjaGVba2V5XTtcbiAgICAgICAgICAgIGlmICghaW1nKSB7XG4gICAgICAgICAgICAgICAgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmV0aW5hKSB7XG4gICAgICAgICAgICAgICAgICAgIGltZy53aWR0aCA9IDE2O1xuICAgICAgICAgICAgICAgICAgICBpbWcuaGVpZ2h0ID0gMjA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nLndpZHRoID0gODtcbiAgICAgICAgICAgICAgICAgICAgaW1nLmhlaWdodCA9IDEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW1nR2MgPSBpbWcuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXRpbmEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nR2Muc2NhbGUoMiwgMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGltZ0djLmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICAgICAgICAgIGltZ0djLmZpbGxUZXh0KGJhc2UsIDAsIDgpO1xuICAgICAgICAgICAgICAgIF9fZGFsbGlhbmNlX1NlcXVlbmNlR2x5cGhDYWNoZVtrZXldID0gaW1nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmV0aW5hKVxuICAgICAgICAgICAgICAgIGdjLmRyYXdJbWFnZShpbWcsIHRoaXMuX21pbiArIHAqc2NhbGUsIDAsIDgsIDEwKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnYy5kcmF3SW1hZ2UoaW1nLCB0aGlzLl9taW4gKyBwKnNjYWxlLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdjLmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICAgICAgZ2MuZmlsbFJlY3QodGhpcy5fbWluICsgcCpzY2FsZSwgMCwgc2NhbGUsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fcXVhbHMpIHtcbiAgICAgICAgICAgIGdjLmdsb2JhbEFscGhhID0gb2xkQWxwaGE7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblNlcXVlbmNlR2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlcSA9IHRoaXMuX3NlcTtcbiAgICB2YXIgc2NhbGUgPSAodGhpcy5fbWF4IC0gdGhpcy5fbWluICsgMSkgLyB0aGlzLl9zZXEubGVuZ3RoO1xuICAgIHZhciAgZyA9IG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycpOyBcblxuICAgIGZvciAodmFyIHAgPSAwOyBwIDwgc2VxLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHZhciBiYXNlID0gc2VxLnN1YnN0cihwLCAxKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgY29sb3IgPSBiYXNlQ29sb3JzW2Jhc2VdO1xuICAgICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgICAgICBjb2xvciA9ICdncmF5JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zY2hlbWUgPT09ICdtaXNtYXRjaCcgJiYgdGhpcy5fcmVmKSB7XG4gICAgICAgICAgICB2YXIgcmVmYmFzZSA9IHRoaXMuX3JlZi5zdWJzdHIocCwgMSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChyZWZiYXNlID09PSAnTicpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9ICdncmF5JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVmYmFzZSA9PT0gYmFzZSkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gJ2JsYWNrJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSAncmVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbHBoYSA9IDEuMDtcbiAgICAgICAgaWYgKHRoaXMuX3F1YWxzKSB7XG4gICAgICAgICAgICB2YXIgcWMgPSB0aGlzLl9xdWFscy5jaGFyQ29kZUF0KHApIC0gMzM7XG4gICAgICAgICAgICBhbHBoYSA9IHRoaXMuYWxwaGFGb3JRdWFsKHFjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY2FsZSA+PSA4KSB7XG4gICAgICAgICAgICBnLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgICAgICBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3RleHQnLCBiYXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLl9taW4gKyBwKnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IGFscGhhfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZy5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgICAgICAgICAgbWFrZUVsZW1lbnROUyhOU19TVkcsICdyZWN0JywgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDp0aGlzLl9taW4gKyBwKnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5faGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogYWxwaGF9KSk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnO1xufVxuXG5zY29wZS5TZXF1ZW5jZUdseXBoID0gU2VxdWVuY2VHbHlwaDtcblxufSh0aGlzKSk7XG5cbmZ1bmN0aW9uIFRyYW5zbGF0ZWRHbHlwaChnbHlwaCwgeCwgeSwgaGVpZ2h0KSB7XG4gICAgdGhpcy5nbHlwaCA9IGdseXBoO1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl94ID0geDtcbiAgICB0aGlzLl95ID0geTtcbn1cblxuVHJhbnNsYXRlZEdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5faGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2x5cGguaGVpZ2h0KCkgKyB0aGlzLl95O1xuICAgIH1cbn1cblxuVHJhbnNsYXRlZEdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nbHlwaC5taW4oKSArIHRoaXMuX3g7XG59XG5cblRyYW5zbGF0ZWRHbHlwaC5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2x5cGgubWF4KCkgKyB0aGlzLl94O1xufVxuXG5UcmFuc2xhdGVkR2x5cGgucHJvdG90eXBlLm1pblkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feTtcbn1cblxuVHJhbnNsYXRlZEdseXBoLnByb3RvdHlwZS5tYXhZID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3kgKyB0aGlzLmdseXBoLmhlaWdodCgpO1xufVxuXG5UcmFuc2xhdGVkR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgZy5zYXZlKCk7XG4gICAgZy50cmFuc2xhdGUodGhpcy5feCwgdGhpcy5feSk7XG4gICAgdGhpcy5nbHlwaC5kcmF3KGcpO1xuICAgIGcucmVzdG9yZSgpO1xufVxuXG5UcmFuc2xhdGVkR2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHMgPSAgdGhpcy5nbHlwaC50b1NWRygpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB0aGlzLl94ICsgJywnICsgdGhpcy5feSArICcpJyk7XG4gICAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIFBvaW50R2x5cGgoeCwgeSwgaGVpZ2h0LCBmaWxsKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX2ZpbGwgPSBmaWxsO1xufVxuXG5Qb2ludEdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCAtIDI7XG59XG5cblBvaW50R2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl94ICsgMjtcbn1cblxuUG9pbnRHbHlwaC5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbn1cblxuUG9pbnRHbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGcpIHtcbiAgICBnLnNhdmUoKTtcbiAgICBnLmdsb2JhbEFscGhhID0gMC4zO1xuICAgIGcuZmlsbFN0eWxlID0gdGhpcy5fZmlsbDtcbiAgICBnLmJlZ2luUGF0aCgpO1xuICAgIGcuYXJjKHRoaXMuX3gsIHRoaXMuX3ksIDEuNSwgMCwgNi4yOSk7XG4gICAgZy5maWxsKCk7XG4gICAgZy5yZXN0b3JlKCk7XG59XG5cblBvaW50R2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoXG4gICAgICAgIE5TX1NWRywgJ2NpcmNsZScsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHtjeDogdGhpcy5feCwgY3k6IHRoaXMuX3ksIHI6IDIsXG4gICAgICAgICBmaWxsOiB0aGlzLl9maWxsLFxuICAgICAgICAgc3Ryb2tlOiAnbm9uZSd9KTtcbn1cblxuXG5mdW5jdGlvbiBHcmlkR2x5cGgoaGVpZ2h0KSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0IHx8IDUwO1xufVxuXG5HcmlkR2x5cGgucHJvdG90eXBlLm5vdFNlbGVjdGFibGUgPSB0cnVlO1xuXG5HcmlkR2x5cGgucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAtMTAwMDAwO1xufTtcblxuR3JpZEdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMTAwMDAwO1xufTtcblxuR3JpZEdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xufVxuXG5HcmlkR2x5cGgucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihnKSB7XG4gICAgZy5zYXZlKCk7XG4gICAgZy5zdHJva2VTdHlsZSA9ICdibGFjaydcbiAgICBnLmxpbmVXaWR0aCA9IDAuMTtcblxuICAgIGcuYmVnaW5QYXRoKCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPD0gdGhpcy5faGVpZ2h0OyB5ICs9IDEwKSB7XG4gICAgICAgIGcubW92ZVRvKC01MDAwLCB5KTtcbiAgICAgICAgZy5saW5lVG8oNTAwMCwgeSk7XG4gICAgfVxuICAgIGcuc3Ryb2tlKCk7XG4gICAgZy5yZXN0b3JlKCk7XG59XG5cbkdyaWRHbHlwaC5wcm90b3R5cGUudG9TVkcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcCA9IG5ldyBTVkdQYXRoKCk7XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPD0gdGhpcy5faGVpZ2h0OyB5ICs9IDEwKSB7XG4gICAgICAgIHAubW92ZVRvKC01MDAwLCB5KTtcbiAgICAgICAgcC5saW5lVG8oNTAwMCwgeSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBtYWtlRWxlbWVudE5TKFxuICAgICAgICBOU19TVkcsICdwYXRoJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAge2Q6IHAudG9QYXRoRGF0YSgpLFxuICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICAgc3Ryb2tlOiAnYmxhY2snLFxuICAgICAgICAgc3Ryb2tlV2lkdGg6ICcwLjFweCd9KTtcbn1cblxuZnVuY3Rpb24gU3RhckdseXBoKHgsIHIsIHBvaW50cywgZmlsbCwgc3Ryb2tlKSB7XG4gICAgUGF0aEdseXBoQmFzZS5jYWxsKHRoaXMsIHN0cm9rZSwgZmlsbCk7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5fciA9IHI7XG4gICAgdGhpcy5fcG9pbnRzID0gcG9pbnRzO1xufVxuXG5TdGFyR2x5cGgucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQYXRoR2x5cGhCYXNlLnByb3RvdHlwZSk7XG5cblN0YXJHbHlwaC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ggLSB0aGlzLl9yO1xufVxuXG5TdGFyR2x5cGgucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl94ICsgdGhpcy5fcjtcbn1cblxuU3RhckdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMiAqIHRoaXMuX3I7XG59XG5cblN0YXJHbHlwaC5wcm90b3R5cGUuZHJhd1BhdGggPSBmdW5jdGlvbihnKSB7XG4gICAgdmFyIG1pZFggPSB0aGlzLl94LCBtaWRZID0gdGhpcy5fciwgciA9IHRoaXMuX3I7XG4gICAgZm9yICh2YXIgcCA9IDA7IHAgPCB0aGlzLl9wb2ludHM7ICsrcCkge1xuICAgICAgICB2YXIgdGhldGEgPSAocCAqIDYuMjgpIC8gdGhpcy5fcG9pbnRzO1xuICAgICAgICB2YXIgcHggPSBtaWRYICsgcipNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgIHZhciBweSA9IG1pZFkgLSByKk1hdGguY29zKHRoZXRhKTtcbiAgICAgICAgaWYgKHAgPT0gMCkge1xuICAgICAgICAgICAgZy5tb3ZlVG8ocHgsIHB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGcubGluZVRvKHB4LCBweSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhldGEgPSAoKHArMC41KSAqIDYuMjgpIC8gdGhpcy5fcG9pbnRzO1xuICAgICAgICBweCA9IG1pZFggKyAwLjQqcipNYXRoLnNpbih0aGV0YSk7XG4gICAgICAgIHB5ID0gbWlkWSAtIDAuNCpyKk1hdGguY29zKHRoZXRhKTtcbiAgICAgICAgZy5saW5lVG8ocHgsIHB5KTtcbiAgICB9XG4gICAgZy5jbG9zZVBhdGgoKTtcbn1cblxuZnVuY3Rpb24gUGxpbXNvbGxHbHlwaCh4LCBoZWlnaHQsIG92ZXJoYW5nLCBmaWxsLCBzdHJva2UpIHtcbiAgICB0aGlzLl94ID0geDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fb3ZlcmhhbmcgPSBvdmVyaGFuZztcbiAgICB0aGlzLl9maWxsID0gZmlsbDtcbiAgICB0aGlzLl9zdHJva2UgPSBzdHJva2U7XG4gICAgdGhpcy5faGggPSBoZWlnaHQgLyAyO1xufVxuXG5QbGltc29sbEdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZykge1xuICAgIHZhciBoaCA9IHRoaXMuX2hlaWdodC8yO1xuICAgIGcuZmlsbFN0eWxlID0gdGhpcy5fc3Ryb2tlO1xuICAgIGcuYmVnaW5QYXRoKCk7XG4gICAgZy5hcmModGhpcy5feCwgaGgsIGhoIC0gdGhpcy5fb3ZlcmhhbmcsIDAsIDYuMjkpO1xuICAgIGcubW92ZVRvKHRoaXMuX3gsIDApO1xuICAgIGcubGluZVRvKHRoaXMuX3gsIHRoaXMuX2hlaWdodCk7XG5cbiAgICBpZiAodGhpcy5fZmlsbCkge1xuICAgICAgICBnLmZpbGxTdHlsZSA9IHRoaXMuX2ZpbGw7XG4gICAgICAgIGcuZmlsbCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zdHJva2UpIHtcbiAgICAgICAgZy5zdHJva2VTdHlsZSA9IHRoaXMuX3N0cm9rZTtcbiAgICAgICAgZy5zdHJva2UoKTtcbiAgICB9XG59XG5cblBsaW1zb2xsR2x5cGgucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhoID0gdGhpcy5faGg7XG4gICAgcmV0dXJuIG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycsIFxuICAgICAgICBbbWFrZUVsZW1lbnROUyhOU19TVkcsICdjaXJjbGUnLCBudWxsLCB7Y3g6IHRoaXMuX3gsIGN5OiBoaCwgcjogaGggLSB0aGlzLl9vdmVyaGFuZ30pLFxuICAgICAgICAgbWFrZUVsZW1lbnROUyhOU19TVkcsICdsaW5lJywgbnVsbCwge3gxOiB0aGlzLl94LCB5MTogMCwgeDI6IHRoaXMuX3gsIHkyOiB0aGlzLl9oZWlnaHR9KV0sXG4gICAgICAgIHtmaWxsOiB0aGlzLl9maWxsIHx8ICdub25lJyxcbiAgICAgICAgIHN0cm9rZTogdGhpcy5fc3Ryb2tlIHx8ICdub25lJyxcbiAgICAgICAgIHN0cm9rZVdpZHRoOiAnMXB4J30pO1xufVxuXG5QbGltc29sbEdseXBoLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCAtIHRoaXMuX2hoO1xufVxuXG5QbGltc29sbEdseXBoLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feCArIHRoaXMuX2hoO1xufVxuXG5QbGltc29sbEdseXBoLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIEJveEdseXBoOiBCb3hHbHlwaCxcbiAgICAgICAgR3JvdXBHbHlwaDogR3JvdXBHbHlwaCxcbiAgICAgICAgTGluZUdyYXBoR2x5cGg6IExpbmVHcmFwaEdseXBoLFxuICAgICAgICBMYWJlbGxlZEdseXBoOiBMYWJlbGxlZEdseXBoLFxuICAgICAgICBDcm9zc0dseXBoOiBDcm9zc0dseXBoLFxuICAgICAgICBFeEdseXBoOiBFeEdseXBoLFxuICAgICAgICBUcmlhbmdsZUdseXBoOiBUcmlhbmdsZUdseXBoLFxuICAgICAgICBEb3RHbHlwaDogRG90R2x5cGgsXG4gICAgICAgIFBhZGRlZEdseXBoOiBQYWRkZWRHbHlwaCxcbiAgICAgICAgQUFycm93R2x5cGg6IEFBcnJvd0dseXBoLFxuICAgICAgICBTcGFuR2x5cGg6IFNwYW5HbHlwaCxcbiAgICAgICAgTGluZUdseXBoOiBMaW5lR2x5cGgsXG4gICAgICAgIFByaW1lcnNHbHlwaDogUHJpbWVyc0dseXBoLFxuICAgICAgICBBcnJvd0dseXBoOiBBcnJvd0dseXBoLFxuICAgICAgICBUb29NYW55R2x5cGg6IFRvb01hbnlHbHlwaCxcbiAgICAgICAgVGV4dEdseXBoOiBUZXh0R2x5cGgsXG4gICAgICAgIFNlcXVlbmNlR2x5cGg6IHRoaXMuU2VxdWVuY2VHbHlwaCxcbiAgICAgICAgVHJhbnNsYXRlZEdseXBoOiBUcmFuc2xhdGVkR2x5cGgsXG4gICAgICAgIEdyaWRHbHlwaDogR3JpZEdseXBoLFxuICAgICAgICBTdGFyR2x5cGg6IFN0YXJHbHlwaCxcbiAgICAgICAgUG9pbnRHbHlwaDogUG9pbnRHbHlwaCxcbiAgICAgICAgUGxpbXNvbGxHbHlwaDogUGxpbXNvbGxHbHlwaFxuICAgIH1cbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTNcbi8vXG4vLyBqYmpzb24uanMgLS0gcXVlcnkgSkJyb3dzZS1zdHlsZSBSRVNUIGRhdGEgc3RvcmVzXG4vL1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTdHlsZXNoZWV0ID0gZGFzLkRBU1N0eWxlc2hlZXQ7XG4gICAgdmFyIERBU1N0eWxlID0gZGFzLkRBU1N0eWxlO1xuICAgIHZhciBEQVNGZWF0dXJlID0gZGFzLkRBU0ZlYXR1cmU7XG4gICAgdmFyIERBU0dyb3VwID0gZGFzLkRBU0dyb3VwO1xufVxuXG5mdW5jdGlvbiBKQnJvd3NlU3RvcmUoYmFzZSwgcXVlcnkpIHtcbiAgICB0aGlzLmJhc2UgPSBiYXNlO1xuICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbn1cblxuSkJyb3dzZVN0b3JlLnByb3RvdHlwZS5mZWF0dXJlcyA9IGZ1bmN0aW9uKHNlZ21lbnQsIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICB1cmwgPSB0aGlzLmJhc2UgKyAnL2ZlYXR1cmVzLycgKyBzZWdtZW50Lm5hbWU7XG5cbiAgICB2YXIgZmlsdGVycyA9IFtdO1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG5cdCAgIGZpbHRlcnMucHVzaCh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKHNlZ21lbnQuaXNCb3VuZGVkKSB7XG4gICAgXHRmaWx0ZXJzLnB1c2goJ3N0YXJ0PScgKyBzZWdtZW50LnN0YXJ0KTtcbiAgICBcdGZpbHRlcnMucHVzaCgnZW5kPScgKyBzZWdtZW50LmVuZCk7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJzLmxlbmd0aCA+IDApIHtcblx0ICAgIHVybCA9IHVybCArICc/JyArIGZpbHRlcnMuam9pbignJicpO1xuICAgIH1cblxuICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG5cdCAgICBpZiAocmVxLnN0YXR1cyA+PSAzMDApIHtcblx0XHQgICAgY2FsbGJhY2sobnVsbCwgJ0Vycm9yIGNvZGUgJyArIHJlcS5zdGF0dXMpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR2YXIgamYgPSBKU09OLnBhcnNlKHJlcS5yZXNwb25zZSlbJ2ZlYXR1cmVzJ107XG5cdFx0dmFyIGZlYXR1cmVzID0gW107XG5cdFx0Zm9yIChmaSA9IDA7IGZpIDwgamYubGVuZ3RoOyArK2ZpKSB7XG5cdFx0ICAgIHZhciBqID0gamZbZmldO1xuXHRcdCAgICBcblx0XHQgICAgdmFyIGYgPSBuZXcgREFTRmVhdHVyZSgpO1xuXHRcdCAgICBmLnNlZ21lbnQgPSBzZWdtZW50O1xuXHRcdCAgICBmLm1pbiA9IChqWydzdGFydCddIHwgMCkgKyAxO1xuXHRcdCAgICBmLm1heCA9IGpbJ2VuZCddIHwgMDtcblx0XHQgICAgaWYgKGoubmFtZSkge1xuXHRcdFx0Zi5sYWJlbCA9IGoubmFtZTtcblx0XHQgICAgfVxuXHRcdCAgICBmLnR5cGUgPSBqLnR5cGUgfHwgJ3Vua25vd24nO1xuXHRcdCAgICBcblx0XHQgICAgZmVhdHVyZXMucHVzaChmKTtcblx0XHR9XG5cdFx0Y2FsbGJhY2soZmVhdHVyZXMpO1xuXHQgICAgfVxuXHR9XG5cdFxuICAgIH07XG4gICAgXG4gICAgcmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxLnJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICByZXEuc2VuZCgnJyk7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgSkJyb3dzZVN0b3JlOiBKQnJvd3NlU3RvcmVcbiAgICB9O1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxM1xuLy9cbi8vIGtzcGFjZS5qc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBBd2FpdGVkID0gdXRpbHMuQXdhaXRlZDtcbiAgICB2YXIgcHVzaG8gPSB1dGlscy5wdXNobztcblxuICAgIHZhciBzYSA9IHJlcXVpcmUoJy4vc291cmNlYWRhcHRlcnMnKTtcbiAgICB2YXIgTWFwcGVkRmVhdHVyZVNvdXJjZSA9IHNhLk1hcHBlZEZlYXR1cmVTb3VyY2U7XG4gICAgdmFyIENhY2hpbmdGZWF0dXJlU291cmNlID0gc2EuQ2FjaGluZ0ZlYXR1cmVTb3VyY2U7XG4gICAgdmFyIEJXR0ZlYXR1cmVTb3VyY2UgPSBzYS5CV0dGZWF0dXJlU291cmNlO1xuICAgIHZhciBSZW1vdGVCV0dGZWF0dXJlU291cmNlID0gc2EuUmVtb3RlQldHRmVhdHVyZVNvdXJjZTtcbiAgICB2YXIgQkFNRmVhdHVyZVNvdXJjZSA9IHNhLkJBTUZlYXR1cmVTb3VyY2U7XG4gICAgdmFyIFJlbW90ZUJBTUZlYXR1cmVTb3VyY2UgPSBzYS5SZW1vdGVCQU1GZWF0dXJlU291cmNlO1xuICAgIHZhciBEdW1teVNlcXVlbmNlU291cmNlID0gc2EuRHVtbXlTZXF1ZW5jZVNvdXJjZTtcbiAgICB2YXIgRHVtbXlGZWF0dXJlU291cmNlID0gc2EuRHVtbXlGZWF0dXJlU291cmNlO1xuXG4gICAgdmFyIE92ZXJsYXlGZWF0dXJlU291cmNlID0gcmVxdWlyZSgnLi9vdmVybGF5JykuT3ZlcmxheUZlYXR1cmVTb3VyY2U7XG5cbiAgICB2YXIgc3BhbnMgPSByZXF1aXJlKCcuL3NwYW5zJyk7XG4gICAgdmFyIFJhbmdlID0gc3BhbnMuUmFuZ2U7XG4gICAgdmFyIHVuaW9uID0gc3BhbnMudW5pb247XG4gICAgdmFyIGludGVyc2VjdGlvbiA9IHNwYW5zLmludGVyc2VjdGlvbjtcblxuICAgIHZhciBkb3duc2FtcGxlID0gcmVxdWlyZSgnLi9zYW1wbGUnKS5kb3duc2FtcGxlO1xuXG4gICAgdmFyIGRhcyA9IHJlcXVpcmUoJy4vZGFzJyk7XG4gICAgdmFyIERBU1NlcXVlbmNlID0gZGFzLkRBU1NlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiBGZXRjaFBvb2woKSB7XG4gICAgdGhpcy5yZXFzID0gW107XG4gICAgdGhpcy5hd2FpdGVkRmVhdHVyZXMgPSB7fTtcbn1cblxuRmV0Y2hQb29sLnByb3RvdHlwZS5hZGRSZXF1ZXN0ID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgdGhpcy5yZXFzLnB1c2goeGhyKTtcbn1cblxuRmV0Y2hQb29sLnByb3RvdHlwZS5hYm9ydEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZXFzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMucmVxc1tpXS5hYm9ydCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gS1NDYWNoZUJhdG9uKGNociwgbWluLCBtYXgsIHNjYWxlLCBmZWF0dXJlcywgc3RhdHVzLCBjb3ZlcmFnZSkge1xuICAgIHRoaXMuY2hyID0gY2hyO1xuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIHRoaXMuY292ZXJhZ2UgPSBjb3ZlcmFnZTtcbiAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gICAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzIHx8IFtdO1xuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xufVxuXG5LU0NhY2hlQmF0b24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hyICsgXCI6XCIgKyB0aGlzLm1pbiArIFwiLi5cIiArIHRoaXMubWF4ICsgXCI7c2NhbGU9XCIgKyB0aGlzLnNjYWxlO1xufVxuXG5mdW5jdGlvbiBLbm93blNwYWNlKHRpZXJNYXAsIGNociwgbWluLCBtYXgsIHNjYWxlLCBzZXFTb3VyY2UpIHtcbiAgICB0aGlzLnRpZXJNYXAgPSB0aWVyTWFwO1xuICAgIHRoaXMuY2hyID0gY2hyO1xuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICB0aGlzLnNlcVNvdXJjZSA9IHNlcVNvdXJjZSB8fCBuZXcgRHVtbXlTZXF1ZW5jZVNvdXJjZSgpO1xuICAgIHRoaXMudmlld0NvdW50ID0gMDtcblxuICAgIHRoaXMuZmVhdHVyZUNhY2hlID0ge307XG4gICAgdGhpcy5sYXRlc3RWaWV3cyA9IHt9O1xufVxuXG5Lbm93blNwYWNlLnByb3RvdHlwZS5iZXN0Q2FjaGVPdmVybGFwcGluZyA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgpIHtcbiAgICB2YXIgYmF0b24gPSB0aGlzLmZlYXR1cmVDYWNoZVt0aGlzLnRpZXJNYXBbMF1dO1xuICAgIGlmIChiYXRvbikge1xuICAgICAgICByZXR1cm4gYmF0b247XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5Lbm93blNwYWNlLnByb3RvdHlwZS52aWV3RmVhdHVyZXMgPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSkge1xuICAgIGlmIChzY2FsZSAhPSBzY2FsZSkge1xuICAgICAgICB0aHJvdyBcInZpZXdGZWF0dXJlcyBjYWxsZWQgd2l0aCBzaWxseSBzY2FsZVwiO1xuICAgIH1cblxuICAgIGlmIChjaHIgIT0gdGhpcy5jaHIpIHtcbiAgICAgICAgdGhyb3cgXCJDYW4ndCBleHRlbmQgS25vd24gU3BhY2UgdG8gYSBuZXcgY2hyb21vc29tZVwiO1xuICAgIH1cbiAgICBpZiAobWluIDwgMSkge1xuICAgICAgICBtaW4gPSAxO1xuICAgIH1cblxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcblxuICAgIGlmICh0aGlzLnBvb2wpIHtcbiAgICAgICAgdGhpcy5wb29sLmFib3J0QWxsKCk7XG4gICAgfVxuICAgIHRoaXMucG9vbCA9IG5ldyBGZXRjaFBvb2woKTtcbiAgICB0aGlzLmF3YWl0ZWRTZXEgPSBuZXcgQXdhaXRlZCgpO1xuICAgIHRoaXMuc2VxV2FzRmV0Y2hlZCA9IGZhbHNlO1xuICAgIHRoaXMudmlld0NvdW50Kys7XG4gICAgXG4gICAgdGhpcy5zdGFydEZldGNoZXNGb3JUaWVycyh0aGlzLnRpZXJNYXApO1xufVxuICAgIFxuZnVuY3Rpb24gZmlsdGVyRmVhdHVyZXMoZmVhdHVyZXMsIG1pbiwgbWF4KSB7XG4gICAgdmFyIGZmID0gW107XG4gICAgdmFyIGZlYXR1cmVzQnlHcm91cCA9IHt9O1xuXG4gICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICB2YXIgZiA9IGZlYXR1cmVzW2ZpXTtcbiAgICAgICAgaWYgKCFmLm1pbiB8fCAhZi5tYXgpIHtcbiAgICAgICAgICAgIGZmLnB1c2goZik7XG4gICAgICAgIH0gZWxzZSBpZiAoZi5ncm91cHMgJiYgZi5ncm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcHVzaG8oZmVhdHVyZXNCeUdyb3VwLCBmLmdyb3Vwc1swXS5pZCwgZik7XG4gICAgICAgIH0gZWxzZSBpZiAoZi5taW4gPD0gbWF4ICYmIGYubWF4ID49IG1pbikge1xuICAgICAgICAgICAgZmYucHVzaChmKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGdpZCBpbiBmZWF0dXJlc0J5R3JvdXApIHtcbiAgICAgICAgdmFyIGdmID0gZmVhdHVyZXNCeUdyb3VwW2dpZF07XG4gICAgICAgIHZhciBnbWluID0gMTAwMDAwMDAwMDAwLCBnbWF4ID0gLTEwMDAwMDAwMDAwMDtcbiAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGdmLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgdmFyIGYgPSBnZltmaV07XG4gICAgICAgICAgICBnbWluID0gTWF0aC5taW4oZ21pbiwgZi5taW4pO1xuICAgICAgICAgICAgZ21heCA9IE1hdGgubWF4KGdtYXgsIGYubWF4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ21pbiA8PSBtYXggfHwgZ21heCA+PSBtaW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBnZi5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgICAgICBmZi5wdXNoKGdmW2ZpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmY7XG59XG5cbktub3duU3BhY2UucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbih0aWVyKSB7XG4gICAgaWYgKCF0aGlzLnBvb2wpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZmVhdHVyZUNhY2hlW3RpZXJdID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0RmV0Y2hlc0ZvclRpZXJzKFt0aWVyXSk7XG59XG5cbktub3duU3BhY2UucHJvdG90eXBlLnN0YXJ0RmV0Y2hlc0ZvclRpZXJzID0gZnVuY3Rpb24odGllcnMpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgdmFyIGF3YWl0ZWRTZXEgPSB0aGlzLmF3YWl0ZWRTZXE7XG4gICAgdmFyIG5lZWRTZXEgPSBmYWxzZTtcblxuICAgIHZhciBnZXg7XG5cbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRpZXJzLmxlbmd0aDsgKyt0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydEZldGNoZXNGb3IodGllcnNbdF0sIGF3YWl0ZWRTZXEpKSB7XG4gICAgICAgICAgICAgICAgbmVlZFNlcSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICB0aWVyc1t0XS51cGRhdGVTdGF0dXMoZXgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGZldGNoaW5nIHRpZXIgc291cmNlJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhleCk7XG4gICAgICAgICAgICBnZXggPSBleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZWVkU2VxICYmICF0aGlzLnNlcVdhc0ZldGNoZWQpIHtcbiAgICAgICAgdGhpcy5zZXFXYXNGZXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHNtaW4gPSB0aGlzLm1pbiwgc21heCA9IHRoaXMubWF4O1xuXG4gICAgICAgIGlmICh0aGlzLmNzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jcy5zdGFydCA8PSBzbWluICYmIHRoaXMuY3MuZW5kID49IHNtYXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkU2VxO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNzLnN0YXJ0ID09IHNtaW4gJiYgdGhpcy5jcy5lbmQgPT0gc21heCkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZWRTZXEgPSB0aGlzLmNzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlZFNlcSA9IG5ldyBEQVNTZXF1ZW5jZSh0aGlzLmNzLm5hbWUsIHNtaW4sIHNtYXgsIHRoaXMuY3MuYWxwaGFiZXQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcy5zZXEuc3Vic3RyaW5nKHNtaW4gLSB0aGlzLmNzLnN0YXJ0LCBzbWF4ICsgMSAtIHRoaXMuY3Muc3RhcnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0ZWRTZXEucHJvdmlkZShjYWNoZWRTZXEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNlcVNvdXJjZS5mZXRjaCh0aGlzLmNociwgc21pbiwgc21heCwgdGhpcy5wb29sLCBmdW5jdGlvbihlcnIsIHNlcSkge1xuICAgICAgICAgICAgaWYgKHNlcSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpc0IuY3MgfHwgKHNtaW4gPD0gdGhpc0IuY3Muc3RhcnQgJiYgc21heCA+PSB0aGlzQi5jcy5lbmQpIHx8IFxuICAgICAgICAgICAgICAgICAgICAoc21pbiA+PSB0aGlzQi5jcy5lbmQpIHx8IChzbWF4IDw9IHRoaXNCLmNzLnN0YXJ0KSB8fCBcbiAgICAgICAgICAgICAgICAgICAgKChzbWF4IC0gc21pbikgPiAodGhpc0IuY3MuZW5kIC0gdGhpc0IuY3Muc3RhcnQpKSkgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5jcyA9IHNlcTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXRlZFNlcS5wcm92aWRlKHNlcSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXF1ZW5jZSBsb2FkaW5nIGZhaWxlZCcsIGVycik7XG4gICAgICAgICAgICAgICAgYXdhaXRlZFNlcS5wcm92aWRlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IFxuXG4gICAgaWYgKGdleClcbiAgICAgICAgdGhyb3cgZ2V4O1xufVxuXG5Lbm93blNwYWNlLnByb3RvdHlwZS5zdGFydEZldGNoZXNGb3IgPSBmdW5jdGlvbih0aWVyLCBhd2FpdGVkU2VxKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuICAgIHZhciB2aWV3SUQgPSB0aGlzLnZpZXdDb3VudDtcbiAgICB2YXIgc291cmNlID0gdGllci5nZXRTb3VyY2UoKSB8fCBuZXcgRHVtbXlGZWF0dXJlU291cmNlKCk7XG4gICAgdmFyIG5lZWRzU2VxID0gdGllci5uZWVkc1NlcXVlbmNlKHRoaXMuc2NhbGUpO1xuICAgIHZhciBiYXRvbiA9IHRoaXNCLmZlYXR1cmVDYWNoZVt0aWVyXTtcbiAgICB2YXIgd2FudGVkVHlwZXMgPSB0aWVyLmdldERlc2lyZWRUeXBlcyh0aGlzLnNjYWxlKTtcbiAgICB2YXIgY2hyID0gdGhpcy5jaHIsIG1pbiA9IHRoaXMubWluLCBtYXggPSB0aGlzLm1heDtcblxuXG4gICAgaWYgKHdhbnRlZFR5cGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYmF0b24gJiYgYmF0b24uY2hyID09PSB0aGlzLmNociAmJiBiYXRvbi5taW4gPD0gbWluICYmIGJhdG9uLm1heCA+PSBtYXgpIHtcbiAgICAgICAgdmFyIGNhY2hlZEZlYXR1cmVzID0gYmF0b24uZmVhdHVyZXM7XG4gICAgICAgIGlmIChiYXRvbi5taW4gPCBtaW4gfHwgYmF0b24ubWF4ID4gbWF4KSB7XG4gICAgICAgICAgICBjYWNoZWRGZWF0dXJlcyA9IGZpbHRlckZlYXR1cmVzKGNhY2hlZEZlYXR1cmVzLCBtaW4sIG1heCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXNCLnByb3Zpc2lvbih0aWVyLCBiYXRvbi5jaHIsIGludGVyc2VjdGlvbihiYXRvbi5jb3ZlcmFnZSwgbmV3IFJhbmdlKG1pbiwgbWF4KSksIGJhdG9uLnNjYWxlLCB3YW50ZWRUeXBlcywgY2FjaGVkRmVhdHVyZXMsIGJhdG9uLnN0YXR1cywgbmVlZHNTZXEgPyBhd2FpdGVkU2VxIDogbnVsbCk7XG5cbiAgICAgICAgdmFyIGF2YWlsYWJsZVNjYWxlcyA9IHNvdXJjZS5nZXRTY2FsZXMoKTtcbiAgICAgICAgaWYgKGJhdG9uLnNjYWxlIDw9IHRoaXMuc2NhbGUgfHwgIWF2YWlsYWJsZVNjYWxlcykge1xuICAgICAgICAgICAgcmV0dXJuIG5lZWRzU2VxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZS5pbnN0cnVtZW50KVxuICAgICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgIGZldGNoICcgKyB2aWV3SUQgKyAnICgnICsgbWluICsgJywgJyArIG1heCArICcpJyk7XG4gICAgc291cmNlLmZldGNoKGNociwgbWluLCBtYXgsIHRoaXMuc2NhbGUsIHdhbnRlZFR5cGVzLCB0aGlzLnBvb2wsIGZ1bmN0aW9uKHN0YXR1cywgZmVhdHVyZXMsIHNjYWxlLCBjb3ZlcmFnZSkge1xuICAgIFx0aWYgKHNvdXJjZS5pbnN0cnVtZW50KVxuICAgIFx0ICAgIGNvbnNvbGUubG9nKCdGaW5pc2hpbmcgZmV0Y2ggJyArIHZpZXdJRCk7XG5cbiAgICBcdHZhciBsYXRlc3RWaWV3SUQgPSB0aGlzQi5sYXRlc3RWaWV3c1t0aWVyXSB8fCAtMTtcbiAgICBcdGlmIChsYXRlc3RWaWV3SUQgPiB2aWV3SUQpIHtcbiAgICBcdCAgICByZXR1cm47XG4gICAgXHR9XG5cbiAgICAgICAgaWYgKCFjb3ZlcmFnZSkge1xuICAgICAgICAgICAgY292ZXJhZ2UgPSBuZXcgUmFuZ2UobWluLCBtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFiYXRvbiB8fCAobWluIDwgYmF0b24ubWluKSB8fCAobWF4ID4gYmF0b24ubWF4KSkgeyAgICAgICAgIC8vIEZJWE1FIHNob3VsZCBiZSBtZXJnaW5nIGluIHNvbWUgY2FzZXM/XG4gICAgICAgICAgICB0aGlzQi5mZWF0dXJlQ2FjaGVbdGllcl0gPSBuZXcgS1NDYWNoZUJhdG9uKGNociwgbWluLCBtYXgsIHNjYWxlLCBmZWF0dXJlcywgc3RhdHVzLCBjb3ZlcmFnZSk7XG4gICAgICAgIH1cblxuXHQgICAgdGhpc0IubGF0ZXN0Vmlld3NbdGllcl0gPSB2aWV3SUQ7XG4gICAgICAgIHRoaXNCLnByb3Zpc2lvbih0aWVyLCBjaHIsIGNvdmVyYWdlLCBzY2FsZSwgd2FudGVkVHlwZXMsIGZlYXR1cmVzLCBzdGF0dXMsIG5lZWRzU2VxID8gYXdhaXRlZFNlcSA6IG51bGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZWVkc1NlcTtcbn1cblxuS25vd25TcGFjZS5wcm90b3R5cGUucHJvdmlzaW9uID0gZnVuY3Rpb24odGllciwgY2hyLCBjb3ZlcmFnZSwgYWN0dWFsU2NhbGUsIHdhbnRlZFR5cGVzLCBmZWF0dXJlcywgc3RhdHVzLCBhd2FpdGVkU2VxKSB7XG4gICAgdGllci51cGRhdGVTdGF0dXMoc3RhdHVzKTtcbiAgIFxuICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgIHZhciBtYXlEb3duc2FtcGxlID0gZmFsc2U7XG4gICAgICAgIHZhciBzcmMgPSB0aWVyLmdldFNvdXJjZSgpO1xuICAgICAgICB3aGlsZSAoTWFwcGVkRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihzcmMpIHx8IENhY2hpbmdGZWF0dXJlU291cmNlLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHNyYykgfHwgT3ZlcmxheUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yoc3JjKSkge1xuXHQgICAgICAgIGlmIChPdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihzcmMpKSB7XG5cdFx0ICAgICAgICBzcmMgPSBzcmMuc291cmNlc1swXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHRcdCAgICAgICAgc3JjID0gc3JjLnNvdXJjZTtcblx0ICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yoc3JjKSB8fCBSZW1vdGVCV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHNyYykgfHwgQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihzcmMpIHx8IFJlbW90ZUJBTUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yoc3JjKSkge1xuICAgICAgICAgICAgbWF5RG93bnNhbXBsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIFx0aWYgKCFzcmMub3B0cyB8fCAoIXNyYy5vcHRzLmZvcmNlUmVkdWN0aW9uICYmICFzcmMub3B0cy5ub0Rvd25zYW1wbGUpKSB7XG4gICAgICAgICAgICBpZiAoKGFjdHVhbFNjYWxlIDwgKHRoaXMuc2NhbGUvMikgJiYgZmVhdHVyZXMubGVuZ3RoID4gMjAwKSAgfHxcblx0XHQgICAgICAgIChtYXlEb3duc2FtcGxlICYmIHdhbnRlZFR5cGVzICYmIHdhbnRlZFR5cGVzLmxlbmd0aCA9PSAxICYmIHdhbnRlZFR5cGVzLmluZGV4T2YoJ2RlbnNpdHknKSA+PSAwKSlcbiAgICAgICAgICAgIHtcblx0XHQgICAgICAgIGZlYXR1cmVzID0gZG93bnNhbXBsZShmZWF0dXJlcywgdGhpcy5zY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgXHR9XG5cbiAgICAgICAgaWYgKGF3YWl0ZWRTZXEpIHtcbiAgICAgICAgICAgIGF3YWl0ZWRTZXEuYXdhaXQoZnVuY3Rpb24oc2VxKSB7XG4gICAgICAgICAgICAgICAgdGllci52aWV3RmVhdHVyZXMoY2hyLCBjb3ZlcmFnZSwgYWN0dWFsU2NhbGUsIGZlYXR1cmVzLCBzZXEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWVyLnZpZXdGZWF0dXJlcyhjaHIsIGNvdmVyYWdlLCBhY3R1YWxTY2FsZSwgZmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIEtub3duU3BhY2U6IEtub3duU3BhY2VcbiAgICB9O1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMVxuLy9cbi8vIGxoM3V0aWxzLmpzOiBjb21tb24gc3VwcG9ydCBmb3IgbGgzJ3MgZmlsZSBmb3JtYXRzXG4vL1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBqc3psaWIgPSByZXF1aXJlKCdqc3psaWInKTtcbiAgICB2YXIganN6bGliX2luZmxhdGVfYnVmZmVyID0ganN6bGliLmluZmxhdGVCdWZmZXI7XG4gICAgdmFyIGFycmF5Q29weSA9IGpzemxpYi5hcnJheUNvcHk7XG59XG5cbmZ1bmN0aW9uIFZvYihiLCBvKSB7XG4gICAgdGhpcy5ibG9jayA9IGI7XG4gICAgdGhpcy5vZmZzZXQgPSBvO1xufVxuXG5Wb2IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ibG9jayArICc6JyArIHRoaXMub2Zmc2V0O1xufVxuXG5mdW5jdGlvbiByZWFkVm9iKGJhLCBvZmZzZXQpIHtcbiAgICB2YXIgYmxvY2sgPSAoKGJhW29mZnNldCs2XSAmIDB4ZmYpICogMHgxMDAwMDAwMDApICsgKChiYVtvZmZzZXQrNV0gJiAweGZmKSAqIDB4MTAwMDAwMCkgKyAoKGJhW29mZnNldCs0XSAmIDB4ZmYpICogMHgxMDAwMCkgKyAoKGJhW29mZnNldCszXSAmIDB4ZmYpICogMHgxMDApICsgKChiYVtvZmZzZXQrMl0gJiAweGZmKSk7XG4gICAgdmFyIGJpbnQgPSAoYmFbb2Zmc2V0KzFdIDw8IDgpIHwgKGJhW29mZnNldF0pO1xuICAgIGlmIChibG9jayA9PSAwICYmIGJpbnQgPT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDsgIC8vIFNob3VsZCBvbmx5IGhhcHBlbiBpbiB0aGUgbGluZWFyIGluZGV4P1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgVm9iKGJsb2NrLCBiaW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVuYmd6ZihkYXRhLCBsaW0pIHtcbiAgICBsaW0gPSBNYXRoLm1pbihsaW0gfHwgMSwgZGF0YS5ieXRlTGVuZ3RoIC0gNTApO1xuICAgIHZhciBvQmxvY2tMaXN0ID0gW107XG4gICAgdmFyIHB0ciA9IFswXTtcbiAgICB2YXIgdG90YWxTaXplID0gMDtcblxuICAgIHdoaWxlIChwdHJbMF0gPCBsaW0pIHtcbiAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSwgcHRyWzBdLCAxMik7IC8vIEZJWE1FIGlzIHRoaXMgZW5vdWdoIGZvciBhbGwgY3JlZGlibGUgQkdaRiBibG9jayBoZWFkZXJzP1xuICAgICAgICB2YXIgeGxlbiA9IChiYVsxMV0gPDwgOCkgfCAoYmFbMTBdKTtcbiAgICAgICAgLy8gZGxvZygneGxlblsnICsgKHB0clswXSkgKyddPScgKyB4bGVuKTtcbiAgICAgICAgdmFyIHVuYyA9IGpzemxpYl9pbmZsYXRlX2J1ZmZlcihkYXRhLCAxMiArIHhsZW4gKyBwdHJbMF0sIE1hdGgubWluKDY1NTM2LCBkYXRhLmJ5dGVMZW5ndGggLSAxMiAtIHhsZW4gLSBwdHJbMF0pLCBwdHIpO1xuICAgICAgICBwdHJbMF0gKz0gODtcbiAgICAgICAgdG90YWxTaXplICs9IHVuYy5ieXRlTGVuZ3RoO1xuICAgICAgICBvQmxvY2tMaXN0LnB1c2godW5jKTtcbiAgICB9XG5cbiAgICBpZiAob0Jsb2NrTGlzdC5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXR1cm4gb0Jsb2NrTGlzdFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxTaXplKTtcbiAgICAgICAgdmFyIGN1cnNvciA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb0Jsb2NrTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGIgPSBuZXcgVWludDhBcnJheShvQmxvY2tMaXN0W2ldKTtcbiAgICAgICAgICAgIGFycmF5Q29weShiLCAwLCBvdXQsIGN1cnNvciwgYi5sZW5ndGgpO1xuICAgICAgICAgICAgY3Vyc29yICs9IGIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuYnVmZmVyO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gQ2h1bmsobWludiwgbWF4dikge1xuICAgIHRoaXMubWludiA9IG1pbnY7IHRoaXMubWF4diA9IG1heHY7XG59XG5cblxuLy9cbi8vIEJpbm5pbmcgKHRyYW5zbGl0ZXJhdGVkIGZyb20gU0FNMS4zIHNwZWMpXG4vL1xuXG4vKiBjYWxjdWxhdGUgYmluIGdpdmVuIGFuIGFsaWdubWVudCBjb3ZlcmluZyBbYmVnLGVuZCkgKHplcm8tYmFzZWQsIGhhbGYtY2xvc2UtaGFsZi1vcGVuKSAqL1xuZnVuY3Rpb24gcmVnMmJpbihiZWcsIGVuZClcbntcbiAgICAtLWVuZDtcbiAgICBpZiAoYmVnPj4xNCA9PSBlbmQ+PjE0KSByZXR1cm4gKCgxPDwxNSktMSkvNyArIChiZWc+PjE0KTtcbiAgICBpZiAoYmVnPj4xNyA9PSBlbmQ+PjE3KSByZXR1cm4gKCgxPDwxMiktMSkvNyArIChiZWc+PjE3KTtcbiAgICBpZiAoYmVnPj4yMCA9PSBlbmQ+PjIwKSByZXR1cm4gKCgxPDw5KS0xKS83ICsgKGJlZz4+MjApO1xuICAgIGlmIChiZWc+PjIzID09IGVuZD4+MjMpIHJldHVybiAoKDE8PDYpLTEpLzcgKyAoYmVnPj4yMyk7XG4gICAgaWYgKGJlZz4+MjYgPT0gZW5kPj4yNikgcmV0dXJuICgoMTw8MyktMSkvNyArIChiZWc+PjI2KTtcbiAgICByZXR1cm4gMDtcbn1cblxuLyogY2FsY3VsYXRlIHRoZSBsaXN0IG9mIGJpbnMgdGhhdCBtYXkgb3ZlcmxhcCB3aXRoIHJlZ2lvbiBbYmVnLGVuZCkgKHplcm8tYmFzZWQpICovXG52YXIgTUFYX0JJTiA9ICgoKDE8PDE4KS0xKS83KTtcbmZ1bmN0aW9uIHJlZzJiaW5zKGJlZywgZW5kKSBcbntcbiAgICB2YXIgaSA9IDAsIGssIGxpc3QgPSBbXTtcbiAgICAtLWVuZDtcbiAgICBsaXN0LnB1c2goMCk7XG4gICAgZm9yIChrID0gMSArIChiZWc+PjI2KTsgayA8PSAxICsgKGVuZD4+MjYpOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA5ICsgKGJlZz4+MjMpOyBrIDw9IDkgKyAoZW5kPj4yMyk7ICsraykgbGlzdC5wdXNoKGspO1xuICAgIGZvciAoayA9IDczICsgKGJlZz4+MjApOyBrIDw9IDczICsgKGVuZD4+MjApOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA1ODUgKyAoYmVnPj4xNyk7IGsgPD0gNTg1ICsgKGVuZD4+MTcpOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA0NjgxICsgKGJlZz4+MTQpOyBrIDw9IDQ2ODEgKyAoZW5kPj4xNCk7ICsraykgbGlzdC5wdXNoKGspO1xuICAgIHJldHVybiBsaXN0O1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHVuYmd6ZjogdW5iZ3pmLFxuICAgICAgICByZWFkVm9iOiByZWFkVm9iLFxuICAgICAgICByZWcyYmluOiByZWcyYmluLFxuICAgICAgICByZWcyYmluczogcmVnMmJpbnMsXG4gICAgICAgIENodW5rOiBDaHVua1xuICAgIH07XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxNFxuLy9cbi8vIG1lbXN0b3JlLmpzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc2EgPSByZXF1aXJlKCcuL3NvdXJjZWFkYXB0ZXJzJyk7XG4gICAgdmFyIGRhbGxpYW5jZV9yZWdpc3RlclNvdXJjZUFkYXB0ZXJGYWN0b3J5ID0gc2EucmVnaXN0ZXJTb3VyY2VBZGFwdGVyRmFjdG9yeTtcbiAgICB2YXIgZGFsbGlhbmNlX21ha2VQYXJzZXIgPSBzYS5tYWtlUGFyc2VyO1xuICAgIHZhciBGZWF0dXJlU291cmNlQmFzZSA9IHNhLkZlYXR1cmVTb3VyY2VCYXNlO1xuXG4gICAgdmFyIGRhcyA9IHJlcXVpcmUoJy4vZGFzJyk7XG4gICAgdmFyIERBU1N0eWxlc2hlZXQgPSBkYXMuREFTU3R5bGVzaGVldDtcbiAgICB2YXIgREFTU3R5bGUgPSBkYXMuREFTU3R5bGU7XG4gICAgdmFyIERBU0ZlYXR1cmUgPSBkYXMuREFTRmVhdHVyZTtcbiAgICB2YXIgREFTR3JvdXAgPSBkYXMuREFTR3JvdXA7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIEF3YWl0ZWQgPSB1dGlscy5Bd2FpdGVkO1xufVxuXG5mdW5jdGlvbiBNZW1TdG9yZSgpIHtcbiAgICB0aGlzLmZlYXR1cmVzQnlDaHIgPSB7fTtcbiAgICB0aGlzLm1heExlbmd0aCA9IDE7XG4gICAgdGhpcy5jaHJSaW5nID0gbnVsbDtcbn1cblxuTWVtU3RvcmUucHJvdG90eXBlLmFkZEZlYXR1cmVzID0gZnVuY3Rpb24oZmVhdHVyZXMpIHtcbiAgICB2YXIgZGlydHkgPSB7fTtcbiAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZmVhdHVyZXMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgIHZhciBmID0gZmVhdHVyZXNbZmldO1xuICAgICAgICB2YXIgY2hyID0gZi5zZWdtZW50IHx8IGYuY2hyO1xuICAgICAgICB2YXIgZmEgPSB0aGlzLmZlYXR1cmVzQnlDaHJbY2hyXTtcbiAgICAgICAgaWYgKCFmYSkge1xuICAgICAgICAgICAgZmEgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNCeUNocltjaHJdID0gZmE7XG4gICAgICAgIH1cbiAgICAgICAgZmEucHVzaChmKTtcbiAgICAgICAgZGlydHlbY2hyXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIGxlbiA9IGYubWF4IC0gZi5taW4gKyAxO1xuICAgICAgICBpZiAobGVuID4gdGhpcy5tYXhMZW5ndGgpXG4gICAgICAgICAgICB0aGlzLm1heExlbmd0aCA9IGxlbjtcbiAgICB9XG5cbiAgICBmb3IgKGNociBpbiBkaXJ0eSkge1xuICAgICAgICB2YXIgZmEgPSB0aGlzLmZlYXR1cmVzQnlDaHJbY2hyXTtcbiAgICAgICAgZmEuc29ydChmdW5jdGlvbihmMSwgZjIpIHtcbiAgICAgICAgICAgIHZhciBkID0gZjEubWluIC0gZjIubWluO1xuICAgICAgICAgICAgaWYgKGQgIT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBmMS5tYXggLSBmMi5tYXg7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmNoclJpbmcgPSBudWxsO1xufVxuXG5NZW1TdG9yZS5wcm90b3R5cGUuX2luZGV4Rm9yID0gZnVuY3Rpb24oZmEsIHApIHtcbiAgICB2YXIgbGIgPSAwLCB1YiA9IGZhLmxlbmd0aDtcbiAgICB3aGlsZSAodWIgPiBsYikge1xuICAgICAgICB2YXIgbWlkID0gKChsYiArIHViKS8yKXwwO1xuICAgICAgICBpZiAobWlkID49IGZhLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYS5sZW5ndGg7XG4gICAgICAgIHZhciBtZyA9IGZhW21pZF07XG4gICAgICAgIGlmIChwIDwgbWcubWluKSB7XG4gICAgICAgICAgICB1YiA9IG1pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxiID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdWI7XG59XG5cbk1lbVN0b3JlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgpIHtcbiAgICB2YXIgZmEgPSB0aGlzLmZlYXR1cmVzQnlDaHJbY2hyXTtcbiAgICBpZiAoIWZhKSB7XG4gICAgICAgIGlmIChjaHIuaW5kZXhPZignY2hyJykgPT0gMClcbiAgICAgICAgICAgIGZhID0gdGhpcy5mZWF0dXJlc0J5Q2hyW2Noci5zdWJzdHJpbmcoMyldO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmYSA9IHRoaXMuZmVhdHVyZXNCeUNoclsnY2hyJyArIGNocl07XG4gICAgfVxuICAgIGlmICghZmEpXG4gICAgICAgIHJldHVybiBbXTtcblxuICAgIHZhciBtaW5pID0gTWF0aC5tYXgoMCwgdGhpcy5faW5kZXhGb3IoZmEsIG1pbiAtIHRoaXMubWF4TGVuZ3RoIC0gMSkpO1xuICAgIHZhciBtYXhpID0gTWF0aC5taW4oZmEubGVuZ3RoIC0gMSwgdGhpcy5faW5kZXhGb3IoZmEsIG1heCkpO1xuXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGZpID0gbWluaTsgZmkgPD0gbWF4aTsgKytmaSkge1xuICAgICAgICB2YXIgZiA9IGZhW2ZpXTtcbiAgICAgICAgaWYgKGYubWluIDw9IG1heCAmJiBmLm1heCA+PSBtaW4pXG4gICAgICAgICAgICByZXMucHVzaChmKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuTWVtU3RvcmUucHJvdG90eXBlLmZpbmROZXh0RmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIpIHtcbiAgICBpZiAodGhpcy5jaHJSaW5nID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jaHJSaW5nID0gW107XG4gICAgICAgIGZvciAodmFyIGNociBpbiB0aGlzLmZlYXR1cmVzQnlDaHIpIHtcbiAgICAgICAgICAgIHRoaXMuY2hyUmluZy5wdXNoKGNocik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaHJSaW5nLnNvcnQoKTtcbiAgICB9XG5cbiAgICB2YXIgZmEgPSB0aGlzLmZlYXR1cmVzQnlDaHJbY2hyXTtcbiAgICBpZiAoIWZhKSB7XG4gICAgICAgIGlmIChjaHIuaW5kZXhPZignY2hyJykgPT0gMCkge1xuICAgICAgICAgICAgY2hyID0gY2hyLnN1YnN0cmluZygzKTtcbiAgICAgICAgICAgIGZhID0gdGhpcy5mZWF0dXJlc0J5Q2hyW2Nocl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHIgPSAnY2hyJyArIGNocjtcbiAgICAgICAgICAgIGZhID0gdGhpcy5mZWF0dXJlc0J5Q2hyW2Nocl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmYSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgaSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuX2luZGV4Rm9yKGZhLCBwb3MpLCBmYS5sZW5ndGggLSAxKSk7XG4gICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgd2hpbGUgKGkgPCBmYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBmID0gZmFbaSsrXTtcbiAgICAgICAgICAgIGlmIChmLm1pbiA+IHBvcylcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hySW5kID0gdGhpcy5jaHJSaW5nLmluZGV4T2YoY2hyKSArIDE7XG4gICAgICAgIGlmIChjaHJJbmQgPj0gdGhpcy5jaHJSaW5nLmxlbmd0aClcbiAgICAgICAgICAgIGNockluZCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmROZXh0RmVhdHVyZSh0aGlzLmNoclJpbmdbY2hySW5kXSwgMCwgZGlyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZhW2ktLV07XG4gICAgICAgICAgICBpZiAoZi5tYXggPCBwb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNockluZCA9IHRoaXMuY2hyUmluZy5pbmRleE9mKGNocikgLSAxO1xuICAgICAgICBpZiAoY2hySW5kIDwgMClcbiAgICAgICAgICAgIGNockluZCA9IHRoaXMuY2hyUmluZy5sZW5ndGggLSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kTmV4dEZlYXR1cmUodGhpcy5jaHJSaW5nW2NockluZF0sIDEwMDAwMDAwMDAwLCBkaXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gTWVtU3RvcmVGZWF0dXJlU291cmNlKHNvdXJjZSkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIEZlYXR1cmVTb3VyY2VCYXNlLmNhbGwodGhpcyk7XG4gICAgdGhpcy5zdG9yZUhvbGRlciA9IG5ldyBBd2FpdGVkKCk7XG4gICAgdGhpcy5wYXJzZXIgPSBkYWxsaWFuY2VfbWFrZVBhcnNlcihzb3VyY2UucGF5bG9hZCk7XG4gICAgaWYgKCF0aGlzLnBhcnNlcikge1xuICAgICAgICB0aHJvdyBcIlVuc3VwcG9ydGVkIG1lbXN0b3JlIHBheWxvYWQ6IFwiICsgc291cmNlLnBheWxvYWQ7XG4gICAgfVxuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLl9sb2FkKGZ1bmN0aW9uKHJlc3AsIGVycikge1xuICAgICAgICBpZiAoIXJlc3ApIHtcbiAgICAgICAgICAgIHRoaXNCLmVycm9yID0gZXJyIHx8IFwiTm8gZGF0YVwiXG4gICAgICAgICAgICB0aGlzQi5zdG9yZUhvbGRlci5wcm92aWRlKG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN0b3JlID0gbmV3IE1lbVN0b3JlKCk7XG4gICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHJlc3Auc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXNCLnBhcnNlci5jcmVhdGVTZXNzaW9uKGZ1bmN0aW9uKGYpIHtmZWF0dXJlcy5wdXNoKGYpfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgbGluZXMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tsaV07XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnBhcnNlKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlc3Npb24uZmx1c2goKTtcblxuICAgICAgICAgICAgc3RvcmUuYWRkRmVhdHVyZXMoZmVhdHVyZXMpO1xuXG4gICAgICAgICAgICB0aGlzQi5zdG9yZUhvbGRlci5wcm92aWRlKHN0b3JlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5NZW1TdG9yZUZlYXR1cmVTb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShGZWF0dXJlU291cmNlQmFzZS5wcm90b3R5cGUpO1xuXG5NZW1TdG9yZUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLl9sb2FkID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5zb3VyY2UuYmxvYikge1xuICAgICAgICB2YXIgciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soci5yZXN1bHQsIHIuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHIucmVhZEFzVGV4dCh0aGlzLnNvdXJjZS5ibG9iKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0WEhSKHRoaXMuc291cmNlLnVyaSwgY2FsbGJhY2ssIHt9KTtcbiAgICB9XG59XG5cbk1lbVN0b3JlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNudCkge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpcy5zdG9yZUhvbGRlci5hd2FpdChmdW5jdGlvbihzdG9yZSkge1xuICAgICAgICBpZiAoc3RvcmUpIHtcbiAgICAgICAgICAgIHZhciBmID0gc3RvcmUuZmV0Y2goY2hyLCBtaW4sIG1heCk7XG4gICAgICAgICAgICByZXR1cm4gY250KG51bGwsIGYsIDEwMDAwMDAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY250KHRoaXNCLmVycm9yKVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbk1lbVN0b3JlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMucGFyc2VyICYmIHRoaXMucGFyc2VyLmdldFN0eWxlU2hlZXQpXG4gICAgICAgIHRoaXMucGFyc2VyLmdldFN0eWxlU2hlZXQoY2FsbGJhY2spXG59XG5cbk1lbVN0b3JlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0RGVmYXVsdEZJUHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLnBhcnNlciAmJiB0aGlzLnBhcnNlci5nZXREZWZhdWx0RklQcylcbiAgICAgICAgdGhpcy5wYXJzZXIuZ2V0RGVmYXVsdEZJUHMoY2FsbGJhY2spO1xufVxuXG5NZW1TdG9yZUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFNjYWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAxMDAwMDAwMDA7XG59XG5cbk1lbVN0b3JlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmluZE5leHRGZWF0dXJlID0gZnVuY3Rpb24oY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHRoaXMuc3RvcmVIb2xkZXIuYXdhaXQoZnVuY3Rpb24oc3RvcmUpIHtcbiAgICAgICAgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soc3RvcmUuZmluZE5leHRGZWF0dXJlKGNociwgcG9zLCBkaXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0aGlzQi5lcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG5NZW1TdG9yZUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmNhcGFiaWxpdGllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYXBzID0ge2xlYXA6IHRydWV9O1xuICAgIHJldHVybiBjYXBzO1xufVxuXG5kYWxsaWFuY2VfcmVnaXN0ZXJTb3VyY2VBZGFwdGVyRmFjdG9yeSgnbWVtc3RvcmUnLCBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICByZXR1cm4ge2ZlYXR1cmVzOiBuZXcgTWVtU3RvcmVGZWF0dXJlU291cmNlKHNvdXJjZSl9O1xufSk7XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gbWVtc3RvcmUuanNcbi8vXG5cbmZ1bmN0aW9uIGZvcm1hdExvbmdJbnQobikge1xuICAgIHJldHVybiAobnwwKS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcsJylcbn1cblxuZnVuY3Rpb24gZm9ybWF0UXVhbnRMYWJlbCh2KSB7XG4gICAgdmFyIHQgPSAnJyArIHY7XG4gICAgdmFyIGRvdCA9IHQuaW5kZXhPZignLicpO1xuICAgIGlmIChkb3QgPCAwKSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkb3RUaHJlc2hvbGQgPSAyO1xuICAgICAgICBpZiAodC5zdWJzdHJpbmcoMCwgMSkgPT0gJy0nKSB7XG4gICAgICAgICAgICArK2RvdFRocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb3QgPj0gZG90VGhyZXNob2xkKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5zdWJzdHJpbmcoMCwgZG90KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0LnN1YnN0cmluZygwLCBkb3QgKyAyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBmb3JtYXRMb25nSW50OiBmb3JtYXRMb25nSW50LFxuICAgICAgICBmb3JtYXRRdWFudExhYmVsOiBmb3JtYXRRdWFudExhYmVsXG4gICAgfTtcbn0iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEzXG4vL1xuLy8gb3ZlcmxheS5qczogZmVhdHVyZXNvdXJjZXMgY29tcG9zZWQgZnJvbSBtdWx0aXBsZSB1bmRlcmx5aW5nIHNvdXJjZXNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgc2hhbGxvd0NvcHkgPSB1dGlscy5zaGFsbG93Q29weTtcbn1cblxuZnVuY3Rpb24gT3ZlcmxheUZlYXR1cmVTb3VyY2Uoc291cmNlcywgb3B0cykge1xuICAgIHRoaXMuc291cmNlcyA9IHNvdXJjZXM7XG4gICAgdGhpcy5vcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5yZWFkaW5lc3NMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNoYW5nZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuYnVzaW5lc3MgPSBbXTtcbiAgICB0aGlzLnJlYWRpbmVzcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5pbml0TihpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5tZXJnZSA9PSAnY29uY2F0Jykge1xuICAgICAgICB0aGlzLm1lcmdlID0gT3ZlcmxheUZlYXR1cmVTb3VyY2VfbWVyZ2VfY29uY2F0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVyZ2UgPSBPdmVybGF5RmVhdHVyZVNvdXJjZV9tZXJnZV9ieUtleTtcbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5pbml0TiA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgcyA9IHRoaXMuc291cmNlc1tuXTtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHRoaXMuYnVzaW5lc3Nbbl0gPSAwO1xuXG4gICAgaWYgKHMuYWRkQWN0aXZpdHlMaXN0ZW5lcikge1xuICAgICAgICBzLmFkZEFjdGl2aXR5TGlzdGVuZXIoZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgdGhpc0IuYnVzaW5lc3Nbbl0gPSBiO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzLmFkZENoYW5nZUxpc3RlbmVyKSB7XG4gICAgICAgIHMuYWRkQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzQi5ub3RpZnlDaGFuZ2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzLmFkZFJlYWRpbmVzc0xpc3RlbmVyKSB7XG4gICAgICAgIHMuYWRkUmVhZGluZXNzTGlzdGVuZXIoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdGhpc0IucmVhZGluZXNzW25dID0gcjtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeVJlYWRpbmVzcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5hZGRSZWFkaW5lc3NMaXN0ZW5lciA9IGZ1bmN0aW9uKGwpIHtcbiAgICB0aGlzLnJlYWRpbmVzc0xpc3RlbmVycy5wdXNoKGwpO1xuICAgIHRoaXMubm90aWZ5UmVhZGluZXNzTGlzdGVuZXIobCk7XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5ub3RpZnlSZWFkaW5lc3MgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVhZGluZXNzTGlzdGVuZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UmVhZGluZXNzTGlzdGVuZXIodGhpcy5yZWFkaW5lc3NMaXN0ZW5lcnNbaV0pO1xuICAgIH1cbn1cblxuT3ZlcmxheUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLm5vdGlmeVJlYWRpbmVzc0xpc3RlbmVyID0gZnVuY3Rpb24obCkge1xuICAgIHZhciByID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVhZGluZXNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWRpbmVzc1tpXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByID0gdGhpcy5yZWFkaW5lc3NbaV07IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGwocik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5hZGRBY3Rpdml0eUxpc3RlbmVyID0gZnVuY3Rpb24obCkge1xuICAgIHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnMucHVzaChsKTtcbn1cblxuT3ZlcmxheUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLm5vdGlmeUFjdGl2aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJ1c3kgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5idXNpbmVzcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBidXN5ICs9IHRoaXMuYnVzaW5lc3NbaV07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgbGkgPSAwOyBsaSA8IHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzW2xpXShidXN5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5hZGRDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5jaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5ub3RpZnlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgdGhpcy5jaGFuZ2VMaXN0ZW5lcnMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVyc1tsaV0odGhpcy5idXN5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXRTY2FsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzWzBdLmdldFNjYWxlcygpO1xufVxuXG5PdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1swXS5nZXRTdHlsZVNoZWV0KGNhbGxiYWNrKTtcbn1cblxuT3ZlcmxheUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmNhcGFiaWxpdGllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYXBzID0ge307XG4gICAgdmFyIHMwID0gdGhpcy5zb3VyY2VzWzBdO1xuICAgIGlmIChzMC5jYXBhYmlsaXRpZXMpIFxuICAgICAgICBjYXBzID0gc2hhbGxvd0NvcHkoczAuY2FwYWJpbGl0aWVzKCkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLnNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHNpID0gdGhpcy5zb3VyY2VzW2ldO1xuICAgICAgICBpZiAoc2kuY2FwYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICB2YXIgY28gPSBzaS5jYXBhYmlsaXRpZXMoKTtcbiAgICAgICAgICAgIGlmIChjby5zZWFyY2gpIHtcbiAgICAgICAgICAgICAgICBjYXBzLnNlYXJjaCA9IGNvLnNlYXJjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYXBzO1xufVxuXG5PdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24ocXVlcnksIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHNvdXJjZUFkYXB0ZXJJc0NhcGFibGUodGhpcy5zb3VyY2VzW2ldLCAnc2VhcmNoJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNbaV0uc2VhcmNoKHF1ZXJ5LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgYmF0b24gPSBuZXcgT3ZlcmxheUJhdG9uKHRoaXMsIGNhbGxiYWNrLCB0aGlzLnNvdXJjZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgdGhpcy5zb3VyY2VzLmxlbmd0aDsgKytzaSkge1xuXHR0aGlzLmZldGNoTihiYXRvbiwgc2ksIGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCk7XG4gICAgfVxufVxuXG5PdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2hOID0gZnVuY3Rpb24oYmF0b24sIHNpLCBjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wpIHtcbiAgICB0aGlzLnNvdXJjZXNbc2ldLmZldGNoKGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCwgZnVuY3Rpb24oc3RhdHVzLCBmZWF0dXJlcywgc2NhbGUpIHtcblx0cmV0dXJuIGJhdG9uLmNvbXBsZXRlZChzaSwgc3RhdHVzLCBmZWF0dXJlcywgc2NhbGUpO1xuICAgIH0pO1xufVxuXG5PdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUucXVhbnRGaW5kTmV4dEZlYXR1cmUgPSBmdW5jdGlvbihjaHIsIHBvcywgZGlyLCB0aHJlc2hvbGQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1swXS5xdWFudEZpbmROZXh0RmVhdHVyZShjaHIsIHBvcywgZGlyLCB0aHJlc2hvbGQsIGNhbGxiYWNrKTtcbn1cblxuT3ZlcmxheUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmZpbmROZXh0RmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlc1swXS5maW5kTmV4dEZlYXR1cmUoY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBPdmVybGF5QmF0b24oc291cmNlLCBjYWxsYmFjaywgY291bnQpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5jb3VudCA9IGNvdW50O1xuXG4gICAgdGhpcy5yZXR1cm5Db3VudCA9IDA7XG4gICAgdGhpcy5zdGF0dXNDb3VudCA9IDA7XG4gICAgdGhpcy5yZXR1cm5zID0gW107XG4gICAgdGhpcy5mZWF0dXJlcyA9IFtdXG4gICAgdGhpcy5zdGF0dXNlcyA9IFtdO1xuICAgIHRoaXMuc2NhbGUgPSBudWxsO1xufVxuXG5PdmVybGF5QmF0b24ucHJvdG90eXBlLmNvbXBsZXRlZCA9IGZ1bmN0aW9uKGluZGV4LCBzdGF0dXMsIGZlYXR1cmVzLCBzY2FsZSkge1xuICAgIGlmICh0aGlzLnNjYWxlID09IG51bGwgfHwgaW5kZXggPT0gMCkgXG5cdCAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcblxuICAgIGlmICh0aGlzLnJldHVybnNbaW5kZXhdKVxuXHQgICB0aHJvdyAnTXVsdGlwbGUgcmV0dXJucyBmb3Igc291cmNlICcgKyBpbmRleDtcblxuICAgIHRoaXMucmV0dXJuc1tpbmRleF0gPSB0cnVlO1xuICAgIHRoaXMucmV0dXJuQ291bnQrKztcblxuICAgIHRoaXMuZmVhdHVyZXNbaW5kZXhdID0gZmVhdHVyZXM7XG5cbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgXHR0aGlzLnN0YXR1c2VzW2luZGV4XSA9IHN0YXR1cztcbiAgICBcdHRoaXMuc3RhdHVzQ291bnQrKztcbiAgICB9XG5cblxuICAgIGlmICh0aGlzLnJldHVybkNvdW50ID09IHRoaXMuY291bnQpIHtcbiAgICBcdGlmICh0aGlzLnN0YXR1c0NvdW50ID4gMCkge1xuICAgIFx0ICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgXHQgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHRoaXMuY291bnQ7ICsrc2kpIHtcbiAgICAgICAgXHRcdHZhciBzID0gdGhpcy5zdGF0dXNlc1tzaV07XG4gICAgICAgIFx0XHRpZiAocykge1xuICAgICAgICBcdFx0ICAgIGlmIChtZXNzYWdlLmxlbmd0aCA+IDApIFxuICAgICAgICBcdFx0XHRtZXNzYWdlICs9ICcsICc7XG4gICAgICAgIFx0XHQgICAgbWVzc2FnZSArPSBzO1xuICAgICAgICBcdFx0fVxuICAgIFx0ICAgIH1cbiAgICBcdCAgICByZXR1cm4gdGhpcy5jYWxsYmFjayhtZXNzYWdlLCBudWxsLCB0aGlzLnNjYWxlKTtcbiAgICBcdH0gZWxzZSB7XG4gICAgXHQgICAgdGhpcy5jYWxsYmFjayhudWxsLCB0aGlzLnNvdXJjZS5tZXJnZSh0aGlzLmZlYXR1cmVzKSwgdGhpcy5zY2FsZSk7XG4gICAgXHR9XG4gICAgfVxufVxuXG5PdmVybGF5RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0RGVmYXVsdEZJUHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzLnNvdXJjZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5zb3VyY2VzW3NpXTtcbiAgICAgICAgaWYgKHMuZ2V0RGVmYXVsdEZJUHMpXG4gICAgICAgICAgICBzLmdldERlZmF1bHRGSVBzKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbk92ZXJsYXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5rZXlGb3JGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgIHJldHVybiAnJyArIGZlYXR1cmUubWluICsgJy4uJyArIGZlYXR1cmUubWF4O1xufVxuXG5mdW5jdGlvbiBPdmVybGF5RmVhdHVyZVNvdXJjZV9tZXJnZV9ieUtleShmZWF0dXJlU2V0cykge1xuICAgIHZhciBvbWFwcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgZnNpID0gMTsgZnNpIDwgZmVhdHVyZVNldHMubGVuZ3RoOyArK2ZzaSkge1xuICAgICAgICB2YXIgb20gPSB7fTtcbiAgICAgICAgdmFyIG9mID0gZmVhdHVyZVNldHNbZnNpXTtcbiAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IG9mLmxlbmd0aDsgKytmaSkge1xuICAgIFx0ICAgb21bdGhpcy5rZXlGb3JGZWF0dXJlKG9mW2ZpXSldID0gb2ZbZmldO1xuICAgICAgICB9XG4gICAgICAgIG9tYXBzLnB1c2gob20pO1xuICAgIH1cblxuXG4gICAgdmFyIG1mID0gW107XG4gICAgdmFyIGZsID0gZmVhdHVyZVNldHNbMF07XG4gICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZsLmxlbmd0aDsgKytmaSkge1xuICAgIFx0dmFyIGYgPSBmbFtmaV07XG5cbiAgICAgICAgZm9yICh2YXIgb2kgPSAwOyBvaSA8IG9tYXBzLmxlbmd0aDsgKytvaSkge1xuICAgICAgICAgICAgdmFyIG9tID0gb21hcHNbb2ldO1xuICAgICAgICBcdG9mID0gb21bdGhpcy5rZXlGb3JGZWF0dXJlKGYpXVxuICAgICAgICBcdGlmIChvZikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gb2YpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09ICdzY29yZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGYuc2NvcmUyID0gb2Yuc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ21pbicgfHwgayA9PT0gJ21heCcgfHwgayA9PT0gJ3NlZ21lbnQnIHx8IGsgPT09ICdfY2FjaGVkU3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmW2tdID0gb2Zba107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIFx0fVxuICAgICAgICB9XG4gICAgXHRtZi5wdXNoKGYpO1xuICAgIH1cbiAgICByZXR1cm4gbWY7XG59XG5cbmZ1bmN0aW9uIE92ZXJsYXlGZWF0dXJlU291cmNlX21lcmdlX2NvbmNhdChmZWF0dXJlU2V0cykge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIGZvciAodmFyIGZzaSA9IDA7IGZzaSA8IGZlYXR1cmVTZXRzLmxlbmd0aDsgKytmc2kpIHtcbiAgICAgICAgdmFyIGZzID0gZmVhdHVyZVNldHNbZnNpXTtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnNvdXJjZXNbZnNpXS5uYW1lO1xuICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZnMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZzW2ZpXTtcbiAgICAgICAgICAgIGYubWV0aG9kID0gbmFtZTtcbiAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIE92ZXJsYXlGZWF0dXJlU291cmNlOiBPdmVybGF5RmVhdHVyZVNvdXJjZVxuICAgIH07XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gYmVkd2lnLmpzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYmluID0gcmVxdWlyZSgnLi9iaW4nKTtcbiAgICB2YXIgVVJMRmV0Y2hhYmxlID0gYmluLlVSTEZldGNoYWJsZTtcbiAgICB2YXIgQmxvYkZldGNoYWJsZSA9IGJpbi5CbG9iRmV0Y2hhYmxlO1xuICAgIHZhciByZWFkSW50ID0gYmluLnJlYWRJbnQ7XG5cbiAgICB2YXIgYmJpID0gcmVxdWlyZSgnLi9iaWd3aWcnKTtcbiAgICB2YXIgQklHX1dJR19NQUdJQyA9IGJiaS5CSUdfV0lHX01BR0lDO1xuICAgIHZhciBCSUdfQkVEX01BR0lDID0gYmJpLkJJR19CRURfTUFHSUM7XG5cbiAgICB2YXIgbGgzdXRpbHMgPSByZXF1aXJlKCcuL2xoM3V0aWxzJyk7XG4gICAgdmFyIHVuYmd6ZiA9IGxoM3V0aWxzLnVuYmd6ZjtcblxuICAgIHZhciBiYW0gPSByZXF1aXJlKCcuL2JhbScpO1xuICAgIHZhciBCQU1fTUFHSUMgPSBiYW0uQkFNX01BR0lDO1xuICAgIHZhciBCQUlfTUFHSUMgPSBiYW0uQkFJX01BR0lDO1xuXG4gICAgdmFyIHRiaSA9IHJlcXVpcmUoJy4vdGFiaXgnKTtcbiAgICB2YXIgVEFCSVhfTUFHSUMgPSB0YmkuVEFCSVhfTUFHSUM7XG59XG5cbmZ1bmN0aW9uIHByb2JlUmVzb3VyY2Uoc291cmNlLCBsaXN0ZW5lciwgcmV0cnkpIHtcbiAgICB2YXIgQkVEX1JFR0VYUCA9IG5ldyBSZWdFeHAoJ14uK1xcdFswLTldK1xcdFswLTldKy4qJCcpO1xuICAgIHZhciBLVl9SRUdFWFA9LyhbXj1dKyk9XFxcIj8oW15cXFwiXSspXFxcIj8vO1xuICAgIHZhciBWQ0ZIRUFEX1JFID0gL14jI1xccypmaWxlZm9ybWF0PVZDRnY0XFwuLisvO1xuXG4gICAgdmFyIGZldGNoYWJsZTtcbiAgICBpZiAoc291cmNlLmJsb2IpXG4gICAgICAgIGZldGNoYWJsZSA9IG5ldyBCbG9iRmV0Y2hhYmxlKHNvdXJjZS5ibG9iKTtcbiAgICBlbHNlIFxuICAgICAgICBmZXRjaGFibGUgPSBuZXcgVVJMRmV0Y2hhYmxlKHNvdXJjZS51cmkpO1xuXG4gICAgZmV0Y2hhYmxlLnNsaWNlKDAsIDE8PDE2KS5zYWx0ZWQoKS5mZXRjaChmdW5jdGlvbihyZXN1bHQsIGVycm9yKSB7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoIXJldHJ5KSB7XG4gICAgICAgICAgICAgICAgc291cmNlLmNyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwcm9iZVJlc291cmNlKHNvdXJjZSwgbGlzdGVuZXIsIHRydWUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcihzb3VyY2UsIFwiQ291bGRuJ3QgZmV0Y2ggZGF0YVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBVaW50MzJBcnJheShyZXN1bHQsIDAsIDEpO1xuICAgICAgICB2YXIgbWFnaWMgPSBsYVswXTtcbiAgICAgICAgaWYgKG1hZ2ljID09IEJJR19XSUdfTUFHSUMgfHwgbWFnaWMgPT0gQklHX0JFRF9NQUdJQykge1xuICAgICAgICAgICAgc291cmNlLnRpZXJfdHlwZSA9ICdid2cnO1xuICAgICAgICAgICAgdmFyIG5hbWVFeHRyYWN0UGF0dGVybiA9IG5ldyBSZWdFeHAoJy8/KFteL10rPykoLmJ3fC5iYnwuYmlnV2lnfC5iaWdCZWQpPyQnKTtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IG5hbWVFeHRyYWN0UGF0dGVybi5leGVjKHNvdXJjZS51cmkgfHwgc291cmNlLmJsb2IubmFtZSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UubmFtZSA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIoc291cmNlLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSBCQUlfTUFHSUMpIHtcbiAgICAgICAgICAgIHNvdXJjZS50aWVyX3R5cGUgPSAnYmFpJztcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcihzb3VyY2UsIG51bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKGJhWzBdID09IDMxIHx8IGJhWzFdID09IDEzOSkge1xuICAgICAgICAgICAgdmFyIHVuYyA9IHVuYmd6ZihyZXN1bHQpO1xuICAgICAgICAgICAgdmFyIHVuY2JhID0gbmV3IFVpbnQ4QXJyYXkodW5jKTtcbiAgICAgICAgICAgIG1hZ2ljID0gcmVhZEludCh1bmNiYSwgMCk7XG4gICAgICAgICAgICBpZiAobWFnaWMgPT0gQkFNX01BR0lDKSB7XG4gICAgICAgICAgICAgICAgc291cmNlLnRpZXJfdHlwZSA9ICdiYW0nO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lRXh0cmFjdFBhdHRlcm4gPSBuZXcgUmVnRXhwKCcvPyhbXi9dKz8pKC5iYW0pPyQnKTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBuYW1lRXh0cmFjdFBhdHRlcm4uZXhlYyhzb3VyY2UudXJpIHx8IHNvdXJjZS5ibG9iLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UubmFtZSA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcihzb3VyY2UsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSBUQUJJWF9NQUdJQykge1xuICAgICAgICAgICAgICAgIHNvdXJjZS50aWVyX3R5cGUgPSAndGFiaXgtaW5kZXgnO1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcihzb3VyY2UsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSAweDY5NjYyMzIzKSB7XG4gICAgICAgICAgICAgICAgc291cmNlLnRpZXJfdHlwZSA9ICd0YWJpeCc7XG4gICAgICAgICAgICAgICAgc291cmNlLnBheWxvYWQgPSAndmNmJztcbiAgICAgICAgICAgICAgICB2YXIgbmFtZUV4dHJhY3RQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnLz8oW14vXSs/KSgudmNmKT8oLmd6KT8kJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmFtZUV4dHJhY3RQYXR0ZXJuLmV4ZWMoc291cmNlLnVyaSB8fCBzb3VyY2UuYmxvYi5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLm5hbWUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIoc291cmNlLCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ21hZ2ljID0gJyArIG1hZ2ljLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIoc291cmNlLCBcIlVuc3VwcG9ydGVkIGZvcm1hdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYSk7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpO1xuXG4gICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMCAmJiBWQ0ZIRUFEX1JFLnRlc3QobGluZXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgc291cmNlLnRpZXJfdHlwZSA9ICdtZW1zdG9yZSc7XG4gICAgICAgICAgICAgICAgc291cmNlLnBheWxvYWQgPSAndmNmJztcbiAgICAgICAgICAgICAgICB2YXIgbmFtZUV4dHJhY3RQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnLz8oW14vXSs/KShcXC52Y2YpPyQnKTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBuYW1lRXh0cmFjdFBhdHRlcm4uZXhlYyhzb3VyY2UudXJpIHx8IHNvdXJjZS5ibG9iLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAhc291cmNlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLm5hbWUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKHNvdXJjZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGxpID0gMDsgbGkgPCBsaW5lcy5sZW5ndGg7ICsrbGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2xpXS5yZXBsYWNlKCdcXHInLCAnJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignYnJvd3NlcicpID09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZigndHJhY2snKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXliZVR5cGUgPSAnYmVkJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva3MgPSBsaW5lLnNwbGl0KC9cXHMvKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdGkgPSAxOyB0aSA8IHRva3MubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IEtWX1JFR0VYUC5leGVjKHRva3NbdGldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1bMV0gPT0gJ3R5cGUnICYmIG1bMl0gPT0gJ3dpZ2dsZV8wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZVR5cGUgPSAnd2lnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobVswXSA9PSAnbmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLm5hbWUgPSBtWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaFByb2JlQmVkV2lnKHNvdXJjZSwgbWF5YmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKHNvdXJjZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignZml4ZWRTdGVwJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hQcm9iZUJlZFdpZyhzb3VyY2UsICd3aWcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKHNvdXJjZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZigndmFyaWFibGVTdGVwJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hQcm9iZUJlZFdpZyhzb3VyY2UsICd3aWcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKHNvdXJjZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKEJFRF9SRUdFWFAudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hQcm9iZUJlZFdpZyhzb3VyY2UsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIoc291cmNlLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKHNvdXJjZSwgXCJVbnN1cHBvcnRlZCBmb3JtYXRcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmluaXNoUHJvYmVCZWRXaWcoc291cmNlLCBtYXliZVR5cGUpIHtcbiAgICBzb3VyY2UudGllcl90eXBlID0gJ21lbXN0b3JlJztcbiAgICB2YXIgbmFtZUV4dHJhY3RQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnLz8oW14vXSs/KSguKGJlZHx3aWcpKT8kJyk7XG4gICAgdmFyIG1hdGNoID0gbmFtZUV4dHJhY3RQYXR0ZXJuLmV4ZWMoc291cmNlLnVyaSB8fCBzb3VyY2UuYmxvYi5uYW1lKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UubmFtZSlcbiAgICAgICAgICAgIHNvdXJjZS5uYW1lID0gbWF0Y2hbMV07XG4gICAgICAgIGlmICghbWF5YmVUeXBlICYmIG1hdGNoWzNdKSB7XG4gICAgICAgICAgICBtYXliZVR5cGUgPSBtYXRjaFszXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2UucGF5bG9hZCA9IG1heWJlVHlwZSB8fCAnYmVkJztcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBwcm9iZVJlc291cmNlOiBwcm9iZVJlc291cmNlXG4gICAgfTtcbn0iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gc2FtcGxlLmpzOiBkb3duc2FtcGxpbmcgb2YgcXVhbnRpdGF0aXZlIGZlYXR1cmVzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgZGFzID0gcmVxdWlyZSgnLi9kYXMnKTtcbiAgICB2YXIgREFTRmVhdHVyZSA9IGRhcy5EQVNGZWF0dXJlO1xufVxuXG52YXIgX19EU19TQ0FMRVMgPSBbMSwgMiwgNV07XG5cbmZ1bmN0aW9uIGRzX3NjYWxlKG4pIHtcbiAgICByZXR1cm4gX19EU19TQ0FMRVNbbiAlIF9fRFNfU0NBTEVTLmxlbmd0aF0gKiBNYXRoLnBvdygxMCwgKG4gLyBfX0RTX1NDQUxFUy5sZW5ndGgpfDApO1xufVxuXG5cbmZ1bmN0aW9uIERTQmluKHNjYWxlLCBtaW4sIG1heCkge1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICB0aGlzLnRvdCA9IDA7XG4gICAgdGhpcy5jbnQgPSAwO1xuICAgIHRoaXMuaGFzU2NvcmUgPSBmYWxzZTtcbiAgICB0aGlzLm1pbiA9IG1pbjsgdGhpcy5tYXggPSBtYXg7XG4gICAgdGhpcy5mZWF0dXJlcyA9IFtdO1xufVxuXG5mdW5jdGlvbiBfZmVhdHVyZU9yZGVyKGEsIGIpIHtcbiAgICBpZiAoYS5taW4gPCBiLm1pbikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChhLm1pbiA+IGIubWluKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoYS5tYXggPCBiLm1heCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChiLm1heCA+IGEubWF4KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuRFNCaW4ucHJvdG90eXBlLnNjb3JlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY250ID09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmhhc1Njb3JlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvdCAvIHRoaXMuY250O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXM7XG4gICAgICAgIGZlYXR1cmVzLnNvcnQoX2ZlYXR1cmVPcmRlcik7XG5cbiAgICAgICAgdmFyIG1heFNlZW4gPSAtMTAwMDAwMDAwMDA7XG4gICAgICAgIHZhciBjb3Y9MCwgbGFwPTA7XG5cbiAgICAgICAgZm9yICh2YXIgZmkgPSAxOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmZWF0dXJlc1tmaV07XG4gICAgICAgICAgICB2YXIgbE1pbiA9IE1hdGgubWF4KGYubWluLCB0aGlzLm1pbik7XG4gICAgICAgICAgICB2YXIgbE1heCA9IE1hdGgubWluKGYubWF4LCB0aGlzLm1heCk7XG4gICAgICAgICAgICBsYXAgKz0gKGxNYXggLSBsTWluICsgMSk7XG5cbiAgICAgICAgICAgIGlmIChsTWluID4gbWF4U2Vlbikge1xuICAgICAgICAgICAgICAgIGNvdiArPSBsTWF4IC0gbE1pbiArIDE7XG4gICAgICAgICAgICAgICAgbWF4U2VlbiA9IGxNYXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsTWF4ID4gbWF4U2Vlbikge1xuICAgICAgICAgICAgICAgICAgICBjb3YgKz0gKGxNYXggLSBtYXhTZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4U2VlbiA9IGxNYXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvdiA+IDApXG4gICAgICAgICAgICByZXR1cm4gKDEuMCAqIGxhcCkgLyBjb3Y7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuRFNCaW4ucHJvdG90eXBlLmZlYXR1cmUgPSBmdW5jdGlvbihmKSB7XG4gICAgaWYgKGYuc2NvcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnRvdCArPSBmLnNjb3JlO1xuICAgICAgICB0aGlzLmhhc1Njb3JlID0gdHJ1ZVxuICAgIH1cblxuICAgICsrdGhpcy5jbnQ7XG4gICAgdGhpcy5mZWF0dXJlcy5wdXNoKGYpO1xufVxuXG5mdW5jdGlvbiBkb3duc2FtcGxlKGZlYXR1cmVzLCB0YXJnZXRSZXopIHtcbiAgICB2YXIgc24gPSAwO1xuICAgIHdoaWxlIChkc19zY2FsZShzbiArIDEpIDwgdGFyZ2V0UmV6KSB7XG4gICAgICAgICsrc247XG4gICAgfVxuICAgIHZhciBzY2FsZSA9IGRzX3NjYWxlKHNuKTtcblxuICAgIHZhciBiaW5Ub3RzID0gW107XG4gICAgdmFyIG1heEJpbiA9IC0xMDAwMDAwMDAwMDtcbiAgICB2YXIgbWluQmluID0gMTAwMDAwMDAwMDA7XG4gICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICB2YXIgZiA9IGZlYXR1cmVzW2ZpXTtcbiAgICAgICAgaWYgKGYuZ3JvdXBzICYmIGYuZ3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIERvbid0IGRvd25zYW1wbGUgY29tcGxleCBmZWF0dXJlcyAoPylcbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5MYXAgPSAoZi5taW4gLyBzY2FsZSl8MDtcbiAgICAgICAgdmFyIG1heExhcCA9IChmLm1heCAvIHNjYWxlKXwwO1xuICAgICAgICBtYXhCaW4gPSBNYXRoLm1heChtYXhCaW4sIG1heExhcCk7XG4gICAgICAgIG1pbkJpbiA9IE1hdGgubWluKG1pbkJpbiwgbWluTGFwKTtcbiAgICAgICAgZm9yICh2YXIgYiA9IG1pbkxhcDsgYiA8PSBtYXhMYXA7ICsrYikge1xuICAgICAgICAgICAgdmFyIGJtID0gYmluVG90c1tiXTtcbiAgICAgICAgICAgIGlmICghYm0pIHtcbiAgICAgICAgICAgICAgICBibSA9IG5ldyBEU0JpbihzY2FsZSwgYiAqIHNjYWxlLCAoYiArIDEpICogc2NhbGUgLSAxKTtcbiAgICAgICAgICAgICAgICBiaW5Ub3RzW2JdID0gYm07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibS5mZWF0dXJlKGYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNhbXBsZWRGZWF0dXJlcyA9IFtdO1xuICAgIGZvciAodmFyIGIgPSBtaW5CaW47IGIgPD0gbWF4QmluOyArK2IpIHtcbiAgICAgICAgdmFyIGJtID0gYmluVG90c1tiXTtcbiAgICAgICAgaWYgKGJtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IG5ldyBEQVNGZWF0dXJlKCk7XG4gICAgICAgICAgICBmLnNlZ21lbnQgPSBmZWF0dXJlc1swXS5zZWdtZW50O1xuICAgICAgICAgICAgZi5taW4gPSAoYiAqIHNjYWxlKSArIDE7XG4gICAgICAgICAgICBmLm1heCA9IChiICsgMSkgKiBzY2FsZTtcbiAgICAgICAgICAgIGYuc2NvcmUgPSBibS5zY29yZSgpO1xuICAgICAgICAgICAgZi50eXBlID0gJ2RlbnNpdHknO1xuICAgICAgICAgICAgc2FtcGxlZEZlYXR1cmVzLnB1c2goZik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWZ0ZXJEUyA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNhbXBsZWRGZWF0dXJlcztcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBkb3duc2FtcGxlOiBkb3duc2FtcGxlXG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTFcbi8vXG4vLyBiaW4uanMgZ2VuZXJhbCBiaW5hcnkgZGF0YSBzdXBwb3J0XG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYnJvd3NlciA9IHJlcXVpcmUoJy4vY2Jyb3dzZXInKTtcbiAgICB2YXIgQnJvd3NlciA9IGJyb3dzZXIuQnJvd3NlcjtcblxuICAgIHZhciBiaW4gPSByZXF1aXJlKCcuL2JpbicpO1xuICAgIHZhciBVUkxGZXRjaGFibGUgPSBiaW4uVVJMRmV0Y2hhYmxlO1xuXG4gICAgdmFyIGNvbm5lY3RUcml4ID0gcmVxdWlyZSgnLi90cml4JykuY29ubmVjdFRyaXg7XG59XG5cbnZhciBSRUdJT05fUEFUVEVSTiA9IC9eKFtcXGQrLFxcdyxcXC4sXFxfLFxcLV0rKTooWzAtOSxcXC5dKz8pKFtLa01tR2ddKT8oKC18XFwuXFwuKSsoWzAtOSxcXC5dKykoW0trTW1HZ10pPyk/JC87XG5cbmZ1bmN0aW9uIHBhcnNlTG9jQ2FyZGluYWwobiwgbSkge1xuICAgIHZhciBpID0gcGFyc2VGbG9hdChuLnJlcGxhY2UoLywvZywgJycpKTtcbiAgICBpZiAobSA9PT0gJ2snIHx8IG0gPT09ICdLJykge1xuICAgICAgICByZXR1cm4gKGkgKiAxMDAwKXwwO1xuICAgIH0gZWxzZSBpZiAobSA9PSAnbScgfHwgbSA9PT0gJ00nKSB7XG4gICAgICAgIHJldHVybiAoaSAqIDEwMDAwMDApfDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl8MDtcbiAgICB9XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uKGcsIHN0YXR1c0NhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgbSA9IFJFR0lPTl9QQVRURVJOLmV4ZWMoZyk7XG5cbiAgICBpZiAobSkge1xuICAgICAgICB2YXIgY2hyID0gbVsxXSwgc3RhcnQsIGVuZDtcbiAgICAgICAgaWYgKG1bNl0pIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gcGFyc2VMb2NDYXJkaW5hbChtWzJdLCAgbVszXSk7XG4gICAgICAgICAgICBlbmQgPSBwYXJzZUxvY0NhcmRpbmFsKG1bNl0sIG1bN10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy52aWV3RW5kIC0gdGhpcy52aWV3U3RhcnQgKyAxO1xuICAgICAgICAgICAgc3RhcnQgPSAocGFyc2VMb2NDYXJkaW5hbChtWzJdLCBtWzNdKSAtICh3aWR0aC8yKSl8MDtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgd2lkdGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TG9jYXRpb24oY2hyLCBzdGFydCwgZW5kLCBzdGF0dXNDYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFnIHx8IGcubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWFyY2hDb3VudCA9IDA7XG4gICAgICAgIHZhciBmb3VuZExhdGNoID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHNlYXJjaENhbGxiYWNrID0gZnVuY3Rpb24oZm91bmQsIGVycikge1xuICAgICAgICAgICAgLS1zZWFyY2hDb3VudDtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBbXTtcbiAgICAgICAgICAgIHZhciBtaW4gPSA1MDAwMDAwMDAsIG1heCA9IC0xMDAwMDAwMDA7XG4gICAgICAgICAgICB2YXIgbmNociA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZm91bmQubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBmb3VuZFtmaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobmNociA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5jaHIgPSBmLnNlZ21lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgZi5taW4pO1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZi5tYXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5jaHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ291bnQgPT0gMCAmJiAhZm91bmRMYXRjaClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1c0NhbGxiYWNrKFwibm8gbWF0Y2ggZm9yICdcIiArIGcgKyBcIidcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvdW5kTGF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXNCLmhpZ2hsaWdodFJlZ2lvbihuY2hyLCBtaW4sIG1heCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IE1hdGgubWF4KDI1MDAsICgwLjMgKiAobWF4IC0gbWluICsgMSkpfDApO1xuICAgICAgICAgICAgICAgIHRoaXNCLnNldExvY2F0aW9uKG5jaHIsIG1pbiAtIHBhZGRpbmcsIG1heCArIHBhZGRpbmcsIHN0YXR1c0NhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkb1RyaXhTZWFyY2ggPSBmdW5jdGlvbih0aWVyLCB0cml4KSB7XG4gICAgICAgICAgICB0cml4Lmxvb2t1cChnLCBmdW5jdGlvbihyZXN1bHQsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCB8fCByZXN1bHQubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGllci5mZWF0dXJlU291cmNlLnNlYXJjaChnLCBzZWFyY2hDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhpdCA9IHJlc3VsdFsxXS5zcGxpdCgnLCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGllci5mZWF0dXJlU291cmNlLnNlYXJjaChoaXQsIHNlYXJjaENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaEVuZHBvaW50KSB7XG4gICAgICAgICAgICBzZWFyY2hDb3VudCA9IDE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0Rhc1NlYXJjaCh0aGlzQi5zZWFyY2hFbmRwb2ludCwgZywgc2VhcmNoQ2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IHRoaXMudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24odGllcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzQi5zb3VyY2VBZGFwdGVySXNDYXBhYmxlKHRpZXIuZmVhdHVyZVNvdXJjZSwgJ3NlYXJjaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aWVyLmRhc1NvdXJjZS50cml4VVJJKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICArK3NlYXJjaENvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpZXIudHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvVHJpeFNlYXJjaCh0aWVyLCB0aWVyLnRyaXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0VHJpeChuZXcgVVJMRmV0Y2hhYmxlKHRpZXIuZGFzU291cmNlLnRyaXhVUkkpLCBuZXcgVVJMRmV0Y2hhYmxlKHRpZXIuZGFzU291cmNlLnRyaXhVUkkgKyAneCcpLCBmdW5jdGlvbih0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpZXIudHJpeCA9IHRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvVHJpeFNlYXJjaCh0aWVyLCB0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrc2VhcmNoQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWVyLmZlYXR1cmVTb3VyY2Uuc2VhcmNoKGcsIHNlYXJjaENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGllci5kYXNTb3VyY2UucHJvdmlkZXNfc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICsrc2VhcmNoQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmRvRGFzU2VhcmNoKHRpZXIuZGFzU291cmNlLCBnLCBzZWFyY2hDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkodGhpcy50aWVyc1t0aV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5kb0Rhc1NlYXJjaCA9IGZ1bmN0aW9uKHNvdXJjZSwgZywgc2VhcmNoQ2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHNvdXJjZS5mZWF0dXJlcyhudWxsLCB7Z3JvdXA6IGcsIHR5cGU6ICd0cmFuc2NyaXB0J30sIGZ1bmN0aW9uKGZvdW5kKSB7XG4gICAgICAgIGlmICghZm91bmQpIGZvdW5kID0gW107XG4gICAgICAgIHZhciBtaW4gPSA1MDAwMDAwMDAsIG1heCA9IC0xMDAwMDAwMDA7XG4gICAgICAgIHZhciBuY2hyID0gbnVsbDtcblxuICAgICAgICB2YXIgZm91bmQyID0gW107XG4gICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBmb3VuZC5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgIHZhciBmID0gZm91bmRbZmldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZi5sYWJlbC50b0xvd2VyQ2FzZSgpICE9IGcudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLmJlY2F1c2UgRGF6emxlIGNhbiByZXR1cm4gc3B1cmlvdXMgb3ZlcmxhcHBpbmcgZmVhdHVyZXMuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3VuZDIucHVzaChmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWFyY2hDYWxsYmFjayhmb3VuZDIpO1xuICAgIH0sIGZhbHNlKTtcbn0iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEyXG4vL1xuLy8gc2VxdWVuY2UtZHJhdy5qczogcmVuZGVyZXJzIGZvciBzZXF1ZW5jZS1yZWxhdGVkIGRhdGFcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgZm9ybWF0TG9uZ0ludCA9IHV0aWxzLmZvcm1hdExvbmdJbnQ7XG4gICAgdmFyIG1ha2VFbGVtZW50TlMgPSB1dGlscy5tYWtlRWxlbWVudE5TO1xuXG4gICAgdmFyIHN2Z3UgPSByZXF1aXJlKCcuL3N2Zy11dGlscycpO1xuICAgIHZhciBOU19TVkcgPSBzdmd1Lk5TX1NWRztcbiAgICB2YXIgTlNfWExJTksgPSBzdmd1Lk5TX1hMSU5LO1xuICAgIHZhciBTVkdQYXRoID0gc3ZndS5TVkdQYXRoO1xuXG4gICAgdmFyIG5mID0gcmVxdWlyZSgnLi9udW1mb3JtYXRzJyk7XG4gICAgdmFyIGZvcm1hdExvbmdJbnQgPSBuZi5mb3JtYXRMb25nSW50O1xufVxuXG52YXIgTUlOX1RJTEUgPSAxMDA7XG52YXIgcnVsZXJUaWxlQ29sb3JzID0gWydibGFjaycsICd3aGl0ZSddO1xuXG52YXIgc3RlcHMgPSBbMSwyLDVdO1xuXG5cbnZhciBOU19TVkcgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG5cbmZ1bmN0aW9uIHRpbGVTaXplRm9yU2NhbGUoc2NhbGUsIG1pbilcbntcbiAgICBpZiAoIW1pbikge1xuICAgICAgICBtaW4gPSBNSU5fVElMRTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cyhwKSB7XG4gICAgICAgIHJldHVybiBzdGVwc1twICUgc3RlcHMubGVuZ3RoXSAqIE1hdGgucG93KDEwLCAocCAvIHN0ZXBzLmxlbmd0aCl8MCk7XG4gICAgfVxuICAgIHZhciBwb3cgPSBzdGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKHNjYWxlICogdHMocG93KSA8IG1pbikge1xuICAgICAgICArK3BvdztcbiAgICB9XG4gICAgcmV0dXJuIHRzKHBvdyk7XG59XG5cbmZ1bmN0aW9uIGRyYXdTZXFUaWVyKHRpZXIsIHNlcSlcbntcblx0dmFyIHJldGluYSA9IHRpZXIuYnJvd3Nlci5yZXRpbmEgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxO1xuICAgIHZhciBzY2FsZSA9IHRpZXIuYnJvd3Nlci5zY2FsZSwga25vd25TdGFydCA9IHRpZXIuYnJvd3Nlci52aWV3U3RhcnQgLSAoMTAwMC9zY2FsZSl8MCwga25vd25FbmQgPSB0aWVyLmJyb3dzZXIudmlld0VuZCArICgyMDAwL3NjYWxlKSwgY3VycmVudFNlcU1heCA9IHRpZXIuYnJvd3Nlci5jdXJyZW50U2VxTWF4O1xuXG5cdHZhciBkZXNpcmVkV2lkdGggPSB0aWVyLmJyb3dzZXIuZmVhdHVyZVBhbmVsV2lkdGggKyAyMDAwO1xuICAgIGlmIChyZXRpbmEpIHtcbiAgICAgICAgZGVzaXJlZFdpZHRoICo9IDI7XG4gICAgfVxuICAgIHZhciBmcHcgPSB0aWVyLnZpZXdwb3J0LndpZHRofDA7IC8vIHRoaXMuYnJvd3Nlci5mZWF0dXJlUGFuZWxXaWR0aDtcbiAgICBpZiAoZnB3IDwgZGVzaXJlZFdpZHRoIC0gNTApIHtcbiAgICAgICAgdGllci52aWV3cG9ydC53aWR0aCA9IGZwdyA9IGRlc2lyZWRXaWR0aDtcbiAgICB9XG5cbiAgICB2YXIgaGVpZ2h0ID0gNTA7XG4gICAgaWYgKHNlcSAmJiBzZXEuc2VxKSB7XG5cdFx0aGVpZ2h0ICs9IDI1O1xuICAgIH1cblxuICAgIHZhciBjYW52YXNIZWlnaHQgPSBoZWlnaHQ7XG4gICAgaWYgKHJldGluYSkgXG4gICAgXHRjYW52YXNIZWlnaHQgKj0gMjtcblxuICAgIHRpZXIudmlld3BvcnQuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuICAgIHRpZXIudmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gJycgKyBoZWlnaHQgKyAncHgnO1xuICAgIHRpZXIudmlld3BvcnQuc3R5bGUud2lkdGggPSByZXRpbmEgPyAoJycgKyAoZnB3LzIpICsgJ3B4JykgOiAoJycgKyBmcHcgKyAncHgnKTtcbiAgICB0aWVyLmxheW91dEhlaWdodCA9IGhlaWdodDtcbiAgICB0aWVyLnVwZGF0ZUhlaWdodCgpO1xuXG4gICAgdmFyIGdjID0gdGllci52aWV3cG9ydC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmICh0aWVyLmJhY2tncm91bmQpIHtcbiAgICAgICAgZ2MuZmlsbFN0eWxlID0gdGllci5iYWNrZ3JvdW5kO1xuICAgICAgICBnYy5maWxsUmVjdCgwLCAwLCBmcHcsIHRpZXIudmlld3BvcnQuaGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKHJldGluYSkge1xuICAgICAgICBnYy5zY2FsZSgyLCAyKTtcbiAgICB9XG4gICAgZ2MudHJhbnNsYXRlKDEwMDAsMCk7XG5cbiAgICB2YXIgc2VxVGllck1heCA9IGtub3duRW5kO1xuICAgIGlmIChjdXJyZW50U2VxTWF4ID4gMCAmJiBjdXJyZW50U2VxTWF4IDwga25vd25FbmQpIHtcbiAgICAgICAgc2VxVGllck1heCA9IGN1cnJlbnRTZXFNYXg7XG4gICAgfVxuICAgIHZhciB0aWxlID0gdGlsZVNpemVGb3JTY2FsZShzY2FsZSk7XG4gICAgdmFyIHBvcyA9IE1hdGgubWF4KDAsICgoa25vd25TdGFydCAvIHRpbGUpfDApICogdGlsZSk7XG4gICAgXG4gICAgdmFyIG9yaWdpbiA9IHRpZXIuYnJvd3Nlci52aWV3U3RhcnQ7XG5cbiAgICB3aGlsZSAocG9zIDw9IHNlcVRpZXJNYXgpIHtcblx0XHRnYy5maWxsU3R5bGUgPSAoKHBvcyAvIHRpbGUpICUgMiA9PSAwKSA/ICd3aGl0ZScgOiAnYmxhY2snO1xuXHRcdGdjLnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcblx0XHRnYy5maWxsUmVjdCgocG9zIC0gb3JpZ2luKSAqIHNjYWxlLFxuXHRcdFx0ICAgIDgsXG5cdFx0XHQgICAgdGlsZSpzY2FsZSxcblx0XHRcdCAgICAzKTtcblx0XHRnYy5zdHJva2VSZWN0KChwb3MgLSBvcmlnaW4pICogc2NhbGUsXG5cdFx0XHQgICAgICA4LFxuXHRcdFx0ICAgICAgdGlsZSpzY2FsZSxcblx0XHRcdCAgICAgIDMpO1xuXG5cdFx0Z2MuZmlsbFN0eWxlID0gJ2JsYWNrJztcblx0XHRnYy5maWxsVGV4dChmb3JtYXRMb25nSW50KHBvcyksICgocG9zIC0gb3JpZ2luKSAqIHNjYWxlKSwgMjIpO1xuXHRcdFxuXG5cdFx0cG9zICs9IHRpbGU7XG4gICAgfVxuXG4gICAgaWYgKHNlcSAmJiBzZXEuc2VxKSB7XG5cdFx0Zm9yICh2YXIgcCA9IGtub3duU3RhcnQ7IHAgPD0ga25vd25FbmQ7ICsrcCkge1xuXHRcdCAgICBpZiAocCA+PSBzZXEuc3RhcnQgJiYgcCA8PSBzZXEuZW5kKSB7XG5cdFx0XHRcdHZhciBiYXNlID0gc2VxLnNlcS5zdWJzdHIocCAtIHNlcS5zdGFydCwgMSkudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0dmFyIGNvbG9yID0gdGllci5icm93c2VyLmJhc2VDb2xvcnNbYmFzZV07XG5cdFx0XHRcdGlmICghY29sb3IpIHtcblx0XHQgICAgICAgICAgICBjb2xvciA9ICdncmF5Jztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdjLmZpbGxTdHlsZSA9IGNvbG9yO1xuXG5cdFx0XHRcdGlmIChzY2FsZSA+PSA4KSB7XG5cdFx0XHRcdCAgICBnYy5maWxsVGV4dChiYXNlLCAocCAtIG9yaWdpbikgKiBzY2FsZSwgNTIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQgICAgZ2MuZmlsbFJlY3QoKHAgLSBvcmlnaW4pICogc2NhbGUsIDQyLCBzY2FsZSwgMTIpOyBcblx0XHRcdFx0fVxuXHRcdCAgICB9XG5cdFx0fVxuICAgIH0gXG5cbiAgICB0aWVyLm5vcmlnaW4gPSB0aWVyLmJyb3dzZXIudmlld1N0YXJ0O1xuICAgIHRpZXIudmlld3BvcnQuc3R5bGUubGVmdCA9ICctMTAwMHB4Jztcbn1cblxuZnVuY3Rpb24gc3ZnU2VxVGllcih0aWVyLCBzZXEpIHtcbiAgICB2YXIgc2NhbGUgPSB0aWVyLmJyb3dzZXIuc2NhbGUsIGtub3duU3RhcnQgPSB0aWVyLmJyb3dzZXIudmlld1N0YXJ0IC0gKDEwMDAvc2NhbGUpfDAsIGtub3duRW5kID0gdGllci5icm93c2VyLnZpZXdFbmQgKyAoMjAwMC9zY2FsZSksIGN1cnJlbnRTZXFNYXggPSB0aWVyLmJyb3dzZXIuY3VycmVudFNlcU1heDtcblxuICAgIHZhciBmcHcgPSB0aWVyLnZpZXdwb3J0LndpZHRofDA7IFxuXG4gICAgdmFyIHNlcVRpZXJNYXggPSBrbm93bkVuZDtcbiAgICBpZiAoY3VycmVudFNlcU1heCA+IDAgJiYgY3VycmVudFNlcU1heCA8IGtub3duRW5kKSB7XG4gICAgICAgIHNlcVRpZXJNYXggPSBjdXJyZW50U2VxTWF4O1xuICAgIH1cbiAgICB2YXIgdGlsZSA9IHRpbGVTaXplRm9yU2NhbGUoc2NhbGUpO1xuICAgIHZhciBwb3MgPSBNYXRoLm1heCgwLCAoKGtub3duU3RhcnQgLyB0aWxlKXwwKSAqIHRpbGUpO1xuICAgIFxuICAgIHZhciBvcmlnaW4gPSB0aWVyLmJyb3dzZXIudmlld1N0YXJ0O1xuXG4gICAgdmFyICBnID0gbWFrZUVsZW1lbnROUyhOU19TVkcsICdnJywgW10sIHtmb250U2l6ZTogJzhwdCd9KTsgXG4gICAgd2hpbGUgKHBvcyA8PSBzZXFUaWVyTWF4KSB7XG4gICAgXHRnLmFwcGVuZENoaWxkKFxuICAgIFx0ICAgIG1ha2VFbGVtZW50TlMoXG4gICAgXHRcdE5TX1NWRywgJ3JlY3QnLFxuICAgIFx0XHRudWxsLFxuICAgIFx0XHR7eDogKHBvcy1vcmlnaW4pKnNjYWxlLFxuICAgIFx0XHQgeTogOCxcbiAgICBcdFx0IHdpZHRoOiB0aWxlKnNjYWxlLFxuICAgIFx0XHQgaGVpZ2h0OiAzLFxuICAgIFx0XHQgZmlsbDogKChwb3MgLyB0aWxlKSAlIDIgPT0gMCkgPyAnd2hpdGUnIDogJ2JsYWNrJyxcbiAgICBcdFx0IHN0cm9rZTogJ2JsYWNrJ30pKTtcblxuICAgIFx0Zy5hcHBlbmRDaGlsZChcbiAgICBcdCAgICBtYWtlRWxlbWVudE5TKFxuICAgIFx0XHROU19TVkcsICd0ZXh0JyxcbiAgICBcdFx0Zm9ybWF0TG9uZ0ludChwb3MpLFxuICAgIFx0XHR7eDogKHBvcy1vcmlnaW4pKnNjYWxlLFxuICAgIFx0XHQgeTogMjgsXG4gICAgXHRcdCBmaWxsOiAnYmxhY2snLCBzdHJva2U6ICdub25lJ30pKTtcbiAgICBcdFxuICAgIFx0cG9zICs9IHRpbGU7XG4gICAgfVxuXG4gICAgaWYgKHNlcSAmJiBzZXEuc2VxKSB7XG4gICAgXHRmb3IgKHZhciBwID0ga25vd25TdGFydDsgcCA8PSBrbm93bkVuZDsgKytwKSB7XG4gICAgXHQgICAgaWYgKHAgPj0gc2VxLnN0YXJ0ICYmIHAgPD0gc2VxLmVuZCkge1xuICAgICAgICBcdFx0dmFyIGJhc2UgPSBzZXEuc2VxLnN1YnN0cihwIC0gc2VxLnN0YXJ0LCAxKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBcdFx0dmFyIGNvbG9yID0gYmFzZUNvbG9yc1tiYXNlXTtcbiAgICAgICAgXHRcdGlmICghY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSAnZ3JheSc7XG4gICAgICAgIFx0XHR9XG5cbiAgICAgICAgXHRcdGlmIChzY2FsZSA+PSA4KSB7XG4gICAgICAgIFx0XHQgICAgZy5hcHBlbmRDaGlsZChcbiAgICAgICAgXHRcdFx0bWFrZUVsZW1lbnROUyhOU19TVkcsICd0ZXh0JywgYmFzZSwge1xuICAgICAgICBcdFx0XHQgICAgeDogKHAtb3JpZ2luKSpzY2FsZSxcbiAgICAgICAgXHRcdFx0ICAgIHk6IDUyLFxuICAgICAgICBcdFx0XHQgICAgZmlsbDogY29sb3J9KSk7XG4gICAgICAgIFx0XHR9IGVsc2Uge1xuICAgICAgICBcdFx0ICAgIGcuYXBwZW5kQ2hpbGQoXG4gICAgICAgIFx0XHRcdG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAncmVjdCcsIG51bGwsIHtcbiAgICAgICAgXHRcdFx0ICAgIHg6IChwIC0gb3JpZ2luKSpzY2FsZSxcbiAgICAgICAgXHRcdFx0ICAgIHk6IDQyLFxuICAgICAgICBcdFx0XHQgICAgd2lkdGg6IHNjYWxlLFxuICAgICAgICBcdFx0XHQgICAgaGVpZ2h0OiAxMixcbiAgICAgICAgXHQgICAgICAgICAgICBmaWxsOiBjb2xvcn0pKTtcblxuICAgICAgICBcdFx0fVxuICAgIFx0ICAgIH1cbiAgICBcdH1cbiAgICB9IFxuXG4gICAgcmV0dXJuIGc7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgZHJhd1NlcVRpZXI6IGRyYXdTZXFUaWVyLFxuICAgICAgICBzdmdTZXFUaWVyOiBzdmdTZXFUaWVyXG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTNcbi8vXG4vLyBzZXNzaW9uLmpzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuICAgIHZhciBzb3VyY2VEYXRhVVJJID0gYnJvd3Nlci5zb3VyY2VEYXRhVVJJO1xuICAgIHZhciBzb3VyY2VzQXJlRXF1YWwgPSBicm93c2VyLnNvdXJjZXNBcmVFcXVhbDtcblxuICAgIHZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi92ZXJzaW9uJyk7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIG1pbmlKU09OaWZ5ID0gdXRpbHMubWluaUpTT05pZnk7XG5cbiAgICB2YXIgc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpO1xuICAgIHZhciBoZXhfc2hhMSA9IHNoYTEuaGV4X3NoYTE7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLm51a2VTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy52aWV3LWNociddO1xuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZpZXctc3RhcnQnXTtcbiAgICBkZWxldGUgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy52aWV3LWVuZCddO1xuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLmN1cnJlbnQtc2VxLWxlbmd0aCddO1xuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnNob3dpbmctYWx0LXpvb20nXTtcbiAgICBkZWxldGUgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5zYXZlZC16b29tJ107XG5cbiAgICBkZWxldGUgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5zb3VyY2VzJ107XG4gICAgZGVsZXRlIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuaHVicyddO1xuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZlcnNpb24nXTtcblxuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnJldmVyc2Utc2Nyb2xsaW5nJ107XG4gICAgZGVsZXRlIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcucmV2ZXJzZS1rZXktc2Nyb2xsaW5nJ107XG4gICAgZGVsZXRlIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcucnVsZXItbG9jYXRpb24nXTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuc3RvcmVTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0b3JlVmlld1N0YXR1cygpO1xuICAgIHRoaXMuc3RvcmVUaWVyU3RhdHVzKCk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLnN0b3JlVmlld1N0YXR1cyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5jb29raWVLZXkgfHwgdGhpcy5ub1BlcnNpc3QgfHwgdGhpcy5ub1BlcnNpc3RWaWV3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZpZXctY2hyJ10gPSB0aGlzLmNocjtcbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZpZXctc3RhcnQnXSA9IHRoaXMudmlld1N0YXJ0fDA7XG4gICAgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy52aWV3LWVuZCddID0gdGhpcy52aWV3RW5kfDBcbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnNob3dpbmctYWx0LXpvb20nXSA9ICcnICsgdGhpcy5pc1NuYXBab29taW5nO1xuICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuc2F2ZWQtem9vbSddID0gdGhpcy5zYXZlZFpvb207XG4gICAgaWYgKHRoaXMuY3VycmVudFNlcU1heCkge1xuXHQgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLmN1cnJlbnQtc2VxLWxlbmd0aCddID0gdGhpcy5jdXJyZW50U2VxTWF4O1xuICAgIH1cbn1cblxuXG5Ccm93c2VyLnByb3RvdHlwZS5zdG9yZVRpZXJTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuY29va2llS2V5IHx8IHRoaXMubm9QZXJzaXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFNvdXJjZUxpc3QgPSBbXTtcbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMudGllcnMubGVuZ3RoOyArK3QpIHtcbiAgICAgICAgdmFyIHR0ID0gdGhpcy50aWVyc1t0XTtcbiAgICAgICAgdmFyIHRzID0gdHQuZGFzU291cmNlO1xuICAgICAgICBpZiAoIXRzLm5vUGVyc2lzdCkge1xuICAgICAgICAgICAgY3VycmVudFNvdXJjZUxpc3QucHVzaCh7c291cmNlOiB0dC5kYXNTb3VyY2UsIGNvbmZpZzogdHQuY29uZmlnIHx8IHt9fSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5zb3VyY2VzJ10gPSBKU09OLnN0cmluZ2lmeShjdXJyZW50U291cmNlTGlzdCk7XG5cblxuICAgIHZhciBjb3ZlcmVkSHViVVJMcyA9IHt9O1xuICAgIHZhciBjdXJyZW50SHViTGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGhpID0gMDsgaGkgPCB0aGlzLmh1Yk9iamVjdHMubGVuZ3RoOyArK2hpKSB7XG4gICAgICAgIHZhciB0ZGIgPSB0aGlzLmh1Yk9iamVjdHNbaGldO1xuICAgICAgICB2YXIgaGMgPSB7dXJsOiB0ZGIuaHViLnVybCwgZ2Vub21lOiB0ZGIuZ2Vub21lfTtcbiAgICAgICAgaWYgKHRkYi5jcmVkZW50aWFscylcbiAgICAgICAgICAgIGhjLmNyZWRlbnRpYWxzID0gdGRiLmNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAodGRiLm1hcHBpbmcpXG4gICAgICAgICAgICBoYy5tYXBwaW5nID0gdGRiLm1hcHBpbmc7XG4gICAgICAgIGNvdmVyZWRIdWJVUkxzW2hjLnVybF0gPSB0cnVlO1xuICAgICAgICBjdXJyZW50SHViTGlzdC5wdXNoKGhjKTtcbiAgICB9XG5cbiAgICAvLyBOZWVkZWQgdG8gaGFuZGxlIGh1YnMgdGhhdCBmYWlsZWQgdG8gY29ubmVjdCwgb3IgaHVicyB0aGF0IGhhdmVuJ3RcbiAgICAvLyBjb25uZWN0ZWQgeWV0IHdoZW4gd2UncmUgY2FsbGVkIHNvb24gYWZ0ZXIgc3RhcnR1cC5cbiAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgdGhpcy5odWJzLmxlbmd0aDsgKytoaSkge1xuICAgICAgICB2YXIgaGMgPSB0aGlzLmh1YnNbaGldO1xuICAgICAgICBpZiAodHlwZW9mIGhjID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIGhjID0ge3VybDogaGN9O1xuICAgICAgICBpZiAoIWNvdmVyZWRIdWJVUkxzW2hjLnVybF0pXG4gICAgICAgICAgICBjdXJyZW50SHViTGlzdC5wdXNoKGhjKTtcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLmh1YnMnXSA9IEpTT04uc3RyaW5naWZ5KGN1cnJlbnRIdWJMaXN0KTtcblxuICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcucmV2ZXJzZS1zY3JvbGxpbmcnXSA9IHRoaXMucmV2ZXJzZVNjcm9sbGluZztcbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnJldmVyc2Uta2V5LXNjcm9sbGluZyddID0gdGhpcy5yZXZlcnNlS2V5U2Nyb2xsaW5nO1xuICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcucnVsZXItbG9jYXRpb24nXSA9IHRoaXMucnVsZXJMb2NhdGlvbjtcblxuICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuZXhwb3J0LXJ1bGVyJ10gPSB0aGlzLmV4cG9ydFJ1bGVyO1xuICAgIGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuZXhwb3J0LWhpZ2hsaWdodHMnXSA9IHRoaXMuZXhwb3J0SGlnaGxpZ2h0cztcbiAgICBcbiAgICBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZlcnNpb24nXSA9IFZFUlNJT04uQ09ORklHO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZXN0b3JlU3RhdHVzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubm9QZXJzaXN0KVxuICAgICAgICByZXR1cm47XG4gICAgXG4gICAgdmFyIHN0b3JlZENvbmZpZ1ZlcnNpb24gPSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZlcnNpb24nXTtcbiAgICBpZiAoc3RvcmVkQ29uZmlnVmVyc2lvbikge1xuICAgICAgICBzdG9yZWRDb25maWdWZXJzaW9uID0gc3RvcmVkQ29uZmlnVmVyc2lvbnwwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3JlZENvbmZpZ1ZlcnNpb24gPSAtMTAwO1xuICAgIH1cbiAgICBpZiAoVkVSU0lPTi5DT05GSUcgIT0gc3RvcmVkQ29uZmlnVmVyc2lvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0b3JlZENvbmZpZ0hhc2ggPSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLmNvbmZpZ0hhc2gnXSB8fCAnJztcbiAgICB2YXIgcGFnZUNvbmZpZ0hhc2ggPSBoZXhfc2hhMShtaW5pSlNPTmlmeSh7c291cmNlczogdGhpcy5zb3VyY2VzLCBodWJzOiB0aGlzLmh1YnN9KSk7XG4gICAgaWYgKHBhZ2VDb25maWdIYXNoICE9IHN0b3JlZENvbmZpZ0hhc2gpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5jb25maWdIYXNoJ10gPSBwYWdlQ29uZmlnSGFzaDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0U291cmNlc0J5VVJJID0ge307XG4gICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHRoaXMuc291cmNlcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlc1tzaV07XG4gICAgICAgIHZhciB1cmkgPSBzb3VyY2VEYXRhVVJJKHNvdXJjZSk7XG4gICAgICAgIHZhciB1bCA9IGRlZmF1bHRTb3VyY2VzQnlVUklbdXJpXTtcbiAgICAgICAgaWYgKCF1bClcbiAgICAgICAgICAgIGRlZmF1bHRTb3VyY2VzQnlVUklbdXJpXSA9IHVsID0gW107XG4gICAgICAgIHVsLnB1c2goc291cmNlKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5vUGVyc2lzdFZpZXcpIHtcbiAgICAgICAgdmFyIHFDaHIgPSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZpZXctY2hyJ107XG4gICAgICAgIHZhciBxTWluID0gbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy52aWV3LXN0YXJ0J118MDtcbiAgICAgICAgdmFyIHFNYXggPSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnZpZXctZW5kJ118MDtcbiAgICAgICAgaWYgKHFDaHIgJiYgcU1pbiAmJiBxTWF4KSB7XG4gICAgICAgIFx0dGhpcy5jaHIgPSBxQ2hyO1xuICAgICAgICBcdHRoaXMudmlld1N0YXJ0ID0gcU1pbjtcbiAgICAgICAgXHR0aGlzLnZpZXdFbmQgPSBxTWF4O1xuICAgICAgICBcdFxuICAgICAgICBcdHZhciBjc20gPSBsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLmN1cnJlbnQtc2VxLWxlbmd0aCddO1xuICAgICAgICBcdGlmIChjc20pIHtcbiAgICAgICAgXHQgICAgdGhpcy5jdXJyZW50U2VxTWF4ID0gY3NtfDA7XG4gICAgICAgIFx0fVxuXG4gICAgICAgICAgICB0aGlzLmlzU25hcFpvb21pbmcgPSAobG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5zaG93aW5nLWFsdC16b29tJ10pID09ICd0cnVlJztcblxuICAgICAgICAgICAgdmFyIHN6ID0gcGFyc2VGbG9hdChsb2NhbFN0b3JhZ2VbJ2RhbGxpYW5jZS4nICsgdGhpcy5jb29raWVLZXkgKyAnLnNhdmVkLXpvb20nXSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN6ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oc3opKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlZFpvb20gPSBzejtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBycyA9IGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcucmV2ZXJzZS1zY3JvbGxpbmcnXTtcbiAgICB0aGlzLnJldmVyc2VTY3JvbGxpbmcgPSAocnMgJiYgcnMgPT0gJ3RydWUnKTtcbiAgICB2YXIgcmtzID0gbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5yZXZlcnNlLWtleS1zY3JvbGxpbmcnXTtcbiAgICB0aGlzLnJldmVyc2VLZXlTY3JvbGxpbmcgPSAocmtzICYmIHJrcyA9PSAndHJ1ZScpO1xuXG4gICAgdmFyIHJsID0gbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5ydWxlci1sb2NhdGlvbiddO1xuICAgIGlmIChybClcbiAgICAgICAgdGhpcy5ydWxlckxvY2F0aW9uID0gcmw7XG5cbiAgICB2YXIgeCA9IGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuZXhwb3J0LXJ1bGVyJ107XG4gICAgaWYgKHgpXG4gICAgICAgIHRoaXMuZXhwb3J0UnVsZXIgPSAoeCA9PT0gJ3RydWUnKTtcbiAgICB2YXIgeCA9IGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuZXhwb3J0LWhpZ2hsaWdodHMnXTtcbiAgICBpZiAoeClcbiAgICAgICAgdGhpcy5leHBvcnRIaWdobGlnaHRzID0gKHggPT09ICd0cnVlJyk7XG5cbiAgICB2YXIgc291cmNlU3RyID0gbG9jYWxTdG9yYWdlWydkYWxsaWFuY2UuJyArIHRoaXMuY29va2llS2V5ICsgJy5zb3VyY2VzJ107XG4gICAgaWYgKHNvdXJjZVN0cikge1xuXHQgICAgdmFyIHN0b3JlZFNvdXJjZXMgPSBKU09OLnBhcnNlKHNvdXJjZVN0cik7XG4gICAgICAgIHRoaXMuc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLnJlc3RvcmVkQ29uZmlncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc3RvcmVkU291cmNlcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZXNbc2ldID0gc3RvcmVkU291cmNlc1tzaV0uc291cmNlO1xuICAgICAgICAgICAgdGhpcy5yZXN0b3JlZENvbmZpZ3Nbc2ldID0gc3RvcmVkU291cmNlc1tzaV0uY29uZmlnO1xuICAgICAgICAgICAgdmFyIHVyaSA9IHNvdXJjZURhdGFVUkkoc291cmNlKTtcbiAgICAgICAgICAgIHZhciB1bCA9IGRlZmF1bHRTb3VyY2VzQnlVUklbdXJpXSB8fCBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIG9zaSA9IDA7IG9zaSA8IHVsLmxlbmd0aDsgKytvc2kpIHsgICAgXG4gICAgICAgICAgICAgICAgdmFyIG9sZFNvdXJjZSA9IHVsW29zaV07XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNBcmVFcXVhbChzb3VyY2UsIG9sZFNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFNvdXJjZS5mZWF0dXJlSW5mb1BsdWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmZlYXR1cmVJbmZvUGx1Z2luID0gb2xkU291cmNlLmZlYXR1cmVJbmZvUGx1Z2luO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGh1YlN0ciA9IGxvY2FsU3RvcmFnZVsnZGFsbGlhbmNlLicgKyB0aGlzLmNvb2tpZUtleSArICcuaHVicyddO1xuICAgIGlmIChodWJTdHIpIHtcbiAgICAgICAgdGhpcy5odWJzID0gSlNPTi5wYXJzZShodWJTdHIpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLnRpZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgdGhpcy5yZW1vdmVUaWVyKHtpbmRleDogaX0sIHRydWUpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGVmYXVsdFNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmRlZmF1bHRTb3VyY2VzW2ldO1xuICAgICAgICBpZiAoIXMuZGlzYWJsZWQpIFxuICAgICAgICAgICAgdGhpcy5hZGRUaWVyKHRoaXMuZGVmYXVsdFNvdXJjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuaGlnaGxpZ2h0cy5zcGxpY2UoMCwgdGhpcy5oaWdobGlnaHRzLmxlbmd0aCk7XG5cbiAgICB0aGlzLnNldExvY2F0aW9uKHRoaXMuZGVmYXVsdENociwgdGhpcy5kZWZhdWx0U3RhcnQsIHRoaXMuZGVmYXVsdEVuZCk7XG59IiwiLypcclxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkXHJcbiAqIGluIEZJUFMgMTgwLTFcclxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXHJcbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcclxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXHJcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxyXG4gKi9cclxuXHJcbiBcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qXHJcbiAqIENvbmZpZ3VyYWJsZSB2YXJpYWJsZXMuIFlvdSBtYXkgbmVlZCB0byB0d2VhayB0aGVzZSB0byBiZSBjb21wYXRpYmxlIHdpdGhcclxuICogdGhlIHNlcnZlci1zaWRlLCBidXQgdGhlIGRlZmF1bHRzIHdvcmsgaW4gbW9zdCBjYXNlcy5cclxuICovXHJcbnZhciBoZXhjYXNlID0gMDsgIC8qIGhleCBvdXRwdXQgZm9ybWF0LiAwIC0gbG93ZXJjYXNlOyAxIC0gdXBwZXJjYXNlICAgICAgICAqL1xyXG52YXIgYjY0cGFkICA9IFwiXCI7IC8qIGJhc2UtNjQgcGFkIGNoYXJhY3Rlci4gXCI9XCIgZm9yIHN0cmljdCBSRkMgY29tcGxpYW5jZSAgICovXHJcblxyXG4vKlxyXG4gKiBUaGVzZSBhcmUgdGhlIGZ1bmN0aW9ucyB5b3UnbGwgdXN1YWxseSB3YW50IHRvIGNhbGxcclxuICogVGhleSB0YWtlIHN0cmluZyBhcmd1bWVudHMgYW5kIHJldHVybiBlaXRoZXIgaGV4IG9yIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmdzXHJcbiAqL1xyXG5mdW5jdGlvbiBoZXhfc2hhMShzKSAgICB7IHJldHVybiByc3RyMmhleChyc3RyX3NoYTEoc3RyMnJzdHJfdXRmOChzKSkpOyB9XHJcbmZ1bmN0aW9uIGI2NF9zaGExKHMpICAgIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfc2hhMShzdHIycnN0cl91dGY4KHMpKSk7IH1cclxuZnVuY3Rpb24gYW55X3NoYTEocywgZSkgeyByZXR1cm4gcnN0cjJhbnkocnN0cl9zaGExKHN0cjJyc3RyX3V0ZjgocykpLCBlKTsgfVxyXG5mdW5jdGlvbiBoZXhfaG1hY19zaGExKGssIGQpXHJcbiAgeyByZXR1cm4gcnN0cjJoZXgocnN0cl9obWFjX3NoYTEoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSkpOyB9XHJcbmZ1bmN0aW9uIGI2NF9obWFjX3NoYTEoaywgZClcclxuICB7IHJldHVybiByc3RyMmI2NChyc3RyX2htYWNfc2hhMShzdHIycnN0cl91dGY4KGspLCBzdHIycnN0cl91dGY4KGQpKSk7IH1cclxuZnVuY3Rpb24gYW55X2htYWNfc2hhMShrLCBkLCBlKVxyXG4gIHsgcmV0dXJuIHJzdHIyYW55KHJzdHJfaG1hY19zaGExKHN0cjJyc3RyX3V0ZjgoayksIHN0cjJyc3RyX3V0ZjgoZCkpLCBlKTsgfVxyXG5cclxuLypcclxuICogUGVyZm9ybSBhIHNpbXBsZSBzZWxmLXRlc3QgdG8gc2VlIGlmIHRoZSBWTSBpcyB3b3JraW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGExX3ZtX3Rlc3QoKVxyXG57XHJcbiAgcmV0dXJuIGhleF9zaGExKFwiYWJjXCIpLnRvTG93ZXJDYXNlKCkgPT0gXCJhOTk5M2UzNjQ3MDY4MTZhYmEzZTI1NzE3ODUwYzI2YzljZDBkODlkXCI7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENhbGN1bGF0ZSB0aGUgU0hBMSBvZiBhIHJhdyBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIHJzdHJfc2hhMShzKVxyXG57XHJcbiAgcmV0dXJuIGJpbmIycnN0cihiaW5iX3NoYTEocnN0cjJiaW5iKHMpLCBzLmxlbmd0aCAqIDgpKTtcclxufVxyXG5cclxuLypcclxuICogQ2FsY3VsYXRlIHRoZSBITUFDLVNIQTEgb2YgYSBrZXkgYW5kIHNvbWUgZGF0YSAocmF3IHN0cmluZ3MpXHJcbiAqL1xyXG5mdW5jdGlvbiByc3RyX2htYWNfc2hhMShrZXksIGRhdGEpXHJcbntcclxuICB2YXIgYmtleSA9IHJzdHIyYmluYihrZXkpO1xyXG4gIGlmKGJrZXkubGVuZ3RoID4gMTYpIGJrZXkgPSBiaW5iX3NoYTEoYmtleSwga2V5Lmxlbmd0aCAqIDgpO1xyXG5cclxuICB2YXIgaXBhZCA9IEFycmF5KDE2KSwgb3BhZCA9IEFycmF5KDE2KTtcclxuICBmb3IodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcclxuICB7XHJcbiAgICBpcGFkW2ldID0gYmtleVtpXSBeIDB4MzYzNjM2MzY7XHJcbiAgICBvcGFkW2ldID0gYmtleVtpXSBeIDB4NUM1QzVDNUM7XHJcbiAgfVxyXG5cclxuICB2YXIgaGFzaCA9IGJpbmJfc2hhMShpcGFkLmNvbmNhdChyc3RyMmJpbmIoZGF0YSkpLCA1MTIgKyBkYXRhLmxlbmd0aCAqIDgpO1xyXG4gIHJldHVybiBiaW5iMnJzdHIoYmluYl9zaGExKG9wYWQuY29uY2F0KGhhc2gpLCA1MTIgKyAxNjApKTtcclxufVxyXG5cclxuLypcclxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBoZXggc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiByc3RyMmhleChpbnB1dClcclxue1xyXG4gIC8vIHRyeSB7IGhleGNhc2UgfSBjYXRjaChlKSB7IGhleGNhc2U9MDsgfVxyXG4gIHZhciBoZXhfdGFiID0gaGV4Y2FzZSA/IFwiMDEyMzQ1Njc4OUFCQ0RFRlwiIDogXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgdmFyIHg7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKVxyXG4gIHtcclxuICAgIHggPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgb3V0cHV0ICs9IGhleF90YWIuY2hhckF0KCh4ID4+PiA0KSAmIDB4MEYpXHJcbiAgICAgICAgICAgKyAgaGV4X3RhYi5jaGFyQXQoIHggICAgICAgICYgMHgwRik7XHJcbiAgfVxyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGEgYmFzZS02NCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIHJzdHIyYjY0KGlucHV0KVxyXG57XHJcbiAgLy8gdHJ5IHsgYjY0cGFkIH0gY2F0Y2goZSkgeyBiNjRwYWQ9Jyc7IH1cclxuICB2YXIgdGFiID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgdmFyIGxlbiA9IGlucHV0Lmxlbmd0aDtcclxuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpXHJcbiAge1xyXG4gICAgdmFyIHRyaXBsZXQgPSAoaW5wdXQuY2hhckNvZGVBdChpKSA8PCAxNilcclxuICAgICAgICAgICAgICAgIHwgKGkgKyAxIDwgbGVuID8gaW5wdXQuY2hhckNvZGVBdChpKzEpIDw8IDggOiAwKVxyXG4gICAgICAgICAgICAgICAgfCAoaSArIDIgPCBsZW4gPyBpbnB1dC5jaGFyQ29kZUF0KGkrMikgICAgICA6IDApO1xyXG4gICAgZm9yKHZhciBqID0gMDsgaiA8IDQ7IGorKylcclxuICAgIHtcclxuICAgICAgaWYoaSAqIDggKyBqICogNiA+IGlucHV0Lmxlbmd0aCAqIDgpIG91dHB1dCArPSBiNjRwYWQ7XHJcbiAgICAgIGVsc2Ugb3V0cHV0ICs9IHRhYi5jaGFyQXQoKHRyaXBsZXQgPj4+IDYqKDMtaikpICYgMHgzRik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGFuIGFyYml0cmFyeSBzdHJpbmcgZW5jb2RpbmdcclxuICovXHJcbmZ1bmN0aW9uIHJzdHIyYW55KGlucHV0LCBlbmNvZGluZylcclxue1xyXG4gIHZhciBkaXZpc29yID0gZW5jb2RpbmcubGVuZ3RoO1xyXG4gIHZhciByZW1haW5kZXJzID0gQXJyYXkoKTtcclxuICB2YXIgaSwgcSwgeCwgcXVvdGllbnQ7XHJcblxyXG4gIC8qIENvbnZlcnQgdG8gYW4gYXJyYXkgb2YgMTYtYml0IGJpZy1lbmRpYW4gdmFsdWVzLCBmb3JtaW5nIHRoZSBkaXZpZGVuZCAqL1xyXG4gIHZhciBkaXZpZGVuZCA9IEFycmF5KE1hdGguY2VpbChpbnB1dC5sZW5ndGggLyAyKSk7XHJcbiAgZm9yKGkgPSAwOyBpIDwgZGl2aWRlbmQubGVuZ3RoOyBpKyspXHJcbiAge1xyXG4gICAgZGl2aWRlbmRbaV0gPSAoaW5wdXQuY2hhckNvZGVBdChpICogMikgPDwgOCkgfCBpbnB1dC5jaGFyQ29kZUF0KGkgKiAyICsgMSk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIFJlcGVhdGVkbHkgcGVyZm9ybSBhIGxvbmcgZGl2aXNpb24uIFRoZSBiaW5hcnkgYXJyYXkgZm9ybXMgdGhlIGRpdmlkZW5kLFxyXG4gICAqIHRoZSBsZW5ndGggb2YgdGhlIGVuY29kaW5nIGlzIHRoZSBkaXZpc29yLiBPbmNlIGNvbXB1dGVkLCB0aGUgcXVvdGllbnRcclxuICAgKiBmb3JtcyB0aGUgZGl2aWRlbmQgZm9yIHRoZSBuZXh0IHN0ZXAuIFdlIHN0b3Agd2hlbiB0aGUgZGl2aWRlbmQgaXMgemVyby5cclxuICAgKiBBbGwgcmVtYWluZGVycyBhcmUgc3RvcmVkIGZvciBsYXRlciB1c2UuXHJcbiAgICovXHJcbiAgd2hpbGUoZGl2aWRlbmQubGVuZ3RoID4gMClcclxuICB7XHJcbiAgICBxdW90aWVudCA9IEFycmF5KCk7XHJcbiAgICB4ID0gMDtcclxuICAgIGZvcihpID0gMDsgaSA8IGRpdmlkZW5kLmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICB4ID0gKHggPDwgMTYpICsgZGl2aWRlbmRbaV07XHJcbiAgICAgIHEgPSBNYXRoLmZsb29yKHggLyBkaXZpc29yKTtcclxuICAgICAgeCAtPSBxICogZGl2aXNvcjtcclxuICAgICAgaWYocXVvdGllbnQubGVuZ3RoID4gMCB8fCBxID4gMClcclxuICAgICAgICBxdW90aWVudFtxdW90aWVudC5sZW5ndGhdID0gcTtcclxuICAgIH1cclxuICAgIHJlbWFpbmRlcnNbcmVtYWluZGVycy5sZW5ndGhdID0geDtcclxuICAgIGRpdmlkZW5kID0gcXVvdGllbnQ7XHJcbiAgfVxyXG5cclxuICAvKiBDb252ZXJ0IHRoZSByZW1haW5kZXJzIHRvIHRoZSBvdXRwdXQgc3RyaW5nICovXHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgZm9yKGkgPSByZW1haW5kZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxyXG4gICAgb3V0cHV0ICs9IGVuY29kaW5nLmNoYXJBdChyZW1haW5kZXJzW2ldKTtcclxuXHJcbiAgLyogQXBwZW5kIGxlYWRpbmcgemVybyBlcXVpdmFsZW50cyAqL1xyXG4gIHZhciBmdWxsX2xlbmd0aCA9IE1hdGguY2VpbChpbnB1dC5sZW5ndGggKiA4IC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGgubG9nKGVuY29kaW5nLmxlbmd0aCkgLyBNYXRoLmxvZygyKSkpXHJcbiAgZm9yKGkgPSBvdXRwdXQubGVuZ3RoOyBpIDwgZnVsbF9sZW5ndGg7IGkrKylcclxuICAgIG91dHB1dCA9IGVuY29kaW5nWzBdICsgb3V0cHV0O1xyXG5cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBFbmNvZGUgYSBzdHJpbmcgYXMgdXRmLTguXHJcbiAqIEZvciBlZmZpY2llbmN5LCB0aGlzIGFzc3VtZXMgdGhlIGlucHV0IGlzIHZhbGlkIHV0Zi0xNi5cclxuICovXHJcbmZ1bmN0aW9uIHN0cjJyc3RyX3V0ZjgoaW5wdXQpXHJcbntcclxuICB2YXIgb3V0cHV0ID0gXCJcIjtcclxuICB2YXIgaSA9IC0xO1xyXG4gIHZhciB4LCB5O1xyXG5cclxuICB3aGlsZSgrK2kgPCBpbnB1dC5sZW5ndGgpXHJcbiAge1xyXG4gICAgLyogRGVjb2RlIHV0Zi0xNiBzdXJyb2dhdGUgcGFpcnMgKi9cclxuICAgIHggPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgeSA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoID8gaW5wdXQuY2hhckNvZGVBdChpICsgMSkgOiAwO1xyXG4gICAgaWYoMHhEODAwIDw9IHggJiYgeCA8PSAweERCRkYgJiYgMHhEQzAwIDw9IHkgJiYgeSA8PSAweERGRkYpXHJcbiAgICB7XHJcbiAgICAgIHggPSAweDEwMDAwICsgKCh4ICYgMHgwM0ZGKSA8PCAxMCkgKyAoeSAmIDB4MDNGRik7XHJcbiAgICAgIGkrKztcclxuICAgIH1cclxuXHJcbiAgICAvKiBFbmNvZGUgb3V0cHV0IGFzIHV0Zi04ICovXHJcbiAgICBpZih4IDw9IDB4N0YpXHJcbiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpO1xyXG4gICAgZWxzZSBpZih4IDw9IDB4N0ZGKVxyXG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEMwIHwgKCh4ID4+PiA2ICkgJiAweDFGKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICggeCAgICAgICAgICYgMHgzRikpO1xyXG4gICAgZWxzZSBpZih4IDw9IDB4RkZGRilcclxuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoeCA+Pj4gMTIpICYgMHgwRiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKHggPj4+IDYgKSAmIDB4M0YpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCB4ICAgICAgICAgJiAweDNGKSk7XHJcbiAgICBlbHNlIGlmKHggPD0gMHgxRkZGRkYpXHJcbiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RjAgfCAoKHggPj4+IDE4KSAmIDB4MDcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCh4ID4+PiAxMikgJiAweDNGKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoeCA+Pj4gNiApICYgMHgzRiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTtcclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLypcclxuICogRW5jb2RlIGEgc3RyaW5nIGFzIHV0Zi0xNlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyMnJzdHJfdXRmMTZsZShpbnB1dClcclxue1xyXG4gIHZhciBvdXRwdXQgPSBcIlwiO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKylcclxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBpbnB1dC5jaGFyQ29kZUF0KGkpICAgICAgICAmIDB4RkYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaW5wdXQuY2hhckNvZGVBdChpKSA+Pj4gOCkgJiAweEZGKTtcclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdHIycnN0cl91dGYxNmJlKGlucHV0KVxyXG57XHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKVxyXG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGlucHV0LmNoYXJDb2RlQXQoaSkgPj4+IDgpICYgMHhGRixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGFyQ29kZUF0KGkpICAgICAgICAmIDB4RkYpO1xyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENvbnZlcnQgYSByYXcgc3RyaW5nIHRvIGFuIGFycmF5IG9mIGJpZy1lbmRpYW4gd29yZHNcclxuICogQ2hhcmFjdGVycyA+MjU1IGhhdmUgdGhlaXIgaGlnaC1ieXRlIHNpbGVudGx5IGlnbm9yZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiByc3RyMmJpbmIoaW5wdXQpXHJcbntcclxuICB2YXIgb3V0cHV0ID0gQXJyYXkoaW5wdXQubGVuZ3RoID4+IDIpO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBvdXRwdXQubGVuZ3RoOyBpKyspXHJcbiAgICBvdXRwdXRbaV0gPSAwO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGggKiA4OyBpICs9IDgpXHJcbiAgICBvdXRwdXRbaT4+NV0gfD0gKGlucHV0LmNoYXJDb2RlQXQoaSAvIDgpICYgMHhGRikgPDwgKDI0IC0gaSAlIDMyKTtcclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBDb252ZXJ0IGFuIGFycmF5IG9mIGJpZy1lbmRpYW4gd29yZHMgdG8gYSBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGJpbmIycnN0cihpbnB1dClcclxue1xyXG4gIHZhciBvdXRwdXQgPSBcIlwiO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGggKiAzMjsgaSArPSA4KVxyXG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGlucHV0W2k+PjVdID4+PiAoMjQgLSBpICUgMzIpKSAmIDB4RkYpO1xyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENhbGN1bGF0ZSB0aGUgU0hBLTEgb2YgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aFxyXG4gKi9cclxuZnVuY3Rpb24gYmluYl9zaGExKHgsIGxlbilcclxue1xyXG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXHJcbiAgeFtsZW4gPj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBsZW4gJSAzMik7XHJcbiAgeFsoKGxlbiArIDY0ID4+IDkpIDw8IDQpICsgMTVdID0gbGVuO1xyXG5cclxuICB2YXIgdyA9IEFycmF5KDgwKTtcclxuICB2YXIgYSA9ICAxNzMyNTg0MTkzO1xyXG4gIHZhciBiID0gLTI3MTczMzg3OTtcclxuICB2YXIgYyA9IC0xNzMyNTg0MTk0O1xyXG4gIHZhciBkID0gIDI3MTczMzg3ODtcclxuICB2YXIgZSA9IC0xMDA5NTg5Nzc2O1xyXG5cclxuICBmb3IodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpXHJcbiAge1xyXG4gICAgdmFyIG9sZGEgPSBhO1xyXG4gICAgdmFyIG9sZGIgPSBiO1xyXG4gICAgdmFyIG9sZGMgPSBjO1xyXG4gICAgdmFyIG9sZGQgPSBkO1xyXG4gICAgdmFyIG9sZGUgPSBlO1xyXG5cclxuICAgIGZvcih2YXIgaiA9IDA7IGogPCA4MDsgaisrKVxyXG4gICAge1xyXG4gICAgICBpZihqIDwgMTYpIHdbal0gPSB4W2kgKyBqXTtcclxuICAgICAgZWxzZSB3W2pdID0gYml0X3JvbCh3W2otM10gXiB3W2otOF0gXiB3W2otMTRdIF4gd1tqLTE2XSwgMSk7XHJcbiAgICAgIHZhciB0ID0gc2FmZV9hZGQoc2FmZV9hZGQoYml0X3JvbChhLCA1KSwgc2hhMV9mdChqLCBiLCBjLCBkKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9hZGQoc2FmZV9hZGQoZSwgd1tqXSksIHNoYTFfa3QoaikpKTtcclxuICAgICAgZSA9IGQ7XHJcbiAgICAgIGQgPSBjO1xyXG4gICAgICBjID0gYml0X3JvbChiLCAzMCk7XHJcbiAgICAgIGIgPSBhO1xyXG4gICAgICBhID0gdDtcclxuICAgIH1cclxuXHJcbiAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7XHJcbiAgICBiID0gc2FmZV9hZGQoYiwgb2xkYik7XHJcbiAgICBjID0gc2FmZV9hZGQoYywgb2xkYyk7XHJcbiAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7XHJcbiAgICBlID0gc2FmZV9hZGQoZSwgb2xkZSk7XHJcbiAgfVxyXG4gIHJldHVybiBBcnJheShhLCBiLCBjLCBkLCBlKTtcclxuXHJcbn1cclxuXHJcbi8qXHJcbiAqIFBlcmZvcm0gdGhlIGFwcHJvcHJpYXRlIHRyaXBsZXQgY29tYmluYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBjdXJyZW50XHJcbiAqIGl0ZXJhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gc2hhMV9mdCh0LCBiLCBjLCBkKVxyXG57XHJcbiAgaWYodCA8IDIwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZCk7XHJcbiAgaWYodCA8IDQwKSByZXR1cm4gYiBeIGMgXiBkO1xyXG4gIGlmKHQgPCA2MCkgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKTtcclxuICByZXR1cm4gYiBeIGMgXiBkO1xyXG59XHJcblxyXG4vKlxyXG4gKiBEZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIGFkZGl0aXZlIGNvbnN0YW50IGZvciB0aGUgY3VycmVudCBpdGVyYXRpb25cclxuICovXHJcbmZ1bmN0aW9uIHNoYTFfa3QodClcclxue1xyXG4gIHJldHVybiAodCA8IDIwKSA/ICAxNTE4NTAwMjQ5IDogKHQgPCA0MCkgPyAgMTg1OTc3NTM5MyA6XHJcbiAgICAgICAgICh0IDwgNjApID8gLTE4OTQwMDc1ODggOiAtODk5NDk3NTE0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XHJcbiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzYWZlX2FkZCh4LCB5KVxyXG57XHJcbiAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKTtcclxuICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkgPj4gMTYpICsgKGxzdyA+PiAxNik7XHJcbiAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxzdyAmIDB4RkZGRik7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cclxuICovXHJcbmZ1bmN0aW9uIGJpdF9yb2wobnVtLCBjbnQpXHJcbntcclxuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XHJcbn1cclxuXHJcbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGI2NF9zaGExOiBiNjRfc2hhMSxcclxuICAgIGhleF9zaGExOiBoZXhfc2hhMVxyXG4gIH1cclxufVxyXG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEzXG4vL1xuLy8gc291cmNlYWRhcHRlcnMuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuXG4gICAgdmFyIHRpZXIgPSByZXF1aXJlKCcuL3RpZXInKTtcbiAgICB2YXIgRGFzVGllciA9IHRpZXIuRGFzVGllcjtcblxuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuICAgIHZhciBBd2FpdGVkID0gdXRpbHMuQXdhaXRlZDtcbiAgICB2YXIgYXJyYXlJbmRleE9mID0gdXRpbHMuYXJyYXlJbmRleE9mO1xuXG4gICAgdmFyIGRhcyA9IHJlcXVpcmUoJy4vZGFzJyk7XG4gICAgdmFyIERBU1N0eWxlc2hlZXQgPSBkYXMuREFTU3R5bGVzaGVldDtcbiAgICB2YXIgREFTU3R5bGUgPSBkYXMuREFTU3R5bGU7XG4gICAgdmFyIERBU1NvdXJjZSA9IGRhcy5EQVNTb3VyY2U7XG4gICAgdmFyIERBU1NlZ21lbnQgPSBkYXMuREFTU2VnbWVudDtcbiAgICB2YXIgREFTRmVhdHVyZSA9IGRhcy5EQVNGZWF0dXJlO1xuICAgIHZhciBEQVNTZXF1ZW5jZSA9IGRhcy5EQVNTZXF1ZW5jZTtcblxuICAgIHZhciBiaW4gPSByZXF1aXJlKCcuL2JpbicpO1xuICAgIHZhciBVUkxGZXRjaGFibGUgPSBiaW4uVVJMRmV0Y2hhYmxlO1xuICAgIHZhciBCbG9iRmV0Y2hhYmxlID0gYmluLkJsb2JGZXRjaGFibGU7XG5cbiAgICB2YXIgdHdvQml0ID0gcmVxdWlyZSgnLi90d29CaXQnKTtcbiAgICB2YXIgbWFrZVR3b0JpdCA9IHR3b0JpdC5tYWtlVHdvQml0O1xuXG4gICAgdmFyIGJiaSA9IHJlcXVpcmUoJy4vYmlnd2lnJyk7XG4gICAgdmFyIG1ha2VCd2cgPSBiYmkubWFrZUJ3ZztcblxuICAgIHZhciBiYW0gPSByZXF1aXJlKCcuL2JhbScpO1xuICAgIHZhciBtYWtlQmFtID0gYmFtLm1ha2VCYW07XG4gICAgdmFyIEJhbUZsYWdzID0gYmFtLkJhbUZsYWdzO1xuXG4gICAgdmFyIHNwYW5zID0gcmVxdWlyZSgnLi9zcGFucycpO1xuICAgIHZhciBSYW5nZSA9IHNwYW5zLlJhbmdlO1xuXG4gICAgdmFyIHBhcnNlQ2lnYXIgPSByZXF1aXJlKCcuL2NpZ2FyJykucGFyc2VDaWdhcjtcblxuICAgIHZhciBPdmVybGF5RmVhdHVyZVNvdXJjZSA9IHJlcXVpcmUoJy4vb3ZlcmxheScpLk92ZXJsYXlGZWF0dXJlU291cmNlO1xuXG4gICAgdmFyIEpCcm93c2VTdG9yZSA9IHJlcXVpcmUoJy4vamJqc29uJykuSkJyb3dzZVN0b3JlO1xufVxuXG52YXIgX19kYWxsaWFuY2Vfc291cmNlQWRhcHRlckZhY3RvcmllcyA9IHt9O1xuXG5mdW5jdGlvbiBkYWxsaWFuY2VfcmVnaXN0ZXJTb3VyY2VBZGFwdGVyRmFjdG9yeSh0eXBlLCBmYWN0b3J5KSB7XG4gICAgX19kYWxsaWFuY2Vfc291cmNlQWRhcHRlckZhY3Rvcmllc1t0eXBlXSA9IGZhY3Rvcnk7XG59O1xuXG5cbnZhciBfX2RhbGxpYW5jZV9wYXJzZXJGYWN0b3JpZXMgPSB7fTtcblxuZnVuY3Rpb24gZGFsbGlhbmNlX3JlZ2lzdGVyUGFyc2VyRmFjdG9yeSh0eXBlLCBmYWN0b3J5KSB7XG4gICAgX19kYWxsaWFuY2VfcGFyc2VyRmFjdG9yaWVzW3R5cGVdID0gZmFjdG9yeTtcbn07XG5cbmZ1bmN0aW9uIGRhbGxpYW5jZV9tYWtlUGFyc2VyKHR5cGUpIHtcbiAgICBpZiAoX19kYWxsaWFuY2VfcGFyc2VyRmFjdG9yaWVzW3R5cGVdKSB7XG4gICAgICAgIHJldHVybiBfX2RhbGxpYW5jZV9wYXJzZXJGYWN0b3JpZXNbdHlwZV0odHlwZSk7XG4gICAgfVxufTtcblxuXG5EYXNUaWVyLnByb3RvdHlwZS5pbml0U291cmNlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGlzVGllciA9IHRoaXM7XG4gICAgdmFyIGZzID0gbmV3IER1bW15RmVhdHVyZVNvdXJjZSgpLCBzcztcblxuICAgIGlmICh0aGlzLmRhc1NvdXJjZS50aWVyX3R5cGUgPT0gJ3NlcXVlbmNlJykge1xuICAgICAgICBpZiAodGhpcy5kYXNTb3VyY2UudHdvQml0VVJJKSB7XG4gICAgICAgICAgICBzcyA9IG5ldyBUd29CaXRTZXF1ZW5jZVNvdXJjZSh0aGlzLmRhc1NvdXJjZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcyA9IG5ldyBEQVNTZXF1ZW5jZVNvdXJjZSh0aGlzLmRhc1NvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmcyA9IHRoaXMuYnJvd3Nlci5jcmVhdGVGZWF0dXJlU291cmNlKHRoaXMuZGFzU291cmNlKTtcbiAgICB9XG5cbiAgICB0aGlzLmZlYXR1cmVTb3VyY2UgPSBmcztcbiAgICB0aGlzLnNlcXVlbmNlU291cmNlID0gc3M7XG5cbiAgICBpZiAodGhpcy5mZWF0dXJlU291cmNlICYmIHRoaXMuZmVhdHVyZVNvdXJjZS5hZGRDaGFuZ2VMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmZlYXR1cmVTb3VyY2UuYWRkQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzVGllci5icm93c2VyLnJlZnJlc2hUaWVyKHRoaXNUaWVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5jcmVhdGVGZWF0dXJlU291cmNlID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgdmFyIGZzID0gdGhpcy5zb3VyY2VDYWNoZS5nZXQoY29uZmlnKTtcbiAgICBpZiAoZnMpIHtcbiAgICAgICAgcmV0dXJuIGZzO1xuICAgIH1cblxuICAgIGlmIChjb25maWcudGllcl90eXBlICYmIF9fZGFsbGlhbmNlX3NvdXJjZUFkYXB0ZXJGYWN0b3JpZXNbY29uZmlnLnRpZXJfdHlwZV0pIHtcbiAgICAgICAgdmFyIHNhZiA9IF9fZGFsbGlhbmNlX3NvdXJjZUFkYXB0ZXJGYWN0b3JpZXNbY29uZmlnLnRpZXJfdHlwZV07XG4gICAgICAgIGZzID0gc2FmKGNvbmZpZykuZmVhdHVyZXM7XG4gICAgfSBlbHNlIGlmIChjb25maWcuYndnVVJJIHx8IGNvbmZpZy5id2dCbG9iKSB7XG4gICAgICAgIHZhciB3b3JrZXIgPSB0aGlzLmdldFdvcmtlcigpO1xuICAgICAgICBpZiAod29ya2VyKVxuICAgICAgICAgICAgZnMgPSBuZXcgUmVtb3RlQldHRmVhdHVyZVNvdXJjZShjb25maWcsIHdvcmtlcik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZzID0gbmV3IEJXR0ZlYXR1cmVTb3VyY2UoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5iYW1VUkkgfHwgY29uZmlnLmJhbUJsb2IpIHtcbiAgICAgICAgdmFyIHdvcmtlciA9IHRoaXMuZ2V0V29ya2VyKCk7XG4gICAgICAgIGlmICh3b3JrZXIpXG4gICAgICAgICAgICBmcyA9IG5ldyBSZW1vdGVCQU1GZWF0dXJlU291cmNlKGNvbmZpZywgd29ya2VyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZnMgPSBuZXcgQkFNRmVhdHVyZVNvdXJjZShjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLmpiVVJJKSB7XG4gICAgICAgIGZzID0gbmV3IEpCcm93c2VGZWF0dXJlU291cmNlKGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChjb25maWcudXJpIHx8IGNvbmZpZy5mZWF0dXJlc191cmkpIHtcbiAgICAgICAgZnMgPSBuZXcgREFTRmVhdHVyZVNvdXJjZShjb25maWcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcub3ZlcmxheSkge1xuICAgICAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgICAgICBpZiAoZnMpXG4gICAgICAgICAgICBzb3VyY2VzLnB1c2gobmV3IENhY2hpbmdGZWF0dXJlU291cmNlKGZzKSk7XG5cbiAgICAgICAgZm9yICh2YXIgb2kgPSAwOyBvaSA8IGNvbmZpZy5vdmVybGF5Lmxlbmd0aDsgKytvaSkge1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuY3JlYXRlRmVhdHVyZVNvdXJjZShjb25maWcub3ZlcmxheVtvaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBmcyA9IG5ldyBPdmVybGF5RmVhdHVyZVNvdXJjZShzb3VyY2VzLCBjb25maWcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcubWFwcGluZykge1xuICAgICAgICBmcyA9IG5ldyBNYXBwZWRGZWF0dXJlU291cmNlKGZzLCB0aGlzLmNoYWluc1tjb25maWcubWFwcGluZ10pO1xuICAgIH1cblxuICAgIGlmIChjb25maWcubmFtZSAmJiAhZnMubmFtZSkge1xuICAgICAgICBmcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGZzICE9IG51bGwpIHtcbiAgICAgICAgZnMgPSBuZXcgQ2FjaGluZ0ZlYXR1cmVTb3VyY2UoZnMpO1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlLnB1dChjb25maWcsIGZzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZzO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5mZXRjaFN0eWxlc2hlZXQgPSBmdW5jdGlvbihjYikge1xuICAgIHZhciBzc1NvdXJjZTtcbiAgICBpZiAodGhpcy5kYXNTb3VyY2Uuc3R5bGVzaGVldF91cmkpIHtcbiAgICAgICAgc3NTb3VyY2UgPSBuZXcgREFTRmVhdHVyZVNvdXJjZSh0aGlzLmRhc1NvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3NTb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpO1xuICAgIH1cbiAgICBcbiAgICBzc1NvdXJjZS5nZXRTdHlsZVNoZWV0KGNiKTtcbn1cblxudmFyIF9fY2ZzX2lkX3NlZWQgPSAwO1xuXG5mdW5jdGlvbiBDYWNoaW5nRmVhdHVyZVNvdXJjZShzb3VyY2UpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5jZnNpZCA9ICdjZnMnICsgKCsrX19jZnNfaWRfc2VlZCk7XG4gICAgaWYgKHNvdXJjZS5uYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuICAgIH1cbiAgICBpZiAoc291cmNlLmFkZENoYW5nZUxpc3RlbmVyKSB7XG4gICAgICAgIHNvdXJjZS5hZGRDaGFuZ2VMaXN0ZW5lcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXNCLmNmc2lkID0gJ2NmcycgKyAoKytfX2Nmc19pZF9zZWVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuYWRkUmVhZGluZXNzTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnNvdXJjZS5hZGRSZWFkaW5lc3NMaXN0ZW5lcilcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmFkZFJlYWRpbmVzc0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBlbHNlXG4gICAgICAgIGxpc3RlbmVyKG51bGwpO1xufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24ocXVlcnksIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuc291cmNlLnNlYXJjaClcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnNlYXJjaChxdWVyeSwgY2FsbGJhY2spO1xufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0RGVmYXVsdEZJUHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLnNvdXJjZS5nZXREZWZhdWx0RklQcylcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmdldERlZmF1bHRGSVBzKGNhbGxiYWNrKTsgXG59XG5cbkNhY2hpbmdGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXRTdHlsZVNoZWV0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLnNvdXJjZS5nZXRTdHlsZVNoZWV0KGNhbGxiYWNrKTtcbn1cblxuQ2FjaGluZ0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFNjYWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5nZXRTY2FsZXMoKTtcbn1cblxuQ2FjaGluZ0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmFkZEFjdGl2aXR5TGlzdGVuZXIgPSBmdW5jdGlvbihsKSB7XG4gICAgaWYgKHRoaXMuc291cmNlLmFkZEFjdGl2aXR5TGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UuYWRkQWN0aXZpdHlMaXN0ZW5lcihsKTtcbiAgICB9XG59XG5cbkNhY2hpbmdGZWF0dXJlU291cmNlLnByb3RvdHlwZS5hZGRDaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uKGwpIHtcbiAgICBpZiAodGhpcy5zb3VyY2UuYWRkQ2hhbmdlTGlzdGVuZXIpXG4gICAgICAgIHRoaXMuc291cmNlLmFkZENoYW5nZUxpc3RlbmVyKGwpO1xufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmluZE5leHRGZWF0dXJlID0gZnVuY3Rpb24oY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnNvdXJjZS5maW5kTmV4dEZlYXR1cmUoY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spO1xufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUucXVhbnRGaW5kTmV4dEZlYXR1cmUgPSBmdW5jdGlvbihjaHIsIHBvcywgZGlyLCB0aHJlc2hvbGQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zb3VyY2UucXVhbnRGaW5kTmV4dEZlYXR1cmUoY2hyLCBwb3MsIGRpciwgdGhyZXNob2xkLCBjYWxsYmFjayk7XG59XG5cbkNhY2hpbmdGZWF0dXJlU291cmNlLnByb3RvdHlwZS5jYXBhYmlsaXRpZXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zb3VyY2UuY2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5jYXBhYmlsaXRpZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuXG5DYWNoaW5nRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHBvb2wgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyAncG9vbCBpcyBudWxsLi4uJztcbiAgICB9XG5cbiAgICB2YXIgYXdhaXRlZEZlYXR1cmVzID0gcG9vbC5hd2FpdGVkRmVhdHVyZXNbdGhpcy5jZnNpZF07XG4gICAgaWYgKCFhd2FpdGVkRmVhdHVyZXMpIHtcbiAgICAgICAgdmFyIGF3YWl0ZWRGZWF0dXJlcyA9IG5ldyBBd2FpdGVkKCk7XG4gICAgICAgIHBvb2wuYXdhaXRlZEZlYXR1cmVzW3RoaXMuY2ZzaWRdID0gYXdhaXRlZEZlYXR1cmVzO1xuICAgICAgICB0aGlzLnNvdXJjZS5mZXRjaChjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGZ1bmN0aW9uKHN0YXR1cywgZmVhdHVyZXMsIHNjYWxlLCBjb3ZlcmFnZSkge1xuICAgICAgICAgICAgaWYgKCFhd2FpdGVkRmVhdHVyZXMucmVzKVxuICAgICAgICAgICAgICAgIGF3YWl0ZWRGZWF0dXJlcy5wcm92aWRlKHtzdGF0dXM6IHN0YXR1cywgZmVhdHVyZXM6IGZlYXR1cmVzLCBzY2FsZTogc2NhbGUsIGNvdmVyYWdlOiBjb3ZlcmFnZX0pO1xuICAgICAgICB9KTtcbiAgICB9IFxuXG4gICAgYXdhaXRlZEZlYXR1cmVzLmF3YWl0KGZ1bmN0aW9uKGFmKSB7XG4gICAgICAgIGNhbGxiYWNrKGFmLnN0YXR1cywgYWYuZmVhdHVyZXMsIGFmLnNjYWxlLCBhZi5jb3ZlcmFnZSk7XG4gICAgfSk7XG59XG4gICAgXG5mdW5jdGlvbiBGZWF0dXJlU291cmNlQmFzZSgpIHtcbiAgICB0aGlzLmJ1c3kgPSAwO1xuICAgIHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnJlYWRpbmVzc0xpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMucmVhZGluZXNzID0gbnVsbDtcbn1cblxuRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlLmFkZFJlYWRpbmVzc0xpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICB0aGlzLnJlYWRpbmVzc0xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYWRpbmVzcyk7XG59XG5cbkZlYXR1cmVTb3VyY2VCYXNlLnByb3RvdHlwZS5ub3RpZnlSZWFkaW5lc3MgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgdGhpcy5yZWFkaW5lc3NMaXN0ZW5lcnMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRpbmVzc0xpc3RlbmVyc1tsaV0odGhpcy5yZWFkaW5lc3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlLmFkZEFjdGl2aXR5TGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgIHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG59XG5cbkZlYXR1cmVTb3VyY2VCYXNlLnByb3RvdHlwZS5ub3RpZnlBY3Rpdml0eSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGxpID0gMDsgbGkgPCB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzLmxlbmd0aDsgKytsaSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eUxpc3RlbmVyc1tsaV0odGhpcy5idXN5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkZlYXR1cmVTb3VyY2VCYXNlLnByb3RvdHlwZS5nZXRTY2FsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbn1cblxuRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgc2NhbGUsIHR5cGVzLCBwb29sLCBjbnQpIHtcbiAgICByZXR1cm4gY250KG51bGwsIFtdLCAxMDAwMDAwMDAwKTtcbn1cblxuRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlLmdldFN0eWxlU2hlZXQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBzdHlsZXNoZWV0ID0gbmV3IERBU1N0eWxlc2hlZXQoKTtcbiAgICB2YXIgZGVmU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICBkZWZTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgIGRlZlN0eWxlLkJHQ09MT1IgPSAnYmx1ZSc7XG4gICAgZGVmU3R5bGUuRkdDT0xPUiA9ICdibGFjayc7XG4gICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdkZWZhdWx0J30sIG51bGwsIGRlZlN0eWxlKTtcbiAgICByZXR1cm4gY2FsbGJhY2soc3R5bGVzaGVldCk7XG59XG5cblxuXG5mdW5jdGlvbiBEQVNGZWF0dXJlU291cmNlKGRhc1NvdXJjZSkge1xuICAgIHRoaXMuZGFzU291cmNlID0gbmV3IERBU1NvdXJjZShkYXNTb3VyY2UpO1xuICAgIHRoaXMuYnVzeSA9IDA7XG4gICAgdGhpcy5hY3Rpdml0eUxpc3RlbmVycyA9IFtdO1xufVxuXG5EQVNGZWF0dXJlU291cmNlLnByb3RvdHlwZS5hZGRBY3Rpdml0eUxpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xufVxuXG5EQVNGZWF0dXJlU291cmNlLnByb3RvdHlwZS5ub3RpZnlBY3Rpdml0eSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGxpID0gMDsgbGkgPCB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzLmxlbmd0aDsgKytsaSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eUxpc3RlbmVyc1tsaV0odGhpcy5idXN5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkRBU0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFN0eWxlU2hlZXQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHRoaXMuZGFzU291cmNlLnN0eWxlc2hlZXQoZnVuY3Rpb24oc3R5bGVzaGVldCkge1xuXHRjYWxsYmFjayhzdHlsZXNoZWV0KTtcbiAgICB9LCBmdW5jdGlvbigpIHtcblx0Y2FsbGJhY2sobnVsbCwgXCJDb3VsZG4ndCBmZXRjaCBEQVMgc3R5bGVzaGVldFwiKTtcbiAgICB9KTtcbn1cblxuREFTRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVzICYmIHR5cGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFtdLCBzY2FsZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZGFzU291cmNlLnVyaSAmJiAhdGhpcy5kYXNTb3VyY2UuZmVhdHVyZXNfdXJpKSB7XG4gICAgICAgIC8vIEZJWE1FIHNob3VsZCB0aGlzIGJlIG1ha2luZyBhbiBlcnJvciBjYWxsYmFjaz8/P1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGFzU291cmNlLmRhc1N0YXRpY0ZlYXR1cmVzICYmIHRoaXMuY2FjaGVkU3RhdGljRmVhdHVyZXMpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHRoaXMuY2FjaGVkU3RhdGljRmVhdHVyZXMsIHRoaXMuY2FjaGVkU3RhdGljU2NhbGUpO1xuICAgIH1cblxuICAgIHZhciB0cnlNYXhCaW5zID0gKHRoaXMuZGFzU291cmNlLm1heGJpbnMgIT09IGZhbHNlKTtcbiAgICB2YXIgZm9wcyA9IHtcbiAgICAgICAgdHlwZTogdHlwZXNcbiAgICB9O1xuICAgIGlmICh0cnlNYXhCaW5zKSB7XG4gICAgICAgIGZvcHMubWF4YmlucyA9IDEgKyAoKChtYXggLSBtaW4pIC8gc2NhbGUpIHwgMCk7XG4gICAgfVxuICAgIFxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpc0IuYnVzeSsrO1xuICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG5cbiAgICB0aGlzLmRhc1NvdXJjZS5mZWF0dXJlcyhcbiAgICAgICAgbmV3IERBU1NlZ21lbnQoY2hyLCBtaW4sIG1heCksXG4gICAgICAgIGZvcHMsXG4gICAgICAgIGZ1bmN0aW9uKGZlYXR1cmVzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgICAgICAgICAgdmFyIHJldFNjYWxlID0gc2NhbGU7XG4gICAgICAgICAgICBpZiAoIXRyeU1heEJpbnMpIHtcbiAgICAgICAgICAgICAgICByZXRTY2FsZSA9IDAuMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RhdHVzICYmIHRoaXNCLmRhc1NvdXJjZS5kYXNTdGF0aWNGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIHRoaXNCLmNhY2hlZFN0YXRpY0ZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgdGhpc0IuY2FjaGVkU3RhdGljU2NhbGUgPSByZXRTY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKHN0YXR1cywgZmVhdHVyZXMsIHJldFNjYWxlKTtcbiAgICAgICAgfVxuICAgICk7XG59XG5cbkRBU0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmZpbmROZXh0RmVhdHVyZSA9IHRoaXMuc291cmNlRmluZE5leHRGZWF0dXJlID0gZnVuY3Rpb24oY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5kYXNTb3VyY2UuY2FwYWJpbGl0aWVzICYmIGFycmF5SW5kZXhPZih0aGlzLmRhc1NvdXJjZS5jYXBhYmlsaXRpZXMsICdkYXMxOmFkamFjZW50LWZlYXR1cmUnKSA+PSAwKSB7XG4gICAgICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmRhc0FkakxvY2spIHtcbiAgICAgICAgICAgIHJldHVybiBkbG9nKCdBbHJlYWR5IGxvb2tpbmcgZm9yIGEgbmV4dCBmZWF0dXJlLCBiZSBwYXRpZW50IScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGFzQWRqTG9jayA9IHRydWU7XG4gICAgICAgIHZhciBmb3BzID0ge1xuICAgICAgICAgICAgYWRqYWNlbnQ6IGNociArICc6JyArIChwb3N8MCkgKyAnOicgKyAoZGlyID4gMCA/ICdGJyA6ICdCJylcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZXMgPSB0aGlzVGllci5nZXREZXNpcmVkVHlwZXModGhpc1RpZXIuYnJvd3Nlci5zY2FsZSk7XG4gICAgICAgIGlmICh0eXBlcykge1xuICAgICAgICAgICAgZm9wcy50eXBlcyA9IHR5cGVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNUaWVyLmRhc1NvdXJjZS5mZWF0dXJlcyhudWxsLCBmb3BzLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIHRoaXNCLmRhc0FkakxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMCAmJiByZXNbMF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRsb2coJ0RBUyBhZGphY2VudCBzZWVtcyB0byBiZSB3b3JraW5nLi4uJyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gREFTU2VxdWVuY2VTb3VyY2UoZGFzU291cmNlKSB7XG4gICAgdGhpcy5kYXNTb3VyY2UgPSBuZXcgREFTU291cmNlKGRhc1NvdXJjZSk7XG4gICAgdGhpcy5hd2FpdGVkRW50cnlQb2ludHMgPSBuZXcgQXdhaXRlZCgpO1xuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmRhc1NvdXJjZS5lbnRyeVBvaW50cyhcbiAgICAgICAgZnVuY3Rpb24oZXApIHtcbiAgICAgICAgICAgIHRoaXNCLmF3YWl0ZWRFbnRyeVBvaW50cy5wcm92aWRlKGVwKTtcbiAgICAgICAgfSk7XG59XG5cblxuREFTU2VxdWVuY2VTb3VyY2UucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgcG9vbCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmRhc1NvdXJjZS5zZXF1ZW5jZShcbiAgICAgICAgbmV3IERBU1NlZ21lbnQoY2hyLCBtaW4sIG1heCksXG4gICAgICAgIGZ1bmN0aW9uKHNlcXMpIHtcbiAgICAgICAgICAgIGlmIChzZXFzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHNlcXNbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soXCJEaWRuJ3QgZ2V0IHNlcXVlbmNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcbn1cblxuREFTU2VxdWVuY2VTb3VyY2UucHJvdG90eXBlLmdldFNlcUluZm8gPSBmdW5jdGlvbihjaHIsIGNudCkge1xuICAgIHRoaXMuYXdhaXRlZEVudHJ5UG9pbnRzLmF3YWl0KGZ1bmN0aW9uKGVwKSB7XG4gICAgICAgIGZvciAodmFyIGVwaSA9IDA7IGVwaSA8IGVwLmxlbmd0aDsgKytlcGkpIHtcbiAgICAgICAgICAgIGlmIChlcFtlcGldLm5hbWUgPT0gY2hyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNudCh7bGVuZ3RoOiBlcFtlcGldLmVuZH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbnQoKTtcbiAgICB9KTtcbn1cbiAgICBcblxuZnVuY3Rpb24gVHdvQml0U2VxdWVuY2VTb3VyY2Uoc291cmNlKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLnR3b0JpdCA9IG5ldyBBd2FpdGVkKCk7XG4gICAgbWFrZVR3b0JpdChuZXcgVVJMRmV0Y2hhYmxlKHNvdXJjZS50d29CaXRVUkkpLCBmdW5jdGlvbih0YiwgZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBkbG9nKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNCLnR3b0JpdC5wcm92aWRlKHRiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5Ud29CaXRTZXF1ZW5jZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBwb29sLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnR3b0JpdC5hd2FpdChmdW5jdGlvbih0Yikge1xuICAgICAgICAgICAgdGIuZmV0Y2goY2hyLCBtaW4sIG1heCxcbiAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHNlcSwgZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxdWVuY2UgPSBuZXcgREFTU2VxdWVuY2UoY2hyLCBtaW4sIG1heCwgJ0ROQScsIHNlcSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBzZXF1ZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG59XG5cblR3b0JpdFNlcXVlbmNlU291cmNlLnByb3RvdHlwZS5nZXRTZXFJbmZvID0gZnVuY3Rpb24oY2hyLCBjbnQpIHtcbiAgICB0aGlzLnR3b0JpdC5hd2FpdChmdW5jdGlvbih0Yikge1xuICAgICAgICB2YXIgc2VxID0gdGIuZ2V0U2VxKGNocik7XG4gICAgICAgIGlmIChzZXEpIHtcbiAgICAgICAgICAgIHRiLmdldFNlcShjaHIpLmxlbmd0aChmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICAgICAgY250KHtsZW5ndGg6IGx9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY250KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuREFTRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U2NhbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtdO1xufVxuXG52YXIgYndnX3ByZWZsaWdodHMgPSB7fTtcblxuZnVuY3Rpb24gQldHRmVhdHVyZVNvdXJjZShid2dTb3VyY2UpIHtcbiAgICBGZWF0dXJlU291cmNlQmFzZS5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLnJlYWRpbmVzcyA9ICdDb25uZWN0aW5nJztcbiAgICB0aGlzLmJ3Z1NvdXJjZSA9IHRoaXMub3B0cyA9IGJ3Z1NvdXJjZTsgICAgXG4gICAgdGhpc0IuYndnSG9sZGVyID0gbmV3IEF3YWl0ZWQoKTtcblxuICAgIGlmICh0aGlzLm9wdHMucHJlZmxpZ2h0KSB7XG4gICAgICAgIHZhciBwZnMgPSBid2dfcHJlZmxpZ2h0c1t0aGlzLm9wdHMucHJlZmxpZ2h0XTtcbiAgICAgICAgaWYgKCFwZnMpIHtcbiAgICAgICAgICAgIHBmcyA9IG5ldyBBd2FpdGVkKCk7XG4gICAgICAgICAgICBid2dfcHJlZmxpZ2h0c1t0aGlzLm9wdHMucHJlZmxpZ2h0XSA9IHBmcztcblxuICAgICAgICAgICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGZzLnByb3ZpZGUoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBmcy5wcm92aWRlKCdmYWlsdXJlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxLm9wZW4oJ2dldCcsIHRoaXMub3B0cy5wcmVmbGlnaHQgKyAnPycgKyBoZXhfc2hhMSgnc2FsdCcgKyBEYXRlLm5vdygpKSwgdHJ1ZSk7ICAgIC8vIEluc3RlYWQsIGVuc3VyZSB3ZSBhbHdheXMgcHJlZmxpZ2h0IGEgdW5pcXVlIFVSSS5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICByZXEud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcS5zZW5kKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBwZnMuYXdhaXQoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICB0aGlzQi5pbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNCLmluaXQoKTtcbiAgICB9XG59XG5cbkJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShGZWF0dXJlU291cmNlQmFzZS5wcm90b3R5cGUpO1xuXG5CV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgYXJnO1xuICAgIGlmICh0aGlzLmJ3Z1NvdXJjZS5id2dVUkkpIHtcbiAgICAgICAgYXJnID0gbmV3IFVSTEZldGNoYWJsZSh0aGlzLmJ3Z1NvdXJjZS5id2dVUkksIHtjcmVkZW50aWFsczogdGhpcy5vcHRzLmNyZWRlbnRpYWxzfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gbmV3IEJsb2JGZXRjaGFibGUodGhpcy5id2dTb3VyY2UuYndnQmxvYik7XG4gICAgfVxuXG4gICAgbWFrZUJ3ZyhhcmcsIGZ1bmN0aW9uKGJ3ZywgZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXNCLmVycm9yID0gZXJyO1xuICAgICAgICAgICAgdGhpc0IucmVhZGluZXNzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeVJlYWRpbmVzcygpO1xuICAgICAgICAgICAgdGhpc0IuYndnSG9sZGVyLnByb3ZpZGUobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzQi5id2dIb2xkZXIucHJvdmlkZShid2cpO1xuICAgICAgICAgICAgdGhpc0IucmVhZGluZXNzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeVJlYWRpbmVzcygpO1xuICAgICAgICAgICAgaWYgKGJ3Zy50eXBlID09ICdiaWdiZWQnKSB7XG4gICAgICAgICAgICAgICAgYndnLmdldEV4dHJhSW5kaWNlcyhmdW5jdGlvbihlaSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5leHRyYUluZGljZXMgPSBlaTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5CV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5jYXBhYmlsaXRpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FwcyA9IHtsZWFwOiB0cnVlfTtcbiAgICBpZiAodGhpcy5id2dIb2xkZXIucmVzICYmIHRoaXMuYndnSG9sZGVyLnJlcy50eXBlID09ICdiaWd3aWcnKVxuICAgICAgICBjYXBzLnF1YW50TGVhcCA9IHRydWU7XG4gICAgaWYgKHRoaXMuZXh0cmFJbmRpY2VzICYmIHRoaXMuZXh0cmFJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2Fwcy5zZWFyY2ggPSBbXTtcbiAgICAgICAgZm9yICh2YXIgZWlpID0gMDsgZWlpIDwgdGhpcy5leHRyYUluZGljZXMubGVuZ3RoOyArK2VpaSkge1xuICAgICAgICAgICAgY2Fwcy5zZWFyY2gucHVzaCh0aGlzLmV4dHJhSW5kaWNlc1tlaWldLmZpZWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2Fwcztcbn1cblxuQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmJ3Z0hvbGRlci5hd2FpdChmdW5jdGlvbihid2cpIHtcbiAgICAgICAgaWYgKGJ3ZyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpc0IuZXJyb3IgfHwgXCJDYW4ndCBhY2Nlc3MgYmluYXJ5IGZpbGVcIiwgbnVsbCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkbG9nKCdid2c6ICcgKyBid2cubmFtZSArICc7IHdhbnQgc2NhbGU6ICcgKyBzY2FsZSk7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICAvLyBkbG9nKG1pbmlKU09OaWZ5KHR5cGVzKSk7XG4gICAgICAgIHZhciB3YW50RGVuc2l0eSA9ICF0eXBlcyB8fCB0eXBlcy5sZW5ndGggPT0gMCB8fCBhcnJheUluZGV4T2YodHlwZXMsICdkZW5zaXR5JykgPj0gMDtcbi8qICAgICAgICBpZiAod2FudERlbnNpdHkpIHtcbiAgICAgICAgICAgIGRsb2coJ3dhbnQgZGVuc2l0eTsgc2NhbGU9JyArIHNjYWxlKTtcbiAgICAgICAgfSAqL1xuICAgICAgICBpZiAodGhpc0Iub3B0cy5jbGllbnRCaW4pIHtcbiAgICAgICAgICAgIHdhbnREZW5zaXR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ3Zy50eXBlID09ICdiaWd3aWcnIHx8IHdhbnREZW5zaXR5IHx8ICh0eXBlb2YgdGhpc0Iub3B0cy5mb3JjZVJlZHVjdGlvbiAhPT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICB2YXIgem9vbSA9IC0xO1xuICAgICAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBid2cuem9vbUxldmVscy5sZW5ndGg7ICsreikge1xuICAgICAgICAgICAgICAgIGlmIChid2cuem9vbUxldmVsc1t6XS5yZWR1Y3Rpb24gPD0gc2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgem9vbSA9IHo7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzQi5vcHRzLmZvcmNlUmVkdWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHpvb20gPSB0aGlzQi5vcHRzLmZvcmNlUmVkdWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAvLyBkbG9nKCdzZWxlY3RlZCB6b29tOiAnICsgem9vbSk7XG4gICAgICAgICAgICBpZiAoem9vbSA8IDApIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYndnLmdldFVuem9vbWVkVmlldygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYndnLmdldFpvb21lZFZpZXcoem9vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gYndnLmdldFVuem9vbWVkVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzQi5idXN5Kys7XG4gICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG4gICAgICAgIGRhdGEucmVhZFdpZ0RhdGEoY2hyLCBtaW4sIG1heCwgZnVuY3Rpb24oZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXNCLmJ1c3ktLTtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG5cbiAgICAgICAgICAgIHZhciBmcyA9IDEwMDAwMDAwMDA7XG4gICAgICAgICAgICBpZiAoYndnLnR5cGUgPT09ICdiaWd3aWcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzID0gKG1heCAtIG1pbikgLyBmZWF0dXJlcy5sZW5ndGggLyAyO1xuICAgICAgICAgICAgICAgIGlmIChpcyA8IGZzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzID0gaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXNCLm9wdHMubGluaykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBmZWF0dXJlcy5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmZWF0dXJlc1tmaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChmLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmLmxpbmtzID0gW25ldyBEQVNMaW5rKCdMaW5rJywgdGhpc0Iub3B0cy5saW5rLnJlcGxhY2UoL1xcJFxcJC8sIGYubGFiZWwpKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBmZWF0dXJlcywgZnMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUucXVhbnRGaW5kTmV4dEZlYXR1cmUgPSBmdW5jdGlvbihjaHIsIHBvcywgZGlyLCB0aHJlc2hvbGQsIGNhbGxiYWNrKSB7XG4gICAgLy8gdmFyIGJlZm9yZVFGTkYgPSBEYXRlLm5vdygpfDA7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzQi5idXN5Kys7XG4gICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICB0aGlzLmJ3Z0hvbGRlci5yZXMudGhyZXNob2xkU2VhcmNoKGNociwgcG9zLCBkaXIsIHRocmVzaG9sZCwgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICB0aGlzQi5idXN5LS07XG4gICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG4gICAgICAgIC8vIHZhciBhZnRlclFGTkYgPSBEYXRlLm5vdygpfDA7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdRRk5GIHRvb2sgJyArIChhZnRlclFGTkYgLSBiZWZvcmVRRk5GKSArICdtcycpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soYSwgYik7XG4gICAgfSk7XG59XG5cbkJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmZpbmROZXh0RmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzQi5idXN5Kys7XG4gICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICB0aGlzLmJ3Z0hvbGRlci5yZXMuZ2V0VW56b29tZWRWaWV3KCkuZ2V0Rmlyc3RBZGphY2VudChjaHIsIHBvcywgZGlyLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDAgJiYgcmVzWzBdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJlc1swXSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U2NhbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJ3ZyA9IHRoaXMuYndnSG9sZGVyLnJlcztcbiAgICBpZiAoYndnIC8qICYmIGJ3Zy50eXBlID09ICdiaWd3aWcnICovKSB7XG4gICAgICAgIHZhciBzY2FsZXMgPSBbMV07ICAvLyBDYW4gd2UgYmUgc21hcnRlciBhYm91dCBpbmZlcnJpbmcgYmFzZWxpbmUgc2NhbGU/XG4gICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgYndnLnpvb21MZXZlbHMubGVuZ3RoOyArK3opIHtcbiAgICAgICAgICAgIHNjYWxlcy5wdXNoKGJ3Zy56b29tTGV2ZWxzW3pdLnJlZHVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjYWxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbkJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5leHRyYUluZGljZXMgfHwgdGhpcy5leHRyYUluZGljZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdObyBpbmRpY2VzIGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMuZXh0cmFJbmRpY2VzWzBdO1xuICAgIHJldHVybiBpbmRleC5sb29rdXAocXVlcnksIGNhbGxiYWNrKTtcbn1cblxuQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0RGVmYXVsdEZJUHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLm9wdHMubm9FeHRyYUZlYXR1cmVJbmZvKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIHRoaXMuYndnSG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGJ3Zykge1xuICAgICAgICBpZiAoIWJ3ZykgcmV0dXJuO1xuXG4gICAgICAgIGlmIChid2cuc2NoZW1hICYmIGJ3Zy5kZWZpbmVkRmllbGRDb3VudCA8IGJ3Zy5zY2hlbWEuZmllbGRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGZpcCA9IGZ1bmN0aW9uKGZlYXR1cmUsIGZlYXR1cmVJbmZvKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaGkgPSAwOyBoaSA8IGZlYXR1cmVJbmZvLmhpdC5sZW5ndGg7ICsraGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVJbmZvLmhpdFtoaV0uaXNTdXBlckdyb3VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBmaSA9IGJ3Zy5kZWZpbmVkRmllbGRDb3VudDsgZmkgPCBid2cuc2NoZW1hLmZpZWxkcy5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBid2cuc2NoZW1hLmZpZWxkc1tmaV07XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVJbmZvLmFkZChmLmNvbW1lbnQsIGZlYXR1cmVbZi5uYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2FsbGJhY2soZmlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gZG8gYW55dGhpbmcuXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuICAgIHRoaXMuYndnSG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGJ3Zykge1xuICAgICAgICBpZiAoIWJ3Zykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdiYmkgZXJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgXHR2YXIgc3R5bGVzaGVldCA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG4gICAgICAgIGlmIChid2cudHlwZSA9PSAnYmlnYmVkJykge1xuICAgICAgICAgICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgICAgICAgICAgd2lnU3R5bGUuRkdDT0xPUiA9ICdibGFjayc7XG4gICAgICAgICAgICB3aWdTdHlsZS5CR0NPTE9SID0gJ2JsdWUnXG4gICAgICAgICAgICB3aWdTdHlsZS5IRUlHSFQgPSA4O1xuICAgICAgICAgICAgd2lnU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgICAgICAgICB3aWdTdHlsZS5MQUJFTCA9IHRydWU7XG4gICAgICAgICAgICB3aWdTdHlsZS5aSU5ERVggPSAyMDtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnYmlnd2lnJ30sIG51bGwsIHdpZ1N0eWxlKTtcblx0ICAgIFxuICAgICAgICAgICAgd2lnU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICAgICAgICAgIHdpZ1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICAgICAgd2lnU3R5bGUuQkdDT0xPUiA9ICdyZWQnXG4gICAgICAgICAgICB3aWdTdHlsZS5IRUlHSFQgPSAxMDtcbiAgICAgICAgICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgICAgICAgICAgd2lnU3R5bGUuWklOREVYID0gMjA7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ3RyYW5zbGF0aW9uJ30sIG51bGwsIHdpZ1N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdHNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgdHNTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgICAgICAgICAgdHNTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICAgICAgICAgIHRzU3R5bGUuQkdDT0xPUiA9ICd3aGl0ZSc7XG4gICAgICAgICAgICB0c1N0eWxlLkhFSUdIVCA9IDEwO1xuICAgICAgICAgICAgdHNTdHlsZS5aSU5ERVggPSAxMDtcbiAgICAgICAgICAgIHRzU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgICAgICAgICB0c1N0eWxlLkxBQkVMID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndHJhbnNjcmlwdCd9LCBudWxsLCB0c1N0eWxlKTtcblxuICAgICAgICAgICAgdmFyIGRlbnNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgZGVuc1N0eWxlLmdseXBoID0gJ0hJU1RPR1JBTSc7XG4gICAgICAgICAgICBkZW5zU3R5bGUuQ09MT1IxID0gJ3doaXRlJztcbiAgICAgICAgICAgIGRlbnNTdHlsZS5DT0xPUjIgPSAnYmxhY2snO1xuICAgICAgICAgICAgZGVuc1N0eWxlLkhFSUdIVD0zMDtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVuc2l0eSd9LCBudWxsLCBkZW5zU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdISVNUT0dSQU0nO1xuICAgICAgICAgICAgd2lnU3R5bGUuQ09MT1IxID0gJ3doaXRlJztcbiAgICAgICAgICAgIHdpZ1N0eWxlLkNPTE9SMiA9ICdibGFjayc7XG4gICAgICAgICAgICB3aWdTdHlsZS5IRUlHSFQ9MzA7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgd2lnU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJ3Zy5kZWZpbmVkRmllbGRDb3VudCA9PSAxMiAmJiBid2cuZmllbGRDb3VudCA+PSAxNCkge1xuICAgICAgICAgICAgc3R5bGVzaGVldC5nZW5lSGludCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIFx0cmV0dXJuIGNhbGxiYWNrKHN0eWxlc2hlZXQpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBSZW1vdGVCV0dGZWF0dXJlU291cmNlKGJ3Z1NvdXJjZSwgd29ya2VyKSB7XG4gICAgRmVhdHVyZVNvdXJjZUJhc2UuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMud29ya2VyID0gd29ya2VyO1xuICAgIHRoaXMucmVhZGluZXNzID0gJ0Nvbm5lY3RpbmcnO1xuICAgIHRoaXMuYndnU291cmNlID0gdGhpcy5vcHRzID0gYndnU291cmNlO1xuICAgIHRoaXMua2V5SG9sZGVyID0gbmV3IEF3YWl0ZWQoKTtcbiAgICB0aGlzLmluaXQoKTtcbn1cblxuUmVtb3RlQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEZlYXR1cmVTb3VyY2VCYXNlLnByb3RvdHlwZSk7XG5cblJlbW90ZUJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHZhciB1cmkgPSB0aGlzLmJ3Z1NvdXJjZS51cmkgfHwgdGhpcy5id2dTb3VyY2UuYndnVVJJO1xuICAgIHZhciBibG9iID0gdGhpcy5id2dTb3VyY2UuYmxvYiB8fCB0aGlzLmJ3Z1NvdXJjZS5id2dCbG9iO1xuXG4gICAgdmFyIGNudCA9IGZ1bmN0aW9uKGtleSwgZXJyKSB7XG4gICAgICAgIHRoaXNCLnJlYWRpbmVzcyA9IG51bGw7XG4gICAgICAgIHRoaXNCLm5vdGlmeVJlYWRpbmVzcygpO1xuXG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHRoaXNCLndvcmtlci5wb3N0Q29tbWFuZCh7Y29tbWFuZDogJ21ldGEnLCBjb25uZWN0aW9uOiBrZXl9LCBmdW5jdGlvbihtZXRhLCBlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5rZXlIb2xkZXIucHJvdmlkZShudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5tZXRhID0gbWV0YTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iua2V5SG9sZGVyLnByb3ZpZGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNCLmVycm9yID0gZXJyO1xuICAgICAgICAgICAgdGhpc0Iua2V5SG9sZGVyLnByb3ZpZGUobnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGJsb2IpIHtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdENvbW1hbmQoe2NvbW1hbmQ6ICdjb25uZWN0QkJJJywgYmxvYjogYmxvYn0sIGNudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdENvbW1hbmQoe2NvbW1hbmQ6ICdjb25uZWN0QkJJJywgdXJpOiB1cml9LCBjbnQpOyBcbiAgICB9XG59XG5cblJlbW90ZUJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmNhcGFiaWxpdGllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYXBzID0ge2xlYXA6IHRydWV9O1xuXG4gICAgaWYgKHRoaXMubWV0YSAmJiB0aGlzLm1ldGEudHlwZSA9PSAnYmlnd2lnJylcbiAgICAgICAgY2Fwcy5xdWFudExlYXAgPSB0cnVlO1xuICAgIGlmICh0aGlzLm1ldGEgJiYgdGhpcy5tZXRhLmV4dHJhSW5kaWNlcyAmJiB0aGlzLm1ldGEuZXh0cmFJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2Fwcy5zZWFyY2ggPSBbXTtcbiAgICAgICAgZm9yICh2YXIgZWlpID0gMDsgZWlpIDwgdGhpcy5tZXRhLmV4dHJhSW5kaWNlcy5sZW5ndGg7ICsrZWlpKSB7XG4gICAgICAgICAgICBjYXBzLnNlYXJjaC5wdXNoKHRoaXMubWV0YS5leHRyYUluZGljZXNbZWlpXS5maWVsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhcHM7XG59XG5cblJlbW90ZUJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgc2NhbGUsIHR5cGVzLCBwb29sLCBjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICB0aGlzQi5idXN5Kys7XG4gICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgIHRoaXMua2V5SG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzQi5lcnJvciB8fCBcIkNhbid0IGFjY2VzcyBiaW5hcnkgZmlsZVwiLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB6b29tID0gLTE7XG4gICAgICAgIHZhciB3YW50RGVuc2l0eSA9ICF0eXBlcyB8fCB0eXBlcy5sZW5ndGggPT0gMCB8fCBhcnJheUluZGV4T2YodHlwZXMsICdkZW5zaXR5JykgPj0gMDtcbiAgICAgICAgaWYgKHRoaXNCLm9wdHMuY2xpZW50QmluKSB7XG4gICAgICAgICAgICB3YW50RGVuc2l0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzQi5tZXRhLnR5cGUgPT0gJ2JpZ3dpZycgfHwgd2FudERlbnNpdHkgfHwgKHR5cGVvZiB0aGlzQi5vcHRzLmZvcmNlUmVkdWN0aW9uICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHogPSAxOyB6IDwgdGhpc0IubWV0YS56b29tTGV2ZWxzLmxlbmd0aDsgKyt6KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNCLm1ldGEuem9vbUxldmVsc1t6XSA8PSBzY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICB6b29tID0geiAtIDE7IC8vIFNjYWxlcyByZXR1cm5lZCBpbiBtZXRhZGF0YSBzdGFydCBhdCAxLCB1bmxpa2UgXCJyZWFsXCIgem9vbSBsZXZlbHMuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzQi5vcHRzLmZvcmNlUmVkdWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHpvb20gPSB0aGlzQi5vcHRzLmZvcmNlUmVkdWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzQi53b3JrZXIucG9zdENvbW1hbmQoe2NvbW1hbmQ6ICdmZXRjaCcsIGNvbm5lY3Rpb246IGtleSwgY2hyOiBjaHIsIG1pbjogbWluLCBtYXg6IG1heCwgem9vbTogem9vbX0sIGZ1bmN0aW9uKGZlYXR1cmVzLCBlcnJvcikge1xuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgICAgICAgICAgdmFyIGZzID0gMTAwMDAwMDAwMDtcbiAgICAgICAgICAgIGlmICh0aGlzQi5tZXRhLnR5cGUgPT09ICdiaWd3aWcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzID0gKG1heCAtIG1pbikgLyBmZWF0dXJlcy5sZW5ndGggLyAyO1xuICAgICAgICAgICAgICAgIGlmIChpcyA8IGZzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzID0gaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGlmICh0aGlzQi5vcHRzLmxpbmspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZmVhdHVyZXMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gZmVhdHVyZXNbZmldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZi5saW5rcyA9IFtuZXcgREFTTGluaygnTGluaycsIHRoaXNCLm9wdHMubGluay5yZXBsYWNlKC9cXCRcXCQvLCBmLmxhYmVsKSldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBmZWF0dXJlcywgZnMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuXG5SZW1vdGVCV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5xdWFudEZpbmROZXh0RmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIHRocmVzaG9sZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHRoaXMuYnVzeSsrO1xuICAgIHRoaXMubm90aWZ5QWN0aXZpdHkoKTtcbiAgICB0aGlzLndvcmtlci5wb3N0Q29tbWFuZCh7Y29tbWFuZDogJ3F1YW50TGVhcCcsIGNvbm5lY3Rpb246IHRoaXMua2V5SG9sZGVyLnJlcywgY2hyOiBjaHIsIHBvczogcG9zLCBkaXI6IGRpciwgdGhyZXNob2xkOiB0aHJlc2hvbGQsIHVuZGVyOiBmYWxzZX0sIGZ1bmN0aW9uKHJlc3VsdCwgZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCwgZXJyKTtcbiAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0LCBlcnIpO1xuICAgIH0pO1xufVxuXG5SZW1vdGVCV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5maW5kTmV4dEZlYXR1cmUgPSBmdW5jdGlvbihjaHIsIHBvcywgZGlyLCBjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpcy5idXN5Kys7XG4gICAgdGhpcy5ub3RpZnlBY3Rpdml0eSgpO1xuICAgIHRoaXMud29ya2VyLnBvc3RDb21tYW5kKHtjb21tYW5kOiAnbGVhcCcsIGNvbm5lY3Rpb246IHRoaXMua2V5SG9sZGVyLnJlcywgY2hyOiBjaHIsIHBvczogcG9zLCBkaXI6IGRpcn0sIGZ1bmN0aW9uKHJlc3VsdCwgZXJyKSB7XG4gICAgICAgIHRoaXNCLmJ1c3ktLTtcbiAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwICYmIHJlc3VsdFswXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXN1bHRbMF0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblJlbW90ZUJXR0ZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFNjYWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtZXRhID0gdGhpcy5tZXRhO1xuICAgIGlmIChtZXRhKSB7XG4gICAgICAgIHJldHVybiBtZXRhLnpvb21MZXZlbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5SZW1vdGVCV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5zZWFyY2ggPSBmdW5jdGlvbihxdWVyeSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMubWV0YS5leHRyYUluZGljZXMgfHwgdGhpcy5tZXRhLmV4dHJhSW5kaWNlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgJ05vIGluZGljZXMgYXZhaWxhYmxlJyk7XG4gICAgfVxuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmJ1c3krKztcbiAgICB0aGlzLm5vdGlmeUFjdGl2aXR5KCk7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5tZXRhLmV4dHJhSW5kaWNlc1swXTtcbiAgICB0aGlzLndvcmtlci5wb3N0Q29tbWFuZCh7Y29tbWFuZDogJ3NlYXJjaCcsIGNvbm5lY3Rpb246IHRoaXMua2V5SG9sZGVyLnJlcywgcXVlcnk6IHF1ZXJ5LCBpbmRleDogaW5kZXh9LCBmdW5jdGlvbihyZXN1bHQsIGVycikge1xuICAgICAgICB0aGlzQi5idXN5LS07XG4gICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0LCBlcnIpO1xuICAgIH0pO1xufVxuXG5SZW1vdGVCV0dGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXREZWZhdWx0RklQcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMub3B0cy5ub0V4dHJhRmVhdHVyZUluZm8pXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmtleUhvbGRlci5hd2FpdChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIGJ3ZyA9IHRoaXNCLm1ldGE7XG4gICAgICAgIGlmICghYndnKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGJ3Zy5zY2hlbWEgJiYgYndnLmRlZmluZWRGaWVsZENvdW50IDwgYndnLnNjaGVtYS5maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZmlwID0gZnVuY3Rpb24oZmVhdHVyZSwgZmVhdHVyZUluZm8pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgZmVhdHVyZUluZm8uaGl0Lmxlbmd0aDsgKytoaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZUluZm8uaGl0W2hpXS5pc1N1cGVyR3JvdXApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGZpID0gYndnLmRlZmluZWRGaWVsZENvdW50OyBmaSA8IGJ3Zy5zY2hlbWEuZmllbGRzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGJ3Zy5zY2hlbWEuZmllbGRzW2ZpXTtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZm8uYWRkKGYuY29tbWVudCwgZmVhdHVyZVtmLm5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjYWxsYmFjayhmaXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBkbyBhbnl0aGluZy5cbiAgICAgICAgfVxuICAgIH0pO1xufSBcblxuUmVtb3RlQldHRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuICAgIHRoaXMua2V5SG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGtleSkge1xuICAgICAgICB2YXIgYndnID0gdGhpc0IubWV0YTtcbiAgICAgICAgaWYgKCFid2cpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCAnYmJpIGVycm9yJyk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuICAgICAgICBpZiAoYndnLnR5cGUgPT0gJ2JpZ2JlZCcpIHtcbiAgICAgICAgICAgIHZhciB3aWdTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgd2lnU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICAgICAgICAgIHdpZ1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICAgICAgd2lnU3R5bGUuQkdDT0xPUiA9ICdibHVlJ1xuICAgICAgICAgICAgd2lnU3R5bGUuSEVJR0hUID0gODtcbiAgICAgICAgICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgICAgICAgICAgd2lnU3R5bGUuTEFCRUwgPSB0cnVlO1xuICAgICAgICAgICAgd2lnU3R5bGUuWklOREVYID0gMjA7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2JpZ3dpZyd9LCBudWxsLCB3aWdTdHlsZSk7XG4gICAgICAgIFxuICAgICAgICAgICAgd2lnU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICAgICAgICAgIHdpZ1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICAgICAgd2lnU3R5bGUuQkdDT0xPUiA9ICdyZWQnXG4gICAgICAgICAgICB3aWdTdHlsZS5IRUlHSFQgPSAxMDtcbiAgICAgICAgICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgICAgICAgICAgd2lnU3R5bGUuWklOREVYID0gMjA7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ3RyYW5zbGF0aW9uJ30sIG51bGwsIHdpZ1N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdHNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgdHNTdHlsZS5nbHlwaCA9ICdCT1gnO1xuICAgICAgICAgICAgdHNTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICAgICAgICAgIHRzU3R5bGUuQkdDT0xPUiA9ICd3aGl0ZSc7XG4gICAgICAgICAgICB0c1N0eWxlLkhFSUdIVCA9IDEwO1xuICAgICAgICAgICAgdHNTdHlsZS5aSU5ERVggPSAxMDtcbiAgICAgICAgICAgIHRzU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgICAgICAgICB0c1N0eWxlLkxBQkVMID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAndHJhbnNjcmlwdCd9LCBudWxsLCB0c1N0eWxlKTtcblxuICAgICAgICAgICAgdmFyIGRlbnNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgZGVuc1N0eWxlLmdseXBoID0gJ0hJU1RPR1JBTSc7XG4gICAgICAgICAgICBkZW5zU3R5bGUuQ09MT1IxID0gJ3doaXRlJztcbiAgICAgICAgICAgIGRlbnNTdHlsZS5DT0xPUjIgPSAnYmxhY2snO1xuICAgICAgICAgICAgZGVuc1N0eWxlLkhFSUdIVD0zMDtcbiAgICAgICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVuc2l0eSd9LCBudWxsLCBkZW5zU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdISVNUT0dSQU0nO1xuICAgICAgICAgICAgd2lnU3R5bGUuQ09MT1IxID0gJ3doaXRlJztcbiAgICAgICAgICAgIHdpZ1N0eWxlLkNPTE9SMiA9ICdibGFjayc7XG4gICAgICAgICAgICB3aWdTdHlsZS5IRUlHSFQ9MzA7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgd2lnU3R5bGUpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoYndnLmRlZmluZWRGaWVsZENvdW50ID09IDEyICYmIGJ3Zy5maWVsZENvdW50ID49IDE0KSB7XG4gICAgICAgICAgICBzdHlsZXNoZWV0LmdlbmVIaW50ID0gdHJ1ZTtcbiAgICAgICAgfSBcblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soc3R5bGVzaGVldCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJhbVJlY29yZFRvRmVhdHVyZShyLCBncm91cCkge1xuICAgIGlmIChyLmZsYWcgJiBCYW1GbGFncy5TRUdNRU5UX1VOTUFQUEVEKVxuICAgICAgICByZXR1cm47IFxuICAgIFxuICAgIHZhciBsZW47XG4gICAgaWYgKHIuc2VxKVxuICAgICAgICBsZW4gPSByLnNlcS5sZW5ndGg7XG4gICAgZWxzZSBcbiAgICAgICAgbGVuID0gci5zZXFMZW5ndGg7XG4gICAgXG4gICAgaWYgKHIuY2lnYXIpIHtcbiAgICAgICAgbGVuID0gMDtcbiAgICAgICAgdmFyIG9wcyA9IHBhcnNlQ2lnYXIoci5jaWdhcik7XG4gICAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBvcHMubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgICAgICB2YXIgY28gPSBvcHNbY2ldO1xuICAgICAgICAgICAgaWYgKGNvLm9wID09ICdNJyB8fCBjby5vcCA9PSAnRCcpXG4gICAgICAgICAgICAgICAgbGVuICs9IGNvLmNudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmID0gbmV3IERBU0ZlYXR1cmUoKTtcbiAgICBmLm1pbiA9IHIucG9zICsgMTtcbiAgICBmLm1heCA9IHIucG9zICsgbGVuO1xuICAgIGYuc2VnbWVudCA9IHIuc2VnbWVudDtcbiAgICBmLnR5cGUgPSAnYmFtJztcbiAgICBmLmlkID0gci5yZWFkTmFtZTtcbiAgICBmLm5vdGVzID0gWy8qICdTZXF1ZW5jZT0nICsgci5zZXEsICdDSUdBUj0nICsgci5jaWdhciwgKi8gJ01RPScgKyByLm1xXTtcbiAgICBmLmNpZ2FyID0gci5jaWdhcjtcbiAgICBmLnNlcSA9IHIuc2VxO1xuICAgIGYucXVhbHMgPSByLnF1YWxzO1xuICAgIGYub3JpZW50YXRpb24gPSAoci5mbGFnICYgQmFtRmxhZ3MuUkVWRVJTRV9DT01QTEVNRU5UKSA/ICctJyA6ICcrJztcbiAgICBmLmJhbVJlY29yZCA9IHI7XG5cbiAgICBpZiAoZ3JvdXAgJiYgKHIuZmxhZyAmIEJhbUZsYWdzLk1VTFRJUExFX1NFR01FTlRTKSkge1xuICAgICAgICBmLmdyb3VwcyA9IFt7aWQ6IHIucmVhZE5hbWUsIFxuICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JlYWRwYWlyJ31dO1xuICAgIH1cblxuICAgIHJldHVybiBmO1xufVxuXG5mdW5jdGlvbiBCQU1GZWF0dXJlU291cmNlKGJhbVNvdXJjZSkge1xuICAgIEZlYXR1cmVTb3VyY2VCYXNlLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHRoaXMuYmFtU291cmNlID0gYmFtU291cmNlO1xuICAgIHRoaXMub3B0cyA9IHtjcmVkZW50aWFsczogYmFtU291cmNlLmNyZWRlbnRpYWxzLCBwcmVmbGlnaHQ6IGJhbVNvdXJjZS5wcmVmbGlnaHQsIGJhbUdyb3VwOiBiYW1Tb3VyY2UuYmFtR3JvdXB9O1xuICAgIHRoaXMuYmFtSG9sZGVyID0gbmV3IEF3YWl0ZWQoKTtcbiAgICBcbiAgICBpZiAodGhpcy5vcHRzLnByZWZsaWdodCkge1xuICAgICAgICB2YXIgcGZzID0gYndnX3ByZWZsaWdodHNbdGhpcy5vcHRzLnByZWZsaWdodF07XG4gICAgICAgIGlmICghcGZzKSB7XG4gICAgICAgICAgICBwZnMgPSBuZXcgQXdhaXRlZCgpO1xuICAgICAgICAgICAgYndnX3ByZWZsaWdodHNbdGhpcy5vcHRzLnByZWZsaWdodF0gPSBwZnM7XG5cbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBmcy5wcm92aWRlKCdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZnMucHJvdmlkZSgnZmFpbHVyZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdjYWNoZS1jb250cm9sJywgJ25vLWNhY2hlJyk7ICAgIC8qIERvZXNuJ3Qgd29yaywgbm90IGFuIGFsbG93ZWQgcmVxdWVzdCBoZWFkZXIgaW4gQ09SUyAqL1xuICAgICAgICAgICAgcmVxLm9wZW4oJ2dldCcsIHRoaXMub3B0cy5wcmVmbGlnaHQgKyAnPycgKyBoZXhfc2hhMSgnc2FsdCcgKyBEYXRlLm5vdygpKSwgdHJ1ZSk7ICAgIC8vIEluc3RlYWQsIGVuc3VyZSB3ZSBhbHdheXMgcHJlZmxpZ2h0IGEgdW5pcXVlIFVSSS5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICByZXEud2l0aENyZWRlbnRpYWxzID0gJ3RydWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxLnNlbmQoJycpO1xuICAgICAgICB9XG4gICAgICAgIHBmcy5hd2FpdChmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgIHRoaXNCLmluaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc0IuaW5pdCgpO1xuICAgIH1cbn1cblxuQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEZlYXR1cmVTb3VyY2VCYXNlLnByb3RvdHlwZSk7XG5cbkJBTUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHZhciBiYW1GLCBiYWlGO1xuICAgIGlmICh0aGlzLmJhbVNvdXJjZS5iYW1CbG9iKSB7XG4gICAgICAgIGJhbUYgPSBuZXcgQmxvYkZldGNoYWJsZSh0aGlzLmJhbVNvdXJjZS5iYW1CbG9iKTtcbiAgICAgICAgYmFpRiA9IG5ldyBCbG9iRmV0Y2hhYmxlKHRoaXMuYmFtU291cmNlLmJhaUJsb2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJhbUYgPSBuZXcgVVJMRmV0Y2hhYmxlKHRoaXMuYmFtU291cmNlLmJhbVVSSSwge2NyZWRlbnRpYWxzOiB0aGlzLm9wdHMuY3JlZGVudGlhbHN9KTtcbiAgICAgICAgYmFpRiA9IG5ldyBVUkxGZXRjaGFibGUodGhpcy5iYW1Tb3VyY2UuYmFpVVJJIHx8ICh0aGlzLmJhbVNvdXJjZS5iYW1VUkkgKyAnLmJhaScpLCB7Y3JlZGVudGlhbHM6IHRoaXMub3B0cy5jcmVkZW50aWFsc30pO1xuICAgIH1cbiAgICBtYWtlQmFtKGJhbUYsIGJhaUYsIGZ1bmN0aW9uKGJhbSwgZXJyKSB7XG4gICAgICAgIHRoaXNCLnJlYWRpbmVzcyA9IG51bGw7XG4gICAgICAgIHRoaXNCLm5vdGlmeVJlYWRpbmVzcygpO1xuXG4gICAgICAgIGlmIChiYW0pIHtcbiAgICAgICAgICAgIHRoaXNCLmJhbUhvbGRlci5wcm92aWRlKGJhbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzQi5lcnJvciA9IGVycjtcbiAgICAgICAgICAgIHRoaXNCLmJhbUhvbGRlci5wcm92aWRlKG51bGwpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbkJBTUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgc2NhbGUsIHR5cGVzLCBwb29sLCBjYWxsYmFjaykge1xuICAgIHZhciBsaWdodCA9IHR5cGVzICYmICh0eXBlcy5sZW5ndGggPT0gMSkgJiYgKHR5cGVzWzBdID09ICdkZW5zaXR5Jyk7XG5cbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIFxuICAgIHRoaXNCLmJ1c3krKztcbiAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgIFxuICAgIHRoaXMuYmFtSG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGJhbSkge1xuICAgICAgICBpZiAoIWJhbSkge1xuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzQi5lcnJvciB8fCBcIkNvdWxkbid0IGZldGNoIEJBTVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhbS5mZXRjaChjaHIsIG1pbiwgbWF4LCBmdW5jdGlvbihiYW1SZWNvcmRzLCBlcnJvcikge1xuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByaSA9IDA7IHJpIDwgYmFtUmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBiYW1SZWNvcmRzW3JpXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGJhbVJlY29yZFRvRmVhdHVyZShyLCB0aGlzQi5vcHRzLmJhbUdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYpXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBmZWF0dXJlcywgMTAwMDAwMDAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtsaWdodDogbGlnaHR9KTtcbiAgICB9KTtcbn1cblxuQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U2NhbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIDEwMDAwMDAwMDA7XG59XG5cbkJBTUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFN0eWxlU2hlZXQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHRoaXMuYmFtSG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGJhbSkge1xuXHQgICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgZGVuc1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgIGRlbnNTdHlsZS5nbHlwaCA9ICdISVNUT0dSQU0nO1xuICAgICAgICBkZW5zU3R5bGUuQ09MT1IxID0gJ2JsYWNrJztcbiAgICAgICAgZGVuc1N0eWxlLkNPTE9SMiA9ICdyZWQnO1xuICAgICAgICBkZW5zU3R5bGUuSEVJR0hUPTMwO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlbnNpdHknfSwgJ2xvdycsIGRlbnNTdHlsZSk7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVuc2l0eSd9LCAnbWVkaXVtJywgZGVuc1N0eWxlKTtcblxuICAgICAgICB2YXIgd2lnU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICAgICAgd2lnU3R5bGUuZ2x5cGggPSAnX19TRVFVRU5DRSc7XG4gICAgICAgIHdpZ1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICB3aWdTdHlsZS5CR0NPTE9SID0gJ2JsdWUnXG4gICAgICAgIHdpZ1N0eWxlLkhFSUdIVCA9IDg7XG4gICAgICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgICAgICB3aWdTdHlsZS5MQUJFTCA9IGZhbHNlO1xuICAgICAgICB3aWdTdHlsZS5aSU5ERVggPSAyMDtcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdiYW0nfSwgJ2hpZ2gnLCB3aWdTdHlsZSk7XG5cblx0ICAgIHJldHVybiBjYWxsYmFjayhzdHlsZXNoZWV0KTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBSZW1vdGVCQU1GZWF0dXJlU291cmNlKGJhbVNvdXJjZSwgd29ya2VyKSB7XG4gICAgRmVhdHVyZVNvdXJjZUJhc2UuY2FsbCh0aGlzKTtcblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpcy5iYW1Tb3VyY2UgPSBiYW1Tb3VyY2U7XG4gICAgdGhpcy53b3JrZXIgPSB3b3JrZXI7XG4gICAgdGhpcy5vcHRzID0ge2NyZWRlbnRpYWxzOiBiYW1Tb3VyY2UuY3JlZGVudGlhbHMsIHByZWZsaWdodDogYmFtU291cmNlLnByZWZsaWdodCwgYmFtR3JvdXA6IGJhbVNvdXJjZS5iYW1Hcm91cH07XG4gICAgdGhpcy5rZXlIb2xkZXIgPSBuZXcgQXdhaXRlZCgpO1xuICAgIFxuICAgIHRoaXMuaW5pdCgpO1xufVxuXG5SZW1vdGVCQU1GZWF0dXJlU291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlKTtcblxuUmVtb3RlQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkgeyAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHZhciB1cmkgPSB0aGlzLmJhbVNvdXJjZS51cmkgfHwgdGhpcy5iYW1Tb3VyY2UuYmFtVVJJO1xuICAgIHZhciBpbmRleFVyaSA9IHRoaXMuYmFtU291cmNlLmluZGV4VXJpIHx8IHRoaXMuYmFtU291cmNlLmJhaVVSSSB8fCB1cmkgKyAnLmJhaSc7XG5cbiAgICB2YXIgYmxvYiA9IHRoaXMuYmFtU291cmNlLmJhbUJsb2IgfHwgdGhpcy5iYW1Tb3VyY2UuYmxvYjtcbiAgICB2YXIgaW5kZXhCbG9iID0gdGhpcy5iYW1Tb3VyY2UuYmFpQmxvYiB8fCB0aGlzLmJhbVNvdXJjZS5pbmRleEJsb2I7XG5cbiAgICB2YXIgY250ID0gZnVuY3Rpb24ocmVzdWx0LCBlcnIpIHtcbiAgICAgICAgdGhpc0IucmVhZGluZXNzID0gbnVsbDtcbiAgICAgICAgdGhpc0Iubm90aWZ5UmVhZGluZXNzKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpc0Iua2V5SG9sZGVyLnByb3ZpZGUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNCLmVycm9yID0gZXJyO1xuICAgICAgICAgICAgdGhpc0Iua2V5SG9sZGVyLnByb3ZpZGUobnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGJsb2IpIHtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdENvbW1hbmQoe2NvbW1hbmQ6ICdjb25uZWN0QkFNJywgYmxvYjogYmxvYiwgaW5kZXhCbG9iOiBpbmRleEJsb2J9LCBjbnQgLyogLCBbYmxvYiwgaW5kZXhCbG9iXSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdENvbW1hbmQoe2NvbW1hbmQ6ICdjb25uZWN0QkFNJywgdXJpOiB1cmksIGluZGV4VXJpOiBpbmRleFVyaX0sIGNudCk7IFxuICAgIH1cbn1cblxuUmVtb3RlQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxpZ2h0ID0gdHlwZXMgJiYgKHR5cGVzLmxlbmd0aCA9PSAxKSAmJiAodHlwZXNbMF0gPT0gJ2RlbnNpdHknKTtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIFxuICAgIHRoaXNCLmJ1c3krKztcbiAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgIFxuICAgIHRoaXMua2V5SG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzQi5lcnJvciB8fCBcIkNvdWxkbid0IGZldGNoIEJBTVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNCLndvcmtlci5wb3N0Q29tbWFuZCh7Y29tbWFuZDogJ2ZldGNoJywgY29ubmVjdGlvbjoga2V5LCBjaHI6IGNociwgbWluOiBtaW4sIG1heDogbWF4LCBvcHRzOiB7bGlnaHQ6IGxpZ2h0fX0sIGZ1bmN0aW9uKGJhbVJlY29yZHMsIGVycm9yKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmV0cmlldmVkICcgKyBiYW1SZWNvcmRzLmxlbmd0aCArICcgdmlhIHdvcmtlci4nKTtcblxuICAgICAgICAgICAgdGhpc0IuYnVzeS0tO1xuICAgICAgICAgICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByaSA9IDA7IHJpIDwgYmFtUmVjb3Jkcy5sZW5ndGg7ICsrcmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBiYW1SZWNvcmRzW3JpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBiYW1SZWNvcmRUb0ZlYXR1cmUociwgdGhpc0Iub3B0cy5iYW1Hcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZmVhdHVyZXMsIDEwMDAwMDAwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuUmVtb3RlQkFNRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U2NhbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIDEwMDAwMDAwMDA7XG59XG5cblJlbW90ZUJBTUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFN0eWxlU2hlZXQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHRoaXMua2V5SG9sZGVyLmF3YWl0KGZ1bmN0aW9uKGJhbSkge1xuICAgICAgICB2YXIgc3R5bGVzaGVldCA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBkZW5zU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICAgICAgZGVuc1N0eWxlLmdseXBoID0gJ0hJU1RPR1JBTSc7XG4gICAgICAgIGRlbnNTdHlsZS5DT0xPUjEgPSAnYmxhY2snO1xuICAgICAgICBkZW5zU3R5bGUuQ09MT1IyID0gJ3JlZCc7XG4gICAgICAgIGRlbnNTdHlsZS5IRUlHSFQ9MzA7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVuc2l0eSd9LCAnbG93JywgZGVuc1N0eWxlKTtcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdkZW5zaXR5J30sICdtZWRpdW0nLCBkZW5zU3R5bGUpO1xuXG4gICAgICAgIHZhciB3aWdTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB3aWdTdHlsZS5nbHlwaCA9ICdfX1NFUVVFTkNFJztcbiAgICAgICAgd2lnU3R5bGUuRkdDT0xPUiA9ICdibGFjayc7XG4gICAgICAgIHdpZ1N0eWxlLkJHQ09MT1IgPSAnYmx1ZSdcbiAgICAgICAgd2lnU3R5bGUuSEVJR0hUID0gODtcbiAgICAgICAgd2lnU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgICAgIHdpZ1N0eWxlLkxBQkVMID0gZmFsc2U7XG4gICAgICAgIHdpZ1N0eWxlLlpJTkRFWCA9IDIwO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2JhbSd9LCAnaGlnaCcsIHdpZ1N0eWxlKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHN0eWxlc2hlZXQpO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIE1hcHBlZEZlYXR1cmVTb3VyY2Uoc291cmNlLCBtYXBwaW5nKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5tYXBwaW5nID0gbWFwcGluZztcbiAgICBcbiAgICB0aGlzLmFjdGl2aXR5TGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5idXN5ID0gMDtcbn1cblxuTWFwcGVkRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuYWRkQWN0aXZpdHlMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5hY3Rpdml0eUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbn1cblxuTWFwcGVkRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUubm90aWZ5QWN0aXZpdHkgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgdGhpcy5hY3Rpdml0eUxpc3RlbmVycy5sZW5ndGg7ICsrbGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlMaXN0ZW5lcnNbbGldKHRoaXMuYnVzeSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5NYXBwZWRGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXRTdHlsZVNoZWV0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UuZ2V0U3R5bGVTaGVldChjYWxsYmFjayk7XG59XG5cbk1hcHBlZEZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFNjYWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5nZXRTY2FsZXMoKTtcbn1cblxuTWFwcGVkRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuc2ltcGxpZnlTZWdtZW50cyA9IGZ1bmN0aW9uKHNlZ3MsIG1pbkdhcCkge1xuICAgIGlmIChzZWdzLmxlbmd0aCA9PSAwKSByZXR1cm4gc2VncztcblxuICAgIHNlZ3Muc29ydChmdW5jdGlvbihzMSwgczIpIHtcbiAgICAgICAgdmFyIGQgPSBzMS5uYW1lIC0gczIubmFtZTtcbiAgICAgICAgaWYgKGQpXG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgZCA9IHMxLnN0YXJ0IC0gczIuc3RhcnQ7XG4gICAgICAgIGlmIChkKVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIHJldHVybiBzMS5lbmQgLSBzMi5lbmQ7ICAgLy8gU2hvdWxkIG5ldmVyIGNvbWUgdG8gdGhpcy4uLj9cbiAgICB9KTtcblxuICAgIHZhciBzc2VncyA9IFtdO1xuICAgIHZhciBjdXJyZW50U2VnID0gc2Vnc1swXTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc2Vncy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgdmFyIG5zID0gc2Vnc1tzaV07XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2cobnMubmFtZSArICcgJyArIG5zLnN0YXJ0ICsgJyAnICsgbnMuZW5kKTtcbiAgICAgICAgaWYgKG5zLm5hbWUgIT0gY3VycmVudFNlZy5uYW1lIHx8IG5zLnN0YXJ0ID4gKGN1cnJlbnRTZWcuZW5kICsgbWluR2FwKSkge1xuICAgICAgICAgICAgc3NlZ3MucHVzaChjdXJyZW50U2VnKTtcbiAgICAgICAgICAgIGN1cnJlbnRTZWcgPSBucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRTZWcgPSBuZXcgREFTU2VnbWVudChjdXJyZW50U2VnLm5hbWUsIE1hdGgubWluKGN1cnJlbnRTZWcuc3RhcnQsIG5zLnN0YXJ0KSwgTWF0aC5tYXgoY3VycmVudFNlZy5lbmQsIG5zLmVuZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNzZWdzLnB1c2goY3VycmVudFNlZyk7XG4gICAgcmV0dXJuIHNzZWdzO1xufVxuXG5NYXBwZWRGZWF0dXJlU291cmNlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIHZhciBmZXRjaExlbmd0aCA9IG1heCAtIG1pbiArIDE7XG5cbiAgICB0aGlzQi5idXN5Kys7XG4gICAgdGhpc0Iubm90aWZ5QWN0aXZpdHkoKTtcblxuICAgIHRoaXMubWFwcGluZy5zb3VyY2VCbG9ja3NGb3JSYW5nZShjaHIsIG1pbiwgbWF4LCBmdW5jdGlvbihtc2VnKSB7XG4gICAgICAgIGlmIChtc2VnLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzQi5idXN5LS07XG4gICAgICAgICAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhcIk5vIG1hcHBpbmcgYXZhaWxhYmxlIGZvciB0aGlzIHJlZ2lvbnNcIiwgW10sIHNjYWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1zZWcgPSB0aGlzQi5zaW1wbGlmeVNlZ21lbnRzKG1zZWcsIE1hdGgubWF4KDEwMCwgMC4wNSAqIGZldGNoTGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIHZhciBtYXBwZWRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1hcHBlZExvYyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY291bnQgPSBtc2VnLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBmaW5hbFN0YXR1cztcblxuICAgICAgICAgICAgbXNlZy5tYXAoZnVuY3Rpb24oc2VnKSB7XG4gICAgICAgICAgICAgICAgdGhpc0Iuc291cmNlLmZldGNoKHNlZy5uYW1lLCBzZWcuc3RhcnQsIHNlZy5lbmQsIHNjYWxlLCB0eXBlcywgcG9vbCwgZnVuY3Rpb24oc3RhdHVzLCBmZWF0dXJlcywgZnNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgJiYgIWZpbmFsU3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxTdGF0dXMgPSBzdGF0dXM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZmVhdHVyZXMubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmZWF0dXJlc1tmaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNuID0gZi5zZWdtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbi5pbmRleE9mKCdjaHInKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNuID0gc24uc3Vic3RyKDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW1pbiA9IHRoaXNCLm1hcHBpbmcubWFwUG9pbnQoc24sIGYubWluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW1heCA9IHRoaXNCLm1hcHBpbmcubWFwUG9pbnQoc24sIGYubWF4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1taW4gfHwgIW1tYXggfHwgbW1pbi5zZXEgIT0gbW1heC5zZXEgfHwgbW1pbi5zZXEgIT0gY2hyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2NhcmQgZmVhdHVyZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGxvZygnZGlzY2FyZGluZyAnICsgbWluaUpTT05pZnkoZikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZi5wYXJ0cyAmJiBmLnBhcnRzLmxlbmd0aCA+IDApIHsgICAgLy8gRklYTUU6IFVnbHkgaGFjayB0byBtYWtlIEFTVEQgc291cmNlIG1hcCBwcm9wZXJseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRGZWF0dXJlcy5wdXNoKGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5zZWdtZW50ID0gbW1pbi5zZXE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYubWluID0gbW1pbi5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYubWF4ID0gbW1heC5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmLm1pbiA+IGYubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gZi5tYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLm1heCA9IGYubWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5taW4gPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1taW4uZmxpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGYub3JpZW50YXRpb24gPT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5vcmllbnRhdGlvbiA9ICcrJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZi5vcmllbnRhdGlvbiA9PSAnKycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLm9yaWVudGF0aW9uID0gJy0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZEZlYXR1cmVzLnB1c2goZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG0xID0gdGhpc0IubWFwcGluZy5tYXBQb2ludChzZWcubmFtZSwgc2VnLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG0yID0gdGhpc0IubWFwcGluZy5tYXBQb2ludChzZWcubmFtZSwgc2VnLmVuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG0xICYmIG0yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VnRGVzdENvdmVyYWdlID0gbmV3IFJhbmdlKG0xLnBvcywgbTIucG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBwZWRMb2MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkTG9jID0gdW5pb24obWFwcGVkTG9jLCBzZWdEZXN0Q292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZExvYyA9IHNlZ0Rlc3RDb3ZlcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC0tY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5idXN5LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmluYWxTdGF0dXMsIG1hcHBlZEZlYXR1cmVzLCBmc2NhbGUsIG1hcHBlZExvYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIER1bW15RmVhdHVyZVNvdXJjZSgpIHtcbn1cblxuRHVtbXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXRTY2FsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbn1cblxuRHVtbXlGZWF0dXJlU291cmNlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCwgY250KSB7XG4gICAgcmV0dXJuIGNudChudWxsLCBbXSwgMTAwMDAwMDAwMCk7XG59XG5cbkR1bW15RmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuICAgIHZhciBkZWZTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgIGRlZlN0eWxlLmdseXBoID0gJ0JPWCc7XG4gICAgZGVmU3R5bGUuQkdDT0xPUiA9ICdibHVlJztcbiAgICBkZWZTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgZGVmU3R5bGUpO1xuICAgIHJldHVybiBjYWxsYmFjayhzdHlsZXNoZWV0KTtcbn1cblxuZnVuY3Rpb24gRHVtbXlTZXF1ZW5jZVNvdXJjZSgpIHtcbn1cblxuRHVtbXlTZXF1ZW5jZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBwb29sLCBjbnQpIHtcbiAgICByZXR1cm4gY250KG51bGwsIG51bGwpO1xufVxuXG5mdW5jdGlvbiBKQnJvd3NlRmVhdHVyZVNvdXJjZShzb3VyY2UpIHtcbiAgICB0aGlzLnN0b3JlID0gbmV3IEpCcm93c2VTdG9yZShzb3VyY2UuamJVUkksIHNvdXJjZS5qYlF1ZXJ5KTtcbn1cblxuSkJyb3dzZUZlYXR1cmVTb3VyY2UucHJvdG90eXBlLmdldFNjYWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBudWxsO1xufVxuXG5KQnJvd3NlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuICAgIHZhciB3aWdTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgIHdpZ1N0eWxlLmdseXBoID0gJ0JPWCc7XG4gICAgd2lnU3R5bGUuRkdDT0xPUiA9ICdibGFjayc7XG4gICAgd2lnU3R5bGUuQkdDT0xPUiA9ICdncmVlbidcbiAgICB3aWdTdHlsZS5IRUlHSFQgPSA4O1xuICAgIHdpZ1N0eWxlLkJVTVAgPSB0cnVlO1xuICAgIHdpZ1N0eWxlLkxBQkVMID0gdHJ1ZTtcbiAgICB3aWdTdHlsZS5aSU5ERVggPSAyMDtcbiAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgd2lnU3R5bGUpO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHN0eWxlc2hlZXQpO1xufVxuXG5KQnJvd3NlRmVhdHVyZVNvdXJjZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBzY2FsZSwgdHlwZXMsIHBvb2wsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVzICYmIHR5cGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFtdLCBzY2FsZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdmFyIGZvcHMgPSB7fTtcblxuICAgIHRoaXMuc3RvcmUuZmVhdHVyZXMoXG4gICAgICAgIG5ldyBEQVNTZWdtZW50KGNociwgbWluLCBtYXgpLFxuICAgICAgICBmb3BzLFxuICAgICAgICBmdW5jdGlvbihmZWF0dXJlcywgc3RhdHVzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhzdGF0dXMsIGZlYXR1cmVzLCAxMDAwMDApO1xuICAgICAgICB9XG4gICAgKTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuc291cmNlQWRhcHRlcklzQ2FwYWJsZSA9IGZ1bmN0aW9uKHMsIGNhcCkge1xuICAgIGlmICghcy5jYXBhYmlsaXRpZXMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIHJldHVybiBzLmNhcGFiaWxpdGllcygpW2NhcF07XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgRmVhdHVyZVNvdXJjZUJhc2U6IEZlYXR1cmVTb3VyY2VCYXNlLFxuXG4gICAgICAgIFR3b0JpdFNlcXVlbmNlU291cmNlOiBUd29CaXRTZXF1ZW5jZVNvdXJjZSxcbiAgICAgICAgREFTU2VxdWVuY2VTb3VyY2U6IERBU1NlcXVlbmNlU291cmNlLFxuICAgICAgICBNYXBwZWRGZWF0dXJlU291cmNlOiBNYXBwZWRGZWF0dXJlU291cmNlLFxuICAgICAgICBDYWNoaW5nRmVhdHVyZVNvdXJjZTogQ2FjaGluZ0ZlYXR1cmVTb3VyY2UsXG4gICAgICAgIEJXR0ZlYXR1cmVTb3VyY2U6IEJXR0ZlYXR1cmVTb3VyY2UsXG4gICAgICAgIFJlbW90ZUJXR0ZlYXR1cmVTb3VyY2U6IFJlbW90ZUJXR0ZlYXR1cmVTb3VyY2UsXG4gICAgICAgIEJBTUZlYXR1cmVTb3VyY2U6IEJBTUZlYXR1cmVTb3VyY2UsXG4gICAgICAgIFJlbW90ZUJBTUZlYXR1cmVTb3VyY2U6IFJlbW90ZUJBTUZlYXR1cmVTb3VyY2UsXG4gICAgICAgIER1bW15RmVhdHVyZVNvdXJjZTogRHVtbXlGZWF0dXJlU291cmNlLFxuICAgICAgICBEdW1teVNlcXVlbmNlU291cmNlOiBEdW1teVNlcXVlbmNlU291cmNlLFxuXG4gICAgICAgIHJlZ2lzdGVyU291cmNlQWRhcHRlckZhY3Rvcnk6IGRhbGxpYW5jZV9yZWdpc3RlclNvdXJjZUFkYXB0ZXJGYWN0b3J5LFxuICAgICAgICByZWdpc3RlclBhcnNlckZhY3Rvcnk6IGRhbGxpYW5jZV9yZWdpc3RlclBhcnNlckZhY3RvcnksXG4gICAgICAgIG1ha2VQYXJzZXI6IGRhbGxpYW5jZV9tYWtlUGFyc2VyXG4gICAgfVxuXG4gICAgLy8gU3RhbmRhcmQgc2V0IG9mIHBsdWdpbnMuXG4gICAgcmVxdWlyZSgnLi9lbnNlbWJsanNvbicpO1xuICAgIHJlcXVpcmUoJy4vdGFiaXgtc291cmNlJyk7XG4gICAgcmVxdWlyZSgnLi9tZW1zdG9yZScpO1xuICAgIHJlcXVpcmUoJy4vYmVkd2lnJyk7XG4gICAgcmVxdWlyZSgnLi92Y2YnKTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTBcbi8vXG4vLyBzcGFucy5qczogSmF2YVNjcmlwdCBJbnRzZXQvTG9jYXRpb24gcG9ydC5cbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFJhbmdlKG1pbiwgbWF4KVxue1xuICAgIGlmICh0eXBlb2YobWluKSAhPSAnbnVtYmVyJyB8fCB0eXBlb2YobWF4KSAhPSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgJ0JhZCByYW5nZSAnICsgbWluICsgJywnICsgbWF4O1xuICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB0aGlzLl9tYXggPSBtYXg7XG59XG5cblJhbmdlLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluO1xufVxuXG5SYW5nZS5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21heDtcbn1cblxuUmFuZ2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHBvcyA+PSB0aGlzLl9taW4gJiYgcG9zIDw9IHRoaXMuX21heDtcbn1cblxuUmFuZ2UucHJvdG90eXBlLmlzQ29udGlndW91cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5SYW5nZS5wcm90b3R5cGUucmFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt0aGlzXTtcbn1cblxuUmFuZ2UucHJvdG90eXBlLl9wdXNoUmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7XG4gICAgcmFuZ2VzLnB1c2godGhpcyk7XG59XG5cblJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnWycgKyB0aGlzLl9taW4gKyAnLScgKyB0aGlzLl9tYXggKyAnXSc7XG59XG5cbmZ1bmN0aW9uIF9Db21wb3VuZChyYW5nZXMpIHtcbiAgICB0aGlzLl9yYW5nZXMgPSByYW5nZXM7XG4gICAgLy8gYXNzZXJ0IHNvcnRlZD9cbn1cblxuX0NvbXBvdW5kLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2VzWzBdLm1pbigpO1xufVxuXG5fQ29tcG91bmQucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yYW5nZXNbdGhpcy5fcmFuZ2VzLmxlbmd0aCAtIDFdLm1heCgpO1xufVxuXG5fQ29tcG91bmQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgLy8gRklYTUUgaW1wbGVtZW50IGJzZWFyY2ggaWYgd2UgdXNlIHRoaXMgbXVjaC5cbiAgICBmb3IgKHZhciBzID0gMDsgcyA8IHRoaXMuX3Jhbmdlcy5sZW5ndGg7ICsrcykge1xuICAgICAgICBpZiAodGhpcy5fcmFuZ2VzW3NdLmNvbnRhaW5zKHBvcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuX0NvbXBvdW5kLnByb3RvdHlwZS5pc0NvbnRpZ3VvdXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aCA+IDE7XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUucmFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jhbmdlcztcbn1cblxuX0NvbXBvdW5kLnByb3RvdHlwZS5fcHVzaFJhbmdlcyA9IGZ1bmN0aW9uKHJhbmdlcykge1xuICAgIGZvciAodmFyIHJpID0gMDsgcmkgPCB0aGlzLl9yYW5nZXMubGVuZ3RoOyArK3JpKVxuICAgICAgICByYW5nZXMucHVzaCh0aGlzLl9yYW5nZXNbcmldKTtcbn1cblxuX0NvbXBvdW5kLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzID0gJyc7XG4gICAgZm9yICh2YXIgciA9IDA7IHIgPCB0aGlzLl9yYW5nZXMubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgaWYgKHI+MCkge1xuICAgICAgICAgICAgcyA9IHMgKyAnLCc7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHMgKyB0aGlzLl9yYW5nZXNbcl0udG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHVuaW9uKHMwLCBzMSkge1xuICAgIGlmICghIChzMCBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICBzMCA9IFtzMF07XG4gICAgICAgIGlmIChzMSlcbiAgICAgICAgICAgIHMwLnB1c2goczEpO1xuICAgIH1cblxuICAgIGlmIChzMC5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgZWxzZSBpZiAoczAubGVuZ3RoID09IDEpXG4gICAgICAgIHJldHVybiBzMFswXTtcblxuICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgczAubGVuZ3RoOyArK3NpKVxuICAgICAgICBzMFtzaV0uX3B1c2hSYW5nZXMocmFuZ2VzKTtcbiAgICByYW5nZXMgPSByYW5nZXMuc29ydChfcmFuZ2VPcmRlcik7XG5cbiAgICB2YXIgb3JhbmdlcyA9IFtdO1xuICAgIHZhciBjdXJyZW50ID0gcmFuZ2VzWzBdO1xuICAgIGN1cnJlbnQgPSBuZXcgUmFuZ2UoY3VycmVudC5fbWluLCBjdXJyZW50Ll9tYXgpOyAgLy8gQ29weSBub3cgc28gd2UgZG9uJ3QgaGF2ZSB0byBsYXRlci5cblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcmFuZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBueHQgPSByYW5nZXNbaV07XG4gICAgICAgIGlmIChueHQuX21pbiA+IChjdXJyZW50Ll9tYXggKyAxKSkge1xuICAgICAgICAgICAgb3Jhbmdlcy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgY3VycmVudCA9IG5ldyBSYW5nZShueHQuX21pbiwgbnh0Ll9tYXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG54dC5fbWF4ID4gY3VycmVudC5fbWF4KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5fbWF4ID0gbnh0Ll9tYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3Jhbmdlcy5wdXNoKGN1cnJlbnQpO1xuXG4gICAgaWYgKG9yYW5nZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmV0dXJuIG9yYW5nZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfQ29tcG91bmQob3Jhbmdlcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24oczAsIHMxKSB7XG4gICAgdmFyIHIwID0gczAucmFuZ2VzKCk7XG4gICAgdmFyIHIxID0gczEucmFuZ2VzKCk7XG4gICAgdmFyIGwwID0gcjAubGVuZ3RoLCBsMSA9IHIxLmxlbmd0aDtcbiAgICB2YXIgaTAgPSAwLCBpMSA9IDA7XG4gICAgdmFyIG9yID0gW107XG5cbiAgICB3aGlsZSAoaTAgPCBsMCAmJiBpMSA8IGwxKSB7XG4gICAgICAgIHZhciBzMCA9IHIwW2kwXSwgczEgPSByMVtpMV07XG4gICAgICAgIHZhciBsYXBNaW4gPSBNYXRoLm1heChzMC5taW4oKSwgczEubWluKCkpO1xuICAgICAgICB2YXIgbGFwTWF4ID0gTWF0aC5taW4oczAubWF4KCksIHMxLm1heCgpKTtcbiAgICAgICAgaWYgKGxhcE1heCA+PSBsYXBNaW4pIHtcbiAgICAgICAgICAgIG9yLnB1c2gobmV3IFJhbmdlKGxhcE1pbiwgbGFwTWF4KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwLm1heCgpID4gczEubWF4KCkpIHtcbiAgICAgICAgICAgICsraTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK2kwO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChvci5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gRklYTUVcbiAgICB9IGVsc2UgaWYgKG9yLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJldHVybiBvclswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IF9Db21wb3VuZChvcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb3ZlcmFnZShzKSB7XG4gICAgdmFyIHRvdCA9IDA7XG4gICAgdmFyIHJsID0gcy5yYW5nZXMoKTtcbiAgICBmb3IgKHZhciByaSA9IDA7IHJpIDwgcmwubGVuZ3RoOyArK3JpKSB7XG4gICAgICAgIHZhciByID0gcmxbcmldO1xuICAgICAgICB0b3QgKz0gKHIubWF4KCkgLSByLm1pbigpICsgMSk7XG4gICAgfVxuICAgIHJldHVybiB0b3Q7XG59XG5cblxuXG5mdW5jdGlvbiByYW5nZU9yZGVyKGEsIGIpXG57XG4gICAgaWYgKGEubWluKCkgPCBiLm1pbigpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKGEubWluKCkgPiBiLm1pbigpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoYS5tYXgoKSA8IGIubWF4KCkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoYi5tYXgoKSA+IGEubWF4KCkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfcmFuZ2VPcmRlcihhLCBiKVxue1xuICAgIGlmIChhLl9taW4gPCBiLl9taW4pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoYS5fbWluID4gYi5fbWluKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoYS5fbWF4IDwgYi5fbWF4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKGIuX21heCA+IGEuX21heCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgUmFuZ2U6IFJhbmdlLFxuICAgICAgICB1bmlvbjogdW5pb24sXG4gICAgICAgIGludGVyc2VjdGlvbjogaW50ZXJzZWN0aW9uLFxuICAgICAgICBjb3ZlcmFnZTogY292ZXJhZ2UsXG4gICAgICAgIHJhbmdlT3ZlcjogcmFuZ2VPcmRlcixcbiAgICAgICAgX3JhbmdlT3JkZXI6IF9yYW5nZU9yZGVyXG4gICAgfVxufSIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTNcbi8vXG4vLyBzdmctZXhwb3J0LmpzXG4vL1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBtYWtlRWxlbWVudCA9IHV0aWxzLm1ha2VFbGVtZW50O1xuICAgIHZhciBtYWtlRWxlbWVudE5TID0gdXRpbHMubWFrZUVsZW1lbnROUztcblxuICAgIHZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi92ZXJzaW9uJyk7XG5cbiAgICB2YXIgc3ZnU2VxVGllciA9IHJlcXVpcmUoJy4vc2VxdWVuY2UtZHJhdycpLnN2Z1NlcVRpZXI7XG5cbiAgICB2YXIgc3ZndSA9IHJlcXVpcmUoJy4vc3ZnLXV0aWxzJyk7XG4gICAgdmFyIE5TX1NWRyA9IHN2Z3UuTlNfU1ZHO1xuICAgIHZhciBOU19YTElOSyA9IHN2Z3UuTlNfWExJTks7XG4gICAgdmFyIFNWR1BhdGggPSBzdmd1LlNWR1BhdGg7XG5cbiAgICB2YXIgbmYgPSByZXF1aXJlKCcuL251bWZvcm1hdHMnKTtcbiAgICB2YXIgZm9ybWF0UXVhbnRMYWJlbCA9IG5mLmZvcm1hdFF1YW50TGFiZWw7XG59XG5cblxuQnJvd3Nlci5wcm90b3R5cGUubWFrZVNWRyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgbWluVGllckhlaWdodCA9IG9wdHMubWluVGllckhlaWdodCB8fCAyMDtcbiAgICB2YXIgcGFkZGluZyA9IDM7XG5cbiAgICB2YXIgYiA9IHRoaXM7XG4gICAgdmFyIHNhdmVEb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudChOU19TVkcsICdzdmcnLCBudWxsKTtcblxuICAgIHZhciBzYXZlUm9vdCA9IG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycsIG51bGwsIHtcbiAgICAgICAgZm9udEZhbWlseTogJ2hlbHZldGljYScsXG4gICAgICAgIGZvbnRTaXplOiAnOHB0J1xuICAgIH0pO1xuICAgIHNhdmVEb2MuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNhdmVSb290KTtcblxuICAgIHZhciBtYXJnaW4gPSAyMDA7XG5cbiAgICB2YXIgZGFsbGlhbmNlQW5jaG9yID0gbWFrZUVsZW1lbnROUyhOU19TVkcsICdhJyxcbiAgICAgICBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3RleHQnLCAnR3JhcGhpY3MgZnJvbSBEYWxsaWFuY2UgJyArIFZFUlNJT04sIHtcbiAgICAgICAgICAgeDogKGIuZmVhdHVyZVBhbmVsV2lkdGggKyBtYXJnaW4gKyAyMCkvMixcbiAgICAgICAgICAgeTogMzAsXG4gICAgICAgICAgIHN0cm9rZVdpZHRoOiAwLFxuICAgICAgICAgICBmb250U2l6ZTogJzEycHQnLFxuXHQgICAgICAgdGV4dEFuY2hvcjogJ21pZGRsZScsXG5cdCAgICAgICBmaWxsOiAnYmx1ZSdcbiAgICAgICB9KSk7XG4gICAgZGFsbGlhbmNlQW5jaG9yLnNldEF0dHJpYnV0ZSgneG1sbnM6eGxpbmsnLCBOU19YTElOSyk7XG4gICAgZGFsbGlhbmNlQW5jaG9yLnNldEF0dHJpYnV0ZSgneGxpbms6aHJlZicsICdodHRwOi8vd3d3LmJpb2RhbGxpYW5jZS5vcmcvJyk7XG4gIFxuICAgIHNhdmVSb290LmFwcGVuZENoaWxkKGRhbGxpYW5jZUFuY2hvcik7XG4gICAgXG4gICAgdmFyIGNsaXBSZWN0ID0gbWFrZUVsZW1lbnROUyhOU19TVkcsICdyZWN0JywgbnVsbCwge1xuICAgIFx0eDogbWFyZ2luLFxuICAgIFx0eTogNTAsXG4gICAgXHR3aWR0aDogYi5mZWF0dXJlUGFuZWxXaWR0aCxcbiAgICBcdGhlaWdodDogMTAwMDAwXG4gICAgfSk7XG4gICAgdmFyIGNsaXAgPSBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ2NsaXBQYXRoJywgY2xpcFJlY3QsIHtpZDogJ2ZlYXR1cmVDbGlwJ30pO1xuICAgIHNhdmVSb290LmFwcGVuZENoaWxkKGNsaXApO1xuXG4gICAgdmFyIHBvcyA9IDcwO1xuICAgIHZhciB0aWVySG9sZGVyID0gbWFrZUVsZW1lbnROUyhOU19TVkcsICdnJywgbnVsbCwge30pO1xuXG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IGIudGllcnMubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgIHZhciB0aWVyID0gYi50aWVyc1t0aV07XG4gICAgXHR2YXIgdGllclNWRyA9IG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycsIG51bGwsIHtjbGlwUGF0aDogJ3VybCgjZmVhdHVyZUNsaXApJywgY2xpcFJ1bGU6ICdub256ZXJvJ30pO1xuICAgIFx0dmFyIHRpZXJMYWJlbHMgPSBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ2cnKTtcbiAgICBcdHZhciB0aWVyVG9wUG9zID0gcG9zO1xuXG4gICAgXHR2YXIgdGllckJhY2tncm91bmQgPSBtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3JlY3QnLCBudWxsLCB7eDogMCwgeTogdGllclRvcFBvcywgd2lkdGg6ICcxMDAwMCcsIGhlaWdodDogNTAsIGZpbGw6IHRpZXIuYmFja2dyb3VuZH0pO1xuICAgIFx0dGllclNWRy5hcHBlbmRDaGlsZCh0aWVyQmFja2dyb3VuZCk7XG5cbiAgICBcdGlmICh0aWVyLmRhc1NvdXJjZS50aWVyX3R5cGUgPT09ICdzZXF1ZW5jZScpIHtcbiAgICBcdCAgICB2YXIgc2VxVHJhY2sgPSBzdmdTZXFUaWVyKHRpZXIsIHRpZXIuY3VycmVudFNlcXVlbmNlKTtcbiAgICBcdCAgICBcbiAgICBcdCAgICB0aWVyU1ZHLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycsIHNlcVRyYWNrLCB7dHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyAobWFyZ2luKSArICcsICcgKyBwb3MgKyAnKSd9KSk7XG4gICAgXHQgICAgcG9zICs9IDgwO1xuICAgIFx0fSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGllci5zdWJ0aWVycykge1xuICAgIFx0XHQgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICBcdFxuICAgIFx0ICAgIHZhciBvZmZzZXQgPSAoKHRpZXIuZ2x5cGhDYWNoZU9yaWdpbiAtIGIudmlld1N0YXJ0KSAqIGIuc2NhbGUpO1xuICAgICAgICAgICAgdmFyIGhhc1F1YW50ID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBzdGkgPSAwOyBzdGkgPCB0aWVyLnN1YnRpZXJzLmxlbmd0aDsgKytzdGkpIHtcbiAgICAgICAgICAgICAgICBwb3MgKz0gcGFkZGluZztcbiAgICAgICAgXHRcdHZhciBzdWJ0aWVyID0gdGllci5zdWJ0aWVyc1tzdGldO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgXHRcdHZhciBnbHlwaEVsZW1lbnRzID0gW107XG4gICAgICAgIFx0XHRmb3IgKHZhciBnaSA9IDA7IGdpIDwgc3VidGllci5nbHlwaHMubGVuZ3RoOyArK2dpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnbHlwaCA9IHN1YnRpZXIuZ2x5cGhzW2dpXTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhFbGVtZW50cy5wdXNoKGdseXBoLnRvU1ZHKCkpO1xuICAgICAgICBcdFx0fVxuXG4gICAgXHRcdCAgICB0aWVyU1ZHLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnZycsIGdseXBoRWxlbWVudHMsIHt0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIChtYXJnaW4rb2Zmc2V0KSArICcsICcgKyBwb3MgKyAnKSd9KSk7XG5cbiAgICAgICAgXHRcdGlmIChzdWJ0aWVyLnF1YW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1F1YW50ID0gdHJ1ZTtcbiAgICAgICAgXHRcdCAgICB2YXIgcSA9IHN1YnRpZXIucXVhbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gc3VidGllci5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bVRpY3MgPSAyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaCA+IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1UaWNzID0gMSArICgoaC8yMCkgfCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGljU3BhY2luZyA9IGggLyAobnVtVGljcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGljSW50ZXJ2YWwgPSAocS5tYXggLSBxLm1pbikgLyAobnVtVGljcyAtIDEpO1xuXG4gICAgICAgIFx0XHQgICAgdmFyIHBhdGggPSBuZXcgU1ZHUGF0aCgpO1xuICAgICAgICBcdFx0ICAgIHBhdGgubW92ZVRvKG1hcmdpbiArIDUsIHBvcyk7XG4gICAgICAgIFx0XHQgICAgcGF0aC5saW5lVG8obWFyZ2luLCBwb3MpO1xuICAgICAgICBcdFx0ICAgIHBhdGgubGluZVRvKG1hcmdpbiwgcG9zICsgc3VidGllci5oZWlnaHQpO1xuICAgICAgICBcdFx0ICAgIHBhdGgubGluZVRvKG1hcmdpbiArIDUsIHBvcyArIHN1YnRpZXIuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDE7IHQgPCBudW1UaWNzLTE7ICsrdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5ID0gdCp0aWNTcGFjaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5tb3ZlVG8obWFyZ2luLCBwb3MgKyB0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmxpbmVUbyhtYXJnaW4rMywgcG9zICsgdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgXHRcdCAgICB0aWVyTGFiZWxzLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAncGF0aCcsIG51bGwsIHtkOiBwYXRoLnRvUGF0aERhdGEoKSwgZmlsbDogJ25vbmUnLCBzdHJva2U6ICdibGFjaycsIHN0cm9rZVdpZHRoOiAnMnB4J30pKTtcbiAgICAgICAgXHRcdCAgICB0aWVyTGFiZWxzLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAndGV4dCcsIGZvcm1hdFF1YW50TGFiZWwocS5tYXgpLCB7eDogbWFyZ2luIC0gMywgeTogcG9zICsgNywgdGV4dEFuY2hvcjogJ2VuZCd9KSk7XG4gICAgICAgIFx0XHQgICAgdGllckxhYmVscy5hcHBlbmRDaGlsZChtYWtlRWxlbWVudE5TKE5TX1NWRywgJ3RleHQnLCBmb3JtYXRRdWFudExhYmVsKHEubWluKSwge3g6IG1hcmdpbiAtIDMsIHk6IHBvcyArICBzdWJ0aWVyLmhlaWdodCwgdGV4dEFuY2hvcjogJ2VuZCd9KSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDwgbnVtVGljcy0xOyArK3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eSA9IHQqdGljU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpZXJMYWJlbHMuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnROUyhOU19TVkcsICd0ZXh0JywgZm9ybWF0UXVhbnRMYWJlbCgoMS4wKnEubWF4KSAtICh0KnRpY0ludGVydmFsKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBtYXJnaW4gLSAzLCB5OiBwb3MgKyAgdHkgKyAzLCB0ZXh0QW5jaG9yOiAnZW5kJ30pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcdFx0fVxuXG4gICAgXHRcdCAgICBwb3MgKz0gc3VidGllci5oZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9zIC0gdGllclRvcFBvcyA8IG1pblRpZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBwb3MgPSB0aWVyVG9wUG9zICsgbWluVGllckhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICBcdH1cblxuICAgICAgICB2YXIgbGFiZWxOYW1lO1xuICAgICAgICBpZiAodHlwZW9mIHRpZXIuY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgbGFiZWxOYW1lID0gdGllci5jb25maWcubmFtZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGFiZWxOYW1lID0gdGllci5kYXNTb3VyY2UubmFtZTtcbiAgICBcdHRpZXJMYWJlbHMuYXBwZW5kQ2hpbGQoXG4gICAgXHQgICAgbWFrZUVsZW1lbnROUyhcbiAgICBcdFx0TlNfU1ZHLCAndGV4dCcsXG4gICAgXHRcdGxhYmVsTmFtZSxcbiAgICBcdFx0e3g6IG1hcmdpbiAtIChoYXNRdWFudCA/IDIwIDogMTIpLCB5OiAocG9zK3RpZXJUb3BQb3MrOCkvMiwgZm9udFNpemU6ICcxMHB0JywgdGV4dEFuY2hvcjogJ2VuZCd9KSk7XG5cbiAgICBcdFxuICAgIFx0dGllckJhY2tncm91bmQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBwb3MgLSB0aWVyVG9wUG9zKTtcbiAgICBcdHRpZXJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnROUyhOU19TVkcsICdnJywgW3RpZXJTVkcsIHRpZXJMYWJlbHNdKSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuaGlnaGxpZ2h0cykge1xuICAgICAgICB2YXIgaGlnaGxpZ2h0cyA9IHRoaXMuaGlnaGxpZ2h0cyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaGkgPSAwOyBoaSA8IGhpZ2hsaWdodHMubGVuZ3RoOyArK2hpKSB7XG4gICAgICAgICAgICB2YXIgaCA9IGhpZ2hsaWdodHNbaGldO1xuICAgICAgICAgICAgaWYgKChoLmNociA9PSB0aGlzLmNociB8fCBoLmNociA9PSAoJ2NocicgKyB0aGlzLmNocikpICYmIGgubWluIDwgdGhpcy52aWV3RW5kICYmIGgubWF4ID4gdGhpcy52aWV3U3RhcnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG1pbiA9IChNYXRoLm1heChoLm1pbiwgdGhpcy52aWV3U3RhcnQpIC0gdGhpcy52aWV3U3RhcnQpICogdGhpcy5zY2FsZTtcbiAgICAgICAgICAgICAgICB2YXIgdG1heCA9IChNYXRoLm1pbihoLm1heCwgdGhpcy52aWV3RW5kKSAtIHRoaXMudmlld1N0YXJ0KSAqIHRoaXMuc2NhbGU7XG5cbiAgICAgICAgICAgICAgICB0aWVySG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAncmVjdCcsIG51bGwsIHt4OiBtYXJnaW4gKyB0bWluLCB5OiA3MCwgd2lkdGg6ICh0bWF4LXRtaW4pLCBoZWlnaHQ6IHBvcy03MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdub25lJywgZmlsbDogdGhpcy5kZWZhdWx0SGlnaGxpZ2h0RmlsbCwgZmlsbE9wYWNpdHk6IHRoaXMuZGVmYXVsdEhpZ2hsaWdodEFscGhhfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVyUG9zID0gLTE7IFxuICAgIGlmIChvcHRzLnJ1bGVyID09ICdjZW50ZXInKSB7XG4gICAgICAgIHJ1bGVyUG9zID0gbWFyZ2luICsgKCh0aGlzLnZpZXdFbmQgLSB0aGlzLnZpZXdTdGFydCArIDEpKnRoaXMuc2NhbGUpIC8gMjtcbiAgICB9IGVsc2UgaWYgKG9wdHMucnVsZXIgPT0gJ2xlZnQnKSB7XG4gICAgICAgIHJ1bGVyUG9zID0gbWFyZ2luO1xuICAgIH0gZWxzZSBpZiAob3B0cy5ydWxlciA9PSAncmlnaHQnKSB7XG4gICAgICAgIHJ1bGVyUG9zID0gbWFyZ2luICsgKCh0aGlzLnZpZXdFbmQgLSB0aGlzLnZpZXdTdGFydCArIDEpKnRoaXMuc2NhbGUpO1xuICAgIH1cbiAgICBpZiAocnVsZXJQb3MgPj0gMCkge1xuICAgICAgICB0aWVySG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50TlMoTlNfU1ZHLCAnbGluZScsIG51bGwsIHt4MTogcnVsZXJQb3MsIHkxOiA3MCwgeDI6IHJ1bGVyUG9zLCB5MjogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6ICdibHVlJ30pKTtcbiAgICB9XG5cbiAgICBzYXZlUm9vdC5hcHBlbmRDaGlsZCh0aWVySG9sZGVyKTtcbiAgICBzYXZlRG9jLmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYi5mZWF0dXJlUGFuZWxXaWR0aCArIDIwICsgbWFyZ2luKTtcbiAgICBzYXZlRG9jLmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHBvcyArIDUwKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW25ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoc2F2ZURvYyldLCB7dHlwZTogJ2ltYWdlL3N2Zyt4bWwnfSk7XG4gICAgcmV0dXJuIHN2Z0Jsb2I7XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gc3ZnLXV0aWxzLmpzXG4vL1xuXG52YXIgTlNfU1ZHID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbnZhciBOU19YTElOSyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxuZnVuY3Rpb24gU1ZHUGF0aCgpIHtcbiAgICB0aGlzLm9wcyA9IFtdO1xufVxuXG5TVkdQYXRoLnByb3RvdHlwZS5tb3ZlVG8gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5vcHMucHVzaCgnTSAnICsgeCArICcgJyArIHkpO1xufVxuXG5TVkdQYXRoLnByb3RvdHlwZS5saW5lVG8gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5vcHMucHVzaCgnTCAnICsgeCArICcgJyArIHkpO1xufVxuXG5TVkdQYXRoLnByb3RvdHlwZS5jbG9zZVBhdGggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wcy5wdXNoKCdaJyk7XG59XG5cblNWR1BhdGgucHJvdG90eXBlLnRvUGF0aERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHMuam9pbignICcpO1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIE5TX1NWRzogTlNfU1ZHLFxuICAgICAgICBOU19YTElOSzogTlNfWExJTkssXG4gICAgICAgIFNWR1BhdGg6IFNWR1BhdGhcbiAgICB9XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxM1xuLy9cbi8vIHRhYml4LXNvdXJjZS5qc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHNhID0gcmVxdWlyZSgnLi9zb3VyY2VhZGFwdGVycycpO1xuICAgIHZhciBkYWxsaWFuY2VfcmVnaXN0ZXJTb3VyY2VBZGFwdGVyRmFjdG9yeSA9IHNhLnJlZ2lzdGVyU291cmNlQWRhcHRlckZhY3Rvcnk7XG4gICAgdmFyIGRhbGxpYW5jZV9tYWtlUGFyc2VyID0gc2EubWFrZVBhcnNlcjtcbiAgICB2YXIgRmVhdHVyZVNvdXJjZUJhc2UgPSBzYS5GZWF0dXJlU291cmNlQmFzZTtcblxuICAgIHZhciBiaW4gPSByZXF1aXJlKCcuL2JpbicpO1xuICAgIHZhciBVUkxGZXRjaGFibGUgPSBiaW4uVVJMRmV0Y2hhYmxlO1xuICAgIHZhciBCbG9iRmV0Y2hhYmxlID0gYmluLkJsb2JGZXRjaGFibGU7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIEF3YWl0ZWQgPSB1dGlscy5Bd2FpdGVkO1xuXG4gICAgdmFyIGNvbm5lY3RUYWJpeCA9IHJlcXVpcmUoJy4vdGFiaXgnKS5jb25uZWN0VGFiaXg7XG59XG5cbmZ1bmN0aW9uIFRhYml4RmVhdHVyZVNvdXJjZShzb3VyY2UpIHtcbiAgICBGZWF0dXJlU291cmNlQmFzZS5jYWxsKHRoaXMpO1xuICAgIHRoaXMucmVhZGluZXNzID0gJ0Nvbm5lY3RpbmcnO1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXG4gICAgdGhpcy50YWJpeEhvbGRlciA9IG5ldyBBd2FpdGVkKCk7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuXG4gICAgdmFyIHBhcnNlciA9IGRhbGxpYW5jZV9tYWtlUGFyc2VyKHNvdXJjZS5wYXlsb2FkKTtcbiAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICB0aHJvdyAnVW5zdXBvcnRlZCB0YWJpeCBwYXlsb2FkICcgKyBzb3VyY2UucGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSwgaW5kZXg7XG4gICAgaWYgKHRoaXMuc291cmNlLmJsb2IpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBCbG9iRmV0Y2hhYmxlKHRoaXMuc291cmNlLmJsb2IpO1xuICAgICAgICBpbmRleCA9IG5ldyBCbG9iRmV0Y2hhYmxlKHRoaXMuc291cmNlLmluZGV4QmxvYik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IG5ldyBVUkxGZXRjaGFibGUodGhpcy5zb3VyY2UudXJpLCB7Y3JlZGVudGlhbHM6IHRoaXMuc291cmNlLmNyZWRlbnRpYWxzfSk7XG4gICAgICAgIGluZGV4ID0gbmV3IFVSTEZldGNoYWJsZSh0aGlzLnNvdXJjZS5pbmRleFVSSSB8fCAodGhpcy5zb3VyY2UudXJpICsgJy50YmknKSwge2NyZWRlbnRpYWxzOiB0aGlzLnNvdXJjZS5jcmVkZW50aWFsc30pO1xuICAgIH1cbiAgICBjb25uZWN0VGFiaXgoZGF0YSwgaW5kZXgsIGZ1bmN0aW9uKHRhYml4LCBlcnIpIHtcbiAgICAgICAgdGhpc0IudGFiaXhIb2xkZXIucHJvdmlkZSh0YWJpeCk7XG4gICAgICAgIHRhYml4LmZldGNoSGVhZGVyKGZ1bmN0aW9uKGxpbmVzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uID0gcGFyc2VyLmNyZWF0ZVNlc3Npb24oZnVuY3Rpb24oKSB7IC8qIE51bGwgc2luayBiZWNhdXNlIHdlIHNob3VsZG4ndCBnZXQgcmVjb3JkcyAqLyB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgbGluZXMubGVuZ3RoOyArK2xpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24ucGFyc2UobGluZXNbbGldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5mbHVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpc0IucmVhZGluZXNzID0gbnVsbFxuICAgICAgICB0aGlzQi5ub3RpZnlSZWFkaW5lc3MoKTtcbiAgICB9KTtcbn1cblxuVGFiaXhGZWF0dXJlU291cmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmVhdHVyZVNvdXJjZUJhc2UucHJvdG90eXBlKTtcblxuVGFiaXhGZWF0dXJlU291cmNlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIHNjYWxlLCB0eXBlcywgcG9vbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIFxuICAgIHRoaXNCLmJ1c3krKztcbiAgICB0aGlzQi5ub3RpZnlBY3Rpdml0eSgpO1xuICAgIFxuICAgIHRoaXMudGFiaXhIb2xkZXIuYXdhaXQoZnVuY3Rpb24odGFiaXgpIHtcbiAgICAgICAgdGFiaXguZmV0Y2goY2hyLCBtaW4sIG1heCwgZnVuY3Rpb24ocmVjb3JkcywgZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXNCLmJ1c3ktLTtcbiAgICAgICAgICAgIHRoaXNCLm5vdGlmeUFjdGl2aXR5KCk7XG5cbiAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzQi5wYXJzZXIuY3JlYXRlU2Vzc2lvbihmdW5jdGlvbihmKSB7ZmVhdHVyZXMucHVzaChmKX0pO1xuICAgICAgICAgICAgZm9yICh2YXIgcmkgPSAwOyByaSA8IHJlY29yZHMubGVuZ3RoOyArK3JpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBzZXNzaW9uLnBhcnNlKHJlY29yZHNbcmldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlc3Npb24uZmx1c2goKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGZlYXR1cmVzLCAxMDAwMDAwMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cblxuVGFiaXhGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXRTdHlsZVNoZWV0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5wYXJzZXIgJiYgdGhpcy5wYXJzZXIuZ2V0U3R5bGVTaGVldClcbiAgICAgICAgdGhpcy5wYXJzZXIuZ2V0U3R5bGVTaGVldChjYWxsYmFjaylcbn1cblxuVGFiaXhGZWF0dXJlU291cmNlLnByb3RvdHlwZS5nZXREZWZhdWx0RklQcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMucGFyc2VyICYmIHRoaXMucGFyc2VyLmdldERlZmF1bHRGSVBzKVxuICAgICAgICB0aGlzLnBhcnNlci5nZXREZWZhdWx0RklQcyhjYWxsYmFjayk7XG59XG5cblxuZGFsbGlhbmNlX3JlZ2lzdGVyU291cmNlQWRhcHRlckZhY3RvcnkoJ3RhYml4JywgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgcmV0dXJuIHtmZWF0dXJlczogbmV3IFRhYml4RmVhdHVyZVNvdXJjZShzb3VyY2UpfTtcbn0pOyIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTFcbi8vXG4vLyB0YWJpeC5qczogYmFzaWMgc3VwcG9ydCBmb3IgdGFiaXgtaW5kZXhlZCBmbGF0ZmlsZXNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgVEFCSVhfTUFHSUMgPSAweDAxNDk0MjU0O1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBzcGFucyA9IHJlcXVpcmUoJy4vc3BhbnMnKTtcbiAgICB2YXIgUmFuZ2UgPSBzcGFucy5SYW5nZTtcbiAgICB2YXIgdW5pb24gPSBzcGFucy51bmlvbjtcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gc3BhbnMuaW50ZXJzZWN0aW9uO1xuXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIHJlYWRJbnQgPSBiaW4ucmVhZEludDtcbiAgICB2YXIgcmVhZFNob3J0ID0gYmluLnJlYWRTaG9ydDtcbiAgICB2YXIgcmVhZEJ5dGUgPSBiaW4ucmVhZEJ5dGU7XG4gICAgdmFyIHJlYWRJbnQ2NCA9IGJpbi5yZWFkSW50NjQ7XG4gICAgdmFyIHJlYWRGbG9hdCA9IGJpbi5yZWFkRmxvYXQ7XG5cbiAgICB2YXIgbGgzdXRpbHMgPSByZXF1aXJlKCcuL2xoM3V0aWxzJyk7XG4gICAgdmFyIHJlYWRWb2IgPSBsaDN1dGlscy5yZWFkVm9iO1xuICAgIHZhciB1bmJnemYgPSBsaDN1dGlscy51bmJnemY7XG4gICAgdmFyIHJlZzJiaW5zID0gbGgzdXRpbHMucmVnMmJpbnM7XG4gICAgdmFyIENodW5rID0gbGgzdXRpbHMuQ2h1bms7XG59XG5cbmZ1bmN0aW9uIFRhYml4RmlsZSgpIHtcbn1cblxuZnVuY3Rpb24gY29ubmVjdFRhYml4KGRhdGEsIHRiaSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGFiaXggPSBuZXcgVGFiaXhGaWxlKCk7XG4gICAgdGFiaXguZGF0YSA9IGRhdGE7XG4gICAgdGFiaXgudGJpID0gdGJpO1xuXG4gICAgdGFiaXgudGJpLmZldGNoKGZ1bmN0aW9uKGhlYWRlcikgeyAgIC8vIERvIHdlIHJlYWxseSBuZWVkIHRvIGZldGNoIHRoZSB3aG9sZSB0aGluZz8gOi0oXG4gICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGxvZyhcIkNvdWxkbid0IGFjY2VzcyBUYWJpeFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bmNoZWFkID0gdW5iZ3pmKGhlYWRlciwgaGVhZGVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICB2YXIgdW5jYmEgPSBuZXcgVWludDhBcnJheSh1bmNoZWFkKTtcbiAgICAgICAgdmFyIG1hZ2ljID0gcmVhZEludCh1bmNiYSwgMCk7XG4gICAgICAgIGlmIChtYWdpYyAhPSBUQUJJWF9NQUdJQykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdOb3QgYSB0YWJpeCBpbmRleCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5yZWYgPSByZWFkSW50KHVuY2JhLCA0KTtcbiAgICAgICAgdGFiaXguZm9ybWF0ID0gcmVhZEludCh1bmNiYSwgOCk7XG4gICAgICAgIHRhYml4LmNvbFNlcSA9IHJlYWRJbnQodW5jYmEsIDEyKTtcbiAgICAgICAgdGFiaXguY29sU3RhcnQgPSByZWFkSW50KHVuY2JhLCAxNik7XG4gICAgICAgIHRhYml4LmNvbEVuZCA9IHJlYWRJbnQodW5jYmEsIDIwKTtcbiAgICAgICAgdGFiaXgubWV0YSA9IHJlYWRJbnQodW5jYmEsIDI0KTtcbiAgICAgICAgdGFiaXguc2tpcCA9IHJlYWRJbnQodW5jYmEsIDI4KTtcbiAgICAgICAgdmFyIG5hbWVMZW5ndGggPSByZWFkSW50KHVuY2JhLCAzMik7XG5cbiAgICAgICAgdGFiaXguaW5kaWNlcyA9IFtdO1xuXG4gICAgICAgIHZhciBwID0gMzY7XG4gICAgICAgIHRhYml4LmNoclRvSW5kZXggPSB7fTtcbiAgICAgICAgdGFiaXguaW5kZXhUb0NociA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5yZWY7ICsraSkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAnJ1xuXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IHVuY2JhW3ArK107XG4gICAgICAgICAgICAgICAgaWYgKGNoID09IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgbmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFiaXguY2hyVG9JbmRleFtuYW1lXSA9IGk7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKCdjaHInKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFiaXguY2hyVG9JbmRleFtuYW1lLnN1YnN0cmluZygzKV0gPSBpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJpeC5jaHJUb0luZGV4WydjaHInICsgbmFtZV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFiaXguaW5kZXhUb0Noci5wdXNoKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pbkJsb2NrSW5kZXggPSAxMDAwMDAwMDAwO1xuICAgICAgICBmb3IgKHZhciByZWYgPSAwOyByZWYgPCBucmVmOyArK3JlZikge1xuICAgICAgICAgICAgdmFyIGJsb2NrU3RhcnQgPSBwO1xuICAgICAgICAgICAgdmFyIG5iaW4gPSByZWFkSW50KHVuY2JhLCBwKTsgcCArPSA0O1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCBuYmluOyArK2IpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmluID0gcmVhZEludCh1bmNiYSwgcCk7XG4gICAgICAgICAgICAgICAgdmFyIG5jaG5rID0gcmVhZEludCh1bmNiYSwgcCs0KTtcbiAgICAgICAgICAgICAgICBwICs9IDggKyAobmNobmsgKiAxNik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmludHYgPSByZWFkSW50KHVuY2JhLCBwKTsgcCArPSA0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcSA9IHA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5pbnR2OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IHJlYWRWb2IodW5jYmEsIHEpOyBxICs9IDg7XG4gICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpID0gdi5ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYub2Zmc2V0ID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpICs9IDY1NTM2O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaSA8IG1pbkJsb2NrSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5CbG9ja0luZGV4ID0gYmk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgKz0gKG5pbnR2ICogOCk7XG5cblxuICAgICAgICAgICAgdmFyIHViID0gdW5jYmE7XG4gICAgICAgICAgICBpZiAobmJpbiA+IDApIHtcbiAgICAgICAgICAgICAgICB0YWJpeC5pbmRpY2VzW3JlZl0gPSBuZXcgVWludDhBcnJheSh1bmNoZWFkLCBibG9ja1N0YXJ0LCBwIC0gYmxvY2tTdGFydCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICB0YWJpeC5oZWFkZXJNYXggPSBtaW5CbG9ja0luZGV4O1xuXG4gICAgICAgIGNhbGxiYWNrKHRhYml4KTtcbiAgICB9KTtcbn1cblxuLy8gQ29weS1wYXN0ZSBmcm9tIEJhbUZpbGVcblxuVGFiaXhGaWxlLnByb3RvdHlwZS5ibG9ja3NGb3JSYW5nZSA9IGZ1bmN0aW9uKHJlZklkLCBtaW4sIG1heCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kaWNlc1tyZWZJZF07XG4gICAgaWYgKCFpbmRleCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIGludEJpbnNMID0gcmVnMmJpbnMobWluLCBtYXgpO1xuICAgIHZhciBpbnRCaW5zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRCaW5zTC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpbnRCaW5zW2ludEJpbnNMW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBsZWFmQ2h1bmtzID0gW10sIG90aGVyQ2h1bmtzID0gW107XG5cbiAgICB2YXIgbmJpbiA9IHJlYWRJbnQoaW5kZXgsIDApO1xuICAgIHZhciBwID0gNDtcbiAgICBmb3IgKHZhciBiID0gMDsgYiA8IG5iaW47ICsrYikge1xuICAgICAgICB2YXIgYmluID0gcmVhZEludChpbmRleCwgcCk7XG4gICAgICAgIHZhciBuY2huayA9IHJlYWRJbnQoaW5kZXgsIHArNCk7XG4gICAgICAgIHAgKz0gODtcbiAgICAgICAgaWYgKGludEJpbnNbYmluXSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuY2huazsgKytjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzID0gcmVhZFZvYihpbmRleCwgcCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlID0gcmVhZFZvYihpbmRleCwgcCArIDgpO1xuICAgICAgICAgICAgICAgIChiaW4gPCA0NjgxID8gb3RoZXJDaHVua3MgOiBsZWFmQ2h1bmtzKS5wdXNoKG5ldyBDaHVuayhjcywgY2UpKTtcbiAgICAgICAgICAgICAgICBwICs9IDE2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcCArPSAgKG5jaG5rICogMTYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5pbnR2ID0gcmVhZEludChpbmRleCwgcCk7XG4gICAgdmFyIGxvd2VzdCA9IG51bGw7XG4gICAgdmFyIG1pbkxpbiA9IE1hdGgubWluKG1pbj4+MTQsIG5pbnR2IC0gMSksIG1heExpbiA9IE1hdGgubWluKG1heD4+MTQsIG5pbnR2IC0gMSk7XG4gICAgZm9yICh2YXIgaSA9IG1pbkxpbjsgaSA8PSBtYXhMaW47ICsraSkge1xuICAgICAgICB2YXIgbGIgPSAgcmVhZFZvYihpbmRleCwgcCArIDQgKyAoaSAqIDgpKTtcbiAgICAgICAgaWYgKCFsYikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsb3dlc3QgfHwgbGIuYmxvY2sgPCBsb3dlc3QuYmxvY2sgfHwgbGIub2Zmc2V0IDwgbG93ZXN0Lm9mZnNldCkge1xuICAgICAgICAgICAgbG93ZXN0ID0gbGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdmFyIHBydW5lZE90aGVyQ2h1bmtzID0gW107XG4gICAgaWYgKGxvd2VzdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaG5rID0gb3RoZXJDaHVua3NbaV07XG4gICAgICAgICAgICBpZiAoY2huay5tYXh2LmJsb2NrID49IGxvd2VzdC5ibG9jayAmJiBjaG5rLm1heHYub2Zmc2V0ID49IGxvd2VzdC5vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBwcnVuZWRPdGhlckNodW5rcy5wdXNoKGNobmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBcbiAgICBvdGhlckNodW5rcyA9IHBydW5lZE90aGVyQ2h1bmtzO1xuXG4gICAgdmFyIGludENodW5rcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaW50Q2h1bmtzLnB1c2gob3RoZXJDaHVua3NbaV0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlYWZDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaW50Q2h1bmtzLnB1c2gobGVhZkNodW5rc1tpXSk7XG4gICAgfVxuXG4gICAgaW50Q2h1bmtzLnNvcnQoZnVuY3Rpb24oYzAsIGMxKSB7XG4gICAgICAgIHZhciBkaWYgPSBjMC5taW52LmJsb2NrIC0gYzEubWludi5ibG9jaztcbiAgICAgICAgaWYgKGRpZiAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGMwLm1pbnYub2Zmc2V0IC0gYzEubWludi5vZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgbWVyZ2VkQ2h1bmtzID0gW107XG4gICAgaWYgKGludENodW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBjdXIgPSBpbnRDaHVua3NbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaW50Q2h1bmtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbmMgPSBpbnRDaHVua3NbaV07XG4gICAgICAgICAgICBpZiAobmMubWludi5ibG9jayA9PSBjdXIubWF4di5ibG9jayAvKiAmJiBuYy5taW52Lm9mZnNldCA9PSBjdXIubWF4di5vZmZzZXQgKi8pIHsgLy8gbm8gcG9pbnQgc3BsaXR0aW5nIG1pZC1ibG9ja1xuICAgICAgICAgICAgICAgIGN1ciA9IG5ldyBDaHVuayhjdXIubWludiwgbmMubWF4dik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lcmdlZENodW5rcy5wdXNoKGN1cik7XG4gICAgICAgICAgICAgICAgY3VyID0gbmM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2VkQ2h1bmtzLnB1c2goY3VyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkQ2h1bmtzO1xufVxuXG5UYWJpeEZpbGUucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2hyLCBtaW4sIG1heCwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgdmFyIGNocklkID0gdGhpcy5jaHJUb0luZGV4W2Nocl07XG4gICAgaWYgKGNocklkID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtdKTtcblxuICAgIHZhciBjYW5vbmljYWxDaHIgPSB0aGlzLmluZGV4VG9DaHJbY2hySWRdO1xuXG4gICAgdmFyIGNodW5rcztcbiAgICBpZiAoY2hySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjaHVua3MgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjaHVua3MgPSB0aGlzLmJsb2Nrc0ZvclJhbmdlKGNocklkLCBtaW4sIG1heCk7XG4gICAgICAgIGlmICghY2h1bmtzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCAnRXJyb3IgaW4gaW5kZXggZmV0Y2gnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWNvcmRzID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZGF0YTtcblxuICAgIGZ1bmN0aW9uIHRyYW1wKCkge1xuICAgICAgICBpZiAoaW5kZXggPj0gY2h1bmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlY29yZHMpO1xuICAgICAgICB9IGVsc2UgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGNodW5rc1tpbmRleF07XG4gICAgICAgICAgICB2YXIgZmV0Y2hNaW4gPSBjLm1pbnYuYmxvY2s7XG4gICAgICAgICAgICB2YXIgZmV0Y2hNYXggPSBjLm1heHYuYmxvY2sgKyAoMTw8MTYpOyAvLyAqc2lnaCpcbiAgICAgICAgICAgIHRoaXNCLmRhdGEuc2xpY2UoZmV0Y2hNaW4sIGZldGNoTWF4IC0gZmV0Y2hNaW4pLmZldGNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gdW5iZ3pmKHIsIGMubWF4di5ibG9jayAtIGMubWludi5ibG9jayArIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmFtcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgICAgIHRoaXNCLnJlYWRSZWNvcmRzKGJhLCBjaHVua3NbaW5kZXhdLm1pbnYub2Zmc2V0LCByZWNvcmRzLCBtaW4sIG1heCwgY2Fub25pY2FsQ2hyKTtcbiAgICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgICAgIHJldHVybiB0cmFtcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyYW1wKCk7XG59XG5cblRhYml4RmlsZS5wcm90b3R5cGUucmVhZFJlY29yZHMgPSBmdW5jdGlvbihiYSwgb2Zmc2V0LCBzaW5rLCBtaW4sIG1heCwgY2hyKSB7XG4gICBMSU5FX0xPT1A6XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGxpbmUgPSAnJztcbiAgICAgICAgd2hpbGUgKG9mZnNldCA8IGJhLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoID0gYmFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgaWYgKGNoID09IDEwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva3MgPSBsaW5lLnNwbGl0KCdcXHQnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tzW3RoaXMuY29sU2VxIC0gMV0gPT0gY2hyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbWluID0gcGFyc2VJbnQodG9rc1t0aGlzLmNvbFN0YXJ0IC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm1heCA9IGZtaW47XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbEVuZCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBmbWF4ID0gcGFyc2VJbnQodG9rc1t0aGlzLmNvbEVuZCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9ybWF0ICYgMHgxMDAwMCkgKytmbWluO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbWluIDw9IG1heCAmJiBmbWF4ID49IG1pbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWUgTElORV9MT09QO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5cblRhYml4RmlsZS5wcm90b3R5cGUuZmV0Y2hIZWFkZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZmV0Y2hQdHIgPSAwLCBwdHIgPSAwLCBsaW5lPScnO1xuICAgIHZhciBsaW5lcyA9IFtdO1xuXG4gICAgc2VsZi5kYXRhLnNsaWNlKDAsIHNlbGYuaGVhZGVyTWF4KS5mZXRjaChmdW5jdGlvbihjaG5rKSB7XG4gICAgICAgIGlmICghY2huaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIFwiRmV0Y2ggZmFpbGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KHVuYmd6ZihjaG5rLCBjaG5rLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgdmFyIHB0ciA9IDAsIGxpbmUgPSAnJywgbGluZXMgPSBbXTtcbiAgICAgICAgd2hpbGUgKHB0ciA8IGJhLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoID0gYmFbcHRyKytdXG4gICAgICAgICAgICBpZiAoY2ggPT0gMTApIHtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5jaGFyQ29kZUF0KDApID09IHNlbGYubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICBsaW5lID0gJyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGxpbmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobGluZXMpO1xuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGNvbm5lY3RUYWJpeDogY29ubmVjdFRhYml4LFxuICAgICAgICBUQUJJWF9NQUdJQzogVEFCSVhfTUFHSUNcbiAgICB9O1xufSIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTNcbi8vXG4vLyB0aHViLmpzOiBzdXBwb3J0IGZvciB0cmFjay1odWIgc3R5bGUgcmVnaXN0cmllc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciB0ZXh0WEhSID0gdXRpbHMudGV4dFhIUjtcbiAgICB2YXIgcmVsYXRpdmVVUkwgPSB1dGlscy5yZWxhdGl2ZVVSTDtcbiAgICB2YXIgc2hhbGxvd0NvcHkgPSB1dGlscy5zaGFsbG93Q29weTtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTdHlsZXNoZWV0ID0gZGFzLkRBU1N0eWxlc2hlZXQ7XG4gICAgdmFyIERBU1N0eWxlID0gZGFzLkRBU1N0eWxlO1xufVxuXG52YXIgVEhVQl9TVEFOWkFfUkVHRVhQID0gL1xcblxccypcXG4vO1xudmFyIFRIVUJfUEFSU0VfUkVHRVhQICA9IC8oXFx3KykgKyguKylcXG4/LztcbnZhciBUSFVCX1NVQkdST1VQX1JFR0VYUCA9IC9zdWJHcm91cFsxLTldLztcblxudmFyIFRIVUJfUEVOTkFOVF9QUkVGSVggPSAnaHR0cDovL2dlbm9tZS51Y3NjLmVkdS9pbWFnZXMvJztcblxuZnVuY3Rpb24gVHJhY2tIdWIodXJsKSB7XG4gICAgdGhpcy5nZW5vbWVzID0ge307XG4gICAgdGhpcy51cmwgPSB1cmw7XG59XG5cbmZ1bmN0aW9uIFRyYWNrSHViVHJhY2soKSB7XG59XG5cblRyYWNrSHViVHJhY2sucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGspIHtcbiAgICBpZiAodGhpc1trXSlcbiAgICAgICAgcmV0dXJuIHRoaXNba107XG4gICAgZWxzZSBpZiAodGhpcy5fcGFyZW50KSBcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudC5nZXQoayk7XG59XG5cbmZ1bmN0aW9uIFRyYWNrSHViREIoaHViKSB7XG4gICAgdGhpcy5odWIgPSBodWI7XG59XG5cblRyYWNrSHViREIucHJvdG90eXBlLmdldFRyYWNrcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAodGhpcy5fdHJhY2tzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLl90cmFja3MpO1xuICAgIH0gXG4gICAgXG4gICAgdGV4dFhIUih0aGlzLmFic1VSTCwgZnVuY3Rpb24odHJhY2tGaWxlLCBlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHRyYWNrRmlsZSA9IHRyYWNrRmlsZS5yZXBsYWNlKC9cXCMuKi9nLCAnJyk7XG4gICAgICAgIHRyYWNrRmlsZSA9IHRyYWNrRmlsZS5yZXBsYWNlKCdcXFxcXFxuJywgJyAnKTtcblxuICAgICAgICB2YXIgdHJhY2tzID0gW107XG4gICAgICAgIHZhciB0cmFja3NCeUlkID0ge307XG4gICAgICAgIHZhciBzdGFuemFzID0gdHJhY2tGaWxlLnNwbGl0KFRIVUJfU1RBTlpBX1JFR0VYUCk7XG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3Rhbnphcy5sZW5ndGg7ICsrcykge1xuICAgICAgICAgICAgdmFyIHRva3MgPSBzdGFuemFzW3NdLnJlcGxhY2UoL1xcIy4qL2csICcnKS5zcGxpdChUSFVCX1BBUlNFX1JFR0VYUCk7XG4gICAgICAgICAgICB2YXIgdHJhY2sgPSBuZXcgVHJhY2tIdWJUcmFjaygpO1xuICAgICAgICAgICAgdHJhY2suX2RiID0gdGhpc0I7XG4gICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IHRva3MubGVuZ3RoIC0gMjsgbCArPSAzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSB0b2tzW2wrMV0sIHYgPSB0b2tzW2wrMl07XG4gICAgICAgICAgICAgICAgaWYgKGsubWF0Y2goVEhVQl9TVUJHUk9VUF9SRUdFWFApKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhY2suc3ViZ3JvdXBzKVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suc3ViZ3JvdXBzID0ge307XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZ3Rva3MgPSB2LnNwbGl0KC9cXHMvKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNndGFnID0gc2d0b2tzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2dyZWNvcmQgPSB7bmFtZTogc2d0b2tzWzFdLCB0YWdzOiBbXSwgdGl0bGVzOiBbXX07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNndGkgPSAyOyBzZ3RpIDwgc2d0b2tzLmxlbmd0aDsgKytzZ3RpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JwID0gc2d0b2tzW3NndGldLnNwbGl0KC89Lyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZ3JlY29yZC50YWdzLnB1c2goZ3JwWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNncmVjb3JkLnRpdGxlcy5wdXNoKGdycFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJhY2suc3ViZ3JvdXBzW3NndGFnXSA9IHNncmVjb3JkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ3N1Ykdyb3VwcycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNndG9rcyA9IHYuc3BsaXQoLyhcXHcrKT0oXFx3KykvKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2suc2dtID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNndGkgPSAwOyBzZ3RpIDwgc2d0b2tzLmxlbmd0aCAtIDI7IHNndGkgKz0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suc2dtW3NndG9rc1tzZ3RpKzFdXSA9IHNndG9rc1tzZ3RpICsgMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cmFja1t0b2tzW2wrMV1dID0gdG9rc1tsKzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRyYWNrLnRyYWNrICYmICh0cmFjay50eXBlIHx8IHRyYWNrLmNvbnRhaW5lciB8fCB0cmFjay52aWV3KSkge1xuICAgICAgICAgICAgICAgIHRyYWNrcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgICAgICAgICB0cmFja3NCeUlkW3RyYWNrLnRyYWNrXSA9IHRyYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdG9wbGV2ZWxzID0gW107XG4gICAgICAgIHZhciBjb21wb3NpdGVzID0gW107XG4gICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCB0cmFja3MubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbdGldO1xuICAgICAgICAgICAgdmFyIHRvcCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodHJhY2sucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHB0b2tzID0gdHJhY2sucGFyZW50LnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRyYWNrc0J5SWRbcHRva3NbMF1dO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2suX3BhcmVudCA9IHBhcmVudDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0cmFjayk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQ291bGRuJ3QgZmluZCBwYXJlbnQgXCIgKyBwdG9rc1swXSArICcoJyArIHRyYWNrLnBhcmVudCArICcpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhY2suY29tcG9zaXRlVHJhY2spIHtcbiAgICAgICAgICAgICAgICBjb21wb3NpdGVzLnB1c2godHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgICB0b3BsZXZlbHMucHVzaCh0cmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgY29tcG9zaXRlcy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgIHZhciBjb21wID0gY29tcG9zaXRlc1tjaV07XG4gICAgICAgICAgICBpZiAoIWNvbXAuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRPZlZpZXdzID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBraSA9IDA7IGtpIDwgY29tcC5jaGlsZHJlbi5sZW5ndGg7ICsra2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgayA9IGNvbXAuY2hpbGRyZW5ba2ldO1xuICAgICAgICAgICAgICAgIGlmIChrLnZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgay5zaG9ydExhYmVsID0gY29tcC5zaG9ydExhYmVsICsgXCI6IFwiICsgay5zaG9ydExhYmVsO1xuICAgICAgICAgICAgICAgICAgICB0b3BsZXZlbHMucHVzaChrKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50T2ZWaWV3cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXJlbnRPZlZpZXdzKVxuICAgICAgICAgICAgICAgIHRvcGxldmVscy5wdXNoKGNvbXApO1xuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgdGhpc0IuX3RyYWNrcyA9IHRvcGxldmVscztcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXNCLl90cmFja3MsIG51bGwpO1xuICAgIH0sIHtjcmVkZW50aWFsczogdGhpcy5jcmVkZW50aWFscywgc2FsdDogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0VHJhY2tIdWIoaHViVVJMLCBjYWxsYmFjaywgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIG9wdHMuc2FsdCA9IHRydWU7XG5cbiAgICB0ZXh0WEhSKGh1YlVSTCwgZnVuY3Rpb24oaHViRmlsZSwgZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRva3MgPSBodWJGaWxlLnNwbGl0KFRIVUJfUEFSU0VfUkVHRVhQKTtcbiAgICAgICAgdmFyIGh1YiA9IG5ldyBUcmFja0h1YihodWJVUkwpO1xuICAgICAgICBpZiAob3B0cy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgaHViLmNyZWRlbnRpYWxzID0gb3B0cy5jcmVkZW50aWFscztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IHRva3MubGVuZ3RoIC0gMjsgbCArPSAzKSB7XG4gICAgICAgICAgICBodWJbdG9rc1tsKzFdXSA9IHRva3NbbCsyXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChodWIuZ2Vub21lc0ZpbGUpIHtcbiAgICAgICAgICAgIHZhciBnZW5VUkwgPSByZWxhdGl2ZVVSTChodWJVUkwsIGh1Yi5nZW5vbWVzRmlsZSk7XG4gICAgICAgICAgICB0ZXh0WEhSKGdlblVSTCwgZnVuY3Rpb24oZ2VuRmlsZSwgZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhbnphcyA9IGdlbkZpbGUuc3BsaXQoVEhVQl9TVEFOWkFfUkVHRVhQKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHN0YW56YXMubGVuZ3RoOyArK3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva3MgPSBzdGFuemFzW3NdLnNwbGl0KFRIVUJfUEFSU0VfUkVHRVhQKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdwcm9wcyA9IG5ldyBUcmFja0h1YkRCKGh1Yik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncHJvcHMuY3JlZGVudGlhbHMgPSBvcHRzLmNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCB0b2tzLmxlbmd0aCAtIDI7IGwgKz0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Byb3BzW3Rva3NbbCsxXV0gPSB0b2tzW2wrMl07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3Byb3BzLnR3b0JpdFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdwcm9wcy50d29CaXRQYXRoID0gcmVsYXRpdmVVUkwoZ2VuVVJMLCBncHJvcHMudHdvQml0UGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3Byb3BzLmdlbm9tZSAmJiBncHJvcHMudHJhY2tEYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Byb3BzLmFic1VSTCA9IHJlbGF0aXZlVVJMKGdlblVSTCwgZ3Byb3BzLnRyYWNrRGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHViLmdlbm9tZXNbZ3Byb3BzLmdlbm9tZV0gPSBncHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhodWIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdObyBnZW5vbWVzRmlsZScpO1xuICAgICAgICB9XG4gICAgfSwgb3B0cyk7XG59XG5cblxuVHJhY2tIdWJUcmFjay5wcm90b3R5cGUudG9EYWxsaWFuY2VTb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0ge1xuICAgICAgICBuYW1lOiB0aGlzLnNob3J0TGFiZWwsXG4gICAgICAgIGRlc2M6IHRoaXMubG9uZ0xhYmVsXG4gICAgfTtcbiAgICBpZiAodGhpcy5fZGIubWFwcGluZykge1xuICAgICAgICBzb3VyY2UubWFwcGluZyA9IHRoaXMuX2RiLm1hcHBpbmc7XG4gICAgfVxuXG4gICAgdmFyIHBlbm5hbnRJY29uID0gdGhpcy5nZXQoJ3Blbm5hbnRJY29uJyk7XG4gICAgaWYgKHBlbm5hbnRJY29uKSB7XG4gICAgICAgIHZhciBwdG9rcyA9IHBlbm5hbnRJY29uLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIHNvdXJjZS5wZW5uYW50ID0gVEhVQl9QRU5OQU5UX1BSRUZJWCArIHB0b2tzWzBdO1xuICAgIH1cblxuICAgIHZhciBzZWFyY2hUcml4ID0gdGhpcy5nZXQoJ3NlYXJjaFRyaXgnKTtcbiAgICBpZiAoc2VhcmNoVHJpeCkge1xuICAgICAgICBzb3VyY2UudHJpeFVSSSA9IHJlbGF0aXZlVVJMKHRoaXMuX2RiLmFic1VSTCwgc2VhcmNoVHJpeCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09ICdtdWx0aVdpZycpIHtcbiAgICAgICAgc291cmNlLm1lcmdlID0gJ2NvbmNhdCc7XG4gICAgICAgIHNvdXJjZS5vdmVybGF5ID0gW107XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIHNvdXJjZS5zdHlsZSA9IFtdO1xuICAgICAgICBzb3VyY2Uubm9Eb3duc2FtcGxlID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2NpKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSBjaGlsZHJlbltjaV07XG4gICAgICAgICAgICB2YXIgY3MgPSBjaC50b0RhbGxpYW5jZVNvdXJjZSgpXG4gICAgICAgICAgICBzb3VyY2Uub3ZlcmxheS5wdXNoKGNzKTtcblxuICAgICAgICAgICAgaWYgKGNzLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IGNzLnN0eWxlLmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBjcy5zdHlsZVtzaV07XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLm1ldGhvZCA9IGNoLnNob3J0TGFiZWw7ICAvLyBGSVhNRVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hZ2dyZWdhdGUgPT0gJ3RyYW5zcGFyZW50T3ZlcmxheScpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5zdHlsZS5BTFBIQSA9IDAuNTtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLnN0eWxlLnB1c2goc3R5bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlO1xuXG4gICAgICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0eXBlVG9rcyA9IHRoaXMudHlwZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBpZiAodHlwZVRva3NbMF0gPT0gJ2JpZ0JlZCcpIHtcbiAgICAgICAgICAgIHZhciBiZWRUb2tlbnMgPSB0eXBlVG9rc1sxXXwwXG4gICAgICAgICAgICB2YXIgYmVkUGx1cyA9IHR5cGVUb2tzWzJdID09ICcrJztcblxuICAgICAgICAgICAgc291cmNlLmJ3Z1VSSSA9IHJlbGF0aXZlVVJMKHRoaXMuX2RiLmFic1VSTCwgdGhpcy5iaWdEYXRhVXJsKTtcbiAgICAgICAgICAgIHNvdXJjZS5zdHlsZSA9IHRoaXMuYmlnYmVkU3R5bGVzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGIuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UuY3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJlZFRva2VucyA+PSAxMiAmJiBiZWRQbHVzKVxuICAgICAgICAgICAgICAgIHNvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZVRva3NbMF0gPT0gJ2JpZ1dpZycpIHtcbiAgICAgICAgICAgIHNvdXJjZS5id2dVUkkgPSByZWxhdGl2ZVVSTCh0aGlzLl9kYi5hYnNVUkwsIHRoaXMuYmlnRGF0YVVybCk7XG4gICAgICAgICAgICBzb3VyY2Uuc3R5bGUgPSB0aGlzLmJpZ3dpZ1N0eWxlcygpO1xuICAgICAgICAgICAgc291cmNlLm5vRG93bnNhbXBsZSA9IHRydWU7ICAgICAvLyBGSVhNRSBzZWVtcyBsaWtlIGEgYmx1bnQgaW5zdHJ1bWVudC4uLlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy55TGluZU9uT2ZmICYmIHRoaXMueUxpbmVPbk9mZiA9PSAnb24nKSB7XG4gICAgICAgICAgICAgICAgc291cmNlLnF1YW50TGVhcFRocmVzaG9sZCA9IHRoaXMueUxpbmVNYXJrICE9PSB1bmRlZmluZWQgPyAoMS4wICogdGhpcy55TGluZU1hcmspIDogMC4wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fZGIuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UuY3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVUb2tzWzBdID09ICdiYW0nKSB7XG4gICAgICAgICAgICBzb3VyY2UuYmFtVVJJID0gcmVsYXRpdmVVUkwodGhpcy5fZGIuYWJzVVJMLCB0aGlzLmJpZ0RhdGFVcmwpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RiLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgc291cmNlLmNyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZVRva3NbMF0gPT0gJ3ZjZlRhYml4Jykge1xuICAgICAgICAgICAgc291cmNlLnVyaSA9IHJlbGF0aXZlVVJMKHRoaXMuX2RiLmFic1VSTCwgdGhpcy5iaWdEYXRhVXJsKTtcbiAgICAgICAgICAgIHNvdXJjZS50aWVyX3R5cGUgPSAndGFiaXgnO1xuICAgICAgICAgICAgc291cmNlLnBheWxvYWQgPSAndmNmJztcbiAgICAgICAgICAgIGlmICh0aGlzLl9kYi5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIHNvdXJjZS5jcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Vuc3VwcG9ydGVkICcgKyB0aGlzLnR5cGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5UcmFja0h1YlRyYWNrLnByb3RvdHlwZS5iaWd3aWdTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHlwZVRva3MgPSB0aGlzLnR5cGUuc3BsaXQoL1xccysvKTtcbiAgICB2YXIgbWluLCBtYXg7XG4gICAgaWYgKHR5cGVUb2tzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIG1pbiA9IDEuMCAqIHR5cGVUb2tzWzFdO1xuICAgICAgICBtYXggPSAxLjAgKiB0eXBlVG9rc1syXTtcbiAgICB9XG5cbiAgICB2YXIgaGVpZ2h0O1xuICAgIGlmICh0aGlzLm1heEhlaWdodFBpeGVscykge1xuICAgICAgICB2YXIgbWhwVG9rcyA9IHRoaXMubWF4SGVpZ2h0UGl4ZWxzLnNwbGl0KC86Lyk7XG4gICAgICAgIGlmIChtaHBUb2tzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBtaHBUb2tzWzFdIHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtYXhIZWlnaHRQaXhlbHMgc2hvdWxkIGJlIG9mIHRoZSBmb3JtIG1heDpkZWZhdWx0Om1pbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHZhciBndHlwZSA9ICdiYXJzJztcbiAgICBpZiAodGhpcy5ncmFwaFR5cGVEZWZhdWx0KSB7XG4gICAgICAgIGd0eXBlID0gdGhpcy5ncmFwaFR5cGVEZWZhdWx0O1xuICAgIH1cbiAgICBcbiAgICB2YXIgY29sb3IgPSAnYmxhY2snO1xuICAgIHZhciBhbHRDb2xvciA9IG51bGw7XG4gICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgICAgY29sb3IgPSAncmdiKCcgKyB0aGlzLmNvbG9yICsgJyknO1xuICAgIH1cbiAgICBpZiAodGhpcy5hbHRDb2xvcikge1xuICAgICAgICBhbHRDb2xvciA9ICdyZ2IoJyArIHRoaXMuYWx0Q29sb3IgKyAnKSc7XG4gICAgfVxuICAgIFxuICAgIHZhciBzdHlsZXNoZWV0ID0gbmV3IERBU1N0eWxlc2hlZXQoKTtcbiAgICB2YXIgd2lnU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICBpZiAoZ3R5cGUgPT0gJ3BvaW50cycpIHtcbiAgICAgICAgd2lnU3R5bGUuZ2x5cGggPSAnUE9JTlQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZ1N0eWxlLmdseXBoID0gJ0hJU1RPR1JBTSc7XG4gICAgfVxuXG4gICAgaWYgKGFsdENvbG9yKSB7XG4gICAgICAgIHdpZ1N0eWxlLkNPTE9SMSA9IGNvbG9yO1xuICAgICAgICB3aWdTdHlsZS5DT0xPUjIgPSBhbHRDb2xvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aWdTdHlsZS5CR0NPTE9SID0gY29sb3I7XG4gICAgfVxuICAgIHdpZ1N0eWxlLkhFSUdIVCA9IGhlaWdodCB8fCAzMDtcbiAgICBpZiAobWluIHx8IG1heCkge1xuICAgICAgICB3aWdTdHlsZS5NSU4gPSBtaW47XG4gICAgICAgIHdpZ1N0eWxlLk1BWCA9IG1heDtcbiAgICB9XG4gICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdkZWZhdWx0J30sIG51bGwsIHdpZ1N0eWxlKTtcbiAgICByZXR1cm4gc3R5bGVzaGVldC5zdHlsZXM7XG59XG5cblRyYWNrSHViVHJhY2sucHJvdG90eXBlLmJpZ2JlZFN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtUmdiID0gKCcnK3RoaXMuZ2V0KCdpdGVtUmdiJykpLnRvTG93ZXJDYXNlKCkgPT0gJ29uJztcbiAgICB2YXIgdmlzaWJpbGl0eSA9IHRoaXMuZ2V0KCd2aXNpYmlsaXR5JykgfHwgJ2Z1bGwnO1xuICAgIHZhciBjb2xvciA9IHRoaXMuZ2V0KCdjb2xvcicpO1xuICAgIGlmIChjb2xvcilcbiAgICAgICAgY29sb3IgPSAncmdiKCcgKyBjb2xvciArICcpJztcbiAgICBlbHNlIFxuICAgICAgICBjb2xvciA9ICdibHVlJztcbiAgICBcbiAgICB2YXIgc3R5bGVzaGVldCA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG4gICAgdmFyIHdpZ1N0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgd2lnU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICB3aWdTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICB3aWdTdHlsZS5CR0NPTE9SID0gY29sb3I7XG4gICAgd2lnU3R5bGUuSEVJR0hUID0gKHZpc2liaWxpdHkgPT0gJ2Z1bGwnIHx8IHZpc2liaWxpdHkgPT0gJ3BhY2snKSA/IDEyIDogODtcbiAgICB3aWdTdHlsZS5CVU1QID0gKHZpc2liaWxpdHkgPT0gJ2Z1bGwnIHx8IHZpc2liaWxpdHkgPT0gJ3BhY2snKTtcbiAgICB3aWdTdHlsZS5MQUJFTCA9ICh2aXNpYmlsaXR5ID09ICdmdWxsJyB8fCB2aXNpYmlsaXR5ID09ICdwYWNrJyk7XG4gICAgd2lnU3R5bGUuWklOREVYID0gMjA7XG4gICAgaWYgKGl0ZW1SZ2IpXG4gICAgICAgIHdpZ1N0eWxlLkJHSVRFTSA9IHRydWU7XG5cbiAgICB2YXIgY2JzID0gdGhpcy5nZXQoJ2NvbG9yQnlTdHJhbmQnKTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICAgIHZhciBjYnNUb2tzID0gY2JzLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgcGx1cyA9IHNoYWxsb3dDb3B5KHdpZ1N0eWxlKTtcbiAgICAgICAgcGx1cy5CR0NPTE9SID0gJ3JnYignICsgY2JzVG9rc1swXSArICcpJztcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdiaWd3aWcnLCBvcmllbnRhdGlvbjogJysnfSwgbnVsbCwgcGx1cyk7XG5cbiAgICAgICAgdmFyIG1pbnVzID0gc2hhbGxvd0NvcHkod2lnU3R5bGUpO1xuICAgICAgICBtaW51cy5CR0NPTE9SID0gJ3JnYignICsgY2JzVG9rc1sxXSArICcpJztcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdiaWd3aWcnLCBvcmllbnRhdGlvbjogJy0nfSwgbnVsbCwgbWludXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnYmlnd2lnJ30sIG51bGwsIHdpZ1N0eWxlKTtcbiAgICB9ICAgXG4gICAgXG4gICAgdmFyIHRsU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICB0bFN0eWxlLmdseXBoID0gJ0JPWCc7XG4gICAgdGxTdHlsZS5GR0NPTE9SID0gJ2JsYWNrJztcbiAgICBpZiAoaXRlbVJnYilcbiAgICAgICAgdGxTdHlsZS5CR0lURU0gPSB0cnVlO1xuICAgIHRsU3R5bGUuQkdDT0xPUiA9ICdyZWQnXG4gICAgdGxTdHlsZS5IRUlHSFQgPSAxMDtcbiAgICB0bFN0eWxlLkJVTVAgPSB0cnVlO1xuICAgIHRsU3R5bGUuWklOREVYID0gMjA7XG4gICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICd0cmFuc2xhdGlvbid9LCBudWxsLCB0bFN0eWxlKTtcbiAgICBcbiAgICB2YXIgdHNTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgIHRzU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICB0c1N0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgIHRzU3R5bGUuQkdDT0xPUiA9ICd3aGl0ZSc7XG4gICAgdHNTdHlsZS5IRUlHSFQgPSAxMDtcbiAgICB0c1N0eWxlLlpJTkRFWCA9IDEwO1xuICAgIHRzU3R5bGUuQlVNUCA9IHRydWU7XG4gICAgdHNTdHlsZS5MQUJFTCA9IHRydWU7XG4gICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICd0cmFuc2NyaXB0J30sIG51bGwsIHRzU3R5bGUpO1xuXG4gICAgcmV0dXJuIHN0eWxlc2hlZXQuc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBUSFVCX0NPTVBBUkUoZywgaCkge1xuICAgIGlmIChnLnByaW9yaXR5ICYmIGgucHJpb3JpdHkpIHtcbiAgICAgICAgcmV0dXJuICgxLjAgKiBnLnByaW9yaXR5KSAtICgxLjAgKiBoLnByaW9yaXR5KVxuICAgIH0gZWxzZSBpZiAoZy5wcmlvcml0eSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGgucHJpb3JpdHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnLnNob3J0TGFiZWwubG9jYWxlQ29tcGFyZShoLnNob3J0TGFiZWwpO1xuICAgIH1cbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBjb25uZWN0VHJhY2tIdWI6IGNvbm5lY3RUcmFja0h1YixcbiAgICAgICAgVEhVQl9DT01QQVJFOiBUSFVCX0NPTVBBUkVcbiAgICB9O1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxM1xuLy9cbi8vIHRpZXItYWN0aW9ucy5qc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Nicm93c2VyJyk7XG4gICAgdmFyIEJyb3dzZXIgPSBicm93c2VyLkJyb3dzZXI7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIHNoYWxsb3dDb3B5ID0gdXRpbHMuc2hhbGxvd0NvcHk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLm1lcmdlU2VsZWN0ZWRUaWVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgdmFyIHN0eWxlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgc3RpID0gMDsgc3RpIDwgdGhpcy5zZWxlY3RlZFRpZXJzLmxlbmd0aDsgKytzdGkpIHtcbiAgICAgICAgdmFyIHRpZXIgPSB0aGlzLnRpZXJzW3RoaXMuc2VsZWN0ZWRUaWVyc1tzdGldXTtcblx0ICAgIHNvdXJjZXMucHVzaChzaGFsbG93Q29weSh0aWVyLmRhc1NvdXJjZSkpO1xuICAgICAgICB2YXIgc3MgPSB0aWVyLnN0eWxlc2hlZXQuc3R5bGVzO1xuICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc3MubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICB2YXIgc2ggPSBzc1tzaV07XG4gICAgICAgICAgICB2YXIgbnNoID0gc2hhbGxvd0NvcHkoc2gpO1xuICAgICAgICAgICAgbnNoLm1ldGhvZCA9IHRpZXIuZGFzU291cmNlLm5hbWUucmVwbGFjZSgvWygpKyo/XS9nLCAnXFxcXCQmJyk7XG4gICAgICAgICAgICBuc2guX21ldGhvZFJFID0gbnVsbDtcbiAgICAgICAgICAgIG5zaC5zdHlsZSA9IHNoYWxsb3dDb3B5KHNoLnN0eWxlKTtcbiAgICAgICAgICAgIGlmIChuc2guc3R5bGUuWklOREVYID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgbnNoLnN0eWxlLlpJTkRFWCA9IHN0aTtcblxuICAgICAgICAgICAgaWYgKHRpZXIuZm9yY2VNaW4pIHtcbiAgICAgICAgICAgICAgICBuc2guc3R5bGUuTUlOID0gdGllci5mb3JjZU1pbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aWVyLmZvcmNlTWF4KSB7XG4gICAgICAgICAgICAgICAgbnNoLnN0eWxlLk1BWCA9IHRpZXIuZm9yY2VNYXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0eWxlcy5wdXNoKG5zaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhpcy5hZGRUaWVyKFxuXHR7bmFtZTogJ01lcmdlZCcsXG5cdCBtZXJnZTogJ2NvbmNhdCcsXG5cdCBvdmVybGF5OiBzb3VyY2VzLFxuXHQgbm9Eb3duc2FtcGxlOiB0cnVlLFxuICAgICBzdHlsZTogc3R5bGVzfSk7XG5cbiAgICB0aGlzLnNldFNlbGVjdGVkVGllcih0aGlzLnRpZXJzLmxlbmd0aCAtIDEpO1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxM1xuLy9cbi8vIHRpZXItZWRpdC5qc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Nicm93c2VyJyk7XG4gICAgdmFyIEJyb3dzZXIgPSBicm93c2VyLkJyb3dzZXI7XG5cbiAgICB2YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4gICAgdmFyIG1ha2VFbGVtZW50ID0gdXRpbHMubWFrZUVsZW1lbnQ7XG5cbiAgICB2YXIgZGFzID0gcmVxdWlyZSgnLi9kYXMnKTtcbiAgICB2YXIgaXNEYXNCb29sZWFuVHJ1ZSA9IGRhcy5pc0Rhc0Jvb2xlYW5UcnVlO1xuICAgIHZhciBpc0Rhc0Jvb2xlYW5Ob3RGYWxzZSA9IGRhcy5pc0Rhc0Jvb2xlYW5Ob3RGYWxzZTtcbiAgICB2YXIgY29weVN0eWxlc2hlZXQgPSBkYXMuY29weVN0eWxlc2hlZXQ7XG5cbiAgICB2YXIgY29sb3IgPSByZXF1aXJlKCcuL2NvbG9yJyk7XG4gICAgdmFyIGRhc0NvbG91ckZvck5hbWUgPSBjb2xvci5kYXNDb2xvdXJGb3JOYW1lO1xufVxuXG52YXIgX19kYWxsaWFuY2Vfc21hbGxHbHlwaHMgPSB7RE9UOiB0cnVlLCBFWDogdHJ1ZSwgU1RBUjogdHJ1ZSwgU1FVQVJFOiB0cnVlLCBDUk9TUzogdHJ1ZSwgVFJJQU5HTEU6IHRydWUsIFBMSU1TT0xMOiB0cnVlfVxuXG5Ccm93c2VyLnByb3RvdHlwZS5vcGVuVGllclBhbmVsID0gZnVuY3Rpb24odGllcikge1xuICAgIHZhciBiID0gdGhpcztcblxuICAgIGlmICh0aGlzLnVpTW9kZSA9PT0gJ3RpZXInICYmIHRoaXMubWFuaXB1bGF0aW5nVGllciA9PT0gdGllcikge1xuICAgICAgICB0aGlzLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ25vbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2V0U3R5bGVDb2xvcnMgPSBmdW5jdGlvbihzdHlsZSkge1xuICAgICAgICAgICAgaWYgKHN0eWxlLkJHR1JBRClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChudW1Db2xvcnMgPT0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZS5nbHlwaCA9PSAnTElORVBMT1QnIHx8IF9fZGFsbGlhbmNlX3NtYWxsR2x5cGhzW3N0eWxlLmdseXBoXSkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5GR0NPTE9SID0gdGllckNvbG9yRmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuQkdDT0xPUiA9IHRpZXJDb2xvckZpZWxkLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHlsZS5DT0xPUjEgPSBzdHlsZS5DT0xPUjIgPSBzdHlsZS5DT0xPUjMgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZS5DT0xPUjEgPSB0aWVyQ29sb3JGaWVsZC52YWx1ZTtcbiAgICAgICAgICAgICAgICBzdHlsZS5DT0xPUjIgPSB0aWVyQ29sb3JGaWVsZDIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG51bUNvbG9ycyA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuQ09MT1IzID0gdGllckNvbG9yRmllbGQzLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLkNPTE9SMyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGUuX2dyYWRpZW50ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtdXRhdGVTdHlsZXNoZWV0ID0gZnVuY3Rpb24odmlzaXRvcikge1xuICAgICAgICAgICAgdmFyIG5zcyA9IGNvcHlTdHlsZXNoZWV0KHRpZXIuc3R5bGVzaGVldCk7XG4gICAgICAgICAgICB2YXIgc3NTY2FsZSA9IHRpZXIuYnJvd3Nlci56b29tRm9yQ3VycmVudFNjYWxlKCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnNzLnN0eWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBzaCA9IG5zcy5zdHlsZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHNoLnpvb20gJiYgc2guem9vbSAhPSBzc1NjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZpc2l0b3Ioc2guc3R5bGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnNzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoYW5nZUNvbG9yID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe3N0eWxlc2hlZXQ6IG11dGF0ZVN0eWxlc2hlZXQoc2V0U3R5bGVDb2xvcnMpfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubWFuaXB1bGF0aW5nVGllciA9IHRpZXI7XG5cbiAgICAgICAgdmFyIHRpZXJGb3JtID0gbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHtjbGFzc05hbWU6ICd0aWVyLWVkaXQnfSk7XG4gICAgICAgIGlmICh0aWVyLmRhc1NvdXJjZS5tYXBwaW5nKSB7XG4gICAgICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5jaGFpbnNbdGllci5kYXNTb3VyY2UubWFwcGluZ10uY29vcmRzO1xuICAgICAgICAgICAgdGllckZvcm0uYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2RpdicsICdNYXBwZWQgZnJvbSAnICsgY29vcmRzLmF1dGggKyBjb29yZHMudmVyc2lvbiAsIG51bGwsIFxuICAgICAgICAgICAgICAgIHtiYWNrZ3JvdW5kOiAnZ3JheScsIHBhZGRpbmdCb3R0b206ICc1cHgnLCBtYXJnaW5Cb3R0b206ICc1cHgnLCB0ZXh0QWxpZ246ICdjZW50ZXInfSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZW1hbnRpY0Jhbm5lciA9IG1ha2VFbGVtZW50KCdkaXYnLCAnRWRpdGluZyBzdHlsZXMgZm9yIGN1cnJlbnQgem9vbSBsZXZlbCcsIG51bGwsXG4gICAgICAgICAgICAgICAge2JhY2tncm91bmQ6ICdncmF5JywgcGFkZGluZ0JvdHRvbTogJzVweCcsIG1hcmdpbkJvdHRvbTogJzVweCcsIHRleHRBbGlnbjogJ2NlbnRlcicsIGRpc3BsYXk6ICdub25lJ30pO1xuICAgICAgICB0aWVyRm9ybS5hcHBlbmRDaGlsZChzZW1hbnRpY0Jhbm5lcik7XG5cbiAgICAgICAgdmFyIHRpZXJOYW1lRmllbGQgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ3RleHQnfSk7XG4gICAgICAgIHZhciB0aWVyUGlubmVkVG9nZ2xlID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICdjaGVja2JveCd9KTtcblxuICAgICAgICB2YXIgZ2x5cGhGaWVsZCA9IG1ha2VFbGVtZW50KCdzZWxlY3QnKTtcbiAgICAgICAgZ2x5cGhGaWVsZC5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnb3B0aW9uJywgJ0hpc3RvZ3JhbScsIHt2YWx1ZTogJ0hJU1RPR1JBTSd9KSk7XG4gICAgICAgIGdseXBoRmllbGQuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdMaW5lIFBsb3QnLCB7dmFsdWU6ICdMSU5FUExPVCd9KSk7XG4gICAgICAgIGdseXBoRmllbGQuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdSaWJib24nLCB7dmFsdWU6ICdHUkFESUVOVCd9KSk7XG4gICAgICAgIGdseXBoRmllbGQuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ29wdGlvbicsICdTY2F0dGVyJywge3ZhbHVlOiAnU0NBVFRFUid9KSk7XG5cbiAgICAgICAgdmFyIHRpZXJDb2xvckZpZWxkID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcjZGQwMGRkJ30pO1xuICAgICAgICB2YXIgdGllckNvbG9yRmllbGQyID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcjZGQwMGRkJ30pO1xuICAgICAgICB2YXIgdGllckNvbG9yRmllbGQzID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcjZGQwMGRkJ30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGllckNvbG9yRmllbGQudHlwZSA9IHRpZXJDb2xvckZpZWxkMi50eXBlID0gdGllckNvbG9yRmllbGQzLnR5cGUgPSAnY29sb3InO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJRSB0aHJvd3MgaWYgYXR0ZW1wdCB0byBzZXQgdHlwZSB0byAnY29sb3InLlxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRpZXJDb2xvckZpZWxkcyA9IFt0aWVyQ29sb3JGaWVsZCwgdGllckNvbG9yRmllbGQyLCB0aWVyQ29sb3JGaWVsZDNdO1xuICAgICAgICB2YXIgY29sb3JMaXN0UGx1cyA9IG1ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLXBsdXMtY2lyY2xlJ30pO1xuICAgICAgICB2YXIgY29sb3JMaXN0TWludXMgPSBtYWtlRWxlbWVudCgnaScsIG51bGwsIHtjbGFzc05hbWU6ICdmYSBmYS1taW51cy1jaXJjbGUnfSk7XG4gICAgICAgIHZhciBudW1Db2xvcnMgPSAxO1xuICAgICAgICB2YXIgY29sb3JMaXN0RWxlbWVudCA9IG1ha2VFbGVtZW50KCd0ZCcsIHRpZXJDb2xvckZpZWxkcyk7XG4gICAgICAgIHZhciBzZXROdW1Db2xvcnMgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBudW1Db2xvcnMgPSBuO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIFxuICAgICAgICAgICAgICAgIHRpZXJDb2xvckZpZWxkc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBuOyBpIDwgdGllckNvbG9yRmllbGRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHRpZXJDb2xvckZpZWxkc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIGNvbG9yTGlzdFBsdXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgaWYgKG51bUNvbG9ycyA8IDMpIHtcbiAgICAgICAgICAgICAgICBzZXROdW1Db2xvcnMobnVtQ29sb3JzICsgMSk7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ29sb3IobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgY29sb3JMaXN0TWludXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgaWYgKG51bUNvbG9ycyA+IDEpIHtcbiAgICAgICAgICAgICAgICBzZXROdW1Db2xvcnMobnVtQ29sb3JzIC0gMSk7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ29sb3IobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB2YXIgdGllck1pbkZpZWxkID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcwLjAnfSk7XG4gICAgICAgIHZhciB0aWVyTWF4RmllbGQgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ3RleHQnLCB2YWx1ZTogJzEwLjAnfSk7XG4gICAgICAgIHZhciB0aWVyTWluVG9nZ2xlID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICdjaGVja2JveCd9KTtcbiAgICAgICAgdmFyIHRpZXJNYXhUb2dnbGUgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ2NoZWNrYm94J30pO1xuXG4gICAgICAgIHZhciBxdWFudExlYXBUb2dnbGUgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ2NoZWNrYm94JywgY2hlY2tlZDogdGllci5xdWFudExlYXBUaHJlc2hvbGQgIT09IHVuZGVmaW5lZH0pO1xuICAgICAgICB2YXIgcXVhbnRMZWFwVGhyZXNoRmllbGQgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ3RleHQnLCB2YWx1ZTogdGllci5xdWFudExlYXBUaHJlc2hvbGQsIGRpc2FibGVkOiAhcXVhbnRMZWFwVG9nZ2xlLmNoZWNrZWR9KTtcblxuICAgICAgICB2YXIgdGllckhlaWdodEZpZWxkID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICc1MCd9KTtcblxuICAgICAgICB2YXIgYnVtcFRvZ2dsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnfSk7XG4gICAgICAgIHZhciBsYWJlbFRvZ2dsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnfSk7XG5cbiAgICAgICAgdmFyIG1haW5TdHlsZSA9IG51bGw7XG4gICAgICAgIGlmICh0aWVyLnN0eWxlc2hlZXQuc3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBzID0gbWFpblN0eWxlID0gdGllci5zdHlsZXNoZWV0LnN0eWxlc1swXS5zdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRpZXIuY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRpZXJOYW1lRmllbGQudmFsdWUgPSB0aWVyLmNvbmZpZy5uYW1lO1xuICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICB0aWVyTmFtZUZpZWxkLnZhbHVlID0gdGllci5kYXNTb3VyY2UubmFtZTtcblxuICAgICAgICAgICAgdGllclBpbm5lZFRvZ2dsZS5jaGVja2VkID0gdGllci5waW5uZWQ7XG5cbiAgICAgICAgICAgIGlmICh0aWVyLmZvcmNlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGllckhlaWdodEZpZWxkLnZhbHVlID0gJycgKyB0aWVyLmZvcmNlSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYWluU3R5bGUgJiYgbWFpblN0eWxlLkhFSUdIVCkge1xuICAgICAgICAgICAgICAgIHRpZXJIZWlnaHRGaWVsZC52YWx1ZSA9ICcnICsgbWFpblN0eWxlLkhFSUdIVDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aWVyLnF1YW50TGVhcFRocmVzaG9sZCA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHF1YW50TGVhcFRvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBxdWFudExlYXBUaHJlc2hGaWVsZC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHF1YW50TGVhcFRocmVzaEZpZWxkLnZhbHVlKSAhPSB0aWVyLnF1YW50TGVhcFRocmVzaG9sZClcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRMZWFwVGhyZXNoRmllbGQudmFsdWUgPSB0aWVyLnF1YW50TGVhcFRocmVzaG9sZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVhbnRMZWFwVG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBxdWFudExlYXBUaHJlc2hGaWVsZC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aWVyLnN0eWxlc2hlZXQuc3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGlzUXVhbnRpdGF0aXZlPWZhbHNlLCBpc1NpbXBsZVF1YW50aXRhdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBzc1NjYWxlID0gdGllci5icm93c2VyLnpvb21Gb3JDdXJyZW50U2NhbGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlU3R5bGVDb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgdGllci5zdHlsZXNoZWV0LnN0eWxlcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoID0gdGllci5zdHlsZXNoZWV0LnN0eWxlc1tzaV07ICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoLnpvb20gJiYgc2guem9vbSAhPSBzc1NjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICArK2FjdGl2ZVN0eWxlQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcyA9IHRpZXIuc3R5bGVzaGVldC5zdHlsZXNbc2ldLnN0eWxlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG1haW5TdHlsZSA9IHNzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3MuZ2x5cGggPT0gJ0xJTkVQTE9UJyB8fCBzcy5nbHlwaCA9PSAnSElTVE9HUkFNJyB8fCBzcy5nbHlwaCA9PSAnR1JBRElFTlQnIHx8IGlzRGFzQm9vbGVhblRydWUoc3MuU0NBVFRFUikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNRdWFudGl0YXRpdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG1haW5TdHlsZSA9IHNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNRdWFudGl0YXRpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VtYW50aWNCYW5uZXIuc3R5bGUuZGlzcGxheSA9IChhY3RpdmVTdHlsZUNvdW50ID09IHRpZXIuc3R5bGVzaGVldC5zdHlsZXMubGVuZ3RoKSA/ICdub25lJyA6ICdibG9jayc7XG5cbiAgICAgICAgICAgICAgICBpc1NpbXBsZVF1YW50aXRhdGl2ZSA9IGlzUXVhbnRpdGF0aXZlICYmIGFjdGl2ZVN0eWxlQ291bnQgPT0gMTtcbiAgICAgICAgICAgICAgICB2YXIgaXNHcmFkaWVudCA9IHMuQ09MT1IyIHx8IHMuQkdHUkFEO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzUXVhbnRpdGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgICAgICAgICAgICAgIG1heFJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgICAgICAgICAgICAgIGJ1bXBSb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxSb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtaW5Sb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgbWF4Um93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgIGJ1bXBSb3cuc3R5bGUuZGlzcGxheSA9ICd0YWJsZS1yb3cnO1xuICAgICAgICAgICAgICAgICAgICBidW1wVG9nZ2xlLmNoZWNrZWQgPSBpc0Rhc0Jvb2xlYW5UcnVlKG1haW5TdHlsZS5CVU1QKTtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxSb3cuc3R5bGUuZGlzcGxheSA9ICd0YWJsZS1yb3cnO1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFRvZ2dsZS5jaGVja2VkID0gaXNEYXNCb29sZWFuVHJ1ZShtYWluU3R5bGUuTEFCRUwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc1NpbXBsZVF1YW50aXRhdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yUm93LnN0eWxlLmRpc3BsYXkgPSAndGFibGUtcm93JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBjb2xvclJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG51bUNvbG9ycyA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHMuQ09MT1IxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpZXJDb2xvckZpZWxkLnZhbHVlID0gZGFzQ29sb3VyRm9yTmFtZShzLkNPTE9SMSkudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuQ09MT1IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWVyQ29sb3JGaWVsZDIudmFsdWUgPSBkYXNDb2xvdXJGb3JOYW1lKHMuQ09MT1IyKS50b0hleFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuQ09MT1IzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGllckNvbG9yRmllbGQzLnZhbHVlID0gZGFzQ29sb3VyRm9yTmFtZShzLkNPTE9SMykudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1Db2xvcnMgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1Db2xvcnMgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuZ2x5cGggPT0gJ0xJTkVQTE9UJyB8fCBzLmdseXBoID09ICdET1QnICYmIHMuRkdDT0xPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGllckNvbG9yRmllbGQudmFsdWUgPSBkYXNDb2xvdXJGb3JOYW1lKHMuRkdDT0xPUikudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzLkJHQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpZXJDb2xvckZpZWxkLnZhbHVlID0gZGFzQ29sb3VyRm9yTmFtZShzLkJHQ09MT1IpLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIHNldE51bUNvbG9ycyhudW1Db2xvcnMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRGFzQm9vbGVhblRydWUocy5TQ0FUVEVSKSkge1xuICAgICAgICAgICAgICAgICAgICBnbHlwaEZpZWxkLnZhbHVlID0gJ1NDQVRURVInO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoRmllbGQudmFsdWUgPSBzLmdseXBoO1xuICAgICAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgICAgICB2YXIgc2V0TWluVmFsdWUsIHNldE1heFZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChzLk1JTiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gcGFyc2VGbG9hdChzLk1JTik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRNaW5WYWx1ZSA9IHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGllci5mb3JjZU1pbkR5bmFtaWMgJiYgKHMuTUlOICE9PSB1bmRlZmluZWQgfHwgdGllci5mb3JjZU1pbiAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWluVG9nZ2xlLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWluRmllbGQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWluVG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGllck1pbkZpZWxkLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocy5NQVggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHBhcnNlRmxvYXQocy5NQVgpXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRNYXhWYWx1ZSA9IHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGllci5mb3JjZU1heER5bmFtaWMgJiYgKHMuTUFYICE9PSB1bmRlZmluZWQgfHwgdGllci5mb3JjZU1heCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWF4VG9nZ2xlLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWF4RmllbGQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWF4VG9nZ2xlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGllck1heEZpZWxkLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGllci5mb3JjZU1pbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TWluVmFsdWUgPSB0aWVyLmZvcmNlTWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGllci5mb3JjZU1heCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TWF4VmFsdWUgPSB0aWVyLmZvcmNlTWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHNldE1pblZhbHVlKSA9PSAnbnVtYmVyJyAmJiBzZXRNaW5WYWx1ZSAhPSBwYXJzZUZsb2F0KHRpZXJNaW5GaWVsZC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGllck1pbkZpZWxkLnZhbHVlID0gc2V0TWluVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yoc2V0TWF4VmFsdWUpID09ICdudW1iZXInICYmIHNldE1heFZhbHVlICE9IHBhcnNlRmxvYXQodGllck1heEZpZWxkLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aWVyTWF4RmllbGQudmFsdWUgPSBzZXRNYXhWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VxU3R5bGUgPSBnZXRTZXFTdHlsZSh0aWVyLnN0eWxlc2hlZXQpO1xuICAgICAgICAgICAgICAgIGlmIChzZXFTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXFNaXNtYXRjaFJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgICAgICAgICAgICAgIHNlcU1pc21hdGNoVG9nZ2xlLmNoZWNrZWQgPSAoc2VxU3R5bGUuX19TRVFDT0xPUiA9PT0gJ21pc21hdGNoJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlcUluc2VydFJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7XG4gICAgICAgICAgICAgICAgICAgIHNlcUluc2VydFRvZ2dsZS5jaGVja2VkID0gIGlzRGFzQm9vbGVhblRydWUoc2VxU3R5bGUuX19JTlNFUlRJT05TKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXFNaXNtYXRjaFJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBzZXFJbnNlcnRSb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1F1YW50aXRhdGl2ZSAmJiB0aWVyLmJyb3dzZXIuc291cmNlQWRhcHRlcklzQ2FwYWJsZSh0aWVyLmZlYXR1cmVTb3VyY2UsICdxdWFudExlYXAnKSlcbiAgICAgICAgICAgICAgICBxdWFudExlYXBSb3cuc3R5bGUuZGlzcGxheSA9ICd0YWJsZS1yb3cnO1xuICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICBxdWFudExlYXBSb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXFNaXNtYXRjaFRvZ2dsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnfSk7XG4gICAgICAgIHZhciBzZXFNaXNtYXRjaFJvdyA9IG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ3RoJywgJ0NvbG9yIG1pc21hdGNoZXMnKSxcbiAgICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCBzZXFNaXNtYXRjaFRvZ2dsZSldKTtcbiAgICAgICAgc2VxTWlzbWF0Y2hUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHZhciBuc3MgPSBjb3B5U3R5bGVzaGVldCh0aWVyLnN0eWxlc2hlZXQpO1xuICAgICAgICAgICAgdmFyIHNlcVN0eWxlID0gZ2V0U2VxU3R5bGUobnNzKTtcbiAgICAgICAgICAgIHNlcVN0eWxlLl9fU0VRQ09MT1IgPSBzZXFNaXNtYXRjaFRvZ2dsZS5jaGVja2VkID8gJ21pc21hdGNoJyA6ICdiYXNlJztcbiAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe3N0eWxlc2hlZXQ6IG5zc30pO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc2VxSW5zZXJ0VG9nZ2xlID0gbWFrZUVsZW1lbnQoJ2lucHV0JywgbnVsbCwge3R5cGU6ICdjaGVja2JveCd9KTtcbiAgICAgICAgdmFyIHNlcUluc2VydFJvdyA9IG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ3RoJywgJ1Nob3cgaW5zZXJ0aW9ucycpLFxuICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIHNlcUluc2VydFRvZ2dsZSldKTtcbiAgICAgICAgc2VxSW5zZXJ0VG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICB2YXIgbnNzID0gY29weVN0eWxlc2hlZXQodGllci5zdHlsZXNoZWV0KTtcbiAgICAgICAgICAgIHZhciBzZXFTdHlsZSA9IGdldFNlcVN0eWxlKG5zcyk7XG4gICAgICAgICAgICBzZXFTdHlsZS5fX0lOU0VSVElPTlMgPSBzZXFJbnNlcnRUb2dnbGUuY2hlY2tlZCA/ICd5ZXMnIDogJ25vJztcbiAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe3N0eWxlc2hlZXQ6IG5zc30pO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc3R5bGVSb3cgPSBtYWtlRWxlbWVudCgndHInLFxuICAgICAgICAgICAgICAgIFttYWtlRWxlbWVudCgndGgnLCAnU3R5bGUnKSxcbiAgICAgICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RkJywgZ2x5cGhGaWVsZCldKTtcbiAgICAgICAgdmFyIGNvbG9yUm93ID0gbWFrZUVsZW1lbnQoJ3RyJyxcbiAgICAgICAgICAgICAgICBbbWFrZUVsZW1lbnQoJ3RoJywgWydDb2xvdXIocyknLCBjb2xvckxpc3RQbHVzLCBjb2xvckxpc3RNaW51c10pLFxuICAgICAgICAgICAgICAgICBjb2xvckxpc3RFbGVtZW50XSk7XG4gICAgICAgIHZhciBtaW5Sb3cgPSBtYWtlRWxlbWVudCgndHInLFxuICAgICAgICAgICAgICAgIFttYWtlRWxlbWVudCgndGgnLCAnTWluIHZhbHVlJyksXG4gICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIFt0aWVyTWluVG9nZ2xlLCAnICcsIHRpZXJNaW5GaWVsZF0pXSk7XG4gICAgICAgIHZhciBtYXhSb3cgPSBtYWtlRWxlbWVudCgndHInLFxuICAgICAgICAgICAgICAgIFttYWtlRWxlbWVudCgndGgnLCAnTWF4IHZhbHVlJyksXG4gICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIFt0aWVyTWF4VG9nZ2xlLCAnICcsIHRpZXJNYXhGaWVsZF0pXSk7XG4gICAgICAgIHZhciBxdWFudExlYXBSb3cgPSBcbiAgICAgICAgICAgICBtYWtlRWxlbWVudCgndHInLFxuICAgICAgICAgICAgICAgIFttYWtlRWxlbWVudCgndGgnLCAnVGhyZXNob2xkIGxlYXA6JyksXG4gICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIFtxdWFudExlYXBUb2dnbGUsICcgJywgcXVhbnRMZWFwVGhyZXNoRmllbGRdKV0pO1xuICAgICAgICB2YXIgYnVtcFJvdyA9IG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdCdW1wIG92ZXJsYXBzJyksXG4gICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIGJ1bXBUb2dnbGUpXSk7XG4gICAgICAgIHZhciBsYWJlbFJvdyA9IG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdMYWJlbCBmZWF0dXJlcycpLFxuICAgICAgICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCBsYWJlbFRvZ2dsZSldKTtcblxuXG4gICAgICAgIHZhciB0aWVyVGFibGUgPSBtYWtlRWxlbWVudCgndGFibGUnLFxuICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdOYW1lJywge30sIHt3aWR0aDogJzE1MHB4JywgdGV4dEFsaWduOiAncmlnaHQnfSksXG4gICAgICAgICAgICAgICAgIHRpZXJOYW1lRmllbGRdKSxcblxuICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdQaW4gdG8gdG9wJyksXG4gICAgICAgICAgICAgICAgIHRpZXJQaW5uZWRUb2dnbGVdKSxcblxuICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0cicsXG4gICAgICAgICAgICAgICAgW21ha2VFbGVtZW50KCd0aCcsICdIZWlnaHQnKSxcbiAgICAgICAgICAgICAgICAgbWFrZUVsZW1lbnQoJ3RkJywgdGllckhlaWdodEZpZWxkKV0pLFxuXG4gICAgICAgICAgICBzdHlsZVJvdyxcbiAgICAgICAgICAgIGNvbG9yUm93LFxuICAgICAgICAgICAgbWluUm93LFxuICAgICAgICAgICAgbWF4Um93LFxuICAgICAgICAgICAgcXVhbnRMZWFwUm93LFxuICAgICAgICAgICAgYnVtcFJvdyxcbiAgICAgICAgICAgIGxhYmVsUm93LFxuICAgICAgICAgICAgc2VxTWlzbWF0Y2hSb3csXG4gICAgICAgICAgICBzZXFJbnNlcnRSb3dcbiAgICAgICAgICAgICBdKTtcblxuXG4gICAgICAgIHJlZnJlc2goKTtcblxuICAgICAgICB0aWVyRm9ybS5hcHBlbmRDaGlsZCh0aWVyVGFibGUpO1xuXG4gICAgICAgIHZhciByZXNldEJ1dHRvbiA9IG1ha2VFbGVtZW50KCdidXR0b24nLCAnUmVzZXQgdHJhY2snLCB7Y2xhc3NOYW1lOiAnYnRuJ30sIHttYXJnaW5MZWZ0OiAnYXV0bycsIG1hcmdpblJpZ2h0OiAnYXV0bycsIGRpc3BsYXk6ICdibG9jayd9KTtcbiAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgdGllci5zZXRDb25maWcoe30pO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIHRpZXJGb3JtLmFwcGVuZENoaWxkKHJlc2V0QnV0dG9uKTtcblxuICAgICAgICB0aWVyTmFtZUZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe25hbWU6IHRpZXJOYW1lRmllbGQudmFsdWV9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHRpZXJQaW5uZWRUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe3Bpbm5lZDogdGllclBpbm5lZFRvZ2dsZS5jaGVja2VkfSk7XG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgdGllckNvbG9yRmllbGRzLmxlbmd0aDsgKytjaSkge1xuICAgICAgICAgICAgdGllckNvbG9yRmllbGRzW2NpXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VDb2xvciwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2x5cGhGaWVsZC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgdmFyIG5zcyA9IG11dGF0ZVN0eWxlc2hlZXQoZnVuY3Rpb24odHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGhGaWVsZC52YWx1ZSA9PT0gJ1NDQVRURVInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRzLlNDQVRURVIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0cy5nbHlwaCA9ICdET1QnO1xuICAgICAgICAgICAgICAgICAgICB0cy5TSVpFID0gJzMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRzLmdseXBoID0gZ2x5cGhGaWVsZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdHMuU0NBVFRFUiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0U3R5bGVDb2xvcnModHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKHtzdHlsZXNoZWV0OiBuc3N9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHRpZXJNaW5Ub2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHZhciBjb25mID0ge2ZvcmNlTWluRHluYW1pYzogIXRpZXJNaW5Ub2dnbGUuY2hlY2tlZH07XG4gICAgICAgICAgICB0aWVyTWluRmllbGQuZGlzYWJsZWQgPSAhdGllck1pblRvZ2dsZS5jaGVja2VkO1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUZsb2F0KHRpZXJNaW5GaWVsZC52YWx1ZSk7XG4gICAgICAgICAgICBpZiAodGllck1pblRvZ2dsZS5jaGVja2VkICYmIHR5cGVvZih4KSA9PSAnbnVtYmVyJyAmJiAhaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgY29uZi5mb3JjZU1pbiA9IHBhcnNlRmxvYXQoeCk7XG4gICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKGNvbmYpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGllck1pbkZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcGFyc2VGbG9hdCh0aWVyTWluRmllbGQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZih4KSA9PSAnbnVtYmVyJyAmJiAhaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgdGllci5tZXJnZUNvbmZpZyh7Zm9yY2VNaW46IHh9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHRpZXJNYXhUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHZhciBjb25mID0ge2ZvcmNlTWF4RHluYW1pYzogIXRpZXJNYXhUb2dnbGUuY2hlY2tlZH07XG4gICAgICAgICAgICB0aWVyTWF4RmllbGQuZGlzYWJsZWQgPSAhdGllck1heFRvZ2dsZS5jaGVja2VkO1xuICAgICAgICAgICAgdmFyIHggPSBwYXJzZUZsb2F0KHRpZXJNYXhGaWVsZC52YWx1ZSk7XG4gICAgICAgICAgICBpZiAodGllck1heFRvZ2dsZS5jaGVja2VkICYmIHR5cGVvZih4KSA9PSAnbnVtYmVyJyAmJiAhaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgY29uZi5mb3JjZU1heCA9IHBhcnNlRmxvYXQoeCk7XG4gICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKGNvbmYpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGllck1heEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcGFyc2VGbG9hdCh0aWVyTWF4RmllbGQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZih4KSA9PSAnbnVtYmVyJyAmJiAhaXNOYU4oeCkpXG4gICAgICAgICAgICAgICAgdGllci5tZXJnZUNvbmZpZyh7Zm9yY2VNYXg6IHh9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIHRpZXJIZWlnaHRGaWVsZC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICB2YXIgeCA9IHBhcnNlRmxvYXQodGllckhlaWdodEZpZWxkLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoeCkgPT0gJ251bWJlcicgJiYgIWlzTmFOKHgpKVxuICAgICAgICAgICAgICAgIHRpZXIubWVyZ2VDb25maWcoe2hlaWdodDogTWF0aC5taW4oNTAwLCB4fDApfSk7XG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB2YXIgdXBkYXRlUXVhbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1YW50TGVhcFRocmVzaEZpZWxkLmRpc2FibGVkID0gIXF1YW50TGVhcFRvZ2dsZS5jaGVja2VkO1xuICAgICAgICAgICAgaWYgKHF1YW50TGVhcFRvZ2dsZS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBwYXJzZUZsb2F0KHF1YW50TGVhcFRocmVzaEZpZWxkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHgpID09ICdudW1iZXInICYmICFpc05hTih4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKHtxdWFudExlYXBUaHJlc2hvbGQ6IHBhcnNlRmxvYXQocXVhbnRMZWFwVGhyZXNoRmllbGQudmFsdWUpfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKHtxdWFudExlYXBUaHJlc2hvbGQ6IG51bGx9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWFudExlYXBUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHVwZGF0ZVF1YW50KCk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgcXVhbnRMZWFwVGhyZXNoRmllbGQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgdXBkYXRlUXVhbnQoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIGxhYmVsVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICB2YXIgbnNzID0gbXV0YXRlU3R5bGVzaGVldChmdW5jdGlvbihzdHlsZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlLkxBQkVMID0gbGFiZWxUb2dnbGUuY2hlY2tlZCA/ICd5ZXMnIDogJ25vJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGllci5tZXJnZUNvbmZpZyh7c3R5bGVzaGVldDogbnNzfSk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgYnVtcFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgdmFyIG5zcyA9IG11dGF0ZVN0eWxlc2hlZXQoZnVuY3Rpb24oc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZS5CVU1QID0gYnVtcFRvZ2dsZS5jaGVja2VkID8gJ3llcycgOiAnbm8nO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aWVyLm1lcmdlQ29uZmlnKHtzdHlsZXNoZWV0OiBuc3N9KTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG5cbiAgICAgICAgdGhpcy5zaG93VG9vbFBhbmVsKHRpZXJGb3JtKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ3RpZXInKTtcblxuICAgICAgICB0aWVyLmFkZFRpZXJMaXN0ZW5lcihyZWZyZXNoKTtcblxuICAgICAgICB2YXIgY3VycmVudFNjYWxlID0gdGllci5icm93c2VyLnNjYWxlO1xuICAgICAgICB0aWVyLmJyb3dzZXIuYWRkVmlld0xpc3RlbmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRpZXIuYnJvd3Nlci5zY2FsZSAhPSBjdXJyZW50U2NhbGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NhbGUgPSB0aWVyLmJyb3dzZXIuc2NhbGU7XG4gICAgICAgICAgICAgICAgcmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlcVN0eWxlKHN0eWxlc2hlZXQpIHtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc3R5bGVzaGVldC5zdHlsZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzcyA9IHN0eWxlc2hlZXQuc3R5bGVzW3NpXS5zdHlsZTtcbiAgICAgICAgaWYgKHNzLmdseXBoID09PSAnX19TRVFVRU5DRScpIHtcbiAgICAgICAgICAgIHJldHVybiBzcztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIHRpZXIuanM6ICh0cnkpIHRvIGVuY2Fwc3VsYXRlIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGEgYnJvd3NlciB0aWVyLlxuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBtYWtlRWxlbWVudCA9IHV0aWxzLm1ha2VFbGVtZW50O1xuICAgIHZhciBzaGFsbG93Q29weSA9IHV0aWxzLnNoYWxsb3dDb3B5O1xuICAgIHZhciBwdXNobmV3ID0gdXRpbHMucHVzaG5ldztcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTdHlsZXNoZWV0ID0gZGFzLkRBU1N0eWxlc2hlZXQ7XG4gICAgdmFyIERBU1N0eWxlID0gZGFzLkRBU1N0eWxlO1xufVxuXG52YXIgX190aWVyX2lkU2VlZCA9IDA7XG5cbmZ1bmN0aW9uIERhc1RpZXIoYnJvd3Nlciwgc291cmNlLCBjb25maWcsIGJhY2tncm91bmQpXG57XG4gICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5pZCA9ICd0aWVyJyArICgrK19fdGllcl9pZFNlZWQpO1xuICAgIHRoaXMuYnJvd3NlciA9IGJyb3dzZXI7XG4gICAgdGhpcy5kYXNTb3VyY2UgPSBzaGFsbG93Q29weShzb3VyY2UpO1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cbiAgICB0aGlzLnZpZXdwb3J0ID0gbWFrZUVsZW1lbnQoJ2NhbnZhcycsIG51bGwsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7d2lkdGg6ICcnICsgKCh0aGlzLmJyb3dzZXIuZmVhdHVyZVBhbmVsV2lkdGh8MCkgKyAyMDAwKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ZpZXdwb3J0J30pO1xuICAgIHRoaXMub3ZlcmxheSA9IG1ha2VFbGVtZW50KCdjYW52YXMnLCBudWxsLFxuICAgICAgICAge3dpZHRoOiArICgodGhpcy5icm93c2VyLmZlYXR1cmVQYW5lbFdpZHRofDApICsgMjAwMCksIFxuICAgICAgICAgIGhlaWdodDogXCIzMFwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ3ZpZXdwb3J0LW92ZXJsYXknfSk7XG5cbiAgICB0aGlzLm5vdGlmaWVyID0gbWFrZUVsZW1lbnQoJ2RpdicsICcnLCB7Y2xhc3NOYW1lOiAnbm90aWZpZXInfSk7XG4gICAgdGhpcy5ub3RpZmllckhvbGRlciA9IG1ha2VFbGVtZW50KCdkaXYnLCB0aGlzLm5vdGlmaWVyLCB7Y2xhc3NOYW1lOiAnbm90aWZpZXItaG9sZGVyJ30pO1xuICAgIHRoaXMucXVhbnRPdmVybGF5ID0gbWFrZUVsZW1lbnQoXG4gICAgICAgICdjYW52YXMnLCBudWxsLCBcbiAgICAgICAge3dpZHRoOiAnNTAnLCBoZWlnaHQ6IFwiNTZcIixcbiAgICAgICAgIGNsYXNzTmFtZTogJ3F1YW50LW92ZXJsYXknfSk7XG5cbiAgICB0aGlzLnJlbW92ZUJ1dHRvbiA9IG1ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLXRpbWVzJ30pO1xuICAgIHRoaXMuYnVtcEJ1dHRvbiA9IG1ha2VFbGVtZW50KCdpJywgbnVsbCwge2NsYXNzTmFtZTogJ2ZhIGZhLXBsdXMtY2lyY2xlJ30pO1xuICAgIHRoaXMubG9hZGVyQnV0dG9uID0gYnJvd3Nlci5tYWtlTG9hZGVyKDE2KTtcbiAgICB0aGlzLmxvYWRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuaW5mb0VsZW1lbnQgPSBtYWtlRWxlbWVudCgnZGl2JywgdGhpcy5kYXNTb3VyY2UuZGVzYywge2NsYXNzTmFtZTogJ3RyYWNrLWxhYmVsLWluZm8nfSk7XG4gICAgdGhpcy5uYW1lQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2RpdicsIFtdLCB7Y2xhc3NOYW1lOiAndGllci10YWInfSk7XG4gICAgdGhpcy5uYW1lQnV0dG9uLmFwcGVuZENoaWxkKHRoaXMucmVtb3ZlQnV0dG9uKTtcbiAgICBpZiAoc291cmNlLnBlbm5hbnQpIHtcbiAgICAgICAgdGhpcy5uYW1lQnV0dG9uLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdpbWcnLCBudWxsLCB7c3JjOiBzb3VyY2UucGVubmFudCwgd2lkdGg6ICcxNicsIGhlaWdodDogJzE2J30pKVxuICAgIH1cbiAgICB0aGlzLm5hbWVFbGVtZW50ID0gbWFrZUVsZW1lbnQoJ3NwYW4nLCBzb3VyY2UubmFtZSk7XG4gICAgdGhpcy5uYW1lQnV0dG9uLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdzcGFuJywgW3RoaXMubmFtZUVsZW1lbnQsIHRoaXMuaW5mb0VsZW1lbnRdLCB7Y2xhc3NOYW1lOiAndHJhY2stbmFtZS1ob2xkZXInfSkpO1xuICAgIHRoaXMubmFtZUJ1dHRvbi5hcHBlbmRDaGlsZCh0aGlzLmJ1bXBCdXR0b24pO1xuICAgIHRoaXMubmFtZUJ1dHRvbi5hcHBlbmRDaGlsZCh0aGlzLmxvYWRlckJ1dHRvbik7XG4gICAgXG4gICAgdGhpcy5sYWJlbCA9IG1ha2VFbGVtZW50KCdzcGFuJyxcbiAgICAgICBbdGhpcy5uYW1lQnV0dG9uXSxcbiAgICAgICB7Y2xhc3NOYW1lOiAnYnRuLWdyb3VwIHRyYWNrLWxhYmVsJ30pO1xuXG5cbiAgICB0aGlzLnJvdyA9IG1ha2VFbGVtZW50KCdkaXYnLCBbdGhpcy52aWV3cG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudE92ZXJsYXldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjbGFzc05hbWU6ICd0aWVyJ30pO1xuXG4gICAgaWYgKCFiYWNrZ3JvdW5kKSB7XG4gICAgICAgIHRoaXMucm93LnN0eWxlLmJhY2tncm91bmQgPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgaWYgKCFicm93c2VyLm5vRGVmYXVsdExhYmVscylcbiAgICAgICAgdGhpcy5yb3cuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbCk7XG4gICAgdGhpcy5yb3cuYXBwZW5kQ2hpbGQodGhpcy5ub3RpZmllckhvbGRlcik7XG4gICAgXG4gICAgdGhpcy5sYXlvdXRIZWlnaHQgPSAyNTtcbiAgICB0aGlzLmJ1bXBlZCA9IHRydWU7XG4gICAgdGhpcy5zdHlsZUlkU2VlZCA9IDA7XG4gICAgaWYgKHNvdXJjZS5xdWFudExlYXBUaHJlc2hvbGQpIHtcbiAgICAgICAgdGhpcy5xdWFudExlYXBUaHJlc2hvbGQgPSBzb3VyY2UucXVhbnRMZWFwVGhyZXNob2xkO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXNTb3VyY2UuY29sbGFwc2VTdXBlckdyb3Vwcykge1xuICAgICAgICB0aGlzLmJ1bXBlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmxheW91dFdhc0RvbmUgPSBmYWxzZTtcblxuICAgIGlmIChzb3VyY2UuZmVhdHVyZUluZm9QbHVnaW4pIHtcbiAgICAgICAgdGhpcy5hZGRGZWF0dXJlSW5mb1BsdWdpbihzb3VyY2UuZmVhdHVyZUluZm9QbHVnaW4pO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdFNvdXJjZXMoKTtcblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgaWYgKHRoaXMuZmVhdHVyZVNvdXJjZSAmJiB0aGlzLmZlYXR1cmVTb3VyY2UuZ2V0RGVmYXVsdEZJUHMgJiYgIXNvdXJjZS5ub1NvdXJjZUZlYXR1cmVJbmZvKSB7XG4gICAgICAgIHRoaXMuZmVhdHVyZVNvdXJjZS5nZXREZWZhdWx0RklQcyhmdW5jdGlvbihmaXApIHtcbiAgICAgICAgICAgIGlmIChmaXApXG4gICAgICAgICAgICAgICAgdGhpc0IuYWRkRmVhdHVyZUluZm9QbHVnaW4oZmlwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmVhdHVyZVNvdXJjZSAmJiB0aGlzLmZlYXR1cmVTb3VyY2UuYWRkUmVhZGluZXNzTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5mZWF0dXJlU291cmNlLmFkZFJlYWRpbmVzc0xpc3RlbmVyKGZ1bmN0aW9uKHJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzQi5ub3RpZnkocmVhZHksIC0xKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmZlYXR1cmVzTG9hZGVkTGlzdGVuZXJzID0gW107XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQ7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLmFkZEZlYXR1cmVJbmZvUGx1Z2luID0gZnVuY3Rpb24ocCkge1xuICAgIGlmICghdGhpcy5mZWF0dXJlSW5mb1BsdWdpbnMpIFxuICAgICAgICB0aGlzLmZlYXR1cmVJbmZvUGx1Z2lucyA9IFtdO1xuICAgIHRoaXMuZmVhdHVyZUluZm9QbHVnaW5zLnB1c2gocCk7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGllciA9IHRoaXM7XG5cbiAgICBpZiAodGllci5kYXNTb3VyY2Uuc3R5bGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdHlsZXNoZWV0KHtzdHlsZXM6IHRpZXIuZGFzU291cmNlLnN0eWxlfSk7XG4gICAgICAgIHRoaXMuYnJvd3Nlci5yZWZyZXNoVGllcih0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aWVyLnN0YXR1cyA9ICdGZXRjaGluZyBzdHlsZXNoZWV0JztcbiAgICAgICAgdGllci5mZXRjaFN0eWxlc2hlZXQoZnVuY3Rpb24oc3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVyciB8fCAhc3MpIHtcbiAgICAgICAgICAgICAgICB0aWVyLmVycm9yID0gJ05vIHN0eWxlc2hlZXQnO1xuICAgICAgICAgICAgICAgIHZhciBzcyA9IG5ldyBEQVNTdHlsZXNoZWV0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGRlZlN0eWxlID0gbmV3IERBU1N0eWxlKCk7XG4gICAgICAgICAgICAgICAgZGVmU3R5bGUuZ2x5cGggPSAnQk9YJztcbiAgICAgICAgICAgICAgICBkZWZTdHlsZS5CR0NPTE9SID0gJ2JsdWUnO1xuICAgICAgICAgICAgICAgIGRlZlN0eWxlLkZHQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICAgICAgICAgIHNzLnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgZGVmU3R5bGUpO1xuICAgICAgICAgICAgICAgIHRpZXIuc2V0U3R5bGVzaGVldChzcyk7XG4gICAgICAgICAgICAgICAgdGllci5icm93c2VyLnJlZnJlc2hUaWVyKHRpZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aWVyLnNldFN0eWxlc2hlZXQoc3MpO1xuICAgICAgICAgICAgICAgIGlmIChzcy5nZW5lSGludCkge1xuICAgICAgICAgICAgICAgICAgICB0aWVyLmRhc1NvdXJjZS5jb2xsYXBzZVN1cGVyR3JvdXBzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGllci5idW1wZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGllci51cGRhdGVMYWJlbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aWVyLmJyb3dzZXIucmVmcmVzaFRpZXIodGllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuRGFzVGllci5wcm90b3R5cGUuc2V0U3R5bGVzaGVldCA9IGZ1bmN0aW9uKHNzKSB7XG4gICAgdGhpcy5iYXNlU3R5bGVzaGVldCA9IHNoYWxsb3dDb3B5KHNzKTtcbiAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgdGhpcy5iYXNlU3R5bGVzaGVldC5zdHlsZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzaCA9IHRoaXMuYmFzZVN0eWxlc2hlZXQuc3R5bGVzW3NpXSA9IHNoYWxsb3dDb3B5KHRoaXMuYmFzZVN0eWxlc2hlZXQuc3R5bGVzW3NpXSk7XG4gICAgICAgIHNoLl9tZXRob2RSRSA9IHNoLl9sYWJlbFJFID0gc2guX3R5cGVSRSA9IG51bGw7XG4gICAgICAgIHNoLnN0eWxlID0gc2hhbGxvd0NvcHkoc2guc3R5bGUpO1xuICAgICAgICBzaC5zdHlsZS5pZCA9ICdzdHlsZScgKyAoKyt0aGlzLnN0eWxlSWRTZWVkKTtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlRnJvbUNvbmZpZygpO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5nZXRTb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mZWF0dXJlU291cmNlO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5nZXREZXNpcmVkVHlwZXMgPSBmdW5jdGlvbihzY2FsZSkge1xuICAgIHZhciBmZXRjaFR5cGVzID0gW107XG4gICAgdmFyIGluY2x1c2l2ZSA9IGZhbHNlO1xuICAgIHZhciBzc1NjYWxlID0gdGhpcy5icm93c2VyLnpvb21Gb3JDdXJyZW50U2NhbGUoKTtcblxuICAgIGlmICh0aGlzLnN0eWxlc2hlZXQpIHtcbiAgICAgICAgLy8gZGxvZygnc3MgPSAnICsgbWluaUpTT05pZnkodGhpcy5zdHlsZXNoZWV0KSk7XG4gICAgICAgIHZhciBzcyA9IHRoaXMuc3R5bGVzaGVldC5zdHlsZXM7XG4gICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgIHZhciBzaCA9IHNzW3NpXTtcbiAgICAgICAgICAgIGlmICghc2guem9vbSB8fCBzaC56b29tID09IHNzU2NhbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNoLnR5cGUgfHwgc2gudHlwZSA9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaG5ldyhmZXRjaFR5cGVzLCBzaC50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbmNsdXNpdmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChpbmNsdXNpdmUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZldGNoVHlwZXM7XG4gICAgfVxufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5uZWVkc1NlcXVlbmNlID0gZnVuY3Rpb24oc2NhbGUgKSB7XG4gICAgaWYgKHRoaXMuZGFzU291cmNlLnRpZXJfdHlwZSA9PT0gJ3NlcXVlbmNlJyAmJiBzY2FsZSA8IDUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICgodGhpcy5kYXNTb3VyY2UuYmFtVVJJIHx8IHRoaXMuZGFzU291cmNlLmJhbUJsb2IpICYmIHNjYWxlIDwgMjApIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS52aWV3RmVhdHVyZXMgPSBmdW5jdGlvbihjaHIsIGNvdmVyYWdlLCBzY2FsZSwgZmVhdHVyZXMsIHNlcXVlbmNlKSB7XG4gICAgdGhpcy5jdXJyZW50RmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHNlcXVlbmNlO1xuICAgIHRoaXMubm90aWZ5RmVhdHVyZXNMb2FkZWQoKTtcbiAgICBcbiAgICB0aGlzLmtub3duQ2hyID0gY2hyO1xuICAgIHRoaXMua25vd25Db3ZlcmFnZSA9IGNvdmVyYWdlO1xuXG4gICAgaWYgKHRoaXMuc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbm90aWZpZXJUb1N0YXR1cygpO1xuICAgIH1cblxuICAgIHRoaXMuZHJhdygpO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZlYXR1cmVzID0gdGhpcy5jdXJyZW50RmVhdHVyZXM7XG4gICAgdmFyIHNlcSA9IHRoaXMuY3VycmVudFNlcXVlbmNlO1xuICAgIGlmICh0aGlzLmRhc1NvdXJjZS50aWVyX3R5cGUgPT09ICdzZXF1ZW5jZScpIHtcbiAgICAgICAgZHJhd1NlcVRpZXIodGhpcywgc2VxKTsgXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZHJhd0ZlYXR1cmVUaWVyKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnBhaW50KCk7XG4gICAgdGhpcy5vcmlnaW5IYXh4ID0gMDtcbiAgICB0aGlzLmJyb3dzZXIuYXJyYW5nZVRpZXJzKCk7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLmZpbmROZXh0RmVhdHVyZSA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIGZlZGdlLCBjYWxsYmFjaykge1xuICAgIGlmICh0aGlzLnF1YW50TGVhcFRocmVzaG9sZCkge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmJyb3dzZXIudmlld0VuZCAtIHRoaXMuYnJvd3Nlci52aWV3U3RhcnQgKyAxO1xuICAgICAgICBwb3MgPSAocG9zICsgICgod2lkdGggKiBkaXIpIC8gMikpfDBcbiAgICAgICAgdGhpcy5mZWF0dXJlU291cmNlLnF1YW50RmluZE5leHRGZWF0dXJlKGNociwgcG9zLCBkaXIsIHRoaXMucXVhbnRMZWFwVGhyZXNob2xkLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMua25vd25Db3ZlcmFnZSAmJiBwb3MgPj0gdGhpcy5rbm93bkNvdmVyYWdlLm1pbigpICYmIHBvcyA8PSB0aGlzLmtub3duQ292ZXJhZ2UubWF4KCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIHZhciBiZXN0RmVhdHVyZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IHRoaXMuY3VycmVudEZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMuY3VycmVudEZlYXR1cmVzW2ZpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmLm1pbiB8fCAhZi5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmLnBhcmVudHMgJiYgZi5wYXJlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVkZ2UgPT0gMSAmJiBmLm1heCA+PSBwb3MgJiYgZi5taW4gPCBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJlc3RGZWF0dXJlIHx8IGYubWluID4gYmVzdEZlYXR1cmUubWluIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmLm1pbiA9PSBiZXN0RmVhdHVyZS5taW4gJiYgZi5tYXggPCBiZXN0RmVhdHVyZS5tYXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGZWF0dXJlID0gZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGYubWF4IDwgcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFiZXN0RmVhdHVyZSB8fCBmLm1heCA+IGJlc3RGZWF0dXJlLm1heCB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYubWF4ID09IGJlc3RGZWF0dXJlLm1heCAmJiBmLm1pbiA8IGJlc3RGZWF0dXJlLm1pbikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYubWluID09IGJlc3RGZWF0dXJlLm1taW4gJiYgYmVzdEZlYXR1cmUubWF4ID49IHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEZlYXR1cmUgPSBmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVkZ2UgPT0gMSAmJiBmLm1pbiA8PSBwb3MgJiYgZi5tYXggPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJlc3RGZWF0dXJlIHx8IGYubWF4IDwgYmVzdEZlYXR1cmUubWF4IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmLm1heCA9PSBiZXN0RmVhdHVyZS5tYXggJiYgZi5taW4gPiBiZXN0RmVhdHVyZS5taW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGZWF0dXJlID0gZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGYubWluID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFiZXN0RmVhdHVyZSB8fCBmLm1pbiA8IGJlc3RGZWF0dXJlLm1pbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZi5taW4gPT0gYmVzdEZlYXR1cmUubWluICYmIGYubWF4ID4gYmVzdEZlYXR1cmUubWF4KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZi5tYXggPT0gYmVzdEZlYXR1cmUubWF4ICYmIGJlc3RGZWF0dXJlLm1pbiA8PSBwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGZWF0dXJlID0gZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJlc3RGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGRsb2coJ2Jlc3RGZWF0dXJlID0gJyArIG1pbmlKU09OaWZ5KGJlc3RGZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhiZXN0RmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMua25vd25TdGFydDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLmtub3duRW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmVhdHVyZVNvdXJjZS5maW5kTmV4dEZlYXR1cmUoY2hyLCBwb3MsIGRpciwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuXG5EYXNUaWVyLnByb3RvdHlwZS51cGRhdGVMYWJlbCA9IGZ1bmN0aW9uKCkge1xuICAgdGhpcy5idW1wQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuYnVtcGVkID8gJ2ZhIGZhLW1pbnVzLWNpcmNsZScgOiAnZmEgZmEtcGx1cy1jaXJjbGUnO1xuICAgaWYgKHRoaXMuZGFzU291cmNlLmNvbGxhcHNlU3VwZXJHcm91cHMpIHtcbiAgICAgICAgdGhpcy5idW1wQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJ1bXBCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnVwZGF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3VycmVudEhlaWdodCA9IE1hdGgubWF4KE1hdGgubWF4KHRoaXMubGF5b3V0SGVpZ2h0LCB0aGlzLmxhYmVsLmNsaWVudEhlaWdodCArIDIpLCB0aGlzLmJyb3dzZXIubWluVGllckhlaWdodCk7XG4gICAgdGhpcy5yb3cuc3R5bGUuaGVpZ2h0ID0gJycgKyB0aGlzLmN1cnJlbnRIZWlnaHQgKyAncHgnO1xuICAgIHRoaXMuYnJvd3Nlci51cGRhdGVIZWlnaHQoKTtcbiB9XG5cbkRhc1RpZXIucHJvdG90eXBlLmRyYXdPdmVybGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSB0aGlzO1xuICAgIHZhciBiID0gdGhpcy5icm93c2VyO1xuICAgIHZhciByZXRpbmEgPSBiLnJldGluYSAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDE7XG4gICAgdmFyIGcgPSB0Lm92ZXJsYXkuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBcbiAgICB0Lm92ZXJsYXkuaGVpZ2h0ID0gdC52aWV3cG9ydC5oZWlnaHQ7XG4gICAgdC5vdmVybGF5LndpZHRoID0gdC52aWV3cG9ydC53aWR0aDtcbiAgICBpZiAocmV0aW5hKSB7XG4gICAgICAgIGcuc2NhbGUoMiwgMik7XG4gICAgfVxuICAgIFxuICAgIHZhciBvcmlnaW4gPSBiLnZpZXdTdGFydCAtICgxMDAwL2Iuc2NhbGUpO1xuICAgIHZhciB2aXNTdGFydCA9IGIudmlld1N0YXJ0IC0gKDEwMDAvYi5zY2FsZSk7XG4gICAgdmFyIHZpc0VuZCA9IGIudmlld0VuZCArICgxMDAwL2Iuc2NhbGUpO1xuXG5cbiAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgYi5oaWdobGlnaHRzLmxlbmd0aDsgKytoaSkge1xuICAgICAgICB2YXIgaCA9IGIuaGlnaGxpZ2h0c1toaV07XG4gICAgICAgIGlmICgoKGguY2hyID09PSBiLmNocikgfHwgKGguY2hyID09PSAoJ2NocicgKyBiLmNocikpKSAmJiBoLm1pbiA8IHZpc0VuZCAmJiBoLm1heCA+IHZpc1N0YXJ0KSB7XG4gICAgICAgICAgICBnLmdsb2JhbEFscGhhID0gYi5kZWZhdWx0SGlnaGxpZ2h0QWxwaGE7XG4gICAgICAgICAgICBnLmZpbGxTdHlsZSA9IGIuZGVmYXVsdEhpZ2hsaWdodEZpbGw7XG4gICAgICAgICAgICBnLmZpbGxSZWN0KChoLm1pbiAtIG9yaWdpbikgKiBiLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAoaC5tYXggLSBoLm1pbikgKiBiLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICB0Lm92ZXJsYXkuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHQub29yaWdpbiA9IGIudmlld1N0YXJ0O1xuICAgIHQub3ZlcmxheS5zdHlsZS53aWR0aCA9IHQudmlld3BvcnQuc3R5bGUud2lkdGg7XG4gICAgdC5vdmVybGF5LnN0eWxlLmhlaWdodCA9IHQudmlld3BvcnQuc3R5bGUuaGVpZ2h0O1xuICAgIHQub3ZlcmxheS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnXG59XG5cbkRhc1RpZXIucHJvdG90eXBlLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuY3VycmVudEZlYXR1cmVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIHRoaXMudXBkYXRlSGVpZ2h0KCk7XG4gICAgICAgIHRoaXMuX25vdGlmaWVyVG9TdGF0dXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5fbm90aWZpZXJUb1N0YXR1cygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbihtZXNzYWdlLCB0aW1lb3V0KSB7XG4gICAgaWYgKHR5cGVvZih0aW1lb3V0KSAhPT0gJ251bWJlcicpXG4gICAgICAgIHRpbWVvdXQgPSAyMDAwO1xuXG4gICAgaWYgKHRoaXMubm90aWZpZXJGYWRlVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ub3RpZmllckZhZGVUaW1lb3V0KTtcbiAgICAgICAgdGhpcy5ub3RpZmllckZhZGVUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9ub3RpZmllck9uKG1lc3NhZ2UpO1xuICAgICAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWVyRmFkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXNCLl9ub3RpZmllclRvU3RhdHVzKCk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25vdGlmaWVyVG9TdGF0dXMoKTtcbiAgICB9XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLl9ub3RpZmllck9uID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHRoaXMubm90aWZpZXIudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgIHRoaXMubm90aWZpZXIuc3R5bGUub3BhY2l0eSA9IDAuODtcbn1cblxuRGFzVGllci5wcm90b3R5cGUuX25vdGlmaWVyT2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ub3RpZmllci5zdHlsZS5vcGFjaXR5ID0gMDtcbn1cblxuRGFzVGllci5wcm90b3R5cGUuX25vdGlmaWVyVG9TdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgdGhpcy5fbm90aWZpZXJPbih0aGlzLnN0YXR1cylcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ub3RpZmllck9mZigpO1xuICAgIH1cbn1cblxuRGFzVGllci5wcm90b3R5cGUuc2V0Q29uZmlnID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fdXBkYXRlRnJvbUNvbmZpZygpO1xuICAgIHRoaXMubm90aWZ5VGllckxpc3RlbmVycygpO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5tZXJnZUNvbmZpZyA9IGZ1bmN0aW9uKG5ld0NvbmZpZykge1xuICAgIGZvciAodmFyIGsgaW4gbmV3Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnW2tdID0gbmV3Q29uZmlnW2tdO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVGcm9tQ29uZmlnKCk7XG4gICAgdGhpcy5ub3RpZnlUaWVyTGlzdGVuZXJzKCk7XG59XG5cbkRhc1RpZXIucHJvdG90eXBlLl91cGRhdGVGcm9tQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5lZWRzUmVmcmVzaCA9IGZhbHNlO1xuICAgIHZhciBuZWVkc1Jlb3JkZXIgPSBmYWxzZTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcubmFtZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHRoaXMubmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmNvbmZpZy5uYW1lO1xuICAgIGVsc2VcbiAgICAgICAgdGhpcy5uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuZGFzU291cmNlLm5hbWU7XG5cbiAgICB2YXIgd2FudGVkSGVpZ2h0ID0gdGhpcy5jb25maWcuaGVpZ2h0IHx8IHRoaXMuZGFzU291cmNlLmZvcmNlSGVpZ2h0O1xuICAgIGlmICh3YW50ZWRIZWlnaHQgIT0gdGhpcy5mb3JjZUhlaWdodCkge1xuICAgICAgICB0aGlzLmZvcmNlSGVpZ2h0ID0gd2FudGVkSGVpZ2h0O1xuICAgICAgICBuZWVkc1JlZnJlc2ggPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcmNlTWluRHluYW1pYyAhPSB0aGlzLmNvbmZpZy5mb3JjZU1pbkR5bmFtaWMpIHtcbiAgICAgICAgdGhpcy5mb3JjZU1pbkR5bmFtaWMgPSB0aGlzLmNvbmZpZy5mb3JjZU1pbkR5bmFtaWM7XG4gICAgICAgIG5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGZvcmNlTWluID0gdGhpcy5jb25maWcuZm9yY2VNaW4gIT0gdW5kZWZpbmVkID8gdGhpcy5jb25maWcuZm9yY2VNaW4gOiB0aGlzLmRhc1NvdXJjZS5mb3JjZU1pbjtcbiAgICBpZiAodGhpcy5mb3JjZU1pbiAhPSBmb3JjZU1pbikge1xuICAgICAgICB0aGlzLmZvcmNlTWluID0gZm9yY2VNaW47XG4gICAgICAgIG5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZm9yY2VNYXhEeW5hbWljICE9IHRoaXMuY29uZmlnLmZvcmNlTWF4RHluYW1pYykge1xuICAgICAgICB0aGlzLmZvcmNlTWF4RHluYW1pYyA9IHRoaXMuY29uZmlnLmZvcmNlTWF4RHluYW1pYztcbiAgICAgICAgbmVlZHNSZWZyZXNoID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgdmFyIGZvcmNlTWF4ID0gdGhpcy5jb25maWcuZm9yY2VNYXggIT0gdW5kZWZpbmVkID8gdGhpcy5jb25maWcuZm9yY2VNYXggOiB0aGlzLmRhc1NvdXJjZS5mb3JjZU1heDtcbiAgICBpZiAodGhpcy5mb3JjZU1heCAhPSBmb3JjZU1heCkge1xuICAgICAgICB0aGlzLmZvcmNlTWF4ID0gZm9yY2VNYXg7XG4gICAgICAgIG5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHF1YW50TGVhcFRocmVzaG9sZCA9IG51bGw7XG4gICAgaWYgKHRoaXMuY29uZmlnLnF1YW50TGVhcFRocmVzaG9sZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBxdWFudExlYXBUaHJlc2hvbGQgPSB0aGlzLmNvbmZpZy5xdWFudExlYXBUaHJlc2hvbGQ7XG4gICAgZWxzZSBpZiAodGhpcy5kYXNTb3VyY2UucXVhbnRMZWFwVGhyZXNob2xkICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHF1YW50TGVhcFRocmVzaG9sZCA9IHRoaXMuZGFzU291cmNlLnF1YW50TGVhcFRocmVzaG9sZDtcbiAgICBpZiAocXVhbnRMZWFwVGhyZXNob2xkICE9IHRoaXMucXVhbnRMZWFwVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMucXVhbnRMZWFwVGhyZXNob2xkID0gcXVhbnRMZWFwVGhyZXNob2xkO1xuICAgICAgICBuZWVkc1JlZnJlc2ggPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBQb3NzaWJsZSBGSVhNRSAtLSBhcmUgdGhlcmUgY2FzZXMgd2hlcmUgc3R5bGUgSURzIG5lZWQgdG8gYmUgcmVhc3NpZ25lZD9cbiAgICB2YXIgc3R5bGVzaGVldCA9IHRoaXMuY29uZmlnLnN0eWxlc2hlZXQgfHwgdGhpcy5iYXNlU3R5bGVzaGVldDtcbiAgICBpZiAodGhpcy5zdHlsZXNoZWV0ICE9PSBzdHlsZXNoZWV0KSB7XG4gICAgICAgIHRoaXMuc3R5bGVzaGVldCA9IHN0eWxlc2hlZXQ7XG4gICAgICAgIG5lZWRzUmVmcmVzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHdhbnRlZFBpbm5lZCA9IHRoaXMuY29uZmlnLnBpbm5lZCAhPT0gdW5kZWZpbmVkID8gdGhpcy5jb25maWcucGlubmVkIDogdGhpcy5kYXNTb3VyY2UucGlubmVkO1xuICAgIGlmICh3YW50ZWRQaW5uZWQgIT09IHRoaXMucGlubmVkKSB7XG4gICAgICAgIHRoaXMucGlubmVkID0gd2FudGVkUGlubmVkO1xuICAgICAgICBuZWVkc1Jlb3JkZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChuZWVkc1JlZnJlc2gpXG4gICAgICAgIHRoaXMuc2NoZWR1bGVSZWRyYXcoKTtcblxuICAgIGlmIChuZWVkc1Jlb3JkZXIpXG4gICAgICAgIHRoaXMuYnJvd3Nlci5yZW9yZGVyVGllcnMoKTtcbn1cblxuRGFzVGllci5wcm90b3R5cGUuc2NoZWR1bGVSZWRyYXcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudEZlYXR1cmVzKVxuICAgICAgICByZXR1cm47XG4gICAgXG4gICAgdmFyIHRpZXIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLnJlZHJhd1RpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5yZWRyYXdUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRpZXIuZHJhdygpO1xuICAgICAgICAgICAgdGllci5yZWRyYXdUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfSwgMTApO1xuICAgIH1cbn1cblxuXG5EYXNUaWVyLnByb3RvdHlwZS5hZGRUaWVyTGlzdGVuZXIgPSBmdW5jdGlvbihsKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChsKTtcbn1cblxuRGFzVGllci5wcm90b3R5cGUubm90aWZ5VGllckxpc3RlbmVycyA9IGZ1bmN0aW9uKGNoYW5nZSkge1xuICAgIGZvciAodmFyIGxpID0gMDsgbGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7ICsrbGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2xpXShjaGFuZ2UpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmJyb3dzZXIubm90aWZ5VGllcigpO1xufVxuXG5EYXNUaWVyLnByb3RvdHlwZS5hZGRGZWF0dXJlc0xvYWRlZExpc3RlbmVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIHRoaXMuZmVhdHVyZXNMb2FkZWRMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbn1cblxuRGFzVGllci5wcm90b3R5cGUubm90aWZ5RmVhdHVyZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBsaSA9IDA7IGxpIDwgdGhpcy5mZWF0dXJlc0xvYWRlZExpc3RlbmVycy5sZW5ndGg7ICsrbGkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNMb2FkZWRMaXN0ZW5lcnNbbGldLmNhbGwodGhpcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIERhc1RpZXI6IERhc1RpZXJcbiAgICB9O1xuXG4gICAgLy8gSW1wb3J0ZWQgZm9yIHNpZGUgZWZmZWN0c1xuICAgIHZhciBmZCA9IHJlcXVpcmUoJy4vZmVhdHVyZS1kcmF3Jyk7XG4gICAgdmFyIGRyYXdGZWF0dXJlVGllciA9IGZkLmRyYXdGZWF0dXJlVGllcjtcbiAgICB2YXIgc2QgPSByZXF1aXJlKCcuL3NlcXVlbmNlLWRyYXcnKTtcbiAgICB2YXIgZHJhd1NlcVRpZXIgPSBzZC5kcmF3U2VxVGllcjtcbiAgICAvLyByZXF1aXJlKCcuL3NvdXJjZWFkYXB0ZXJzJyk7ICAvKiBEb25lIGluIGNicm93c2VyIGluc3RlYWQgKi9cbn0iLCIvKipcbiAqIFJldHJpZXZlIERBUyByZXNvdXJjZXMgZnJvbSB0cmFuU01BUlQncyBEQVNcbiAqXG4gKiBAcGFyYW0gcmVzdWx0X2luc3RhbmNlX2lkXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Nicm93c2VyJyk7XG4gICAgdmFyIEJyb3dzZXIgPSBicm93c2VyLkJyb3dzZXI7XG5cbiAgICB2YXIgdFV0aWxzID0gcmVxdWlyZSgnLi90c21hcnQtdXRpbHMnKTtcbiAgICB2YXIgZGlzcGxheUVycm9yID0gdFV0aWxzLmRpc3BsYXlFcnJvcjtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTZWdtZW50ID0gZGFzLkRBU1NlZ21lbnQ7XG4gICAgdmFyIERBU1JlZ2lzdHJ5ID0gZGFzLkRBU1JlZ2lzdHJ5O1xuXG59XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Nicm93c2VyJyk7XG4gICAgdmFyIEJyb3dzZXIgPSBicm93c2VyLkJyb3dzZXI7XG4gICAgdmFyIHNvdXJjZXNBcmVFcXVhbCA9IGJyb3dzZXIuc291cmNlc0FyZUVxdWFsO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBtYWtlRWxlbWVudCA9IHV0aWxzLm1ha2VFbGVtZW50O1xuICAgIHZhciByZW1vdmVDaGlsZHJlbiA9IHV0aWxzLnJlbW92ZUNoaWxkcmVuO1xuICAgIHZhciBPYnNlcnZlZCA9IHV0aWxzLk9ic2VydmVkO1xuXG4gICAgdmFyIHRodWIgPSByZXF1aXJlKCcuL3RodWInKTtcbiAgICB2YXIgVEhVQl9DT01QQVJFID0gdGh1Yi5USFVCX0NPTVBBUkU7XG4gICAgdmFyIGNvbm5lY3RUcmFja0h1YiA9IHRodWIuY29ubmVjdFRyYWNrSHViO1xuXG4gICAgdmFyIGRvbXVpID0gcmVxdWlyZSgnLi9kb211aScpO1xuICAgIHZhciBtYWtlVHJlZVRhYmxlU2VjdGlvbiA9IGRvbXVpLm1ha2VUcmVlVGFibGVTZWN0aW9uO1xuXG4gICAgdmFyIHByb2JlUmVzb3VyY2UgPSByZXF1aXJlKCcuL3Byb2JlJykucHJvYmVSZXNvdXJjZTtcblxuXG4gICAgLy8gTW9zdCBvZiB0aGlzIGNvdWxkIGRpc2FwcGVhciBpZiB3ZSBsZWF2ZSBhbGwgcHJvYmluZyB0byB0aGUgcHJvYmUgbW9kdWxlLi4uXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIFVSTEZldGNoYWJsZSA9IGJpbi5VUkxGZXRjaGFibGU7XG4gICAgdmFyIEJsb2JGZXRjaGFibGUgPSBiaW4uQmxvYkZldGNoYWJsZTtcbiAgICB2YXIgcmVhZEludCA9IGJpbi5yZWFkSW50O1xuXG4gICAgdmFyIGxoM3V0aWxzID0gcmVxdWlyZSgnLi9saDN1dGlscycpO1xuICAgIHZhciB1bmJnemYgPSBsaDN1dGlscy51bmJnemY7XG5cbiAgICB2YXIgYmFtID0gcmVxdWlyZSgnLi9iYW0nKTtcbiAgICB2YXIgQkFNX01BR0lDID0gYmFtLkJBTV9NQUdJQztcbiAgICB2YXIgQkFJX01BR0lDID0gYmFtLkJBSV9NQUdJQztcblxuICAgIHZhciB0YmkgPSByZXF1aXJlKCcuL3RhYml4Jyk7XG4gICAgdmFyIFRBQklYX01BR0lDID0gdGJpLlRBQklYX01BR0lDO1xuXG5cbiAgICB2YXIgZGFzID0gcmVxdWlyZSgnLi9kYXMnKTtcbiAgICB2YXIgREFTU291cmNlID0gZGFzLkRBU1NvdXJjZTtcbiAgICB2YXIgREFTU2VnbWVudCA9IGRhcy5EQVNTZWdtZW50O1xuICAgIHZhciBEQVNSZWdpc3RyeSA9IGRhcy5EQVNSZWdpc3RyeTtcbn1cblxuLyoqXG4gKiBBZGQgdHJhY2sgd2hlbiB1c2VyIGRyYWcgJiBkcm9wIGEgbm9kZVxuICogQHBhcmFtIG5vZGVcbiAqIEBwYXJhbSByZXN1bHRfaW5zdGFuY2VfaWRfMVxuICovXG5Ccm93c2VyLnByb3RvdHlwZS5hZGRUcmFja0J5Tm9kZSA9IGZ1bmN0aW9uIChub2RlLCByZXN1bHRfaW5zdGFuY2VfaWRfMSwgcmVzdWx0X2luc3RhbmNlX2lkXzIpIHtcblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdmFyIGRhc19zb3VyY2U7XG4gICAgdmFyIHJlc19pbnN0X2lkXzEsIHJlc19pbnN0X2lkXzI7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdHJhblNNQVJUJ3MgREFTIHNvdXJjZVxuICAgICAqIEBwYXJhbSByZXN1bHRfaW5zdGFuY2VfaWRcbiAgICAgKiBAcGFyYW0gZGF0YVR5cGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgX2dldFRyYW5zbWFydERBU1NvdXJjZXMgPSBmdW5jdGlvbiAocmVzdWx0X2luc3RhbmNlX2lkLCBkYXRhVHlwZSkge1xuXG52YXIgYXJyTmRzID0gbmV3IEFycmF5KCk7XG5cbiAgICAgICAgaWYgKGRhdGFUeXBlID09ICdhY2doJykge1xuICAgICAgICAgICAgYXJyTmRzWzBdID0gbmV3IERBU1NvdXJjZSh7bmFtZTogJ2FjZ2gtZ2FpbicsIHVyaTogcGFnZUluZm8uYmFzZVBhdGggKyBcIi9kYXMvYWNnaC1nYWluLVwiICsgcmVzdWx0X2luc3RhbmNlX2lkICsgXCIvXCJ9KTtcbiAgICAgICAgICAgIGFyck5kc1sxXSA9IG5ldyBEQVNTb3VyY2Uoe25hbWU6ICdhY2doLWxvc3MnLCB1cmk6IHBhZ2VJbmZvLmJhc2VQYXRoICsgXCIvZGFzL2FjZ2gtbG9zcy1cIiArIHJlc3VsdF9pbnN0YW5jZV9pZCArIFwiL1wifSk7XG4gICAgICAgICAgICBhcnJOZHNbMl0gPSBuZXcgREFTU291cmNlKHtuYW1lOiAnYWNnaC1ub3JtYWwnLCB1cmk6IHBhZ2VJbmZvLmJhc2VQYXRoICsgXCIvZGFzL2FjZ2gtbm9ybWFsLVwiICsgcmVzdWx0X2luc3RhbmNlX2lkICsgXCIvXCJ9KTtcbiAgICAgICAgICAgIGFyck5kc1szXSA9IG5ldyBEQVNTb3VyY2Uoe25hbWU6ICdhY2doLWFtcCcsIHVyaTogcGFnZUluZm8uYmFzZVBhdGggKyBcIi9kYXMvYWNnaC1hbXAtXCIgKyByZXN1bHRfaW5zdGFuY2VfaWQgKyBcIi9cIn0pO1xuICAgICAgICAgICAgYXJyTmRzWzRdID0gbmV3IERBU1NvdXJjZSh7bmFtZTogJ2FjZ2gtaW52JywgdXJpOiBwYWdlSW5mby5iYXNlUGF0aCArIFwiL2Rhcy9hY2doLWludi1cIiArIHJlc3VsdF9pbnN0YW5jZV9pZCArIFwiL1wifSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT0gJ3ZjZicpIHtcbiAgICAgICAgICAgIGFyck5kc1swXSA9IG5ldyBEQVNTb3VyY2Uoe25hbWU6ICdzbWFmJywgdXJpOiBwYWdlSW5mby5iYXNlUGF0aCArIFwiL2Rhcy9zbWFmLVwiKyByZXN1bHRfaW5zdGFuY2VfaWQgKyBcIi9cIn0pO1xuICAgICAgICAgICAgYXJyTmRzWzFdID0gbmV3IERBU1NvdXJjZSh7bmFtZTogJ3FkJywgdXJpOiBwYWdlSW5mby5iYXNlUGF0aCArIFwiL2Rhcy9xZC1cIiArIHJlc3VsdF9pbnN0YW5jZV9pZCArIFwiL1wifSk7XG4gICAgICAgICAgICBhcnJOZHNbM10gPSBuZXcgREFTU291cmNlKHtuYW1lOiAnZ3YnLCB1cmk6IHBhZ2VJbmZvLmJhc2VQYXRoICsgXCIvZGFzL2d2LVwiKyByZXN1bHRfaW5zdGFuY2VfaWQgKyBcIi9cIn0pO1xuICAgICAgICAgICAgYXJyTmRzWzRdID0gbmV3IERBU1NvdXJjZSh7bmFtZTogJ3ZjZicsIHVyaTogcGFnZUluZm8uYmFzZVBhdGggKyBcIi9kYXMvdmNmLVwiKyByZXN1bHRfaW5zdGFuY2VfaWQgKyBcIi9cIn0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIGRhdGEgdHlwZVwiLCBkYXRhVHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyTmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBEQVMgc291cmNlXG4gICAgICogQHBhcmFtIGFyclxuICAgICAqIEBwYXJhbSBuYW1lU3VmZml4XG4gICAgICogQHBhcmFtIHRlc3RTZWdtZW50XG4gICAgICogQHBhcmFtIHRyeUFkZERBU3hTb3VyY2VzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB2YXIgX2FkZERhc1NvdXJjZSA9IGZ1bmN0aW9uIChhcnIsIG5hbWVTdWZmaXgsIHRlc3RTZWdtZW50LCB0cnlBZGREQVN4U291cmNlcykge1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKG5kcykge1xuXG4gICAgICAgICAgICBuZHMuZmVhdHVyZXModGVzdFNlZ21lbnQsIHt9LCBmdW5jdGlvbihmZWF0dXJlcykge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFuZHMubmFtZSkgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVFeHRyYWN0UGF0dGVybiA9IG5ldyBSZWdFeHAoJy8oW14vXSspLz8kJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG5hbWVFeHRyYWN0UGF0dGVybi5leGVjKG5kcy51cmkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5kcy5uYW1lID0gbWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnlBZGREQVN4U291cmNlcyhuZHMsIG5hbWVTdWZmaXgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLy8gcmVzZXRpbmcgdGhlIGdsb2JhbCBzdWJzZXQgaWRzIChyZXN1bHQgaW5zdGFuY2UgaWRzKVxuICAgIEdMT0JBTC5DdXJyZW50U3Vic2V0SURzWzFdID0gbnVsbDtcbiAgICBHTE9CQUwuQ3VycmVudFN1YnNldElEc1syXSA9IG51bGw7XG5cbiAgICB2YXIgX2dldE5vZGVEZXRhaWxzID0gZnVuY3Rpb24gKG5vZGUsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIG5vZFJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB2YXIgbm9kVXJsID0gcGFnZUluZm8uYmFzZVBhdGggKyBcIi9IaWdoRGltZW5zaW9uL25vZGVEZXRhaWxzXCI7XG5cbiAgICAgICAgbm9kUmVxLm9wZW4oJ1BPU1QnLCBub2RVcmwsIHRydWUpO1xuICAgICAgICBub2RSZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiKTtcblxuICAgICAgICBub2RSZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobm9kUmVxLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICAgICAgICAgIGlmIChub2RSZXEuc3RhdHVzID09IDIwMCB8fCBub2RSZXEuc3RhdHVzID09IDIwNikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobm9kUmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGFyYW1zID0gXCJjb25jZXB0S2V5cz1cIitlbmNvZGVVUklDb21wb25lbnQoW25vZGUuaWRdKTtcbiAgICAgICAgbm9kUmVxLnNlbmQocGFyYW1zKTtcblxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVzdWx0IGluc3RhbmNlIGlkIGFzIHJlcHJlc2VudGF0aXZlIG9mIGNvaG9ydCBzZWxlY3Rpb25cbiAgICAvLyBpbiBDb21wYXJpc29uIHRhYlxuICAgIHJ1bkFsbFF1ZXJpZXMoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHJlc19pbnN0X2lkXzEgPSBHTE9CQUwuQ3VycmVudFN1YnNldElEc1sxXTtcbiAgICAgICAgcmVzX2luc3RfaWRfMiA9IEdMT0JBTC5DdXJyZW50U3Vic2V0SURzWzJdO1xuXG4gICAgICAgIHZhciBrbm93blNwYWNlID0gdGhpc0Iua25vd25TcGFjZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgaWYgYSBub2RlIGlzIGhpZ2ggZGltZW5zaW9uYWwgb3Igbm90XG4gICAgICAgICAqIEBwYXJhbSBub2RlXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIF9pc0hpZ2hEaW1lbnNpb25hbE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcy52aXN1YWxhdHRyaWJ1dGVzLmluZGV4T2YoJ0hJR0hfRElNRU5TSU9OQUwnKSAhPSAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZGF0ZSBzcGFjZVxuICAgICAgICBpZiAoIWtub3duU3BhY2UpIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiQ2FuJ3QgY29uZmlybSB0cmFjay1hZGRpdGlvbiB0byBhbiB1bml0IGJyb3dzZXIuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRzbSA9IE1hdGgubWF4KGtub3duU3BhY2UubWluLCAoa25vd25TcGFjZS5taW4gKyBrbm93blNwYWNlLm1heCAtIDEwMCkgLyAyKXwwO1xuICAgICAgICB2YXIgdGVzdFNlZ21lbnQgPSBuZXcgREFTU2VnbWVudChrbm93blNwYWNlLmNociwgdHNtLCBNYXRoLm1pbih0c20gKyA5OSwga25vd25TcGFjZS5tYXgpKTtcblxuICAgICAgICB2YXIgX25vZGVEZXRhaWxzID0gX2dldE5vZGVEZXRhaWxzKG5vZGUsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICB2YXIgZGF0YVR5cGUgPSBcIlwiO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gSlNPTi5wYXJzZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IGtleTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoX2lzSGlnaERpbWVuc2lvbmFsTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VzID0gX2dldFRyYW5zbWFydERBU1NvdXJjZXMocmVzX2luc3RfaWRfMSwgZGF0YVR5cGUpO1xuICAgICAgICAgICAgICAgIF9hZGREYXNTb3VyY2Uoc291cmNlcywgcmVzX2luc3RfaWRfMiA/ICctc3Vic2V0IDEnIDogJycsIHRlc3RTZWdtZW50LCB0cnlBZGREQVN4U291cmNlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc19pbnN0X2lkXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlcyA9IF9nZXRUcmFuc21hcnREQVNTb3VyY2VzKHJlc19pbnN0X2lkXzIsIGRhdGFUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgX2FkZERhc1NvdXJjZShzb3VyY2VzLCAnLXN1YnNldCAyJywgdGVzdFNlZ21lbnQsIHRyeUFkZERBU3hTb3VyY2VzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc0IuY3JlYXRlQWRkSW5mb0J1dHRvbigpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlFcnJvcignRXJyb3InLCAnQ2Fubm90IGRpc3BsYXkgbm9uLUhpZ2ggRGltZW5zaW9uYWwgbm9kZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgREFTIHggU291cmNlc1xuICAgICAgICAgKiBAcGFyYW0gbmRzXG4gICAgICAgICAqIEBwYXJhbSBuYW1lU3VmZml4IGZvciBkaXN0aW5ndWlzaGluZyBtdWx0aXBsZSBzdWJzZXRzXG4gICAgICAgICAqIEBwYXJhbSByZXRyeVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdHJ5QWRkREFTeFNvdXJjZXMobmRzLCBuYW1lU3VmZml4LCByZXRyeSkge1xuXG4gICAgICAgICAgICB2YXIgdXJpID0gbmRzLnVyaTtcbiAgICAgICAgICAgIGlmIChyZXRyeSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IC8oLispXFwvW15cXC9dK1xcLz8vLmV4ZWModXJpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJpID0gbWF0Y2hbMV0gKyAnL3NvdXJjZXMnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNxZmFpbCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnlBZGREQVN4U291cmNlcyhuZHMsIG5hbWVTdWZmaXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkcmF3VHJhY2sobmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ldyBEQVNSZWdpc3RyeSh1cmksIHtjcmVkZW50aWFsczogbmRzLmNyZWRlbnRpYWxzfSkuc291cmNlcyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihzb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc291cmNlcyB8fCBzb3VyY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3FmYWlsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgZnMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBzb3VyY2VzWzBdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbaV0udXJpID09PSBuZHMudXJpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzID0gc291cmNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3Jkc0RldGVybWluZWQgPSBmYWxzZSwgcXVhbnREZXRlcm1pbmVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBjMVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0gYzJcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2Nvb3Jkc01hdGNoID0gZnVuY3Rpb24gKGMxLCBjMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMxLnRheG9uID09IGMyLnRheG9uICYmIGMxLmF1dGggPT0gYzIuYXV0aCAmJiBjMS52ZXJzaW9uID09IGMyLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmRzLm5hbWUgPSBmcy5uYW1lK25hbWVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHMuZGVzYyA9IGZzLmRlc2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnMubWF4Ymlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5kcy5tYXhiaW5zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmRzLm1heGJpbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcy5jYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHMuY2FwYWJpbGl0aWVzID0gZnMuY2FwYWJpbGl0aWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnREZXRlcm1pbmVkID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnMuY29vcmRzICYmIGZzLmNvb3Jkcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBmcy5jb29yZHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb29yZHNNYXRjaChjb29yZHMsIHRoaXNCLmNvb3JkU3lzdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHNEZXRlcm1pbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXNCLmNoYWlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXNCLmNoYWlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb29yZHNNYXRjaChjb29yZHMsIHRoaXNCLmNoYWluc1trXS5jb29yZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmRzLm1hcHBpbmcgPSBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkc0RldGVybWluZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRyYXdUcmFjayhuZHMsIGNvb3Jkc0RldGVybWluZWQsIHF1YW50RGV0ZXJtaW5lZCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNxZmFpbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRHJhdyBuZXcgdHJhY2sgaW4gdGhlIHN3aW1taW5nIGxhbmVcbiAgICAgICAgICogQHBhcmFtIG5kc1xuICAgICAgICAgKiBAcGFyYW0gY29vcmRzRGV0ZXJtaW5lZFxuICAgICAgICAgKiBAcGFyYW0gcXVhbnREZXRlcm1pbmVkXG4gICAgICAgICAqIEBwYXJhbSBxdWFudElycmVsZXZhbnRcbiAgICAgICAgICovXG4gICAgICAgIHZhciBkcmF3VHJhY2sgPSBmdW5jdGlvbihuZHMsIGNvb3Jkc0RldGVybWluZWQsIHF1YW50RGV0ZXJtaW5lZCwgcXVhbnRJcnJlbGV2YW50KSB7XG5cbiAgICAgICAgICAgIHZhciBkYXRhVG9GaW5hbGl6ZSA9IG5kcztcblxuICAgICAgICAgICAgdmFyIG0gPSAnX19kZWZhdWx0X18nOyAvLyBjb29yZGluYXRlIHN5c3RlbVxuICAgICAgICAgICAgaWYgKG0gIT0gJ19fZGVmYXVsdF9fJykge1xuICAgICAgICAgICAgICAgIGRhdGFUb0ZpbmFsaXplLm1hcHBpbmcgPSBtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhVG9GaW5hbGl6ZS5tYXBwaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc0Iuc291cmNlcy5wdXNoKGRhdGFUb0ZpbmFsaXplKTtcbiAgICAgICAgICAgIHRoaXNCLm1ha2VUaWVyKGRhdGFUb0ZpbmFsaXplKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59XG5cbkJyb3dzZXIucHJvdG90eXBlLmNyZWF0ZUFkZEluZm9CdXR0b249IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAvL2dldCB0aGUgQWRkIHRyYWNrIGJ1dHRvblxuICAgIHZhciBkYWxCdG5zID0galF1ZXJ5KCcucHVsbC1yaWdodC5idG4tZ3JvdXAnKS5jaGlsZHJlbigpO1xuICAgIGpRdWVyeShkYWxCdG5zWzBdKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGpRdWVyeSgnI2J0bkFkZFZDRklORk8nKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuOyAvL2l0J3MgYWxyZWFkeSB0aGVyZVxuICAgICAgICAvL2FkZCBhIGJ1dHRvbiB0byBhZGQgY3VzdG9tIElORk8gdHJhY2tzIGZvciBWQ0ZcbiAgICAgICAgdmFyIGJ0biA9IHRoYXQubWFrZUJ1dHRvbignQWRkIFZDRiBJTkZPJywgJ0FkZCBhIGN1c3RvbSB0cmFjayB3aXRoIGEgcGFydGljdWxhciBmaWVsZCBmcm9tIHRoZSBJTkZPIGNvbHVtbiBpbiBhIFZDRiBmaWxlJyk7XG4gICAgICAgIGJ0bi5pZCA9ICdidG5BZGRWQ0ZJTkZPJztcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7IGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyIHZjZnMgPSB0aGF0LnNjYW5DdXJyZW50VHJhY2tzRm9yVkNGKCk7XG5cbiAgICAgICAgICAgIC8vb25seSBhZGQgdGhlIHRyYWNrIGlmIHRoZXJlIGlzIGEgcXVlcnkgcmVzdWx0IGluc3RhbmNlXG4gICAgICAgICAgICBpZiAodmNmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZm9GaWVsZCA9IHByb21wdChcbiAgICAgICAgICAgICAgICAgICAgJ1lvdSBjYW4gYWRkIGN1c3RvbSB0cmFjayBmcm9tIHRoZSBJTkZPIGNvbHVtbi4gSWYgeW91IGtub3cgdGhlIFZDRiBmaWxlXFwncyBJTkZPIGNvbHVtbiBjb250YWlucyBmb3IgZXhhbXBsZTogXFxuXFxuRFA9ODk7QUYxPTE7QUMxPTI7RFA0PTAsMCw4MSwwO01RPTYwO0ZRPS0yNzEsXFxuXFxuIHlvdSBjYW4gYWRkIGEgdHJhY2sgZm9yIERQIHRvIHNlZSB0aGUgdmFsdWVzIG9mIERQIHBsb3R0ZWQuIFxcbicrXG4gICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlLCBmaXJzdCBkcm9wIGEgVkNGIG5vZGUgZnJvbSB0aGUgY29uY2VwdCB0cmVlIG9uIHRoZSBnZW5vbWUgYnJvd3Nlci4gXFxuJytcbiAgICAgICAgICAgICAgICAgICAgICAgICdOb3RlOiBwbGVhc2UgcmVtZW1iZXIgdG8gcmVtb3ZlIHRoZSB0cmFjayBhbmQgYWRkIGl0IGFnYWluIGlmIHlvdSBjaGFuZ2UgdGhlIHBhdGllbnQgc3Vic2V0IHNlbGVjdGlvbiBjcml0ZXJpYScsXG4gICAgICAgICAgICAgICAgICAgICdEUCcpO1xuICAgICAgICAgICAgICAgIGlmIChpbmZvRmllbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmFkZFZDRkluZm9UcmFjayhpbmZvRmllbGQsIHZjZnNbMF0uaWQsIHZjZnMubGVuZ3RoPjE/Jy1zdWJzZXQgMScgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2Y2ZzLmxlbmd0aD4xKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5hZGRWQ0ZJbmZvVHJhY2soaW5mb0ZpZWxkLCB2Y2ZzWzFdLmlkLCAnLXN1YnNldCAyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSwgZmlyc3QgZHJvcCBhIFZDRiBub2RlIGZyb20gdGhlIGNvbmNlcHQgdHJlZSBvbiB0aGUgZ2Vub21lIGJyb3dzZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBqUXVlcnkoJy5uYXYnKS5wcmVwZW5kKGJ0bik7XG4gICAgfSlcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUuYWRkVkNGSW5mb1RyYWNrPSBmdW5jdGlvbihpbmZvRmllbGQsIHFyaSwgbmFtZVN1ZmZpeCkge1xuICAgIHRoaXMuYWRkVGllcihuZXcgREFTU291cmNlKHtcbiAgICAgICAgbmFtZTogJ1ZDRi0nK2luZm9GaWVsZC50cmltKCkrbmFtZVN1ZmZpeCxcbiAgICAgICAgdXJpOiBwYWdlSW5mby5iYXNlUGF0aCArIFwiL2Rhcy92Y2ZJbmZvLVwiK2luZm9GaWVsZC50cmltKCkrJy0nKyBxcmkgKyBcIi9cIlxuICAgIH0pKVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5zY2FuQ3VycmVudFRyYWNrc0ZvclZDRiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2V0MSwgc3Vic2V0MjsgdmFyIHN1YnNldDFJTkZPcz1bXSwgc3Vic2V0MklORk9zPVtdO1xuICAgIHZhciB2Y2ZzID0gW107XG4gICAgZm9yICh2YXIgaT0wO2k8dGhpcy5zb3VyY2VzLmxlbmd0aDtpKyspe1xuICAgICAgICB2YXIgcyA9IHRoaXMuc291cmNlc1tpXTtcbiAgICAgICAgaWYgKCFzLnVyaSkgY29udGludWU7XG4gICAgICAgIGlmIChzLnVyaS5pbmRleE9mKCd2Y2YtJykgPiAtMSB8fFxuICAgICAgICAgICAgcy51cmkuaW5kZXhPZigndmNmSW5mby0nKSA+IC0xIHx8XG4gICAgICAgICAgICBzLnVyaS5pbmRleE9mKCdzbWFmLScpID4gLTEgfHxcbiAgICAgICAgICAgIHMudXJpLmluZGV4T2YoJ3FkLScpID4gLTEgfHxcbiAgICAgICAgICAgIHMudXJpLmluZGV4T2YoJ2d2LScpID4gLTEpIHtcbiAgICAgICAgICAgIC8vc3R1ZmYgYmV0d2VlbiBsYXN0IC8gaWRlbnRpZmllcyB0cmFjaywgbnVtYmVycyBhZnRlciBsYXN0IC0gaWRlbnRpZnkgUVJJXG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSAvKFteXFwtXSspLSgoW15cXC1dKyktKT8oW15cXC9dKylcXC8kLy5leGVjKHMudXJpKVxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHFyaSA9IG1hdGNoWzRdOyAvL1FSSSBpcyBmb3VydGggZ3JvdXBcbiAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IG1hdGNoWzNdO1xuICAgICAgICAgICAgICAgIHZhciBzdWJzZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGo9MDtqPHZjZnMubGVuZ3RoO2orKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZjZnNbal0uaWQgPT0gcXJpKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2V0ID0gdmNmc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2V0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHZjZnMucHVzaChzdWJzZXQgPSB7aWQ6IHFyaSwgaW5mb3M6W2luZm9dLCBzb3VyY2VzOiBbc119KTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2V0LmluZm9zLnB1c2goaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNldC5zb3VyY2VzLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZjZnM7XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gdHJhY2stYWRkZXIuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBicm93c2VyID0gcmVxdWlyZSgnLi9jYnJvd3NlcicpO1xuICAgIHZhciBCcm93c2VyID0gYnJvd3Nlci5Ccm93c2VyO1xuICAgIHZhciBzb3VyY2VzQXJlRXF1YWwgPSBicm93c2VyLnNvdXJjZXNBcmVFcXVhbDtcblxuICAgIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbiAgICB2YXIgbWFrZUVsZW1lbnQgPSB1dGlscy5tYWtlRWxlbWVudDtcbiAgICB2YXIgcmVtb3ZlQ2hpbGRyZW4gPSB1dGlscy5yZW1vdmVDaGlsZHJlbjtcbiAgICB2YXIgT2JzZXJ2ZWQgPSB1dGlscy5PYnNlcnZlZDtcblxuICAgIHZhciB0aHViID0gcmVxdWlyZSgnLi90aHViJyk7XG4gICAgdmFyIFRIVUJfQ09NUEFSRSA9IHRodWIuVEhVQl9DT01QQVJFO1xuICAgIHZhciBjb25uZWN0VHJhY2tIdWIgPSB0aHViLmNvbm5lY3RUcmFja0h1YjtcblxuICAgIHZhciBkb211aSA9IHJlcXVpcmUoJy4vZG9tdWknKTtcbiAgICB2YXIgbWFrZVRyZWVUYWJsZVNlY3Rpb24gPSBkb211aS5tYWtlVHJlZVRhYmxlU2VjdGlvbjtcblxuICAgIHZhciBwcm9iZVJlc291cmNlID0gcmVxdWlyZSgnLi9wcm9iZScpLnByb2JlUmVzb3VyY2U7XG5cblxuICAgIC8vIE1vc3Qgb2YgdGhpcyBjb3VsZCBkaXNhcHBlYXIgaWYgd2UgbGVhdmUgYWxsIHByb2JpbmcgdG8gdGhlIHByb2JlIG1vZHVsZS4uLlxuICAgIHZhciBiaW4gPSByZXF1aXJlKCcuL2JpbicpO1xuICAgIHZhciBVUkxGZXRjaGFibGUgPSBiaW4uVVJMRmV0Y2hhYmxlO1xuICAgIHZhciBCbG9iRmV0Y2hhYmxlID0gYmluLkJsb2JGZXRjaGFibGU7XG4gICAgdmFyIHJlYWRJbnQgPSBiaW4ucmVhZEludDtcblxuICAgIHZhciBsaDN1dGlscyA9IHJlcXVpcmUoJy4vbGgzdXRpbHMnKTtcbiAgICB2YXIgdW5iZ3pmID0gbGgzdXRpbHMudW5iZ3pmO1xuXG4gICAgdmFyIGJhbSA9IHJlcXVpcmUoJy4vYmFtJyk7XG4gICAgdmFyIEJBTV9NQUdJQyA9IGJhbS5CQU1fTUFHSUM7XG4gICAgdmFyIEJBSV9NQUdJQyA9IGJhbS5CQUlfTUFHSUM7XG5cbiAgICB2YXIgdGJpID0gcmVxdWlyZSgnLi90YWJpeCcpO1xuICAgIHZhciBUQUJJWF9NQUdJQyA9IHRiaS5UQUJJWF9NQUdJQztcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNTb3VyY2UgPSBkYXMuREFTU291cmNlO1xuICAgIHZhciBEQVNTZWdtZW50ID0gZGFzLkRBU1NlZ21lbnQ7XG4gICAgdmFyIERBU1JlZ2lzdHJ5ID0gZGFzLkRBU1JlZ2lzdHJ5O1xufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5jdXJyZW50bHlBY3RpdmUgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdGhpcy50aWVycy5sZW5ndGg7ICsrdGkpIHtcbiAgICAgICAgaWYgKHNvdXJjZXNBcmVFcXVhbCh0aGlzLnRpZXJzW3RpXS5kYXNTb3VyY2UsIHNvdXJjZSkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aWVyc1t0aV07XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuQnJvd3Nlci5wcm90b3R5cGUubWFrZUJ1dHRvbiA9IGZ1bmN0aW9uKG5hbWUsIHRvb2x0aXApIHtcbiAgICB2YXIgcmVnQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2EnLCBuYW1lLCB7aHJlZjogJyMnfSk7XG4gICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgdGhpcy5tYWtlVG9vbHRpcChyZWdCdXR0b24sIHRvb2x0aXApO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZUVsZW1lbnQoJ2xpJywgcmVnQnV0dG9uKTtcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVCdXR0b24oYWRkTW9kZUJ1dHRvbnMsIHdoaWNoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRNb2RlQnV0dG9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYiA9IGFkZE1vZGVCdXR0b25zW2ldO1xuICAgICAgICBpZiAoYiA9PT0gd2hpY2gpIHtcbiAgICAgICAgICAgIGIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5Ccm93c2VyLnByb3RvdHlwZS5zaG93VHJhY2tBZGRlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKHRoaXMudWlNb2RlID09PSAnYWRkJykge1xuICAgICAgICB0aGlzLmhpZGVUb29sUGFuZWwoKTtcbiAgICAgICAgdGhpcy5zZXRVaU1vZGUoJ25vbmUnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICB2YXIgcG9wdXAgPSBtYWtlRWxlbWVudCgnZGl2JywgbnVsbCwge2NsYXNzTmFtZTogJ2RhbGxpYW5jZSd9ICwge3dpZHRoOiAnMTAwJScsIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCBib3hTaXppbmc6ICdib3JkZXItYm94JywgTW96Qm94U2l6aW5nOiAnYm9yZGVyLWJveCcsIHZlcnRpY2FsQWxpZ246ICd0b3AnLCBwYWRkaW5nUmlnaHQ6ICcxNXB4J30pO1xuXG4gICAgdmFyIGFkZE1vZGVCdXR0b25zID0gW107XG4gICAgdmFyIG1ha2VTdGFiLCBtYWtlU3RhYk9ic2VydmVyO1xuXG5cbiAgICBpZiAoIXRoaXMubm9SZWdpc3RyeVRhYnMpIHtcbiAgICAgICAgdmFyIHJlZ0J1dHRvbiA9IHRoaXMubWFrZUJ1dHRvbignUmVnaXN0cnknLCAnQnJvd3NlIGNvbXBhdGlibGUgZGF0YXNvdXJjZXMgZnJvbSB0aGUgREFTIHJlZ2lzdHJ5Jyk7XG4gICAgICAgIGFkZE1vZGVCdXR0b25zLnB1c2gocmVnQnV0dG9uKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIG0gaW4gdGhpcy5tYXBwYWJsZVNvdXJjZXMpIHtcbiAgICAgICAgICAgIHZhciBtZiAgPSBmdW5jdGlvbihtbSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXBCdXR0b24gPSB0aGlzQi5tYWtlQnV0dG9uKHRoaXNCLmNoYWluc1ttbV0uc3JjVGFnLCAnQnJvd3NlIGRhdGFzb3VyY2VzIG1hcHBlZCBmcm9tICcgKyB0aGlzQi5jaGFpbnNbbW1dLnNyY1RhZyk7XG4gICAgICAgICAgICAgICAgYWRkTW9kZUJ1dHRvbnMucHVzaChtYXBCdXR0b24pO1xuICAgICAgICAgICAgICAgIG1hcEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7IGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZUJ1dHRvbihhZGRNb2RlQnV0dG9ucywgbWFwQnV0dG9uKTtcbiAgICAgICAgICAgICAgICAgICAgbWFrZVN0YWIodGhpc0IubWFwcGFibGVTb3VyY2VzW21tXSwgbW0pO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH07IG1mKG0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwZWREZWZhdWx0cyA9IHt9O1xuICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCB0aGlzLmRlZmF1bHRTb3VyY2VzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICB2YXIgcyA9IHRoaXMuZGVmYXVsdFNvdXJjZXNbc2ldO1xuICAgICAgICB2YXIgZyA9IHMuZ3JvdXAgfHwgJ0RlZmF1bHRzJztcbiAgICAgICAgaWYgKGdyb3VwZWREZWZhdWx0c1tnXSkge1xuICAgICAgICAgICAgZ3JvdXBlZERlZmF1bHRzW2ddLnB1c2gocyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncm91cGVkRGVmYXVsdHNbZ10gPSBbc107XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG5cbiAgICB2YXIgbWFrZUh1YkJ1dHRvbiA9IGZ1bmN0aW9uKHRkYikge1xuICAgICAgICB2YXIgaHViID0gdGRiLmh1YjtcbiAgICAgICAgdmFyIGh1Yk1lbnVCdXR0b24gPSBtYWtlRWxlbWVudCgnaScsIG51bGwsIHtjbGFzc05hbWU6ICdmYSBmYS1saXN0LWFsdCd9KTtcbiAgICAgICAgdmFyIGxhYmVsID0gaHViLnNob3J0TGFiZWwgfHwgJ1Vua25vd24nO1xuICAgICAgICBpZiAodGRiLm1hcHBpbmcpXG4gICAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAoJyArIHRkYi5nZW5vbWUgKyAnKSc7XG4gICAgICAgIHZhciBoYkNvbnRlbnQgPSBtYWtlRWxlbWVudCgnc3BhbicsIFtsYWJlbCwgJyAnLCBodWJNZW51QnV0dG9uXSk7XG4gICAgICAgIHZhciBodWJCdXR0b24gPSB0aGlzQi5tYWtlQnV0dG9uKGhiQ29udGVudCwgaHViLmxvbmdMYWJlbCk7XG4gICAgICAgIGFkZE1vZGVCdXR0b25zLnB1c2goaHViQnV0dG9uKTtcbiAgICAgICAgXG4gICAgICAgIGh1YkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGFjdGl2YXRlQnV0dG9uKGFkZE1vZGVCdXR0b25zLCBodWJCdXR0b24pO1xuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gdGhpc0IubWFrZUxvYWRlcigyNCk7XG4gICAgICAgICAgICBsb2FkZXIuc3R5bGUubWFyZ2luTGVmdCA9ICdhdXRvJztcbiAgICAgICAgICAgIGxvYWRlci5zdHlsZS5tYXJnaW5SaWdodCA9ICdhdXRvJztcbiAgICAgICAgICAgIGxvYWRlci5zdHlsZS5tYXJnaW5Ub3AgPSAnMTAwcHgnO1xuICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnZGl2JywgbG9hZGVyLCBudWxsLCB7dGV4dEFsaWduOiAnY2VudGVyJ30pKTtcblxuICAgICAgICAgICAgcmVmcmVzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBjYW5CdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgdGRiLmdldFRyYWNrcyhmdW5jdGlvbih0cmFja3MsIGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWFrZUh1YlN0YWIodHJhY2tzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgaHViTWVudUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHJlbW92ZUh1Ykl0ZW0gPSBtYWtlRWxlbWVudCgnbGknLCBtYWtlRWxlbWVudCgnYScsICdSZW1vdmUgaHViJykpO1xuICAgICAgICAgICAgdmFyIGFsbE9uSXRlbSA9IG1ha2VFbGVtZW50KCdsaScsICBtYWtlRWxlbWVudCgnYScsICdFbmFibGUgYWxsJykpO1xuICAgICAgICAgICAgdmFyIGFsbE9mZkl0ZW0gPSBtYWtlRWxlbWVudCgnbGknLCAgbWFrZUVsZW1lbnQoJ2EnLCAnRGlzYWJsZSBhbGwnKSk7XG4gICAgICAgICAgICB2YXIgaHViTWVudSA9IG1ha2VFbGVtZW50KCd1bCcsIFtyZW1vdmVIdWJJdGVtLCBhbGxPbkl0ZW0sIGFsbE9mZkl0ZW1dLCB7Y2xhc3NOYW1lOiAnZHJvcGRvd24tbWVudSd9LCB7ZGlzcGxheTogJ2Jsb2NrJ30pO1xuXG4gICAgICAgICAgICB2YXIgbXggPSAgZXYuY2xpZW50WCwgbXkgPSBldi5jbGllbnRZO1xuICAgICAgICAgICAgbXggKz0gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIG15ICs9ICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICBodWJNZW51LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGh1Yk1lbnUuc3R5bGUudG9wID0gJycgKyAobXkrMTApICsgJ3B4JztcbiAgICAgICAgICAgIGh1Yk1lbnUuc3R5bGUubGVmdCA9ICcnICsgKG14LTMwKSArICdweCc7XG4gICAgICAgICAgICB0aGlzQi5oUG9wdXBIb2xkZXIuYXBwZW5kQ2hpbGQoaHViTWVudSk7XG5cbiAgICAgICAgICAgIHZhciBjbGlja0NhdGNoZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYycpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0NhdGNoZXIsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXNCLmhQb3B1cEhvbGRlci5yZW1vdmVDaGlsZChodWJNZW51KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2tDYXRjaGVyLCB0cnVlKTtcblxuICAgICAgICAgICAgcmVtb3ZlSHViSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaGkgPSAwOyBoaSA8IHRoaXNCLmh1Yk9iamVjdHMubGVuZ3RoOyArK2hpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzQi5odWJPYmplY3RzW2hpXS5hYnNVUkwgPT0gdGRiLmFic1VSTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuaHViT2JqZWN0cy5zcGxpY2UoaGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaGkgPSAwOyBoaSA8IHRoaXNCLmh1YnMubGVuZ3RoOyArK2hpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYyA9IHRoaXNCLmh1YnNbaGldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhjID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjID0ge3VybDogaGN9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGMudXJsID09IHRkYi5odWIudXJsICYmICFoYy5nZW5vbWUgfHwgaGMuZ2Vub21lID09IHRkYi5nZW5vbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmh1YnMuc3BsaWNlKGhpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzQi5ub3RpZnlUaWVyKCk7XG5cbiAgICAgICAgICAgICAgICBtb2RlQnV0dG9uSG9sZGVyLnJlbW92ZUNoaWxkKGh1YkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgYWN0aXZhdGVCdXR0b24oYWRkTW9kZUJ1dHRvbnMsIGFkZEh1YkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgc3dpdGNoVG9IdWJDb25uZWN0TW9kZSgpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG5cbiAgICAgICAgICAgIGFsbE9uSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgdGRiLmdldFRyYWNrcyhmdW5jdGlvbih0cmFja3MsIGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdHJhY2tzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gdHJhY2tzW3RpXS50b0RhbGxpYW5jZVNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzQi5jdXJyZW50bHlBY3RpdmUoZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuYWRkVGllcihkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICAgICAgYWxsT2ZmSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgdGRiLmdldFRyYWNrcyhmdW5jdGlvbih0cmFja3MsIGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdHJhY2tzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRzID0gdHJhY2tzW3RpXS50b0RhbGxpYW5jZVNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNCLmN1cnJlbnRseUFjdGl2ZShkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5yZW1vdmVUaWVyKGRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGh1YkJ1dHRvbjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3REZWZCdXR0b24gPSBudWxsO1xuICAgIHZhciBmaXJzdERlZlNvdXJjZXMgPSBudWxsO1xuICAgIGZvciAodmFyIGcgaW4gZ3JvdXBlZERlZmF1bHRzKSB7XG4gICAgICAgIChmdW5jdGlvbihnLCBkcykge1xuICAgICAgICAgICAgdmFyIGRlZkJ1dHRvbiA9IHRoaXNCLm1ha2VCdXR0b24oZywgJ0Jyb3dzZSB0aGUgZGVmYXVsdCBzZXQgb2YgZGF0YSBmb3IgdGhpcyBicm93c2VyJyk7XG4gICAgICAgICAgICBkZWZCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7IGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlQnV0dG9uKGFkZE1vZGVCdXR0b25zLCBkZWZCdXR0b24pO1xuICAgICAgICAgICAgICAgIG1ha2VTdGFiKG5ldyBPYnNlcnZlZChkcykpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgYWRkTW9kZUJ1dHRvbnMucHVzaChkZWZCdXR0b24pO1xuXG4gICAgICAgICAgICBpZiAoIWZpcnN0RGVmQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgZmlyc3REZWZCdXR0b24gPSBkZWZCdXR0b247XG4gICAgICAgICAgICAgICAgZmlyc3REZWZTb3VyY2VzID0gZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKGcsIGdyb3VwZWREZWZhdWx0c1tnXSk7XG4gICAgfSAgIFxuICAgIHZhciBjdXN0QnV0dG9uID0gdGhpcy5tYWtlQnV0dG9uKCdEQVMnLCAnQWRkIGFyYml0cmFyeSBEQVMgZGF0YScpO1xuICAgIGFkZE1vZGVCdXR0b25zLnB1c2goY3VzdEJ1dHRvbik7XG4gICAgdmFyIGJpbkJ1dHRvbiA9IHRoaXMubWFrZUJ1dHRvbignQmluYXJ5JywgJ0FkZCBkYXRhIGluIGJpZ3dpZyBvciBiaWdiZWQgZm9ybWF0Jyk7XG4gICAgYWRkTW9kZUJ1dHRvbnMucHVzaChiaW5CdXR0b24pO1xuXG5cbiAgICBmb3IgKHZhciBoaSA9IDA7IGhpIDwgdGhpcy5odWJPYmplY3RzLmxlbmd0aDsgKytoaSkge1xuICAgICAgICB2YXIgaHViID0gdGhpcy5odWJPYmplY3RzW2hpXTtcbiAgICAgICAgbWFrZUh1YkJ1dHRvbihodWIpO1xuICAgIH1cblxuICAgIHZhciBhZGRIdWJCdXR0b24gPSB0aGlzLm1ha2VCdXR0b24oJysnLCAnQ29ubmVjdCB0byBhIG5ldyB0cmFjay1odWInKTtcbiAgICBhZGRNb2RlQnV0dG9ucy5wdXNoKGFkZEh1YkJ1dHRvbik7XG5cblxuICAgIHZhciBtb2RlQnV0dG9uSG9sZGVyID0gbWFrZUVsZW1lbnQoJ3VsJywgYWRkTW9kZUJ1dHRvbnMsIHtjbGFzc05hbWU6ICduYXYgbmF2LXRhYnMnfSwge21hcmdpbkJvdHRvbTogJzBweCd9KTtcbiAgICBwb3B1cC5hcHBlbmRDaGlsZChtb2RlQnV0dG9uSG9sZGVyKTtcbiAgICBcbiAgICB2YXIgY3VzdFVSTCwgY3VzdE5hbWUsIGN1c3RDUywgY3VzdFF1YW50LCBjdXN0RmlsZSwgY3VzdFVzZXIsIGN1c3RQYXNzO1xuICAgIHZhciBjdXN0b21Nb2RlID0gZmFsc2U7XG4gICAgdmFyIGRhdGFUb0ZpbmFsaXplID0gbnVsbDtcblxuICAgIHZhciBhc2Zvcm0gPSBtYWtlRWxlbWVudCgnZm9ybScsIG51bGwsIHt9LCB7ZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnMTAwJSd9KTtcbiAgICBhc2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZG9BZGQoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCB0cnVlKTsgXG4gICAgdmFyIHN0YWJIb2xkZXIgPSBtYWtlRWxlbWVudCgnZGl2Jyk7XG4gICAgc3RhYkhvbGRlci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgc3RhYkhvbGRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgIC8vIHN0YWJIb2xkZXIuc3R5bGUuaGVpZ2h0ID0gJzUwMHB4JztcbiAgICBhc2Zvcm0uYXBwZW5kQ2hpbGQoc3RhYkhvbGRlcik7XG5cbiAgICB2YXIgX19tYXBwaW5nO1xuICAgIHZhciBfX3NvdXJjZUhvbGRlcjtcblxuXG4gICAgbWFrZVN0YWIgPSBmdW5jdGlvbihtc291cmNlcywgbWFwcGluZykge1xuICAgICAgICByZWZyZXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGFkZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBjYW5CdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgaWYgKF9fc291cmNlSG9sZGVyKSB7XG4gICAgICAgICAgICBfX3NvdXJjZUhvbGRlci5yZW1vdmVMaXN0ZW5lcihtYWtlU3RhYk9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBfX21hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgICBfX3NvdXJjZUhvbGRlciA9IG1zb3VyY2VzO1xuICAgICAgICBfX3NvdXJjZUhvbGRlci5hZGRMaXN0ZW5lckFuZEZpcmUobWFrZVN0YWJPYnNlcnZlcik7XG4gICAgfVxuXG4gICAgbWFrZVN0YWJPYnNlcnZlciA9IGZ1bmN0aW9uKG1zb3VyY2VzKSB7XG4gICAgICAgIGN1c3RvbU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSBbXTtcbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIGlmICghbXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnRGFsbGlhbmNlIHdhcyB1bmFibGUgdG8gcmV0cmlldmUgZGF0YSBzb3VyY2UgaW5mb3JtYXRpb24gZnJvbSB0aGUgREFTIHJlZ2lzdHJ5LCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyJykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhYkJvZHkgPSBtYWtlRWxlbWVudCgndGJvZHknLCBudWxsLCB7Y2xhc3NOYW1lOiAndGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1jb25kZW5zZWQnfSwge3dpZHRoOiAnMTAwJSd9KTtcbiAgICAgICAgdmFyIHN0YWIgPSBtYWtlRWxlbWVudCgndGFibGUnLCBzdGFiQm9keSwge2NsYXNzTmFtZTogJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJ30sIHt3aWR0aDogJzEwMCUnLCB0YWJsZUxheW91dDogJ2ZpeGVkJ30pOyBcbiAgICAgICAgdmFyIGlkeCA9IDA7XG5cbiAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKG1zb3VyY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc291cmNlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLm5hbWUudG9Mb3dlckNhc2UoKS50cmltKCkubG9jYWxlQ29tcGFyZShiLm5hbWUudG9Mb3dlckNhc2UoKS50cmltKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICAgICAgdmFyIHIgPSBtYWtlRWxlbWVudCgndHInKTtcblxuICAgICAgICAgICAgdmFyIGJkID0gbWFrZUVsZW1lbnQoJ3RkJywgbnVsbCwge30sIHt3aWR0aDogJzMwcHgnfSk7XG4gICAgICAgICAgICBiZC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGlmICghc291cmNlLnByb3BzIHx8IHNvdXJjZS5wcm9wcy5jb3JzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBtYWtlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBiLnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAgICAgICAgIGIuZGFsbGlhbmNlX3NvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAoX19tYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuZGFsbGlhbmNlX21hcHBpbmcgPSBfX21hcHBpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGIuY2hlY2tlZCA9IHRoaXNCLmN1cnJlbnRseUFjdGl2ZShzb3VyY2UpO1xuICAgICAgICAgICAgICAgIGJkLmFwcGVuZENoaWxkKGIpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbnMucHVzaChiKTtcbiAgICAgICAgICAgICAgICBiLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuYWRkVGllcihldi50YXJnZXQuZGFsbGlhbmNlX3NvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5yZW1vdmVUaWVyKGV2LnRhcmdldC5kYWxsaWFuY2Vfc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnIScpKTtcbiAgICAgICAgICAgICAgICB0aGlzQi5tYWtlVG9vbHRpcChiZCwgbWFrZUVsZW1lbnQoJ3NwYW4nLCBbXCJUaGlzIGRhdGEgc291cmNlIGlzbid0IGFjY2Vzc2libGUgYmVjYXVzZSBpdCBkb2Vzbid0IHN1cHBvcnQgXCIsIG1ha2VFbGVtZW50KCdhJywgXCJDT1JTXCIsIHtocmVmOiAnaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8nfSksIFwiLlwiXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgci5hcHBlbmRDaGlsZChiZCk7XG4gICAgICAgICAgICB2YXIgbGQgPSBtYWtlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIGxkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNvdXJjZS5uYW1lKSk7XG4gICAgICAgICAgICBpZiAoc291cmNlLmRlc2MgJiYgc291cmNlLmRlc2MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXNCLm1ha2VUb29sdGlwKGxkLCBzb3VyY2UuZGVzYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByLmFwcGVuZENoaWxkKGxkKTtcbiAgICAgICAgICAgIHN0YWJCb2R5LmFwcGVuZENoaWxkKHIpO1xuICAgICAgICAgICAgKytpZHg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2V0Q2hlY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBiaSA9IDA7IGJpIDwgYnV0dG9ucy5sZW5ndGg7ICsrYmkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGJ1dHRvbnNbYmldO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpc0IuY3VycmVudGx5QWN0aXZlKGIuZGFsbGlhbmNlX3NvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0Q2hlY2tzKCk7XG4gICAgICAgIHRoaXNCLmFkZFRpZXJMaXN0ZW5lcihmdW5jdGlvbihsKSB7XG4gICAgICAgICAgICBzZXRDaGVja3MoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChzdGFiKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWFrZUh1YlN0YWIodHJhY2tzKSB7XG4gICAgICAgIHJlZnJlc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGNhbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIGN1c3RvbU1vZGUgPSBmYWxzZTtcbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgdHRhYiA9IG1ha2VFbGVtZW50KCdkaXYnLCBudWxsLCB7fSwge3dpZHRoOiAnMTAwJSd9KTtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCh0cmFja3NbaV0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzb3VyY2VzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuc2hvcnRMYWJlbC50b0xvd2VyQ2FzZSgpLnRyaW0oKS5sb2NhbGVDb21wYXJlKGIuc2hvcnRMYWJlbC50b0xvd2VyQ2FzZSgpLnRyaW0oKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBncm91cHMgPSBbXTtcbiAgICAgICAgdmFyIHRvcHMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCBzb3VyY2VzLmxlbmd0aDsgKyt0aSkge1xuICAgICAgICAgICAgdmFyIHRyYWNrID0gc291cmNlc1t0aV07XG4gICAgICAgICAgICBpZiAodHJhY2suY2hpbGRyZW4gJiYgdHJhY2suY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiB0cmFjay5jb250YWluZXIgIT0gJ211bHRpV2lnJykge1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9wcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodG9wcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBncm91cHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc2hvcnRMYWJlbDogJ090aGVycycsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IC0xMDAwMDAwMDAsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRvcHN9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyb3Vwcy5zb3J0KFRIVUJfQ09NUEFSRSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgYnV0dG9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBnaSA9IDA7IGdpIDwgZ3JvdXBzLmxlbmd0aDsgKytnaSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzW2dpXTtcbiAgICAgICAgICAgIHZhciBkZyA9IGdyb3VwO1xuICAgICAgICAgICAgaWYgKCFkZy5kaW1lbnNpb25zICYmIGRnLl9wYXJlbnQgJiYgZGcuX3BhcmVudC5kaW1lbnNpb25zKVxuICAgICAgICAgICAgICAgIGRnID0gZGcuX3BhcmVudDtcblxuICAgICAgICAgICAgdmFyIGRwcm9wcyA9IHt9XG4gICAgICAgICAgICBpZiAoZGcuZGltZW5zaW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBkdG9rcyA9IGRnLmRpbWVuc2lvbnMuc3BsaXQoLyhcXHcrKT0oXFx3KykvKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkdGkgPSAwOyBkdGkgPCBkdG9rcy5sZW5ndGggLSAyOyBkdGkgKz0gMykge1xuICAgICAgICAgICAgICAgICAgICBkcHJvcHNbZHRva3NbZHRpICsgMV1dID0gZHRva3NbZHRpICsgMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZHByb3BzLmRpbVggJiYgZHByb3BzLmRpbVkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGltWCA9IGRwcm9wcy5kaW1YLCBkaW1ZID0gZHByb3BzLmRpbVk7XG4gICAgICAgICAgICAgICAgdmFyIHNnWCA9IGRnLnN1Ymdyb3Vwc1tkaW1YXTtcbiAgICAgICAgICAgICAgICB2YXIgc2dZID0gZGcuc3ViZ3JvdXBzW2RpbVldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmtzID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IGdyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytjaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBncm91cC5jaGlsZHJlbltjaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB2WCA9IGNoaWxkLnNnbVtkaW1YXSwgdlkgPSBjaGlsZC5zZ21bZGltWV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJrc1t2WF0pXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmtzW3ZYXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB0cmtzW3ZYXVt2WV0gPSBjaGlsZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gbWFrZUVsZW1lbnQoJ3RhYmxlJywgbnVsbCwge2NsYXNzTmFtZTogJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJ30sIHt0YWJsZUxheW91dDogJ2ZpeGVkJ30pO1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9IG1ha2VFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3RoJywgbnVsbCwge30sIHt3aWR0aDogJzE1MHB4JywgaGVpZ2h0OiAnMTAwcHgnfSkpOyAgIC8vIGJsYW5rIGNvcm5lciBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzZ1gudGl0bGVzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBtYWtlRWxlbWVudCgndGgnLCBtYWtlRWxlbWVudCgnZGl2Jywgc2dYLnRpdGxlc1tzaV0sIHt9LCB7dHJhbnNmb3JtOiAncm90YXRlKC02MGRlZyknLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJraXRUcmFuc2Zvcm06ICdyb3RhdGUoLTYwZGVnKSB0cmFuc2xhdGUoMjBweCwxMHB4KScsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJraXRUcmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCd9KSwge30sIHt3aWR0aDogJzM1cHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJ30pXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG1ib2R5ID0gbWFrZUVsZW1lbnQoJ3Rib2R5JywgbnVsbCwge2NsYXNzTmFtZTogJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJ30pXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeWkgPSAwOyB5aSA8IHNnWS50aXRsZXMubGVuZ3RoOyArK3lpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2WSA9IHNnWS50YWdzW3lpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IG1ha2VFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3RoJywgc2dZLnRpdGxlc1t5aV0pLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4aSA9IDA7IHhpIDwgc2dYLnRpdGxlcy5sZW5ndGg7ICsreGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2WCA9IHNnWC50YWdzW3hpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gbWFrZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJrc1t2WF0gJiYgdHJrc1t2WF1bdlldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gdHJrc1t2WF1bdlldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcyA9IHRyYWNrLnRvRGFsbGlhbmNlU291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBtYWtlRWxlbWVudCgndHInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmQgPSBtYWtlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IG1ha2VFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5kYWxsaWFuY2Vfc291cmNlID0gZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9fbWFwcGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmRhbGxpYW5jZV9tYXBwaW5nID0gX19tYXBwaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5hcHBlbmRDaGlsZChiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldi50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuYWRkVGllcihldi50YXJnZXQuZGFsbGlhbmNlX3NvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5yZW1vdmVUaWVyKGV2LnRhcmdldC5kYWxsaWFuY2Vfc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIG1ib2R5LmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdHJpeC5hcHBlbmRDaGlsZChtYm9keSk7XG4gICAgICAgICAgICAgICAgdHRhYi5hcHBlbmRDaGlsZChtYWtlVHJlZVRhYmxlU2VjdGlvbihncm91cC5zaG9ydExhYmVsLCBtYXRyaXgsIGdpPT0wKSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhYkJvZHkgPSBtYWtlRWxlbWVudCgndGJvZHknLCBudWxsLCB7Y2xhc3NOYW1lOiAndGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1jb25kZW5zZWQnfSk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YWIgPSBtYWtlRWxlbWVudCgndGFibGUnLCBzdGFiQm9keSwge2NsYXNzTmFtZTogJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJ30sIHt3aWR0aDogJzEwMCUnLCB0YWJsZUxheW91dDogJ2ZpeGVkJ30pOyBcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGdyb3VwLmNoaWxkcmVuLnNvcnQoVEhVQl9DT01QQVJFKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFjayA9IGdyb3VwLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHMgPSB0cmFjay50b0RhbGxpYW5jZVNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBtYWtlRWxlbWVudCgndHInKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJkID0gbWFrZUVsZW1lbnQoJ3RkJywgbnVsbCwge30sIHt3aWR0aDogJzMwcHgnfSk7XG4gICAgICAgICAgICAgICAgICAgIGJkLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBtYWtlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgYi50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgICAgICAgICAgYi5kYWxsaWFuY2Vfc291cmNlID0gZHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfX21hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuZGFsbGlhbmNlX21hcHBpbmcgPSBfX21hcHBpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgICAgICBiZC5hcHBlbmRDaGlsZChiKTtcbiAgICAgICAgICAgICAgICAgICAgYi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2LnRhcmdldC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuYWRkVGllcihldi50YXJnZXQuZGFsbGlhbmNlX3NvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLnJlbW92ZVRpZXIoZXYudGFyZ2V0LmRhbGxpYW5jZV9zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByLmFwcGVuZENoaWxkKGJkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxkID0gbWFrZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgICAgIGxkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRyYWNrLnNob3J0TGFiZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmxvbmdMYWJlbCAmJiB0cmFjay5sb25nTGFiZWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IubWFrZVRvb2x0aXAobGQsIHRyYWNrLmxvbmdMYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgci5hcHBlbmRDaGlsZChsZCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWJCb2R5LmFwcGVuZENoaWxkKHIpO1xuICAgICAgICAgICAgICAgICAgICArK2lkeDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzLmxlbmd0aCA+IDEgfHwgZ3JvdXAuc2hvcnRMYWJlbCAhPT0gJ090aGVycycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHRhYi5hcHBlbmRDaGlsZChtYWtlVHJlZVRhYmxlU2VjdGlvbihncm91cC5zaG9ydExhYmVsLCBzdGFiLCBnaT09MCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHR0YWIuYXBwZW5kQ2hpbGQoc3RhYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNldENoZWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgYmkgPSAwOyBiaSA8IGJ1dHRvbnMubGVuZ3RoOyArK2JpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBidXR0b25zW2JpXTtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXNCLmN1cnJlbnRseUFjdGl2ZShiLmRhbGxpYW5jZV9zb3VyY2UpO1xuICAgICAgICAgICAgICAgIGlmICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGIuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGIuZGlzYWJsZWQgPSB0LnNlcXVlbmNlU291cmNlICE9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldENoZWNrcygpO1xuICAgICAgICB0aGlzQi5hZGRUaWVyTGlzdGVuZXIoZnVuY3Rpb24obCkge1xuICAgICAgICAgICAgc2V0Q2hlY2tzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZCh0dGFiKTtcbiAgICB9XG5cbiAgICBpZiAocmVnQnV0dG9uKSB7XG4gICAgICAgIHJlZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGFjdGl2YXRlQnV0dG9uKGFkZE1vZGVCdXR0b25zLCByZWdCdXR0b24pO1xuICAgICAgICAgICAgbWFrZVN0YWIodGhpc0IuYXZhaWxhYmxlU291cmNlcyk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gXG4gICAgYmluQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHN3aXRjaFRvQmluTW9kZSgpO1xuICAgIH0sIGZhbHNlKTtcbiAgICBhZGRIdWJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc3dpdGNoVG9IdWJDb25uZWN0TW9kZSgpO1xuICAgIH0sIGZhbHNlKTtcblxuXG4gICAgZnVuY3Rpb24gc3dpdGNoVG9CaW5Nb2RlKCkge1xuICAgICAgICBhY3RpdmF0ZUJ1dHRvbihhZGRNb2RlQnV0dG9ucywgYmluQnV0dG9uKTtcbiAgICAgICAgY3VzdG9tTW9kZSA9ICdiaW4nO1xuXG4gICAgICAgIHJlZnJlc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICAgICAgY2FuQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIHZhciBwYWdlSG9sZGVyID0gbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHt9LCB7cGFkZGluZ0xlZnQ6ICcxMHB4JywgcGFkZGluZ1JpZ2h0OiAnMTBweCd9KTtcbiAgICAgICAgcGFnZUhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDMnLCAnQWRkIGN1c3RvbSBVUkwtYmFzZWQgZGF0YScpKTtcbiAgICAgICAgcGFnZUhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgncCcsIFsnWW91IGNhbiBhZGQgaW5kZXhlZCBiaW5hcnkgZGF0YSBob3N0ZWQgb24gYW4gd2ViIHNlcnZlciB0aGF0IHN1cHBvcnRzIENPUlMgKCcsIG1ha2VFbGVtZW50KCdhJywgJ2Z1bGwgZGV0YWlscycsIHtocmVmOiAnaHR0cDovL3d3dy5iaW9kYWxsaWFuY2Uub3JnL2Jpbi5odG1sJ30pLCAnKS4gIEN1cnJlbnRseSBzdXBwb3J0ZWQgZm9ybWF0cyBhcmUgYmlnd2lnLCBiaWdiZWQsIGFuZCBpbmRleGVkIEJBTS4nXSkpO1xuXG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2JyJykpO1xuICAgICAgICBwYWdlSG9sZGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdVUkw6ICcpKTtcbiAgICAgICAgY3VzdFVSTCA9IG1ha2VFbGVtZW50KCdpbnB1dCcsICcnLCB7c2l6ZTogODAsIHZhbHVlOiAnaHR0cDovL3d3dy5iaW9kYWxsaWFuY2Uub3JnL2RhdGFzZXRzL2Vuc0dlbmUuYmInfSwge3dpZHRoOiAnMTAwJSd9KTtcbiAgICAgICAgcGFnZUhvbGRlci5hcHBlbmRDaGlsZChjdXN0VVJMKTtcbiAgICAgICAgXG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2JyJykpO1xuICAgICAgICBwYWdlSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdiJywgJy0gb3IgLScpKTtcbiAgICAgICAgcGFnZUhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnYnInKSk7XG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0ZpbGU6ICcpKTtcbiAgICAgICAgY3VzdEZpbGUgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ2ZpbGUnLCBtdWx0aXBsZTogJ211bHRpcGxlJ30pO1xuICAgICAgICBwYWdlSG9sZGVyLmFwcGVuZENoaWxkKGN1c3RGaWxlKTtcbiAgICAgICAgXG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnQ2xpY2tpbmcgdGhlIFwiQWRkXCIgYnV0dG9uIGJlbG93IHdpbGwgaW5pdGlhdGUgYSBzZXJpZXMgb2YgdGVzdCBxdWVyaWVzLicpKTtcblxuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKHBhZ2VIb2xkZXIpO1xuICAgICAgICBjdXN0VVJMLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpdGNoVG9IdWJDb25uZWN0TW9kZSgpIHtcbiAgICAgICAgYWN0aXZhdGVCdXR0b24oYWRkTW9kZUJ1dHRvbnMsIGFkZEh1YkJ1dHRvbik7XG4gICAgICAgIHJlZnJlc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICAgICAgY2FuQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgY3VzdG9tTW9kZSA9ICdodWItY29ubmVjdCc7XG4gICAgICAgIHJlZnJlc2hCdXR0b24uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKHN0YWJIb2xkZXIpO1xuXG4gICAgICAgIHZhciBwYWdlSG9sZGVyID0gbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHt9LCB7cGFkZGluZ0xlZnQ6ICcxMHB4JywgcGFkZGluZ1JpZ2h0OiAnMTBweCd9KTtcbiAgICAgICAgcGFnZUhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDMnLCAnQ29ubmVjdCB0byBhIHRyYWNrIGh1Yi4nKSk7XG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBbJ0VudGVyIHRoZSB0b3AtbGV2ZWwgVVJMICh1c3VhbGx5IHBvaW50cyB0byBhIGZpbGUgY2FsbGVkIFwiaHViLnR4dFwiKSBvZiBhIFVDU0Mtc3R5bGUgdHJhY2sgaHViJ10pKTtcbiAgICAgICAgXG4gICAgICAgIGN1c3RVUkwgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJywge3NpemU6IDEyMCwgdmFsdWU6ICdodHRwOi8vd3d3LmJpb2RhbGxpYW5jZS5vcmcvZGF0YXNldHMvdGVzdGh1Yi9odWIudHh0J30sIHt3aWR0aDogJzEwMCUnfSk7XG4gICAgICAgIHBhZ2VIb2xkZXIuYXBwZW5kQ2hpbGQoY3VzdFVSTCk7XG4gICAgICAgIFxuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKHBhZ2VIb2xkZXIpO1xuICAgICAgICBcbiAgICAgICAgY3VzdFVSTC5mb2N1cygpO1xuICAgIH1cblxuICAgIGN1c3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc3dpdGNoVG9DdXN0b21Nb2RlKCk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgZnVuY3Rpb24gc3dpdGNoVG9DdXN0b21Nb2RlKCkge1xuICAgICAgICBhY3RpdmF0ZUJ1dHRvbihhZGRNb2RlQnV0dG9ucywgY3VzdEJ1dHRvbik7XG4gICAgICAgIHJlZnJlc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICAgICAgY2FuQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgY3VzdG9tTW9kZSA9ICdkYXMnO1xuXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKHN0YWJIb2xkZXIpO1xuXG4gICAgICAgIHZhciBjdXN0b21Gb3JtID0gbWFrZUVsZW1lbnQoJ2RpdicsIG51bGwsIHt9LCAge3BhZGRpbmdMZWZ0OiAnMTBweCcsIHBhZGRpbmdSaWdodDogJzEwcHgnfSk7XG4gICAgICAgIGN1c3RvbUZvcm0uYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2gzJywgJ0FkZCBjdXN0b20gREFTIGRhdGEnKSk7XG4gICAgICAgIGN1c3RvbUZvcm0uYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnVGhpcyBpbnRlcmZhY2UgaXMgaW50ZW5kZWQgZm9yIGFkZGluZyBjdXN0b20gb3IgbGFiLXNwZWNpZmljIGRhdGEuICBQdWJsaWMgZGF0YSBjYW4gYmUgYWRkZWQgbW9yZSBlYXNpbHkgdmlhIHRoZSByZWdpc3RyeSBpbnRlcmZhY2UuJykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBjdXN0b21Gb3JtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdVUkw6ICcpKTtcbiAgICAgICAgY3VzdG9tRm9ybS5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnYnInKSk7XG4gICAgICAgIGN1c3RVUkwgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJywge3NpemU6IDgwLCB2YWx1ZTogJ2h0dHA6Ly93d3cuZGVya2hvbG0ubmV0OjgwODAvZGFzL21lZGlwc2VxX3JlYWRzLyd9LCB7d2lkdGg6ICcxMDAlJ30pO1xuICAgICAgICBjdXN0b21Gb3JtLmFwcGVuZENoaWxkKGN1c3RVUkwpO1xuXG4gICAgICAgIGN1c3RvbUZvcm0uYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnQ2xpY2tpbmcgdGhlIFwiQWRkXCIgYnV0dG9uIGJlbG93IHdpbGwgaW5pdGlhdGUgYSBzZXJpZXMgb2YgdGVzdCBxdWVyaWVzLiAgSWYgdGhlIHNvdXJjZSBpcyBwYXNzd29yZC1wcm90ZWN0ZWQsIHlvdSBtYXkgYmUgcHJvbXB0ZWQgdG8gZW50ZXIgY3JlZGVudGlhbHMuJykpO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGN1c3RvbUZvcm0pO1xuXG4gICAgICAgIGN1c3RVUkwuZm9jdXMoKTtcbiAgICB9XG5cblxuXG4gICAgdmFyIGFkZEJ1dHRvbiA9IG1ha2VFbGVtZW50KCdidXR0b24nLCAnQWRkJywge2NsYXNzTmFtZTogJ2J0biBidG4tcHJpbWFyeSd9KTtcbiAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZG9BZGQoKTtcbiAgICB9LCBmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiBkb0FkZCgpIHtcbiAgICAgICAgaWYgKGN1c3RvbU1vZGUpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21Nb2RlID09PSAnZGFzJykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJpID0gY3VzdFVSTC52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEvXi4rOlxcL1xcLy8uZXhlYyhjdXJpKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJpID0gJ2h0dHA6Ly8nICsgY3VyaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5kcyA9IG5ldyBEQVNTb3VyY2Uoe25hbWU6ICd0ZW1wb3JhcnknLCB1cmk6IGN1cml9KTtcbiAgICAgICAgICAgICAgICB0cnlBZGREQVMobmRzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tTW9kZSA9PT0gJ2JpbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZUxpc3QgPSBjdXN0RmlsZS5maWxlcztcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlTGlzdCAmJiBmaWxlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeUFkZE11bHRpcGxlKGZpbGVMaXN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyaSA9IGN1c3RVUkwudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS9eLis6XFwvXFwvLy5leGVjKGN1cmkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJpID0gJ2h0dHA6Ly8nICsgY3VyaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnlBZGRCaW4oe3VyaTogY3VyaX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tTW9kZSA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICAgICAgICAgIHN3aXRjaFRvQ3VzdG9tTW9kZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXN0b21Nb2RlID09PSAncmVzZXQtYmluJykge1xuICAgICAgICAgICAgICAgIHN3aXRjaFRvQmluTW9kZSgpOyBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tTW9kZSA9PT0gJ3Jlc2V0LWh1YicpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2hUb0h1YkNvbm5lY3RNb2RlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbU1vZGUgPT09ICdwcm9tcHQtYmFpJykge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTGlzdCA9IGN1c3RGaWxlLmZpbGVzO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlTGlzdCAmJiBmaWxlTGlzdC5sZW5ndGggPiAwICYmIGZpbGVMaXN0WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFUb0ZpbmFsaXplLmJhaUJsb2IgPSBmaWxlTGlzdFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVCQU0oZGF0YVRvRmluYWxpemUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21wdEZvckJBSShkYXRhVG9GaW5hbGl6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXN0b21Nb2RlID09PSAncHJvbXB0LXRiaScpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZUxpc3QgPSBjdXN0RmlsZS5maWxlcztcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUxpc3QgJiYgZmlsZUxpc3QubGVuZ3RoID4gMCAmJiBmaWxlTGlzdFswXSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhVG9GaW5hbGl6ZS5pbmRleEJsb2IgPSBmaWxlTGlzdFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVUYWJpeFZDRihkYXRhVG9GaW5hbGl6ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0Rm9yVGFiaXgoZGF0YVRvRmluYWxpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tTW9kZSA9PT0gJ2ZpbmFsaXplJyB8fCBjdXN0b21Nb2RlID09PSAnZmluYWxpemUtYmluJykge1xuICAgICAgICAgICAgICAgIGRhdGFUb0ZpbmFsaXplLm5hbWUgPSBjdXN0TmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGN1c3RDUy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAobSAhPSAnX19kZWZhdWx0X18nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFUb0ZpbmFsaXplLm1hcHBpbmcgPSBtO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFUb0ZpbmFsaXplLm1hcHBpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXN0UXVhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvRmluYWxpemUubWF4YmlucyA9IGN1c3RRdWFudC5jaGVja2VkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXN0VXNlci52YWx1ZS5sZW5ndGggPiAxICYmIGN1c3RQYXNzLnZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvRmluYWxpemUueFVzZXIgPSBjdXN0VXNlci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVRvRmluYWxpemUueFBhc3MgPSBjdXN0UGFzcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzQi5hZGRUaWVyKGRhdGFUb0ZpbmFsaXplKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXN0b21Nb2RlID09ICdmaW5hbGl6ZS1iaW4nKVxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hUb0Jpbk1vZGUoKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaFRvQ3VzdG9tTW9kZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXN0b21Nb2RlID09PSAnaHViLWNvbm5lY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cmkgPSBjdXN0VVJMLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAoIS9eLis6XFwvXFwvLy5leGVjKGN1cmkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cmkgPSAnaHR0cDovLycgKyBjdXJpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cnlBZGRIdWIoY3VyaSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbU1vZGUgPT09ICdtdWx0aXBsZScpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtaSA9IDA7IG1pIDwgbXVsdGlwbGVTZXQubGVuZ3RoOyArK21pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gbXVsdGlwbGVTZXRbbWldO1xuICAgICAgICAgICAgICAgICAgICBpZiAocy5oaWRkZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocy50aWVyX3R5cGUgPT0gJ2JhbScgJiYgIXMuaW5kZXhCbG9iICYmICFzLmluZGV4VXJpKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzLnRpZXJfdHlwZSA9PSAndGFiaXgnICYmICFzLmluZGV4QmxvYiAmJiAhcy5pbmRleFVyaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZHMgPSBtYWtlU291cmNlQ29uZmlnKHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHMubm9QZXJzaXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmFkZFRpZXIobmRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaFRvQmluTW9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc0IucmVtb3ZlQWxsUG9wdXBzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdHJ5QWRkSHViKGN1cmksIG9wdHMsIHJldHJ5KSB7XG4gICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgICBcbiAgICAgICAgY29ubmVjdFRyYWNrSHViKGN1cmksIGZ1bmN0aW9uKGh1YiwgZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ5QWRkSHViKGN1cmksIHtjcmVkZW50aWFsczogdHJ1ZX0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVDaGlsZHJlbihzdGFiSG9sZGVyKTtcbiAgICAgICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdoMicsICdFcnJvciBjb25uZWN0aW5nIHRvIHRyYWNrIGh1YicpKVxuICAgICAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBlcnIpKTtcbiAgICAgICAgICAgICAgICBjdXN0b21Nb2RlID0gJ3Jlc2V0LWh1Yic7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYmVzdEh1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGJlc3RIdWJCdXR0b24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGdlbm9tZSBpbiBodWIuZ2Vub21lcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFwcGluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBva2F5ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdlbm9tZSA9PSB0aGlzQi5jb29yZFN5c3RlbS51Y3NjTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2theSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbWlkIGluIHRoaXNCLmNoYWlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gdGhpc0IuY2hhaW5zW21pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlbm9tZSA9PSBtLmNvb3Jkcy51Y3NjTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nID0gbWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva2F5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9rYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYyA9IHt1cmw6IGN1cmksIGdlbm9tZTogZ2Vub21lfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNyZWRlbnRpYWxzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhjLmNyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGMubWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHViLmdlbm9tZXNbZ2Vub21lXS5tYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmh1YnMucHVzaChoYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5odWJPYmplY3RzLnB1c2goaHViLmdlbm9tZXNbZ2Vub21lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodWJCdXR0b24gPSBtYWtlSHViQnV0dG9uKGh1Yi5nZW5vbWVzW2dlbm9tZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZUJ1dHRvbkhvbGRlci5hcHBlbmRDaGlsZChodWJCdXR0b24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hcHBpbmcgfHwgIWJlc3RIdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0SHViID0gaHViLmdlbm9tZXNbZ2Vub21lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0SHViQnV0dG9uID0gaHViQnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJlc3RIdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0Iubm90aWZ5VGllcigpO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZUJ1dHRvbihhZGRNb2RlQnV0dG9ucywgYmVzdEh1YkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RIdWIuZ2V0VHJhY2tzKGZ1bmN0aW9uKHRyYWNrcywgZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlSHViU3RhYih0cmFja3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDaGlsZHJlbihzdGFiSG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDInLCAnTm8gZGF0YSBmb3IgdGhpcyBnZW5vbWUnKSlcbiAgICAgICAgICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgncCcsICdUaGlzIFVSTCBhcHBlYXJzIHRvIGJlIGEgdmFsaWQgdHJhY2staHViLCBidXQgaXQgZG9lc25cXCd0IGNvbnRhaW4gYW55IGRhdGEgZm9yIHRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGlzIGJyb3dzZXInKSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnY29vcmRTeXN0ZW0udWNzY05hbWUgPSAnICsgdGhpc0IuY29vcmRTeXN0ZW0udWNzY05hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tTW9kZSA9ICdyZXNldC1odWInO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBvcHRzKTtcbiAgICB9XG5cbiAgICB2YXIgdHJ5QWRkREFTID0gZnVuY3Rpb24obmRzLCByZXRyeSkge1xuICAgICAgICB2YXIga25vd25TcGFjZSA9IHRoaXNCLmtub3duU3BhY2U7XG4gICAgICAgIGlmICgha25vd25TcGFjZSkge1xuICAgICAgICAgICAgYWxlcnQoXCJDYW4ndCBjb25maXJtIHRyYWNrLWFkZGl0aW9uIHRvIGFuIHVuaW5pdCBicm93c2VyLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHNtID0gTWF0aC5tYXgoa25vd25TcGFjZS5taW4sIChrbm93blNwYWNlLm1pbiArIGtub3duU3BhY2UubWF4IC0gMTAwKSAvIDIpfDA7XG4gICAgICAgIHZhciB0ZXN0U2VnbWVudCA9IG5ldyBEQVNTZWdtZW50KGtub3duU3BhY2UuY2hyLCB0c20sIE1hdGgubWluKHRzbSArIDk5LCBrbm93blNwYWNlLm1heCkpO1xuICAgICAgICBuZHMuZmVhdHVyZXModGVzdFNlZ21lbnQsIHt9LCBmdW5jdGlvbihmZWF0dXJlcywgc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICBuZHMuY3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0cnlBZGREQVMobmRzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDaGlsZHJlbihzdGFiSG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDInLCAnQ3VzdG9tIGRhdGEgbm90IGZvdW5kJykpO1xuICAgICAgICAgICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdwJywgJ0RBUyB1cmk6ICcgKyBuZHMudXJpICsgJyBpcyBub3QgYW5zd2VyaW5nIGZlYXR1cmVzIHJlcXVlc3RzJykpO1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21Nb2RlID0gJ3Jlc2V0JztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWVFeHRyYWN0UGF0dGVybiA9IG5ldyBSZWdFeHAoJy8oW14vXSspLz8kJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbmFtZUV4dHJhY3RQYXR0ZXJuLmV4ZWMobmRzLnVyaSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIG5kcy5uYW1lID0gbWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5QWRkREFTeFNvdXJjZXMobmRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyeUFkZERBU3hTb3VyY2VzKG5kcywgcmV0cnkpIHtcbiAgICAgICAgdmFyIHVyaSA9IG5kcy51cmk7XG4gICAgICAgIGlmIChyZXRyeSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gLyguKylcXC9bXlxcL10rXFwvPy8uZXhlYyh1cmkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbWF0Y2hbMV0gKyAnL3NvdXJjZXMnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNxZmFpbCgpIHtcbiAgICAgICAgICAgIGlmICghcmV0cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ5QWRkREFTeFNvdXJjZXMobmRzLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZERhc0NvbXBsZXRpb25QYWdlKG5kcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3IERBU1JlZ2lzdHJ5KHVyaSwge2NyZWRlbnRpYWxzOiBuZHMuY3JlZGVudGlhbHN9KS5zb3VyY2VzKFxuICAgICAgICAgICAgZnVuY3Rpb24oc291cmNlcykge1xuICAgICAgICAgICAgICAgIGlmICghc291cmNlcyB8fCBzb3VyY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzcWZhaWwoKTtcbiAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgdmFyIGZzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBmcyA9IHNvdXJjZXNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1tpXS51cmkgPT09IG5kcy51cmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcyA9IHNvdXJjZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY29vcmRzRGV0ZXJtaW5lZCA9IGZhbHNlLCBxdWFudERldGVybWluZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmRzLm5hbWUgPSBmcy5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBuZHMuZGVzYyA9IGZzLmRlc2M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcy5tYXhiaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHMubWF4YmlucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHMubWF4YmlucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcy5jYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5kcy5jYXBhYmlsaXRpZXMgPSBmcy5jYXBhYmlsaXRpZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcXVhbnREZXRlcm1pbmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZzLmNvb3JkcyAmJiBmcy5jb29yZHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBmcy5jb29yZHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29vcmRzTWF0Y2goY29vcmRzLCB0aGlzQi5jb29yZFN5c3RlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHNEZXRlcm1pbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpc0IuY2hhaW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzQi5jaGFpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3Jkc01hdGNoKGNvb3JkcywgdGhpc0IuY2hhaW5zW2tdLmNvb3JkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5kcy5tYXBwaW5nID0gaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkc0RldGVybWluZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkRGFzQ29tcGxldGlvblBhZ2UobmRzLCBjb29yZHNEZXRlcm1pbmVkLCBxdWFudERldGVybWluZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzcWZhaWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbWFrZVNvdXJjZUNvbmZpZyA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgdmFyIG5kcyA9IHtuYW1lOiBzLm5hbWV9O1xuICAgICAgICBpZiAocy5tYXBwaW5nICYmIHMubWFwcGluZyAhPSAnX19kZWZhdWx0X18nKVxuICAgICAgICAgICAgbmRzLm1hcHBpbmcgPSBzLm1hcHBpbmc7XG5cbiAgICAgICAgaWYgKHMudGllcl90eXBlID09ICdid2cnKSB7XG4gICAgICAgICAgICBpZiAocy5ibG9iKVxuICAgICAgICAgICAgICAgIG5kcy5id2dCbG9iID0gcy5ibG9iO1xuICAgICAgICAgICAgZWxzZSBpZiAocy51cmkpXG4gICAgICAgICAgICAgICAgbmRzLmJ3Z1VSSSA9IHMudXJpO1xuICAgICAgICAgICAgcmV0dXJuIG5kcztcbiAgICAgICAgfSBlbHNlIGlmIChzLnRpZXJfdHlwZSA9PSAnYmFtJykge1xuICAgICAgICAgICAgaWYgKHMuYmxvYikge1xuICAgICAgICAgICAgICAgIG5kcy5iYW1CbG9iID0gcy5ibG9iO1xuICAgICAgICAgICAgICAgIG5kcy5iYWlCbG9iID0gcy5pbmRleEJsb2I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5kcy5iYW1VUkkgPSBzLnVyaTtcbiAgICAgICAgICAgICAgICBuZHMuYmFpVVJJID0gcy5pbmRleFVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZHM7XG4gICAgICAgIH0gZWxzZSBpZiAocy50aWVyX3R5cGUgPT0gJ3RhYml4Jykge1xuICAgICAgICAgICAgbmRzLnRpZXJfdHlwZSA9ICd0YWJpeCc7XG4gICAgICAgICAgICBuZHMucGF5bG9hZCA9IHMucGF5bG9hZDtcbiAgICAgICAgICAgIGlmIChzLmJsb2IpIHtcbiAgICAgICAgICAgICAgICBuZHMuYmxvYiA9IHMuYmxvYjtcbiAgICAgICAgICAgICAgICBuZHMuaW5kZXhCbG9iID0gcy5pbmRleEJsb2I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5kcy51cmkgPSBzLnVyaTtcbiAgICAgICAgICAgICAgICBuZHMuaW5kZXhVcmkgPSBzLmluZGV4VXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5kcztcbiAgICAgICAgfSBlbHNlIGlmIChzLnRpZXJfdHlwZSA9PSAnbWVtc3RvcmUnKSB7XG4gICAgICAgICAgICBuZHMudGllcl90eXBlID0gJ21lbXN0b3JlJztcbiAgICAgICAgICAgIG5kcy5wYXlsb2FkID0gcy5wYXlsb2FkO1xuICAgICAgICAgICAgaWYgKHMuYmxvYilcbiAgICAgICAgICAgICAgICBuZHMuYmxvYiA9IHMuYmxvYjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBuZHMudXJpID0gcy51cmk7XG4gICAgICAgICAgICByZXR1cm4gbmRzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRyeUFkZEJpbiA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICBwcm9iZVJlc291cmNlKHNvdXJjZSwgZnVuY3Rpb24oc291cmNlLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDaGlsZHJlbihzdGFiSG9sZGVyKTtcbiAgICAgICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdoMicsIFwiQ291bGRuJ3QgYWNjZXNzIGN1c3RvbSBkYXRhXCIpKTtcbiAgICAgICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdwJywgJycgKyBlcnIpKTtcbiAgICAgICAgICAgICAgICBjdXN0b21Nb2RlID0gJ3Jlc2V0LWJpbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuZHMgPSBtYWtlU291cmNlQ29uZmlnKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS50aWVyX3R5cGUgPT0gJ2JhbScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlQkFNKG5kcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UudGllcl90eXBlID09ICd0YWJpeCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlVGFiaXhWQ0YobmRzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkRGFzQ29tcGxldGlvblBhZ2UobmRzLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvbXB0Rm9yQkFJKG5kcykge1xuICAgICAgICByZWZyZXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGFkZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICAgIGNhbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG5cbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIGN1c3RvbU1vZGUgPSAncHJvbXB0LWJhaSdcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDInLCAnU2VsZWN0IGFuIGluZGV4IGZpbGUnKSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnRGFsbGlhbmNlIHJlcXVpcmVzIGEgQkFNIGluZGV4ICguYmFpKSBmaWxlIHdoZW4gZGlzcGxheWluZyBCQU0gZGF0YS4gIFRoZXNlIG5vcm1hbGx5IGFjY29tcGFueSBCQU0gZmlsZXMuICBGb3Igc2VjdXJpdHkgcmVhc29ucywgd2ViIGFwcGxpY2F0aW9ucyBsaWtlIERhbGxpYW5jZSBjYW4gb25seSBhY2Nlc3MgbG9jYWwgZmlsZXMgd2hpY2ggeW91IGhhdmUgZXhwbGljaXR5IHNlbGVjdGVkLiAgUGxlYXNlIHVzZSB0aGUgZmlsZSBjaG9vc2VyIGJlbG93IHRvIHNlbGVjdCB0aGUgYXBwcm9wcmlhdGUgQkFJIGZpbGUnKSk7XG5cbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnSW5kZXggZmlsZTogJykpO1xuICAgICAgICBjdXN0RmlsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnZmlsZSd9KTtcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChjdXN0RmlsZSk7XG4gICAgICAgIGRhdGFUb0ZpbmFsaXplID0gbmRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb21wdEZvclRhYml4KG5kcykge1xuICAgICAgICByZWZyZXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGFkZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICAgIGNhbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG5cbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIGN1c3RvbU1vZGUgPSAncHJvbXB0LXRiaSdcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnaDInLCAnU2VsZWN0IGFuIGluZGV4IGZpbGUnKSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnRGFsbGlhbmNlIHJlcXVpcmVzIGEgVGFiaXggaW5kZXggKC50YmkpIGZpbGUgd2hlbiBkaXNwbGF5aW5nIFZDRiBkYXRhLiAgRm9yIHNlY3VyaXR5IHJlYXNvbnMsIHdlYiBhcHBsaWNhdGlvbnMgbGlrZSBEYWxsaWFuY2UgY2FuIG9ubHkgYWNjZXNzIGxvY2FsIGZpbGVzIHdoaWNoIHlvdSBoYXZlIGV4cGxpY2l0eSBzZWxlY3RlZC4gIFBsZWFzZSB1c2UgdGhlIGZpbGUgY2hvb3NlciBiZWxvdyB0byBzZWxlY3QgdGhlIGFwcHJvcHJpYXRlIEJBSSBmaWxlJykpO1xuXG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0luZGV4IGZpbGU6ICcpKTtcbiAgICAgICAgY3VzdEZpbGUgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCBudWxsLCB7dHlwZTogJ2ZpbGUnfSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoY3VzdEZpbGUpO1xuICAgICAgICBkYXRhVG9GaW5hbGl6ZSA9IG5kcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZUJBTShuZHMpIHtcbiAgICAgICAgdmFyIGluZGV4RjtcbiAgICAgICAgaWYgKG5kcy5iYWlCbG9iKSB7XG4gICAgICAgICAgICBpbmRleEYgPSBuZXcgQmxvYkZldGNoYWJsZShuZHMuYmFpQmxvYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleEYgPSBuZXcgVVJMRmV0Y2hhYmxlKG5kcy5iYW1VUkkgKyAnLmJhaScpO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4Ri5zbGljZSgwLCAyNTYpLmZldGNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzQkFJID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYWdpYzIgPSByZWFkSW50KGJhLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQkFJID0gKG1hZ2ljMiA9PSBCQUlfTUFHSUMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzQkFJKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGREYXNDb21wbGV0aW9uUGFnZShuZHMsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpbkZvcm1hdEVycm9yUGFnZSgnWW91IGhhdmUgc2VsZWN0ZWQgYSB2YWxpZCBCQU0gZmlsZSwgYnV0IGEgY29ycmVzcG9uZGluZyBpbmRleCAoLmJhaSkgZmlsZSB3YXMgbm90IGZvdW5kLiAgUGxlYXNlIGluZGV4IHlvdXIgQkFNIChzYW10b29scyBpbmRleCkgYW5kIHBsYWNlIHRoZSBCQUkgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlVGFiaXhWQ0YobmRzKSB7XG4gICAgICAgIHZhciBpbmRleEY7XG4gICAgICAgIGlmIChuZHMuaW5kZXhCbG9iKSB7XG4gICAgICAgICAgICBpbmRleEYgPSBuZXcgQmxvYkZldGNoYWJsZShuZHMuaW5kZXhCbG9iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4RiA9IG5ldyBVUkxGZXRjaGFibGUobmRzLnVyaSArICcudGJpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXhGLnNsaWNlKDAsIDE8PDE2KS5mZXRjaChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICB2YXIgaGFzVGFiaXggPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocik7XG4gICAgICAgICAgICAgICAgaWYgKGJhWzBdID09IDMxIHx8IGJhWzFdID09IDEzOSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5jID0gdW5iZ3pmKHIpO1xuICAgICAgICAgICAgICAgICAgICBiYSA9IG5ldyBVaW50OEFycmF5KHVuYyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtMiA9IHJlYWRJbnQoYmEsIDApO1xuICAgICAgICAgICAgICAgICAgICBoYXNUYWJpeCA9IChtMiA9PSBUQUJJWF9NQUdJQyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc1RhYml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZERhc0NvbXBsZXRpb25QYWdlKG5kcywgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbkZvcm1hdEVycm9yUGFnZSgnWW91IGhhdmUgc2VsZWN0ZWQgYSB2YWxpZCBWQ0YgZmlsZSwgYnV0IGEgY29ycmVzcG9uZGluZyBpbmRleCAoLnRiaSkgZmlsZSB3YXMgbm90IGZvdW5kLiAgUGxlYXNlIGluZGV4IHlvdXIgVkNGIChcInRhYml4IC1wIHZjZiAtZiBteWZpbGUudmNmLmd6XCIpIGFuZCBwbGFjZSB0aGUgLnRiaSBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5Gb3JtYXRFcnJvclBhZ2UobWVzc2FnZSkge1xuICAgICAgICByZWZyZXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGFkZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICAgIGNhbkJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG5cbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdDdXN0b20gZGF0YSBmb3JtYXQgbm90IHJlY29nbml6ZWQnO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdoMicsICdFcnJvciBhZGRpbmcgY3VzdG9tIGRhdGEnKSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBtZXNzYWdlKSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnQ3VycmVudGx5IHN1cHBvcnRlZCBmb3JtYXRzIGFyZSBiaWdCZWQsIGJpZ1dpZywgYW5kIEJBTS4nKSk7XG4gICAgICAgIGN1c3RvbU1vZGUgPSAncmVzZXQtYmluJztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIFxuICAgIHZhciBhZGREYXNDb21wbGV0aW9uUGFnZSA9IGZ1bmN0aW9uKG5kcywgY29vcmRzRGV0ZXJtaW5lZCwgcXVhbnREZXRlcm1pbmVkLCBxdWFudElycmVsZXZhbnQpIHtcbiAgICAgICAgcmVmcmVzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBhZGRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnO1xuICAgICAgICBjYW5CdXR0b24uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnO1xuXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKHN0YWJIb2xkZXIpO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdoMicsICdBZGQgY3VzdG9tIGRhdGE6IHN0ZXAgMicpKTtcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTGFiZWw6ICcpKTtcbiAgICAgICAgY3VzdE5hbWUgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJywge3ZhbHVlOiBuZHMubmFtZX0pO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGN1c3ROYW1lKTtcblxuXG4gICAgICAgIC8vIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1VzZXI6ICcpKTtcbiAgICAgICAgY3VzdFVzZXIgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJyk7XG4gICAgICAgIC8vIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoY3VzdFVzZXIpO1xuICAgICAgICAvL3N0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1Bhc3M6ICcpKTtcbiAgICAgICAgY3VzdFBhc3MgPSBtYWtlRWxlbWVudCgnaW5wdXQnLCAnJyk7XG4gICAgICAgIC8vIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQoY3VzdFBhc3MpO1xuICAgICAgICBcblxuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdicicpKTtcbiAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnYnInKSk7XG4gICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ2g0JywgJ0Nvb3JkaW5hdGUgc3lzdGVtOiAnKSk7XG4gICAgICAgIGN1c3RDUyA9IG1ha2VFbGVtZW50KCdzZWxlY3QnLCBudWxsKTtcbiAgICAgICAgY3VzdENTLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdvcHRpb24nLCB0aGlzQi5uYW1lRm9yQ29vcmRTeXN0ZW0odGhpc0IuY29vcmRTeXN0ZW0pLCB7dmFsdWU6ICdfX2RlZmF1bHRfXyd9KSk7XG4gICAgICAgIGlmICh0aGlzQi5jaGFpbnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGNzayBpbiB0aGlzQi5jaGFpbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3MgPSB0aGlzQi5jaGFpbnNbY3NrXS5jb29yZHM7XG4gICAgICAgICAgICAgICAgY3VzdENTLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdvcHRpb24nLCB0aGlzQi5uYW1lRm9yQ29vcmRTeXN0ZW0oY3MpLCB7dmFsdWU6IGNza30pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXN0Q1MudmFsdWUgPSBuZHMubWFwcGluZyB8fCAnX19kZWZhdWx0X18nO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGN1c3RDUyk7XG5cbiAgICAgICAgaWYgKGNvb3Jkc0RldGVybWluZWQpIHtcbiAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBcIihCYXNlZCBvbiBzZXJ2ZXIgcmVzcG9uc2UsIHByb2JhYmx5IGRvZXNuJ3QgbmVlZCBjaGFuZ2luZy4pXCIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBbbWFrZUVsZW1lbnQoJ2InLCAnV2FybmluZzogJyksIFwidW5hYmxlIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2YWx1ZSBmcm9tIHNlcnZlciByZXNwb25zZXMuICBQbGVhc2UgY2hlY2sgY2FyZWZ1bGx5LlwiXSkpO1xuICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgncCcsIFwiSWYgeW91IGRvbid0IHNlZSB0aGUgbWFwcGluZyB5b3UncmUgbG9va2luZyBmb3IsIHBsZWFzZSBjb250YWN0IHRob21hc0BiaW9kYWxsaWFuY2Uub3JnXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcXVhbnRJcnJlbGV2YW50KSB7XG4gICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdRdWFudGl0YXRpdmU6ICcpKTtcbiAgICAgICAgICAgIGN1c3RRdWFudCA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiB0cnVlfSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5kcy5tYXhiaW5zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGN1c3RRdWFudC5jaGVja2VkID0gbmRzLm1heGJpbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGN1c3RRdWFudCk7XG4gICAgICAgICAgICBpZiAocXVhbnREZXRlcm1pbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgncCcsIFwiKEJhc2VkIG9uIHNlcnZlciByZXNwb25zZSwgcHJvYmFibHkgZG9lc24ndCBuZWVkIGNoYW5naW5nLilcIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdwJywgW21ha2VFbGVtZW50KCdiJywgXCJXYXJuaW5nOiBcIiksIFwidW5hYmxlIHRvIGRldGVybWluZSBjb3JyZWN0IHZhbHVlLiAgSWYgaW4gZG91YnQsIGxlYXZlIGNoZWNrZWQuXCJdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmRzLmJ3Z0Jsb2IpIHtcbiAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCBbbWFrZUVsZW1lbnQoJ2InLCAnV2FybmluZzogJyksICdkYXRhIGFkZGVkIGZyb20gbG9jYWwgZmlsZS4gIER1ZSB0byB0aGUgYnJvd3NlciBzZWN1cml0eSBtb2RlbCwgdGhlIHRyYWNrIHdpbGwgZGlzYXBwZWFyIGlmIHlvdSByZWxvYWQgRGFsbGlhbmNlLiddKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXN0TmFtZS5mb2N1cygpO1xuXG4gICAgICAgIGlmIChjdXN0b21Nb2RlID09PSAnYmluJyB8fCBjdXN0b21Nb2RlID09PSAncHJvbXB0LWJhaScgfHwgY3VzdG9tTW9kZSA9PT0gJ3Byb21wdC10YmknKVxuICAgICAgICAgICAgY3VzdG9tTW9kZSA9ICdmaW5hbGl6ZS1iaW4nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjdXN0b21Nb2RlID0gJ2ZpbmFsaXplJztcbiAgICAgICAgZGF0YVRvRmluYWxpemUgPSBuZHM7XG4gICAgfVxuXG4gICAgdmFyIG11bHRpcGxlU2V0ID0gbnVsbDtcbiAgICB2YXIgdHJ5QWRkTXVsdGlwbGUgPSBmdW5jdGlvbihmaWxlTGlzdCkge1xuICAgICAgICB2YXIgbmV3U291cmNlcyA9IG11bHRpcGxlU2V0ID0gW107XG4gICAgICAgIGN1c3RvbU1vZGUgPSAnbXVsdGlwbGUnO1xuICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgZmlsZUxpc3QubGVuZ3RoOyArK2ZpKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZpbGVMaXN0W2ZpXTtcbiAgICAgICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgICAgICAgbmV3U291cmNlcy5wdXNoKHtibG9iOiBmfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBmaSA9IDA7IGZpIDwgbmV3U291cmNlcy5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgIHByb2JlTXVsdGlwbGUobmV3U291cmNlc1tmaV0pO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZU11bHRpcGxlU3RhdHVzKCk7XG4gICAgfVxuXG4gICAgdmFyIHByb2JlTXVsdGlwbGUgPSBmdW5jdGlvbihucykge1xuICAgICAgICBwcm9iZVJlc291cmNlKG5zLCBmdW5jdGlvbihzb3VyY2UsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHNvdXJjZS5lcnJvciA9IGVycjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHVzZWRJbmRpY2VzID0gW107XG4gICAgICAgICAgICB2YXIgYmFtcyA9IHt9LCB0YWJpeGVzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgbXVsdGlwbGVTZXQubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBtdWx0aXBsZVNldFtzaV07XG4gICAgICAgICAgICAgICAgaWYgKHMudGllcl90eXBlID09ICdiYW0nICYmICFzLmluZGV4QmxvYikge1xuICAgICAgICAgICAgICAgICAgICBiYW1zW3MuYmxvYi5uYW1lXSA9IHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzLnRpZXJfdHlwZSA9PSAndGFiaXgnICYmICFzLmluZGV4QmxvYikge1xuICAgICAgICAgICAgICAgICAgICB0YWJpeGVzW3MuYmxvYi5uYW1lXSA9IHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgbXVsdGlwbGVTZXQubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBtdWx0aXBsZVNldFtzaV07XG4gICAgICAgICAgICAgICAgaWYgKHMudGllcl90eXBlID09PSAnYmFpJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFpUGF0dGVybiA9IG5ldyBSZWdFeHAoJyguKylcXFxcLmJhaSQnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gYmFpUGF0dGVybi5leGVjKHMuYmxvYi5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIGJhbXNbbWF0Y2hbMV1dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYW1zW21hdGNoWzFdXS5pbmRleEJsb2IgPSBzLmJsb2I7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkSW5kaWNlcy5wdXNoKHNpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocy50aWVyX3R5cGUgPT09ICd0YWJpeC1pbmRleCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRiaVBhdHRlcm4gPSBuZXcgUmVnRXhwKCcoLispXFxcXC50YmkkJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHRiaVBhdHRlcm4uZXhlYyhzLmJsb2IubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0YWJpeGVzW21hdGNoWzFdXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFiaXhlc1ttYXRjaFsxXV0uaW5kZXhCbG9iID0gcy5ibG9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZEluZGljZXMucHVzaChzaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGJpID0gdXNlZEluZGljZXMubGVuZ3RoIC0gMTsgYmkgPj0gMDsgLS1iaSkge1xuICAgICAgICAgICAgICAgIG11bHRpcGxlU2V0LnNwbGljZSh1c2VkSW5kaWNlc1tiaV0sIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cGRhdGVNdWx0aXBsZVN0YXR1cygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlTXVsdGlwbGVTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVtb3ZlQ2hpbGRyZW4oc3RhYkhvbGRlcik7XG4gICAgICAgIHZhciBuZWVkc0luZGV4ID0gZmFsc2U7XG4gICAgICAgIHZhciBtdWx0VGFibGUgPSBtYWtlRWxlbWVudCgndGFibGUnLCBtdWx0aXBsZVNldFxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocykge3JldHVybiAhcy5oaWRkZW59KVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgdmFyIHJvdyA9IG1ha2VFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCd0ZCcsIHMubmFtZSB8fCBzLmJsb2IubmFtZSkpO1xuICAgICAgICAgICAgdmFyIHR5cGVDb250ZW50O1xuICAgICAgICAgICAgaWYgKHMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0eXBlQ29udGVudCA9IG1ha2VFbGVtZW50KCdzcGFuJywgJ0Vycm9yJywgbnVsbCwge2NvbG9yOiAncmVkJ30pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzLnRpZXJfdHlwZSkge1xuICAgICAgICAgICAgICAgIHR5cGVDb250ZW50ID0gcy5wYXlsb2FkIHx8IHMudGllcl90eXBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlQ29udGVudCA9IHRoaXNCLm1ha2VMb2FkZXIoMTYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2NzO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gJ3Vua25vd24nO1xuICAgICAgICAgICAgaWYgKHMudGllcl90eXBlID09ICdid2cnIHx8IHMudGllcl90eXBlID09ICdtZW1zdG9yZScpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICdva2F5JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocy50aWVyX3R5cGUgPT0gJ2JhbScpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHMuaW5kZXhCbG9iID8gJ29rYXknIDogJ25lZWRzLWluZGV4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocy50aWVyX3R5cGUgPT0gJ3RhYml4Jykge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gcy5pbmRleEJsb2IgPyAnb2theScgOiAnbmVlZHMtaW5kZXgnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT0gJ29rYXknKSB7XG4gICAgICAgICAgICAgICAgY2NzID0gbWFrZUVsZW1lbnQoJ3NlbGVjdCcsIG51bGwsIG51bGwsIHt3aWR0aDogJzE1MHB4J30pO1xuICAgICAgICAgICAgICAgIGNjcy5hcHBlbmRDaGlsZChtYWtlRWxlbWVudCgnb3B0aW9uJywgdGhpc0IubmFtZUZvckNvb3JkU3lzdGVtKHRoaXNCLmNvb3JkU3lzdGVtKSwge3ZhbHVlOiAnX19kZWZhdWx0X18nfSkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzQi5jaGFpbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY3NrIGluIHRoaXNCLmNoYWlucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzID0gdGhpc0IuY2hhaW5zW2Nza10uY29vcmRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2NzLmFwcGVuZENoaWxkKG1ha2VFbGVtZW50KCdvcHRpb24nLCB0aGlzQi5uYW1lRm9yQ29vcmRTeXN0ZW0oY3MpLCB7dmFsdWU6IGNza30pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjY3MudmFsdWUgPSBzLm1hcHBpbmcgfHwgJ19fZGVmYXVsdF9fJztcblxuICAgICAgICAgICAgICAgIGNjcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICAgICAgICBzLm1hcHBpbmcgPSBjY3MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHMpO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gJ25lZWRzLWluZGV4Jykge1xuICAgICAgICAgICAgICAgIGNjcyA9IG1ha2VFbGVtZW50KCdzcGFuJywgJ05lZWRzIGluZGV4Jywge30sIHtjb2xvcjogJ3JlZCd9KTtcbiAgICAgICAgICAgICAgICBuZWVkc0luZGV4ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1ha2VFbGVtZW50KCd0cicsIFttYWtlRWxlbWVudCgndGQnLCBzLm5hbWUgfHwgcy5ibG9iLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlRWxlbWVudCgndGQnLCB0eXBlQ29udGVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VFbGVtZW50KCd0ZCcsIGNjcyldKTtcblxuICAgICAgICB9KSwge2NsYXNzTmFtZTogJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJ30pO1xuICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKG11bHRUYWJsZSk7XG5cbiAgICAgICAgaWYgKG5lZWRzSW5kZXgpIHtcbiAgICAgICAgICAgIHN0YWJIb2xkZXIuYXBwZW5kQ2hpbGQobWFrZUVsZW1lbnQoJ3AnLCAnU29tZSBvZiB0aGVzZSBmaWxlcyBhcmUgbWlzc2luZyByZXF1aXJlZCBpbmRleCAoLmJhaSBvciAudGJpKSBmaWxlcy4gIEZvciBzZWN1cml0eSByZWFzb25zLCB3ZWIgYXBwbGljYXRpb25zIGxpa2UgRGFsbGlhbmNlIGNhbiBvbmx5IGFjY2VzcyBsb2NhbCBmaWxlcyB3aGljaCB5b3UgaGF2ZSBleHBsaWNpdHkgc2VsZWN0ZWQuICBQbGVhc2UgdXNlIHRoZSBmaWxlIGNob29zZXIgYmVsb3cgdG8gc2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBpbmRleCBmaWxlJykpO1xuICAgICAgICAgICAgc3RhYkhvbGRlci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnSW5kZXggZmlsZShzKTogJykpO1xuICAgICAgICAgICAgdmFyIGluZGV4RmlsZSA9IG1ha2VFbGVtZW50KCdpbnB1dCcsIG51bGwsIHt0eXBlOiAnZmlsZScsIG11bHRpcGxlOiAnbXVsdGlwbGUnfSk7XG4gICAgICAgICAgICBzdGFiSG9sZGVyLmFwcGVuZENoaWxkKGluZGV4RmlsZSk7XG4gICAgICAgICAgICBpbmRleEZpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZmlsZXNldCBjaGFuZ2VkJyk7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gaW5kZXhGaWxlLmZpbGVzIHx8IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBmaWxlTGlzdC5sZW5ndGg7ICsrZmkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmaWxlTGlzdFtmaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnMgPSB7YmxvYjogZiwgaGlkZGVuOiB0cnVlfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlU2V0LnB1c2gobnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmVNdWx0aXBsZShucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2FuQnV0dG9uID0gbWFrZUVsZW1lbnQoJ2J1dHRvbicsICdDYW5jZWwnLCB7Y2xhc3NOYW1lOiAnYnRuJ30pO1xuICAgIGNhbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY3VzdG9tTW9kZSA9PT0gJ2ZpbmFsaXplLWJpbicpXG4gICAgICAgICAgICBzd2l0Y2hUb0Jpbk1vZGUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3dpdGNoVG9DdXN0b21Nb2RlKCk7XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgdmFyIHJlZnJlc2hCdXR0b24gPSBtYWtlRWxlbWVudCgnYnV0dG9uJywgJ1JlZnJlc2gnLCB7Y2xhc3NOYW1lOiAnYnRuJ30pO1xuICAgIHJlZnJlc2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldikge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpc0IucXVlcnlSZWdpc3RyeShfX21hcHBpbmcpO1xuICAgIH0sIGZhbHNlKTtcbiAgICB0aGlzLm1ha2VUb29sdGlwKHJlZnJlc2hCdXR0b24sICdDbGljayB0byByZS1mZXRjaCBkYXRhIGZyb20gdGhlIERBUyByZWdpc3RyeScpO1xuXG4gICAgdmFyIGJ1dHRvbkhvbGRlciA9IG1ha2VFbGVtZW50KCdkaXYnLCBbYWRkQnV0dG9uLCAnICcsIGNhbkJ1dHRvbiwgJyAnLCByZWZyZXNoQnV0dG9uXSk7XG4gICAgYnV0dG9uSG9sZGVyLnN0eWxlLm1hcmdpbiA9ICcxMHB4JztcbiAgICBhc2Zvcm0uYXBwZW5kQ2hpbGQoYnV0dG9uSG9sZGVyKTtcblxuICAgIHBvcHVwLmFwcGVuZENoaWxkKGFzZm9ybSk7XG4gICAgbWFrZVN0YWIodGhpc0IuYXZhaWxhYmxlU291cmNlcyk7XG5cbiAgICB0aGlzLnNob3dUb29sUGFuZWwocG9wdXApO1xuICAgIHRoaXMuc2V0VWlNb2RlKCdhZGQnKTtcblxuICAgIGlmIChmaXJzdERlZkJ1dHRvbikge1xuICAgICAgICBhY3RpdmF0ZUJ1dHRvbihhZGRNb2RlQnV0dG9ucywgZmlyc3REZWZCdXR0b24pO1xuICAgICAgICBtYWtlU3RhYihuZXcgT2JzZXJ2ZWQoZmlyc3REZWZTb3VyY2VzKSk7XG4gICAgfVxufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIHRyaXguanM6IFVDU0Mtc3R5bGUgZnJlZSB0ZXh0IGluZGljZXNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBjb25uZWN0VHJpeChpeCwgaXh4LCBjYWxsYmFjaykge1xuICAgIGl4eC5mZXRjaEFzVGV4dChmdW5jdGlvbihpeHhEYXRhKSB7XG4gICAgICAgIGlmICghaXh4RGF0YSkgXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJDb3VsZG4ndCBmZXRjaCBpbmRleC1pbmRleFwiKTtcblxuICAgICAgICB2YXIgdG9rcyA9IGl4eERhdGEuc3BsaXQoLyguKykoWzAtOUEtRl17MTB9KVxcbi8pO1xuXG4gICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgIHZhciBvZmZzZXRzID0gW107XG4gICAgICAgIGZvciAodmFyIHRpID0gMTsgdGkgPCB0b2tzLmxlbmd0aDsgdGkgKz0gMykge1xuICAgICAgICAgICAga2V5cy5wdXNoKHRva3NbdGldKTtcbiAgICAgICAgICAgIG9mZnNldHMucHVzaChwYXJzZUludCh0b2tzW3RpKzFdLCAxNikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBUcml4SW5kZXgoa2V5cywgb2Zmc2V0cywgaXgpKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gVHJpeEluZGV4KGtleXMsIG9mZnNldHMsIGl4KSB7XG4gICAgdGhpcy5rZXlzID0ga2V5cztcbiAgICB0aGlzLm9mZnNldHMgPSBvZmZzZXRzO1xuICAgIHRoaXMuaXggPSBpeDtcbn1cblxuVHJpeEluZGV4LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbihxdWVyeSwgY2FsbGJhY2spIHtcbiAgICB2YXIgaXhzbGljZTtcblxuICAgIHZhciBxdGFnID0gKHF1ZXJ5ICsgJyAgICAgJykuc3Vic3RyaW5nKDAsNSkudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMua2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAocXRhZy5sb2NhbGVDb21wYXJlKHRoaXMua2V5c1tpXSkgPCAwKSB7XG4gICAgICAgICAgICBpeHNsaWNlID0gdGhpcy5peC5zbGljZSh0aGlzLm9mZnNldHNbaSAtIDFdLCB0aGlzLm9mZnNldHNbaV0gLSB0aGlzLm9mZnNldHNbaSAtIDFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpeHNsaWNlKSB7XG4gICAgICAgIGl4c2xpY2UgPSB0aGlzLml4LnNsaWNlKHRoaXMub2Zmc2V0c1t0aGlzLm9mZnNldHMubGVuZ3RoIC0gMV0pO1xuICAgIH1cblxuICAgIGl4c2xpY2UuZmV0Y2hBc1RleHQoZnVuY3Rpb24oaXN0KSB7XG4gICAgICAgIHZhciBsaW5lcyA9IGlzdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAodmFyIGxpID0gMDsgbGkgPCBsaW5lcy5sZW5ndGg7ICsrbGkpIHtcbiAgICAgICAgICAgIGlmIChsaW5lc1tsaV0uaW5kZXhPZihxdWVyeS50b0xvd2VyQ2FzZSgpICsgJyAnKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGxpbmVzW2xpXS5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfSk7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgY29ubmVjdFRyaXg6IGNvbm5lY3RUcml4XG4gICAgfTtcbn0iLCIvLyB0cmFuU01BUlQgcmVsYXRlZCB1dGlsc1xuXG4vKipcbiAqIERpc3BsYXkgZXJyb3IgYXMgcG9wdXBcbiAqIEBwYXJhbSB0aXRsZVxuICogQHBhcmFtIG1zZ1xuICovXG5mdW5jdGlvbiBkaXNwbGF5RXJyb3IgKHRpdGxlLCBtc2cpIHtcbiAgICBFeHQuTXNnLnNob3coXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIG1zZzogbXNnLFxuICAgICAgICAgICAgYnV0dG9uczogRXh0Lk1zZy5PSyxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgRXh0Lk1zZy5oaWRlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaWNvbjogRXh0Lk1lc3NhZ2VCb3guRVJST1JcbiAgICAgICAgfVxuICAgICk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBub2RlIGlzIGhpZ2ggZGltZW5zaW9uYWwgb3Igbm90XG4gKiBAcGFyYW0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSGlnaERpbWVuc2lvbmFsTm9kZSAobm9kZSkge1xuICAgIGlmIChub2RlLmF0dHJpYnV0ZXMudmlzdWFsYXR0cmlidXRlcy5pbmRleE9mKCdISUdIX0RJTUVOU0lPTkFMJykgIT0gLTEpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIHR3b0JpdC5qczogcGFja2VkLWJpbmFyeSByZWZlcmVuY2Ugc2VxdWVuY2VzXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgYmluID0gcmVxdWlyZSgnLi9iaW4nKTtcbiAgICB2YXIgcmVhZEludCA9IGJpbi5yZWFkSW50O1xuICAgIHZhciByZWFkSW50QkUgPSBiaW4ucmVhZEludEJFO1xuXG4gICAgdmFyIHNwYW5zID0gcmVxdWlyZSgnLi9zcGFucycpO1xuICAgIHZhciBSYW5nZSA9IHNwYW5zLlJhbmdlO1xuICAgIHZhciB1bmlvbiA9IHNwYW5zLnVuaW9uO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBzcGFucy5pbnRlcnNlY3Rpb247XG59XG5cbnZhciBUV09CSVRfTUFHSUMgPSAweDFhNDEyNzQzO1xudmFyIFRXT0JJVF9NQUdJQ19CRSA9IDB4NDMyNzQxMWE7XG5cbmZ1bmN0aW9uIFR3b0JpdEZpbGUoKSB7XG59XG5cbmZ1bmN0aW9uIG1ha2VUd29CaXQoZmV0Y2hhYmxlLCBjbnQpIHtcbiAgICB2YXIgdGIgPSBuZXcgVHdvQml0RmlsZSgpO1xuICAgIHRiLmRhdGEgPSBmZXRjaGFibGU7XG4gICAgdmFyIGhlYWRlckJsb2NrU2l6ZSA9IDEyNTAwO1xuXG4gICAgdGIuZGF0YS5zbGljZSgwLCBoZWFkZXJCbG9ja1NpemUpLmZldGNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICByZXR1cm4gY250KG51bGwsIFwiQ291bGRuJ3QgYWNjZXNzIGRhdGFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocik7XG4gICAgICAgIHZhciBtYWdpYyA9IHJlYWRJbnQoYmEsIDApO1xuICAgICAgICBpZiAobWFnaWMgPT0gVFdPQklUX01BR0lDKSB7XG4gICAgICAgICAgICB0Yi5yZWFkSW50ID0gcmVhZEludDtcbiAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSBUV09CSVRfTUFHSUNfQkUpIHtcbiAgICAgICAgICAgIHRiLnJlYWRJbnQgPSByZWFkSW50QkU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY250KG51bGwsIFwiTm90IGEgLjJiaXQgZmlsZSwgbWFnaWM9MHhcIiArIG1hZ2ljLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmVyc2lvbiA9IHRiLnJlYWRJbnQoYmEsIDQpO1xuICAgICAgICBpZiAodmVyc2lvbiAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY250KG51bGwsICdVbnN1cHBvcnRlZCB2ZXJzaW9uICcgKyB2ZXJzaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRiLnNlcUNvdW50ID0gdGIucmVhZEludChiYSwgOCk7XG4gICAgICAgIHRiLnNlcURpY3QgPSB7fTtcblxuICAgICAgICB2YXIgcCA9IDE2LCBpPTA7XG4gICAgICAgIHZhciBvID0gMDsgIC8vIE9mZnNldCBvZiB0aGUgY3VycmVudCBibG9jayBpZiB3ZSBuZWVkIHRvIGZldGNoIG11bHRpcGxlIGhlYWRlciBibG9ja3MuXG5cbiAgICAgICAgdmFyIHBhcnNlU2VxSW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0Yi5zZXFDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciBucyA9IGJhW3BdO1xuICAgICAgICAgICAgICAgIGlmIChwICsgbnMgKyA2ID49IGJhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGIuZGF0YS5zbGljZShvICsgcCwgaGVhZGVyQmxvY2tTaXplKS5mZXRjaChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbyArPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYSA9IG5ldyBVaW50OEFycmF5KHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTZXFJbmZvKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICsrcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPD0gbnM7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJhW3ArK10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0Yi5yZWFkSW50KGJhLCBwKTtcbiAgICAgICAgICAgICAgICAgICAgcCArPSA0O1xuICAgICAgICAgICAgICAgICAgICB0Yi5zZXFEaWN0W25hbWVdID0gbmV3IFR3b0JpdFNlcSh0Yiwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbnQodGIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VTZXFJbmZvKCk7XG4gICAgICAgIFxuICAgIH0pO1xufVxuXG5Ud29CaXRGaWxlLnByb3RvdHlwZS5nZXRTZXEgPSBmdW5jdGlvbihjaHIpIHtcbiAgICB2YXIgc2VxID0gdGhpcy5zZXFEaWN0W2Nocl07XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgICAgc2VxID0gdGhpcy5zZXFEaWN0WydjaHInICsgY2hyXTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcTtcbn1cblxuVHdvQml0RmlsZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBjbnQpIHtcbiAgICB2YXIgc2VxID0gdGhpcy5nZXRTZXEoY2hyKTtcbiAgICBpZiAoIXNlcSkge1xuICAgICAgICByZXR1cm4gY250KG51bGwsIFwiQ291bGRuJ3QgZmluZCBcIiArIGNocik7XG4gICAgfSBlbHNlIGlmIChtYXggPD0gbWluKSB7XG4gICAgICAgIHJldHVybiBjbnQoJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcS5mZXRjaChtaW4sIG1heCwgY250KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIFR3b0JpdFNlcSh0YmYsIG9mZnNldCkge1xuICAgIHRoaXMudGJmID0gdGJmO1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xufVxuXG5Ud29CaXRTZXEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjbnQpIHtcbiAgICBpZiAodGhpcy5zZXFPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIGNudCgpO1xuICAgIH1cblxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpc0IudGJmLmRhdGEuc2xpY2UodGhpc0Iub2Zmc2V0LCA4KS5mZXRjaChmdW5jdGlvbihyMSkge1xuICAgICAgICBpZiAoIXIxKSB7XG4gICAgICAgICAgICByZXR1cm4gY250KCdGZXRjaCBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShyMSk7XG4gICAgICAgIHRoaXNCLl9sZW5ndGggPSB0aGlzQi50YmYucmVhZEludChiYSwgMCk7XG4gICAgICAgIHRoaXNCLm5CbG9ja0NudCA9IHRoaXNCLnRiZi5yZWFkSW50KGJhLCA0KTtcbiAgICAgICAgdGhpc0IudGJmLmRhdGEuc2xpY2UodGhpc0Iub2Zmc2V0ICsgOCwgdGhpc0IubkJsb2NrQ250KjggKyA0KS5mZXRjaChmdW5jdGlvbihyMikge1xuICAgICAgICAgICAgaWYgKCFyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbnQoJ0ZldGNoIGZhaWxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocjIpO1xuICAgICAgICAgICAgdmFyIG5icyA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IHRoaXNCLm5CbG9ja0NudDsgKytiKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5iTWluID0gdGhpc0IudGJmLnJlYWRJbnQoYmEsIGIgKiA0KTtcbiAgICAgICAgICAgICAgICB2YXIgbmJMZW4gPSB0aGlzQi50YmYucmVhZEludChiYSwgKGIgKyB0aGlzQi5uQmxvY2tDbnQpICogNCk7XG4gICAgICAgICAgICAgICAgdmFyIG5iID0gbmV3IFJhbmdlKG5iTWluLCBuYk1pbiArIG5iTGVuIC0gMSk7XG4gICAgICAgICAgICAgICAgaWYgKCFuYnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmJzID0gbmI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmJzID0gdW5pb24obmJzLCBuYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc0IubkJsb2NrcyA9IG5icztcbiAgICAgICAgICAgIHRoaXNCLm1CbG9ja0NudCA9IHRoaXNCLnRiZi5yZWFkSW50KGJhLCB0aGlzQi5uQmxvY2tDbnQqOCk7XG4gICAgICAgICAgICB0aGlzQi5zZXFMZW5ndGggPSAoKHRoaXNCLl9sZW5ndGggKyAzKS80KXwwO1xuICAgICAgICAgICAgdGhpc0Iuc2VxT2Zmc2V0ID0gdGhpc0Iub2Zmc2V0ICsgMTYgKyAoKHRoaXNCLm5CbG9ja0NudCArIHRoaXNCLm1CbG9ja0NudCkgKiA4KTtcbiAgICAgICAgICAgIHJldHVybiBjbnQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbnZhciBUV09CSVRfVEFCTEUgPSBbJ1QnLCAnQycsICdBJywgJ0cnXTtcblxuVHdvQml0U2VxLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKG1pbiwgbWF4LCBjbnQpIHtcbiAgICAtLW1pbjsgLS1tYXg7ICAgICAgIC8vIFN3aXRjaCB0byB6ZXJvLWJhc2VkLlxuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgdGhpcy5pbml0KGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNudChudWxsLCBlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmV0Y2hNaW4gPSBtaW4gPj4gMjtcbiAgICAgICAgdmFyIGZldGNoTWF4ID0gbWF4ICsgMyA+PiAyO1xuICAgICAgICBpZiAoZmV0Y2hNaW4gPCAwIHx8IGZldGNoTWF4ID4gdGhpc0Iuc2VxTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY250KCdDb29yZGluYXRlcyBvdXQgb2YgYm91bmRzOiAnICsgbWluICsgJzonICsgbWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNCLnRiZi5kYXRhLnNsaWNlKHRoaXNCLnNlcU9mZnNldCArIGZldGNoTWluLCBmZXRjaE1heCAtIGZldGNoTWluKS5mZXRjaChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICBpZiAociA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNudCgnU2VxRmV0Y2ggZmFpbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2VxRGF0YSA9IG5ldyBVaW50OEFycmF5KHIpO1xuXG4gICAgICAgICAgICB2YXIgblNwYW5zID0gW107XG4gICAgICAgICAgICBpZiAodGhpc0IubkJsb2Nrcykge1xuICAgICAgICAgICAgICAgIHZhciBpbnRyID0gaW50ZXJzZWN0aW9uKG5ldyBSYW5nZShtaW4sIG1heCksIHRoaXNCLm5CbG9ja3MpO1xuICAgICAgICAgICAgICAgIGlmIChpbnRyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5TcGFucyA9IGludHIucmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2Vxc3RyID0gJyc7XG4gICAgICAgICAgICB2YXIgcHRyID0gbWluO1xuICAgICAgICAgICAgZnVuY3Rpb24gZmlsbFNlcShmc20pIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAocHRyIDw9IGZzbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmIgPSAocHRyID4+IDIpIC0gZmV0Y2hNaW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBuaSA9IHB0ciAmIDB4MztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ2ID0gc2VxRGF0YVtiYl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IChidiA+PiA2KSAmIDB4MztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuaSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gKGJ2ID4+IDQpICYgMHgzO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5pID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAoYnYgPj4gMikgJiAweDM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gKGJ2KSAmIDB4MztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXFzdHIgKz0gVFdPQklUX1RBQkxFW25dO1xuICAgICAgICAgICAgICAgICAgICArK3B0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgblNwYW5zLmxlbmd0aDsgKytiKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5iID0gblNwYW5zW2JdO1xuICAgICAgICAgICAgICAgIGlmIChwdHIgPiBuYi5taW4oKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnTiBtaXNtYXRjaC4uLic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwdHIgPCBuYi5taW4oKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsU2VxKG5iLm1pbigpIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChwdHIgPD0gbmIubWF4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vxc3RyICs9ICdOJztcbiAgICAgICAgICAgICAgICAgICAgKytwdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB0ciA8PSBtYXgpIHtcbiAgICAgICAgICAgICAgICBmaWxsU2VxKG1heCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjbnQoc2Vxc3RyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cblR3b0JpdFNlcS5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24oY250KSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmluaXQoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY250KG51bGwsIGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjbnQodGhpc0IuX2xlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBtYWtlVHdvQml0OiBtYWtlVHdvQml0XG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTBcbi8vXG4vLyB1dGlscy5qczogb2Rkcywgc29kcywgYW5kIGVuZHMuXG4vL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpO1xuICAgIHZhciBiNjRfc2hhMSA9IHNoYTEuYjY0X3NoYTE7XG59XG5cbnZhciBOVU1fUkVHRVhQID0gbmV3IFJlZ0V4cCgnWzAtOV0rJyk7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvTnVtYmVyc0FycmF5KHN0cikge1xuICAgIHZhciBudW1zID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIG07XG4gICAgd2hpbGUgKG0gPSBOVU1fUkVHRVhQLmV4ZWMoc3RyKSkge1xuICAgICAgICBudW1zLnB1c2gobVswXSk7XG4gICAgICAgIHN0cj1zdHIuc3Vic3RyaW5nKG0uaW5kZXggKyAobVswXS5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bXM7XG59XG5cbnZhciBTVFJJQ1RfTlVNX1JFR0VYUCA9IG5ldyBSZWdFeHAoJ15bMC05XSskJyk7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvSW50KHN0cikge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoJywnLCAnZycpLCAnJyk7XG4gICAgaWYgKCFTVFJJQ1RfTlVNX1JFR0VYUC50ZXN0KHN0cikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzdHJ8MDtcbn1cblxuZnVuY3Rpb24gcHVzaG5ldyhhLCB2KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldID09IHYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhLnB1c2godik7XG59XG5cbmZ1bmN0aW9uIHB1c2hvKG9iaiwgaywgdikge1xuICAgIGlmIChvYmpba10pIHtcbiAgICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tdID0gW3ZdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHVzaG5ld28ob2JqLCBrLCB2KSB7XG4gICAgdmFyIGEgPSBvYmpba107XG4gICAgaWYgKGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7ICAgIC8vIGluZGV4T2YgcmVxdWlyZXMgSlMxNiA6LSguXG4gICAgICAgICAgICBpZiAoYVtpXSA9PSB2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGEucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba10gPSBbdl07XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHBpY2soYSwgYiwgYywgZClcbntcbiAgICBpZiAoYSkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfSBlbHNlIGlmIChjKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH0gZWxzZSBpZiAoZCkge1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHB1c2huZXcobCwgbylcbntcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGwubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGxbaV0gPT0gbykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGwucHVzaChvKTtcbn1cblxuXG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZihhLCB4KSB7XG4gICAgaWYgKCFhKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFbaV0gPT09IHgpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gYXJyYXlSZW1vdmUoYSwgeCkge1xuICAgIHZhciBpID0gYXJyYXlJbmRleE9mKGEsIHgpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgICAgYS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vXG4vLyBET00gdXRpbGl0aWVzXG4vL1xuXG5cbmZ1bmN0aW9uIG1ha2VFbGVtZW50KHRhZywgY2hpbGRyZW4sIGF0dHJpYnMsIHN0eWxlcylcbntcbiAgICB2YXIgZWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBpZiAoISAoY2hpbGRyZW4gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlLmFwcGVuZENoaWxkKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgIGZvciAodmFyIGwgaW4gYXR0cmlicykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbGVbbF0gPSBhdHRyaWJzW2xdO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzZXR0aW5nICcgKyBsKTtcbiAgICAgICAgICAgICAgICB0aHJvdyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgIGZvciAodmFyIGwgaW4gc3R5bGVzKSB7XG4gICAgICAgICAgICBlbGUuc3R5bGVbbF0gPSBzdHlsZXNbbF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZTtcbn1cblxuZnVuY3Rpb24gbWFrZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZywgY2hpbGRyZW4sIGF0dHJpYnMpXG57XG4gICAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZyk7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGlmICghIChjaGlsZHJlbiBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGMgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGUuYXBwZW5kQ2hpbGQoYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2V0QXR0cnMoZWxlLCBhdHRyaWJzKTtcbiAgICByZXR1cm4gZWxlO1xufVxuXG52YXIgYXR0cl9uYW1lX2NhY2hlID0ge307XG5cbmZ1bmN0aW9uIHNldEF0dHIobm9kZSwga2V5LCB2YWx1ZSlcbntcbiAgICB2YXIgYXR0ciA9IGF0dHJfbmFtZV9jYWNoZVtrZXldO1xuICAgIGlmICghYXR0cikge1xuICAgICAgICB2YXIgX2F0dHIgPSAnJztcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBrZXkubGVuZ3RoOyArK2MpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGtleS5zdWJzdHJpbmcoYywgYysxKTtcbiAgICAgICAgICAgIHZhciBsY2MgPSBjYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKGxjYyAhPSBjYykge1xuICAgICAgICAgICAgICAgIF9hdHRyID0gX2F0dHIgKyAnLScgKyBsY2M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9hdHRyID0gX2F0dHIgKyBjYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyX25hbWVfY2FjaGVba2V5XSA9IF9hdHRyO1xuICAgICAgICBhdHRyID0gX2F0dHI7XG4gICAgfVxuICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cnMobm9kZSwgYXR0cmlicylcbntcbiAgICBpZiAoYXR0cmlicykge1xuICAgICAgICBmb3IgKHZhciBsIGluIGF0dHJpYnMpIHtcbiAgICAgICAgICAgIHNldEF0dHIobm9kZSwgbCwgYXR0cmlic1tsXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZHJlbihub2RlKVxue1xuICAgIGlmICghbm9kZSB8fCAhbm9kZS5jaGlsZE5vZGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aGlsZSAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbn1cblxuXG5cbi8vXG4vLyBXQVJOSU5HOiBub3QgZm9yIGdlbmVyYWwgdXNlIVxuLy9cblxuZnVuY3Rpb24gbWluaUpTT05pZnkobywgZXhjKSB7XG4gICAgaWYgKHR5cGVvZiBvID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfSBlbHNlIGlmIChvID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBcIidcIiArIG8gKyBcIidcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgbztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvID09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gXCJcIiArIG87XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbyA9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB2YXIgcyA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG8ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBzID0gKHMgPT0gbnVsbCA/ICcnIDogKHMgKyAnLCAnKSkgKyBtaW5pSlNPTmlmeShvW2ldLCBleGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdbJyArIChzP3M6JycpICsgJ10nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhjID0gZXhjIHx8IHt9O1xuICAgICAgICAgICAgdmFyIHMgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4Y1trXSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGsgIT0gdW5kZWZpbmVkICYmIHR5cGVvZihvW2tdKSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSAocyA9PSBudWxsID8gJycgOiAocyArICcsICcpKSArIGsgKyAnOiAnICsgbWluaUpTT05pZnkob1trXSwgZXhjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ3snICsgKHM/czonJykgKyAnfSc7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBvKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KG8pIHtcbiAgICB2YXIgbiA9IHt9O1xuICAgIGZvciAodmFyIGsgaW4gbykge1xuICAgICAgICBuW2tdID0gb1trXTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIE9ic2VydmVkKHgpIHtcbiAgICB0aGlzLnZhbHVlID0geDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xufVxuXG5PYnNlcnZlZC5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihmKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChmKTtcbn1cblxuT2JzZXJ2ZWQucHJvdG90eXBlLmFkZExpc3RlbmVyQW5kRmlyZSA9IGZ1bmN0aW9uKGYpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGYpO1xuICAgIGYodGhpcy52YWx1ZSk7XG59XG5cbk9ic2VydmVkLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGYpIHtcbiAgICBhcnJheVJlbW92ZSh0aGlzLmxpc3RlbmVycywgZik7XG59XG5cbk9ic2VydmVkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbn1cblxuT2JzZXJ2ZWQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHgpIHtcbiAgICB0aGlzLnZhbHVlID0geDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2ldKHgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gQXdhaXRlZCgpIHtcbiAgICB0aGlzLnF1ZXVlID0gW107XG59XG5cbkF3YWl0ZWQucHJvdG90eXBlLnByb3ZpZGUgPSBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHRoaXMucmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgXCJSZXNvdXJjZSBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkLlwiO1xuICAgIH1cblxuICAgIHRoaXMucmVzID0geDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5xdWV1ZVtpXSh4KTtcbiAgICB9XG4gICAgdGhpcy5xdWV1ZSA9IG51bGw7ICAgLy8gYXZvaWQgbGVha2luZyBjbG9zdXJlcy5cbn1cblxuQXdhaXRlZC5wcm90b3R5cGUuYXdhaXQgPSBmdW5jdGlvbihmKSB7XG4gICAgaWYgKHRoaXMucmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZih0aGlzLnJlcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1ZXVlLnB1c2goZik7XG4gICAgfVxufVxuXG52YXIgX19kYWxsaWFuY2Vfc2FsdFNlZWQgPSAwO1xuXG5mdW5jdGlvbiBzYWx0VVJMKHVybCkge1xuICAgIHJldHVybiB1cmwgKyAnP3NhbHQ9JyArIGI2NF9zaGExKCcnICsgRGF0ZS5ub3coKSArICcsJyArICgrK19fZGFsbGlhbmNlX3NhbHRTZWVkKSk7XG59XG5cbmZ1bmN0aW9uIHRleHRYSFIodXJsLCBjYWxsYmFjaywgb3B0cykge1xuICAgIGlmIChvcHRzLnNhbHQpIFxuICAgICAgICB1cmwgPSBzYWx0VVJMKHVybCk7XG5cbiAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIFx0aWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHtcbiAgICBcdCAgICBpZiAocmVxLnN0YXR1cyA+PSAzMDApIHtcbiAgICBcdFx0ICAgIGNhbGxiYWNrKG51bGwsICdFcnJvciBjb2RlICcgKyByZXEuc3RhdHVzKTtcbiAgICBcdCAgICB9IGVsc2Uge1xuICAgIFx0XHQgICAgY2FsbGJhY2socmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgXHQgICAgfVxuICAgIFx0fVxuICAgIH07XG4gICAgXG4gICAgcmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxLnJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcblxuICAgIGlmIChvcHRzICYmIG9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgcmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuICAgIHJlcS5zZW5kKCcnKTtcbn1cblxuZnVuY3Rpb24gcmVsYXRpdmVVUkwoYmFzZSwgcmVsKSB7XG4gICAgLy8gRklYTUUgcXVpdGUgbmFpdmUgLS0gZ29vZCBlbm91Z2ggZm9yIHRyYWNraHVicz9cblxuICAgIGlmIChyZWwuaW5kZXhPZignaHR0cDonKSA9PSAwIHx8IHJlbC5pbmRleE9mKCdodHRwczonKSA9PSAwKSB7XG4gICAgICAgIHJldHVybiByZWw7XG4gICAgfVxuXG4gICAgdmFyIGxpID0gYmFzZS5sYXN0SW5kZXhPZignLycpO1xuICAgIGlmIChsaSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBiYXNlLnN1YnN0cigwLCBsaSArIDEpICsgcmVsO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZWw7XG4gICAgfVxufVxuXG4vL1xuLy8gTWlzc2luZyBBUElzXG4vLyBcblxuaWYgKCEoJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGUpKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrLywgJycpLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgIH07XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgdGV4dFhIUjogdGV4dFhIUixcbiAgICAgICAgcmVsYXRpdmVVUkw6IHJlbGF0aXZlVVJMLFxuICAgICAgICBzaGFsbG93Q29weTogc2hhbGxvd0NvcHksXG4gICAgICAgIHB1c2hvOiBwdXNobyxcbiAgICAgICAgcHVzaG5ldzogcHVzaG5ldyxcbiAgICAgICAgcHVzaG5ld286IHB1c2huZXdvLFxuICAgICAgICBhcnJheUluZGV4T2Y6IGFycmF5SW5kZXhPZixcbiAgICAgICAgcGljazogcGljayxcblxuICAgICAgICBtYWtlRWxlbWVudDogbWFrZUVsZW1lbnQsXG4gICAgICAgIG1ha2VFbGVtZW50TlM6IG1ha2VFbGVtZW50TlMsXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuOiByZW1vdmVDaGlsZHJlbixcblxuICAgICAgICBtaW5pSlNPTmlmeTogbWluaUpTT05pZnksXG5cbiAgICAgICAgT2JzZXJ2ZWQ6IE9ic2VydmVkLFxuICAgICAgICBBd2FpdGVkOiBBd2FpdGVkXG4gICAgfVxufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxNFxuLy9cbi8vIHZjZi5qc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHNhID0gcmVxdWlyZSgnLi9zb3VyY2VhZGFwdGVycycpO1xuICAgIHZhciBkYWxsaWFuY2VfcmVnaXN0ZXJQYXJzZXJGYWN0b3J5ID0gc2EucmVnaXN0ZXJQYXJzZXJGYWN0b3J5O1xuXG4gICAgdmFyIGRhcyA9IHJlcXVpcmUoJy4vZGFzJyk7XG4gICAgdmFyIERBU1N0eWxlc2hlZXQgPSBkYXMuREFTU3R5bGVzaGVldDtcbiAgICB2YXIgREFTU3R5bGUgPSBkYXMuREFTU3R5bGU7XG4gICAgdmFyIERBU0ZlYXR1cmUgPSBkYXMuREFTRmVhdHVyZTtcbiAgICB2YXIgREFTR3JvdXAgPSBkYXMuREFTR3JvdXA7XG59XG5cbmZ1bmN0aW9uIFZDRlBhcnNlcigpIHtcbiAgICB0aGlzLmluZm8gPSBbXTtcbn1cblxudmFyIFZDRl9JTkZPX1JFID0gLyhbXjs9XSspKD0oW147XSspKT87Py87XG52YXIgVkNGX0lORk9fSEVBREVSID0gLyMjSU5GTz08KFtePl0rKT4vO1xudmFyIFZDRl9JTkZPX0hFQURFUl9UT0sgPSAvKFteLD1dKyk9KFteLF0rfFwiW15cIl0rXCIpLD8vXG5cblZDRlBhcnNlci5wcm90b3R5cGUuY3JlYXRlU2Vzc2lvbiA9IGZ1bmN0aW9uKHNpbmspIHtcbiAgICByZXR1cm4gbmV3IFZDRlBhcnNlU2Vzc2lvbih0aGlzLCBzaW5rKTtcbn1cblxuZnVuY3Rpb24gVkNGUGFyc2VTZXNzaW9uKHBhcnNlciwgc2luaykge1xuICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIHRoaXMuc2luayAgPSBzaW5rO1xufVxuXG5WQ0ZQYXJzZVNlc3Npb24ucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24obGluZSkge1xuICAgIGlmIChsaW5lLmxlbmd0aCA9PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGxpbmVbMF0gPT0gJyMnKSB7XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCA+IDEgJiYgbGluZVsxXSA9PSAnIycpIHtcbiAgICAgICAgICAgIHZhciBtID0gVkNGX0lORk9fSEVBREVSLmV4ZWMobGluZSk7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tzID0gbVsxXS5zcGxpdChWQ0ZfSU5GT19IRUFERVJfVE9LKTtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBudWxsLCBkZXNjID0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0aSA9IDA7IHRpIDwgdG9rcy5sZW5ndGggLSAxOyB0aSArPSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0b2tzW3RpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRva3NbdGkgKyAyXS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ0lEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ0Rlc2NyaXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpZCAmJiBkZXNjKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VyLmluZm8ucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogZGVzY31cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdG9rcyA9IGxpbmUuc3BsaXQoJ1xcdCcpO1xuICAgIHZhciBmID0gbmV3IERBU0ZlYXR1cmUoKTtcbiAgICBmLnNlZ21lbnQgPSB0b2tzWzBdO1xuICAgIGYuaWQgPSB0b2tzWzJdXG4gICAgZi5yZWZBbGxlbGUgPSB0b2tzWzNdO1xuICAgIGYuYWx0QWxsZWxlcyA9IHRva3NbNF0uc3BsaXQoJywnKTtcbiAgICBmLm1pbiA9IHBhcnNlSW50KHRva3NbMV0pO1xuICAgIGYubWF4ID0gZi5taW4gKyBmLnJlZkFsbGVsZS5sZW5ndGggLSAxO1xuXG4gICAgdmFyIGluZm9Ub2tzID0gdG9rc1s3XS5zcGxpdChWQ0ZfSU5GT19SRSk7XG4gICAgZi5pbmZvID0ge307XG4gICAgZm9yICh2YXIgdGkgPSAwOyB0aSA8IGluZm9Ub2tzLmxlbmd0aDsgdGkgKz0gNCkge1xuICAgICAgICBmLmluZm9baW5mb1Rva3NbdGkgKyAxXV0gPSBpbmZvVG9rc1t0aSArIDNdO1xuICAgIH1cblxuXG4gICAgdmFyIGFsdCA9IGYuYWx0QWxsZWxlc1swXTtcbiAgICB2YXIgcmVmID0gZi5yZWZBbGxlbGU7XG4gICAgaWYgKGFsdC5sZW5ndGggPiByZWYubGVuZ3RoKSB7XG4gICAgICAgIGYudHlwZSA9IFwiaW5zZXJ0aW9uXCI7XG4gICAgICAgIGlmIChhbHQuaW5kZXhPZihyZWYpID09IDApIHtcbiAgICAgICAgICAgIGYuaW5zZXJ0aW9uID0gYWx0LnN1YnN0cihyZWYubGVuZ3RoKTtcbiAgICAgICAgICAgIGYubWluICs9IHJlZi5sZW5ndGg7XG4gICAgICAgICAgICBmLm1heCA9IGYubWluIC0gMTsgLy8gRWZmZWN0aXZlbHkgXCJiZXR3ZWVuXCIgYmFzZXMuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmLmluc2VydGlvbiA9IGFsdDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWx0Lmxlbmd0aCA8IHJlZi5sZW5ndGgpIHtcbiAgICAgICAgZi50eXBlID0gXCJkZWxldGlvblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGYudHlwZSA9ICdzdWJzdGl0dXRpb24nO1xuICAgIH1cblxuICAgIHRoaXMuc2luayhmKTtcbn1cblxuVkNGUGFyc2VTZXNzaW9uLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKCkge307XG5cblZDRlBhcnNlci5wcm90b3R5cGUuZ2V0U3R5bGVTaGVldCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBuZXcgREFTU3R5bGVzaGVldCgpO1xuXG4gICAge1xuICAgICAgICB2YXIgdmFyU3R5bGUgPSBuZXcgREFTU3R5bGUoKTtcbiAgICAgICAgdmFyU3R5bGUuZ2x5cGggPSAnX19JTlNFUlRJT04nO1xuICAgICAgICB2YXJTdHlsZS5CVU1QID0gJ3llcyc7XG4gICAgICAgIHZhclN0eWxlLkxBQkVMID0gJ25vJztcbiAgICAgICAgdmFyU3R5bGUuRkdDT0xPUiA9ICdyZ2IoNTAsODAsMjU1KSc7XG4gICAgICAgIHZhclN0eWxlLkJHQ09MT1IgPSAnIzg4ODg4OCc7XG4gICAgICAgIHZhclN0eWxlLlNUUk9LRUNPTE9SID0gJ2JsYWNrJztcbiAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoe3R5cGU6ICdpbnNlcnRpb24nfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdQTElNU09MTCc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ3JnYigyNTUsIDYwLCA2MCknO1xuICAgICAgICB2YXJTdHlsZS5CR0NPTE9SID0gJyM4ODg4ODgnO1xuICAgICAgICB2YXJTdHlsZS5TVFJPS0VDT0xPUiA9ICdibGFjayc7XG4gICAgICAgIHN0eWxlc2hlZXQucHVzaFN0eWxlKHt0eXBlOiAnZGVsZXRpb24nfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIHZhciB2YXJTdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICB2YXJTdHlsZS5nbHlwaCA9ICdQTElNU09MTCc7XG4gICAgICAgIHZhclN0eWxlLkJVTVAgPSAneWVzJztcbiAgICAgICAgdmFyU3R5bGUuTEFCRUwgPSAnbm8nO1xuICAgICAgICB2YXJTdHlsZS5GR0NPTE9SID0gJ3JnYig1MCw4MCwyNTUpJztcbiAgICAgICAgdmFyU3R5bGUuQkdDT0xPUiA9ICcjODg4ODg4JztcbiAgICAgICAgdmFyU3R5bGUuU1RST0tFQ09MT1IgPSAnYmxhY2snO1xuICAgICAgICBzdHlsZXNoZWV0LnB1c2hTdHlsZSh7dHlwZTogJ2RlZmF1bHQnfSwgbnVsbCwgdmFyU3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsYmFjayhzdHlsZXNoZWV0KTtcbn1cblxuVkNGUGFyc2VyLnByb3RvdHlwZS5nZXREZWZhdWx0RklQcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBmaXAgPSBmdW5jdGlvbihmZWF0dXJlLCBmZWF0dXJlSW5mbykge1xuICAgICAgICBmZWF0dXJlSW5mby5hZGQoXCJSZWYuIGFsbGVsZVwiLCBmZWF0dXJlLnJlZkFsbGVsZSk7XG4gICAgICAgIGZlYXR1cmVJbmZvLmFkZChcIkFsdC4gYWxsZWxlc1wiLCBmZWF0dXJlLmFsdEFsbGVsZXMuam9pbignLCcpKTtcblxuICAgICAgICBpZiAoZmVhdHVyZS5pbmZvKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc2VsZi5pbmZvLmxlbmd0aDsgKytpaSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmZvID0gc2VsZi5pbmZvW2lpXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gZmVhdHVyZS5pbmZvW2luZm8uaWRdO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlSW5mby5hZGQoaW5mby5kZXNjLCB2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY2FsbGJhY2soZmlwKTtcbn1cblxuZGFsbGlhbmNlX3JlZ2lzdGVyUGFyc2VyRmFjdG9yeSgndmNmJywgZnVuY3Rpb24oKSB7cmV0dXJuIG5ldyBWQ0ZQYXJzZXIoKX0pO1xuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIHZlcnNpb24uanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgVkVSU0lPTiA9IHtcbiAgICBDT05GSUc6IDUsXG4gICAgTUFKT1I6ICAwLFxuICAgIE1JTk9SOiAgMTIsXG4gICAgTUlDUk86ICAxLFxuICAgIFBBVENIOiAgJycsXG4gICAgQlJBTkNIOiAnJ1xufVxuXG5WRVJTSU9OLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZzID0gJycgKyB0aGlzLk1BSk9SICsgJy4nICsgdGhpcy5NSU5PUiArICcuJyArIHRoaXMuTUlDUk87XG4gICAgaWYgKHRoaXMuUEFUQ0gpIHtcbiAgICAgICAgdnMgPSB2cyArIHRoaXMuUEFUQ0g7XG4gICAgfVxuICAgIGlmICh0aGlzLkJSQU5DSCAmJiB0aGlzLkJSQU5DSCAhPSAnJykge1xuICAgICAgICB2cyA9IHZzICsgJy0nICsgdGhpcy5CUkFOQ0g7XG4gICAgfVxuICAgIHJldHVybiB2cztcbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gVkVSU0lPTjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIFByb21pc2UgPSByZXF1aXJlKFwiLi9wcm9taXNlL3Byb21pc2VcIikuUHJvbWlzZTtcbnZhciBwb2x5ZmlsbCA9IHJlcXVpcmUoXCIuL3Byb21pc2UvcG9seWZpbGxcIikucG9seWZpbGw7XG5leHBvcnRzLlByb21pc2UgPSBQcm9taXNlO1xuZXhwb3J0cy5wb2x5ZmlsbCA9IHBvbHlmaWxsOyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIHRvU3RyaW5nICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZShcIi4vdXRpbHNcIikuaXNBcnJheTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZShcIi4vdXRpbHNcIikuaXNGdW5jdGlvbjtcblxuLyoqXG4gIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIHRoZSBnaXZlbiBwcm9taXNlcyBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuIFRoZSByZXR1cm4gcHJvbWlzZVxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSB0aGF0IGdpdmVzIGFsbCB0aGUgdmFsdWVzIGluIHRoZSBvcmRlciB0aGV5IHdlcmVcbiAgcGFzc2VkIGluIHRoZSBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50LlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICB2YXIgcHJvbWlzZTEgPSBSU1ZQLnJlc29sdmUoMSk7XG4gIHZhciBwcm9taXNlMiA9IFJTVlAucmVzb2x2ZSgyKTtcbiAgdmFyIHByb21pc2UzID0gUlNWUC5yZXNvbHZlKDMpO1xuICB2YXIgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBSU1ZQLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYFJTVlAuYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIHZhciBwcm9taXNlMSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgdmFyIHByb21pc2UyID0gUlNWUC5yZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIHZhciBwcm9taXNlMyA9IFJTVlAucmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICB2YXIgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBSU1ZQLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWxcbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiovXG5mdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIFByb21pc2UgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShwcm9taXNlcykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIGFsbC4nKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdLCByZW1haW5pbmcgPSBwcm9taXNlcy5sZW5ndGgsXG4gICAgcHJvbWlzZTtcblxuICAgIGlmIChyZW1haW5pbmcgPT09IDApIHtcbiAgICAgIHJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVyKGluZGV4KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZUFsbChpbmRleCwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlQWxsKGluZGV4LCB2YWx1ZSkge1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgIGlmICgtLXJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvbWlzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlc1tpXTtcblxuICAgICAgaWYgKHByb21pc2UgJiYgaXNGdW5jdGlvbihwcm9taXNlLnRoZW4pKSB7XG4gICAgICAgIHByb21pc2UudGhlbihyZXNvbHZlcihpKSwgcmVqZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVBbGwoaSwgcHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0cy5hbGwgPSBhbGw7IiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBicm93c2VyR2xvYmFsID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBsb2NhbCA9ICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgPyBnbG9iYWwgOiAodGhpcyA9PT0gdW5kZWZpbmVkPyB3aW5kb3c6dGhpcyk7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBub2RlLmRhdGEgPSAoaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgbG9jYWwuc2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBxdWV1ZVtpXTtcbiAgICB2YXIgY2FsbGJhY2sgPSB0dXBsZVswXSwgYXJnID0gdHVwbGVbMV07XG4gICAgY2FsbGJhY2soYXJnKTtcbiAgfVxuICBxdWV1ZSA9IFtdO1xufVxuXG52YXIgc2NoZWR1bGVGbHVzaDtcblxuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYge30udG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHZhciBsZW5ndGggPSBxdWV1ZS5wdXNoKFtjYWxsYmFjaywgYXJnXSk7XG4gIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAvLyBJZiBsZW5ndGggaXMgMSwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgc2NoZWR1bGVGbHVzaCgpO1xuICB9XG59XG5cbmV4cG9ydHMuYXNhcCA9IGFzYXA7XG59KS5jYWxsKHRoaXMscmVxdWlyZShcIjFZaVo1U1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAgYFJTVlAuUHJvbWlzZS5jYXN0YCByZXR1cm5zIHRoZSBzYW1lIHByb21pc2UgaWYgdGhhdCBwcm9taXNlIHNoYXJlcyBhIGNvbnN0cnVjdG9yXG4gIHdpdGggdGhlIHByb21pc2UgYmVpbmcgY2FzdGVkLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICB2YXIgcHJvbWlzZSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgdmFyIGNhc3RlZCA9IFJTVlAuUHJvbWlzZS5jYXN0KHByb21pc2UpO1xuXG4gIGNvbnNvbGUubG9nKHByb21pc2UgPT09IGNhc3RlZCk7IC8vIHRydWVcbiAgYGBgXG5cbiAgSW4gdGhlIGNhc2Ugb2YgYSBwcm9taXNlIHdob3NlIGNvbnN0cnVjdG9yIGRvZXMgbm90IG1hdGNoLCBpdCBpcyBhc3NpbWlsYXRlZC5cbiAgVGhlIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgZnVsZmlsbCBvciByZWplY3QgYmFzZWQgb24gdGhlIG91dGNvbWUgb2YgdGhlXG4gIHByb21pc2UgYmVpbmcgY2FzdGVkLlxuXG4gIEluIHRoZSBjYXNlIG9mIGEgbm9uLXByb21pc2UsIGEgcHJvbWlzZSB3aGljaCB3aWxsIGZ1bGZpbGwgd2l0aCB0aGF0IHZhbHVlIGlzXG4gIHJldHVybmVkLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICB2YXIgdmFsdWUgPSAxOyAvLyBjb3VsZCBiZSBhIG51bWJlciwgYm9vbGVhbiwgc3RyaW5nLCB1bmRlZmluZWQuLi5cbiAgdmFyIGNhc3RlZCA9IFJTVlAuUHJvbWlzZS5jYXN0KHZhbHVlKTtcblxuICBjb25zb2xlLmxvZyh2YWx1ZSA9PT0gY2FzdGVkKTsgLy8gZmFsc2VcbiAgY29uc29sZS5sb2coY2FzdGVkIGluc3RhbmNlb2YgUlNWUC5Qcm9taXNlKSAvLyB0cnVlXG5cbiAgY2FzdGVkLnRoZW4oZnVuY3Rpb24odmFsKSB7XG4gICAgdmFsID09PSB2YWx1ZSAvLyA9PiB0cnVlXG4gIH0pO1xuICBgYGBcblxuICBgUlNWUC5Qcm9taXNlLmNhc3RgIGlzIHNpbWlsYXIgdG8gYFJTVlAucmVzb2x2ZWAsIGJ1dCBgUlNWUC5Qcm9taXNlLmNhc3RgIGRpZmZlcnMgaW4gdGhlXG4gIGZvbGxvd2luZyB3YXlzOlxuICAqIGBSU1ZQLlByb21pc2UuY2FzdGAgc2VydmVzIGFzIGEgbWVtb3J5LWVmZmljaWVudCB3YXkgb2YgZ2V0dGluZyBhIHByb21pc2UsIHdoZW4geW91XG4gIGhhdmUgc29tZXRoaW5nIHRoYXQgY291bGQgZWl0aGVyIGJlIGEgcHJvbWlzZSBvciBhIHZhbHVlLiBSU1ZQLnJlc29sdmVcbiAgd2lsbCBoYXZlIHRoZSBzYW1lIGVmZmVjdCBidXQgd2lsbCBjcmVhdGUgYSBuZXcgcHJvbWlzZSB3cmFwcGVyIGlmIHRoZVxuICBhcmd1bWVudCBpcyBhIHByb21pc2UuXG4gICogYFJTVlAuUHJvbWlzZS5jYXN0YCBpcyBhIHdheSBvZiBjYXN0aW5nIGluY29taW5nIHRoZW5hYmxlcyBvciBwcm9taXNlIHN1YmNsYXNzZXMgdG9cbiAgcHJvbWlzZXMgb2YgdGhlIGV4YWN0IGNsYXNzIHNwZWNpZmllZCwgc28gdGhhdCB0aGUgcmVzdWx0aW5nIG9iamVjdCdzIGB0aGVuYCBpc1xuICBlbnN1cmVkIHRvIGhhdmUgdGhlIGJlaGF2aW9yIG9mIHRoZSBjb25zdHJ1Y3RvciB5b3UgYXJlIGNhbGxpbmcgY2FzdCBvbiAoaS5lLiwgUlNWUC5Qcm9taXNlKS5cblxuICBAbWV0aG9kIGNhc3RcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gYmUgY2FzdGVkXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgcHJvcGVydGllcyBvZiBgcHJvbWlzZXNgXG4gIGhhdmUgYmVlbiBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiovXG5cblxuZnVuY3Rpb24gY2FzdChvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IHRoaXMpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIFByb21pc2UgPSB0aGlzO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZShvYmplY3QpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5jYXN0ID0gY2FzdDsiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjb25maWcgPSB7XG4gIGluc3RydW1lbnQ6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBjb25maWd1cmUobmFtZSwgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICBjb25maWdbbmFtZV0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uZmlnW25hbWVdO1xuICB9XG59XG5cbmV4cG9ydHMuY29uZmlnID0gY29uZmlnO1xuZXhwb3J0cy5jb25maWd1cmUgPSBjb25maWd1cmU7IiwiKGZ1bmN0aW9uIChnbG9iYWwpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vKmdsb2JhbCBzZWxmKi9cbnZhciBSU1ZQUHJvbWlzZSA9IHJlcXVpcmUoXCIuL3Byb21pc2VcIikuUHJvbWlzZTtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZShcIi4vdXRpbHNcIikuaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIHZhciBsb2NhbDtcblxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBsb2NhbCA9IHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICBsb2NhbCA9IHNlbGY7XG4gIH1cblxuICB2YXIgZXM2UHJvbWlzZVN1cHBvcnQgPSBcbiAgICBcIlByb21pc2VcIiBpbiBsb2NhbCAmJlxuICAgIC8vIFNvbWUgb2YgdGhlc2UgbWV0aG9kcyBhcmUgbWlzc2luZyBmcm9tXG4gICAgLy8gRmlyZWZveC9DaHJvbWUgZXhwZXJpbWVudGFsIGltcGxlbWVudGF0aW9uc1xuICAgIFwiY2FzdFwiIGluIGxvY2FsLlByb21pc2UgJiZcbiAgICBcInJlc29sdmVcIiBpbiBsb2NhbC5Qcm9taXNlICYmXG4gICAgXCJyZWplY3RcIiBpbiBsb2NhbC5Qcm9taXNlICYmXG4gICAgXCJhbGxcIiBpbiBsb2NhbC5Qcm9taXNlICYmXG4gICAgXCJyYWNlXCIgaW4gbG9jYWwuUHJvbWlzZSAmJlxuICAgIC8vIE9sZGVyIHZlcnNpb24gb2YgdGhlIHNwZWMgaGFkIGEgcmVzb2x2ZXIgb2JqZWN0XG4gICAgLy8gYXMgdGhlIGFyZyByYXRoZXIgdGhhbiBhIGZ1bmN0aW9uXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc29sdmU7XG4gICAgICBuZXcgbG9jYWwuUHJvbWlzZShmdW5jdGlvbihyKSB7IHJlc29sdmUgPSByOyB9KTtcbiAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHJlc29sdmUpO1xuICAgIH0oKSk7XG5cbiAgaWYgKCFlczZQcm9taXNlU3VwcG9ydCkge1xuICAgIGxvY2FsLlByb21pc2UgPSBSU1ZQUHJvbWlzZTtcbiAgfVxufVxuXG5leHBvcnRzLnBvbHlmaWxsID0gcG9seWZpbGw7XG59KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KSIsIlwidXNlIHN0cmljdFwiO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKS5jb25maWc7XG52YXIgY29uZmlndXJlID0gcmVxdWlyZShcIi4vY29uZmlnXCIpLmNvbmZpZ3VyZTtcbnZhciBvYmplY3RPckZ1bmN0aW9uID0gcmVxdWlyZShcIi4vdXRpbHNcIikub2JqZWN0T3JGdW5jdGlvbjtcbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZShcIi4vdXRpbHNcIikuaXNGdW5jdGlvbjtcbnZhciBub3cgPSByZXF1aXJlKFwiLi91dGlsc1wiKS5ub3c7XG52YXIgY2FzdCA9IHJlcXVpcmUoXCIuL2Nhc3RcIikuY2FzdDtcbnZhciBhbGwgPSByZXF1aXJlKFwiLi9hbGxcIikuYWxsO1xudmFyIHJhY2UgPSByZXF1aXJlKFwiLi9yYWNlXCIpLnJhY2U7XG52YXIgc3RhdGljUmVzb2x2ZSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVcIikucmVzb2x2ZTtcbnZhciBzdGF0aWNSZWplY3QgPSByZXF1aXJlKFwiLi9yZWplY3RcIikucmVqZWN0O1xudmFyIGFzYXAgPSByZXF1aXJlKFwiLi9hc2FwXCIpLmFzYXA7XG5cbnZhciBjb3VudGVyID0gMDtcblxuY29uZmlnLmFzeW5jID0gYXNhcDsgLy8gZGVmYXVsdCBhc3luYyBpcyBhc2FwO1xuXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihyZXNvbHZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG5cbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBpbnZva2VSZXNvbHZlcihyZXNvbHZlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGludm9rZVJlc29sdmVyKHJlc29sdmVyLCBwcm9taXNlKSB7XG4gIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXNvbHZlcihyZXNvbHZlUHJvbWlzZSwgcmVqZWN0UHJvbWlzZSk7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJlamVjdFByb21pc2UoZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlLCBlcnJvciwgc3VjY2VlZGVkLCBmYWlsZWQ7XG5cbiAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlID0gY2FsbGJhY2soZGV0YWlsKTtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgZXJyb3IgPSBlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGhhbmRsZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlKSkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgUEVORElORyAgID0gdm9pZCAwO1xudmFyIFNFQUxFRCAgICA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCAgPSAyO1xuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IHN1YnNjcmliZXJzLmxlbmd0aDtcblxuICBzdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIHN1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBzdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gID0gb25SZWplY3Rpb247XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSwgc2V0dGxlZCkge1xuICB2YXIgY2hpbGQsIGNhbGxiYWNrLCBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzLCBkZXRhaWwgPSBwcm9taXNlLl9kZXRhaWw7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IG51bGw7XG59XG5cblByb21pc2UucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUHJvbWlzZSxcblxuICBfc3RhdGU6IHVuZGVmaW5lZCxcbiAgX2RldGFpbDogdW5kZWZpbmVkLFxuICBfc3Vic2NyaWJlcnM6IHVuZGVmaW5lZCxcblxuICB0aGVuOiBmdW5jdGlvbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgIHZhciB0aGVuUHJvbWlzZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGZ1bmN0aW9uKCkge30pO1xuXG4gICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gYXJndW1lbnRzO1xuICAgICAgY29uZmlnLmFzeW5jKGZ1bmN0aW9uIGludm9rZVByb21pc2VDYWxsYmFjaygpIHtcbiAgICAgICAgaW52b2tlQ2FsbGJhY2socHJvbWlzZS5fc3RhdGUsIHRoZW5Qcm9taXNlLCBjYWxsYmFja3NbcHJvbWlzZS5fc3RhdGUgLSAxXSwgcHJvbWlzZS5fZGV0YWlsKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmUodGhpcywgdGhlblByb21pc2UsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhlblByb21pc2U7XG4gIH0sXG5cbiAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfVxufTtcblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLmNhc3QgPSBjYXN0O1xuUHJvbWlzZS5yYWNlID0gcmFjZTtcblByb21pc2UucmVzb2x2ZSA9IHN0YXRpY1Jlc29sdmU7XG5Qcm9taXNlLnJlamVjdCA9IHN0YXRpY1JlamVjdDtcblxuZnVuY3Rpb24gaGFuZGxlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUpIHtcbiAgdmFyIHRoZW4gPSBudWxsLFxuICByZXNvbHZlZDtcblxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkEgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS5cIik7XG4gICAgfVxuXG4gICAgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB0aGVuID0gdmFsdWUudGhlbjtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZWQpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT09IHZhbCkge1xuICAgICAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZWQpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG5cbiAgICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChyZXNvbHZlZCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoIWhhbmRsZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlKSkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7IHJldHVybjsgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFNFQUxFRDtcbiAgcHJvbWlzZS5fZGV0YWlsID0gdmFsdWU7XG5cbiAgY29uZmlnLmFzeW5jKHB1Ymxpc2hGdWxmaWxsbWVudCwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7IHJldHVybjsgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFNFQUxFRDtcbiAgcHJvbWlzZS5fZGV0YWlsID0gcmVhc29uO1xuXG4gIGNvbmZpZy5hc3luYyhwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gcHVibGlzaEZ1bGZpbGxtZW50KHByb21pc2UpIHtcbiAgcHVibGlzaChwcm9taXNlLCBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRCk7XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBwdWJsaXNoKHByb21pc2UsIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQpO1xufVxuXG5leHBvcnRzLlByb21pc2UgPSBQcm9taXNlOyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIHRvU3RyaW5nICovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpLmlzQXJyYXk7XG5cbi8qKlxuICBgUlNWUC5yYWNlYCBhbGxvd3MgeW91IHRvIHdhdGNoIGEgc2VyaWVzIG9mIHByb21pc2VzIGFuZCBhY3QgYXMgc29vbiBhcyB0aGVcbiAgZmlyc3QgcHJvbWlzZSBnaXZlbiB0byB0aGUgYHByb21pc2VzYCBhcmd1bWVudCBmdWxmaWxscyBvciByZWplY3RzLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICB2YXIgcHJvbWlzZTEgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZShcInByb21pc2UgMVwiKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTIgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZShcInByb21pc2UgMlwiKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBSU1ZQLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09IFwicHJvbWlzZSAyXCIgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFJTVlAucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdCBjb21wbGV0ZWRcbiAgcHJvbWlzZSBtYXR0ZXJzLiBGb3IgZXhhbXBsZSwgZXZlbiBpZiBvdGhlciBwcm9taXNlcyBnaXZlbiB0byB0aGUgYHByb21pc2VzYFxuICBhcnJheSBhcmd1bWVudCBhcmUgcmVzb2x2ZWQsIGJ1dCB0aGUgZmlyc3QgY29tcGxldGVkIHByb21pc2UgaGFzIGJlY29tZVxuICByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZCBwcm9taXNlXG4gIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgdmFyIHByb21pc2UxID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoXCJwcm9taXNlIDFcIik7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2UyID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJwcm9taXNlIDJcIikpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFJTVlAucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSBcInByb21pc2UyXCIgYmVjYXVzZSBwcm9taXNlIDIgYmVjYW1lIHJlamVjdGVkIGJlZm9yZVxuICAgIC8vIHByb21pc2UgMSBiZWNhbWUgZnVsZmlsbGVkXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgZGVzY3JpYmluZyB0aGUgcHJvbWlzZSByZXR1cm5lZC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBiZWNvbWVzIGZ1bGZpbGxlZCB3aXRoIHRoZSB2YWx1ZSB0aGUgZmlyc3RcbiAgY29tcGxldGVkIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggaWYgdGhlIGZpcnN0IGNvbXBsZXRlZCBwcm9taXNlIHdhc1xuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiB0aGF0IHRoZSBmaXJzdCBjb21wbGV0ZWQgcHJvbWlzZVxuICB3YXMgcmVqZWN0ZWQgd2l0aC5cbiovXG5mdW5jdGlvbiByYWNlKHByb21pc2VzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBQcm9taXNlID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkocHJvbWlzZXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdLCBwcm9taXNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2VzW2ldO1xuXG4gICAgICBpZiAocHJvbWlzZSAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShwcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnRzLnJhY2UgPSByYWNlOyIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gIGBSU1ZQLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWRcbiAgYHJlYXNvbmAuIGBSU1ZQLnJlamVjdGAgaXMgZXNzZW50aWFsbHkgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgdmFyIHByb21pc2UgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgdmFyIHByb21pc2UgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGlkZW50aWZ5aW5nIHRoZSByZXR1cm5lZCBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuXG4gIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIFByb21pc2UgPSB0aGlzO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuXG5leHBvcnRzLnJlamVjdCA9IHJlamVjdDsiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICBgUlNWUC5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBwYXNzZWRcbiAgYHZhbHVlYC4gYFJTVlAucmVzb2x2ZWAgaXMgZXNzZW50aWFsbHkgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgdmFyIHByb21pc2UgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgdmFyIHByb21pc2UgPSBSU1ZQLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgaWRlbnRpZnlpbmcgdGhlIHJldHVybmVkIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBQcm9taXNlID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZTsiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gaXNGdW5jdGlvbih4KSB8fCAodHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgeCAhPT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZnVuY3Rpb24gaXNBcnJheSh4KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbn1cblxuLy8gRGF0ZS5ub3cgaXMgbm90IGF2YWlsYWJsZSBpbiBicm93c2VycyA8IElFOVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS9ub3cjQ29tcGF0aWJpbGl0eVxudmFyIG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG5cblxuZXhwb3J0cy5vYmplY3RPckZ1bmN0aW9uID0gb2JqZWN0T3JGdW5jdGlvbjtcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuZXhwb3J0cy5ub3cgPSBub3c7IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBKYXZhc2NyaXB0IFpMaWJcbi8vIEJ5IFRob21hcyBEb3duIDIwMTAtMjAxMVxuLy9cbi8vIEJhc2VkIHZlcnkgaGVhdmlseSBvbiBwb3J0aW9ucyBvZiBqemxpYiAoYnkgeW1ua0BqY3JhZnQuY29tKSwgd2hvIGluXG4vLyB0dXJuIGNyZWRpdHMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlciBmb3IgdGhlIG9yaWdpbmFsIHpsaWIgY29kZS5cbi8vXG4vLyBpbmZsYXRlLmpzOiBaTGliIGluZmxhdGUgY29kZVxuLy9cblxuLy9cbi8vIFNoYXJlZCBjb25zdGFudHNcbi8vXG5cbnZhciBNQVhfV0JJVFM9MTU7IC8vIDMySyBMWjc3IHdpbmRvd1xudmFyIERFRl9XQklUUz1NQVhfV0JJVFM7XG52YXIgTUFYX01FTV9MRVZFTD05O1xudmFyIE1BTlk9MTQ0MDtcbnZhciBCTUFYID0gMTU7XG5cbi8vIHByZXNldCBkaWN0aW9uYXJ5IGZsYWcgaW4gemxpYiBoZWFkZXJcbnZhciBQUkVTRVRfRElDVD0weDIwO1xuXG52YXIgWl9OT19GTFVTSD0wO1xudmFyIFpfUEFSVElBTF9GTFVTSD0xO1xudmFyIFpfU1lOQ19GTFVTSD0yO1xudmFyIFpfRlVMTF9GTFVTSD0zO1xudmFyIFpfRklOSVNIPTQ7XG5cbnZhciBaX0RFRkxBVEVEPTg7XG5cbnZhciBaX09LPTA7XG52YXIgWl9TVFJFQU1fRU5EPTE7XG52YXIgWl9ORUVEX0RJQ1Q9MjtcbnZhciBaX0VSUk5PPS0xO1xudmFyIFpfU1RSRUFNX0VSUk9SPS0yO1xudmFyIFpfREFUQV9FUlJPUj0tMztcbnZhciBaX01FTV9FUlJPUj0tNDtcbnZhciBaX0JVRl9FUlJPUj0tNTtcbnZhciBaX1ZFUlNJT05fRVJST1I9LTY7XG5cbnZhciBNRVRIT0Q9MDsgICAvLyB3YWl0aW5nIGZvciBtZXRob2QgYnl0ZVxudmFyIEZMQUc9MTsgICAgIC8vIHdhaXRpbmcgZm9yIGZsYWcgYnl0ZVxudmFyIERJQ1Q0PTI7ICAgIC8vIGZvdXIgZGljdGlvbmFyeSBjaGVjayBieXRlcyB0byBnb1xudmFyIERJQ1QzPTM7ICAgIC8vIHRocmVlIGRpY3Rpb25hcnkgY2hlY2sgYnl0ZXMgdG8gZ29cbnZhciBESUNUMj00OyAgICAvLyB0d28gZGljdGlvbmFyeSBjaGVjayBieXRlcyB0byBnb1xudmFyIERJQ1QxPTU7ICAgIC8vIG9uZSBkaWN0aW9uYXJ5IGNoZWNrIGJ5dGUgdG8gZ29cbnZhciBESUNUMD02OyAgICAvLyB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeVxudmFyIEJMT0NLUz03OyAgIC8vIGRlY29tcHJlc3NpbmcgYmxvY2tzXG52YXIgQ0hFQ0s0PTg7ICAgLy8gZm91ciBjaGVjayBieXRlcyB0byBnb1xudmFyIENIRUNLMz05OyAgIC8vIHRocmVlIGNoZWNrIGJ5dGVzIHRvIGdvXG52YXIgQ0hFQ0syPTEwOyAgLy8gdHdvIGNoZWNrIGJ5dGVzIHRvIGdvXG52YXIgQ0hFQ0sxPTExOyAgLy8gb25lIGNoZWNrIGJ5dGUgdG8gZ29cbnZhciBET05FPTEyOyAgICAvLyBmaW5pc2hlZCBjaGVjaywgZG9uZVxudmFyIEJBRD0xMzsgICAgIC8vIGdvdCBhbiBlcnJvci0tc3RheSBoZXJlXG5cbnZhciBpbmZsYXRlX21hc2sgPSBbMHgwMDAwMDAwMCwgMHgwMDAwMDAwMSwgMHgwMDAwMDAwMywgMHgwMDAwMDAwNywgMHgwMDAwMDAwZiwgMHgwMDAwMDAxZiwgMHgwMDAwMDAzZiwgMHgwMDAwMDA3ZiwgMHgwMDAwMDBmZiwgMHgwMDAwMDFmZiwgMHgwMDAwMDNmZiwgMHgwMDAwMDdmZiwgMHgwMDAwMGZmZiwgMHgwMDAwMWZmZiwgMHgwMDAwM2ZmZiwgMHgwMDAwN2ZmZiwgMHgwMDAwZmZmZl07XG5cbnZhciBJQl9UWVBFPTA7ICAvLyBnZXQgdHlwZSBiaXRzICgzLCBpbmNsdWRpbmcgZW5kIGJpdClcbnZhciBJQl9MRU5TPTE7ICAvLyBnZXQgbGVuZ3RocyBmb3Igc3RvcmVkXG52YXIgSUJfU1RPUkVEPTI7Ly8gcHJvY2Vzc2luZyBzdG9yZWQgYmxvY2tcbnZhciBJQl9UQUJMRT0zOyAvLyBnZXQgdGFibGUgbGVuZ3Roc1xudmFyIElCX0JUUkVFPTQ7IC8vIGdldCBiaXQgbGVuZ3RocyB0cmVlIGZvciBhIGR5bmFtaWMgYmxvY2tcbnZhciBJQl9EVFJFRT01OyAvLyBnZXQgbGVuZ3RoLCBkaXN0YW5jZSB0cmVlcyBmb3IgYSBkeW5hbWljIGJsb2NrXG52YXIgSUJfQ09ERVM9NjsgLy8gcHJvY2Vzc2luZyBmaXhlZCBvciBkeW5hbWljIGJsb2NrXG52YXIgSUJfRFJZPTc7ICAgLy8gb3V0cHV0IHJlbWFpbmluZyB3aW5kb3cgYnl0ZXNcbnZhciBJQl9ET05FPTg7ICAvLyBmaW5pc2hlZCBsYXN0IGJsb2NrLCBkb25lXG52YXIgSUJfQkFEPTk7ICAgLy8gb3QgYSBkYXRhIGVycm9yLS1zdHVjayBoZXJlXG5cbnZhciBmaXhlZF9ibCA9IDk7XG52YXIgZml4ZWRfYmQgPSA1O1xuXG52YXIgZml4ZWRfdGwgPSBbXG4gICAgOTYsNywyNTYsIDAsOCw4MCwgMCw4LDE2LCA4NCw4LDExNSxcbiAgICA4Miw3LDMxLCAwLDgsMTEyLCAwLDgsNDgsIDAsOSwxOTIsXG4gICAgODAsNywxMCwgMCw4LDk2LCAwLDgsMzIsIDAsOSwxNjAsXG4gICAgMCw4LDAsIDAsOCwxMjgsIDAsOCw2NCwgMCw5LDIyNCxcbiAgICA4MCw3LDYsIDAsOCw4OCwgMCw4LDI0LCAwLDksMTQ0LFxuICAgIDgzLDcsNTksIDAsOCwxMjAsIDAsOCw1NiwgMCw5LDIwOCxcbiAgICA4MSw3LDE3LCAwLDgsMTA0LCAwLDgsNDAsIDAsOSwxNzYsXG4gICAgMCw4LDgsIDAsOCwxMzYsIDAsOCw3MiwgMCw5LDI0MCxcbiAgICA4MCw3LDQsIDAsOCw4NCwgMCw4LDIwLCA4NSw4LDIyNyxcbiAgICA4Myw3LDQzLCAwLDgsMTE2LCAwLDgsNTIsIDAsOSwyMDAsXG4gICAgODEsNywxMywgMCw4LDEwMCwgMCw4LDM2LCAwLDksMTY4LFxuICAgIDAsOCw0LCAwLDgsMTMyLCAwLDgsNjgsIDAsOSwyMzIsXG4gICAgODAsNyw4LCAwLDgsOTIsIDAsOCwyOCwgMCw5LDE1MixcbiAgICA4NCw3LDgzLCAwLDgsMTI0LCAwLDgsNjAsIDAsOSwyMTYsXG4gICAgODIsNywyMywgMCw4LDEwOCwgMCw4LDQ0LCAwLDksMTg0LFxuICAgIDAsOCwxMiwgMCw4LDE0MCwgMCw4LDc2LCAwLDksMjQ4LFxuICAgIDgwLDcsMywgMCw4LDgyLCAwLDgsMTgsIDg1LDgsMTYzLFxuICAgIDgzLDcsMzUsIDAsOCwxMTQsIDAsOCw1MCwgMCw5LDE5NixcbiAgICA4MSw3LDExLCAwLDgsOTgsIDAsOCwzNCwgMCw5LDE2NCxcbiAgICAwLDgsMiwgMCw4LDEzMCwgMCw4LDY2LCAwLDksMjI4LFxuICAgIDgwLDcsNywgMCw4LDkwLCAwLDgsMjYsIDAsOSwxNDgsXG4gICAgODQsNyw2NywgMCw4LDEyMiwgMCw4LDU4LCAwLDksMjEyLFxuICAgIDgyLDcsMTksIDAsOCwxMDYsIDAsOCw0MiwgMCw5LDE4MCxcbiAgICAwLDgsMTAsIDAsOCwxMzgsIDAsOCw3NCwgMCw5LDI0NCxcbiAgICA4MCw3LDUsIDAsOCw4NiwgMCw4LDIyLCAxOTIsOCwwLFxuICAgIDgzLDcsNTEsIDAsOCwxMTgsIDAsOCw1NCwgMCw5LDIwNCxcbiAgICA4MSw3LDE1LCAwLDgsMTAyLCAwLDgsMzgsIDAsOSwxNzIsXG4gICAgMCw4LDYsIDAsOCwxMzQsIDAsOCw3MCwgMCw5LDIzNixcbiAgICA4MCw3LDksIDAsOCw5NCwgMCw4LDMwLCAwLDksMTU2LFxuICAgIDg0LDcsOTksIDAsOCwxMjYsIDAsOCw2MiwgMCw5LDIyMCxcbiAgICA4Miw3LDI3LCAwLDgsMTEwLCAwLDgsNDYsIDAsOSwxODgsXG4gICAgMCw4LDE0LCAwLDgsMTQyLCAwLDgsNzgsIDAsOSwyNTIsXG4gICAgOTYsNywyNTYsIDAsOCw4MSwgMCw4LDE3LCA4NSw4LDEzMSxcbiAgICA4Miw3LDMxLCAwLDgsMTEzLCAwLDgsNDksIDAsOSwxOTQsXG4gICAgODAsNywxMCwgMCw4LDk3LCAwLDgsMzMsIDAsOSwxNjIsXG4gICAgMCw4LDEsIDAsOCwxMjksIDAsOCw2NSwgMCw5LDIyNixcbiAgICA4MCw3LDYsIDAsOCw4OSwgMCw4LDI1LCAwLDksMTQ2LFxuICAgIDgzLDcsNTksIDAsOCwxMjEsIDAsOCw1NywgMCw5LDIxMCxcbiAgICA4MSw3LDE3LCAwLDgsMTA1LCAwLDgsNDEsIDAsOSwxNzgsXG4gICAgMCw4LDksIDAsOCwxMzcsIDAsOCw3MywgMCw5LDI0MixcbiAgICA4MCw3LDQsIDAsOCw4NSwgMCw4LDIxLCA4MCw4LDI1OCxcbiAgICA4Myw3LDQzLCAwLDgsMTE3LCAwLDgsNTMsIDAsOSwyMDIsXG4gICAgODEsNywxMywgMCw4LDEwMSwgMCw4LDM3LCAwLDksMTcwLFxuICAgIDAsOCw1LCAwLDgsMTMzLCAwLDgsNjksIDAsOSwyMzQsXG4gICAgODAsNyw4LCAwLDgsOTMsIDAsOCwyOSwgMCw5LDE1NCxcbiAgICA4NCw3LDgzLCAwLDgsMTI1LCAwLDgsNjEsIDAsOSwyMTgsXG4gICAgODIsNywyMywgMCw4LDEwOSwgMCw4LDQ1LCAwLDksMTg2LFxuICAgIDAsOCwxMywgMCw4LDE0MSwgMCw4LDc3LCAwLDksMjUwLFxuICAgIDgwLDcsMywgMCw4LDgzLCAwLDgsMTksIDg1LDgsMTk1LFxuICAgIDgzLDcsMzUsIDAsOCwxMTUsIDAsOCw1MSwgMCw5LDE5OCxcbiAgICA4MSw3LDExLCAwLDgsOTksIDAsOCwzNSwgMCw5LDE2NixcbiAgICAwLDgsMywgMCw4LDEzMSwgMCw4LDY3LCAwLDksMjMwLFxuICAgIDgwLDcsNywgMCw4LDkxLCAwLDgsMjcsIDAsOSwxNTAsXG4gICAgODQsNyw2NywgMCw4LDEyMywgMCw4LDU5LCAwLDksMjE0LFxuICAgIDgyLDcsMTksIDAsOCwxMDcsIDAsOCw0MywgMCw5LDE4MixcbiAgICAwLDgsMTEsIDAsOCwxMzksIDAsOCw3NSwgMCw5LDI0NixcbiAgICA4MCw3LDUsIDAsOCw4NywgMCw4LDIzLCAxOTIsOCwwLFxuICAgIDgzLDcsNTEsIDAsOCwxMTksIDAsOCw1NSwgMCw5LDIwNixcbiAgICA4MSw3LDE1LCAwLDgsMTAzLCAwLDgsMzksIDAsOSwxNzQsXG4gICAgMCw4LDcsIDAsOCwxMzUsIDAsOCw3MSwgMCw5LDIzOCxcbiAgICA4MCw3LDksIDAsOCw5NSwgMCw4LDMxLCAwLDksMTU4LFxuICAgIDg0LDcsOTksIDAsOCwxMjcsIDAsOCw2MywgMCw5LDIyMixcbiAgICA4Miw3LDI3LCAwLDgsMTExLCAwLDgsNDcsIDAsOSwxOTAsXG4gICAgMCw4LDE1LCAwLDgsMTQzLCAwLDgsNzksIDAsOSwyNTQsXG4gICAgOTYsNywyNTYsIDAsOCw4MCwgMCw4LDE2LCA4NCw4LDExNSxcbiAgICA4Miw3LDMxLCAwLDgsMTEyLCAwLDgsNDgsIDAsOSwxOTMsXG5cbiAgICA4MCw3LDEwLCAwLDgsOTYsIDAsOCwzMiwgMCw5LDE2MSxcbiAgICAwLDgsMCwgMCw4LDEyOCwgMCw4LDY0LCAwLDksMjI1LFxuICAgIDgwLDcsNiwgMCw4LDg4LCAwLDgsMjQsIDAsOSwxNDUsXG4gICAgODMsNyw1OSwgMCw4LDEyMCwgMCw4LDU2LCAwLDksMjA5LFxuICAgIDgxLDcsMTcsIDAsOCwxMDQsIDAsOCw0MCwgMCw5LDE3NyxcbiAgICAwLDgsOCwgMCw4LDEzNiwgMCw4LDcyLCAwLDksMjQxLFxuICAgIDgwLDcsNCwgMCw4LDg0LCAwLDgsMjAsIDg1LDgsMjI3LFxuICAgIDgzLDcsNDMsIDAsOCwxMTYsIDAsOCw1MiwgMCw5LDIwMSxcbiAgICA4MSw3LDEzLCAwLDgsMTAwLCAwLDgsMzYsIDAsOSwxNjksXG4gICAgMCw4LDQsIDAsOCwxMzIsIDAsOCw2OCwgMCw5LDIzMyxcbiAgICA4MCw3LDgsIDAsOCw5MiwgMCw4LDI4LCAwLDksMTUzLFxuICAgIDg0LDcsODMsIDAsOCwxMjQsIDAsOCw2MCwgMCw5LDIxNyxcbiAgICA4Miw3LDIzLCAwLDgsMTA4LCAwLDgsNDQsIDAsOSwxODUsXG4gICAgMCw4LDEyLCAwLDgsMTQwLCAwLDgsNzYsIDAsOSwyNDksXG4gICAgODAsNywzLCAwLDgsODIsIDAsOCwxOCwgODUsOCwxNjMsXG4gICAgODMsNywzNSwgMCw4LDExNCwgMCw4LDUwLCAwLDksMTk3LFxuICAgIDgxLDcsMTEsIDAsOCw5OCwgMCw4LDM0LCAwLDksMTY1LFxuICAgIDAsOCwyLCAwLDgsMTMwLCAwLDgsNjYsIDAsOSwyMjksXG4gICAgODAsNyw3LCAwLDgsOTAsIDAsOCwyNiwgMCw5LDE0OSxcbiAgICA4NCw3LDY3LCAwLDgsMTIyLCAwLDgsNTgsIDAsOSwyMTMsXG4gICAgODIsNywxOSwgMCw4LDEwNiwgMCw4LDQyLCAwLDksMTgxLFxuICAgIDAsOCwxMCwgMCw4LDEzOCwgMCw4LDc0LCAwLDksMjQ1LFxuICAgIDgwLDcsNSwgMCw4LDg2LCAwLDgsMjIsIDE5Miw4LDAsXG4gICAgODMsNyw1MSwgMCw4LDExOCwgMCw4LDU0LCAwLDksMjA1LFxuICAgIDgxLDcsMTUsIDAsOCwxMDIsIDAsOCwzOCwgMCw5LDE3MyxcbiAgICAwLDgsNiwgMCw4LDEzNCwgMCw4LDcwLCAwLDksMjM3LFxuICAgIDgwLDcsOSwgMCw4LDk0LCAwLDgsMzAsIDAsOSwxNTcsXG4gICAgODQsNyw5OSwgMCw4LDEyNiwgMCw4LDYyLCAwLDksMjIxLFxuICAgIDgyLDcsMjcsIDAsOCwxMTAsIDAsOCw0NiwgMCw5LDE4OSxcbiAgICAwLDgsMTQsIDAsOCwxNDIsIDAsOCw3OCwgMCw5LDI1MyxcbiAgICA5Niw3LDI1NiwgMCw4LDgxLCAwLDgsMTcsIDg1LDgsMTMxLFxuICAgIDgyLDcsMzEsIDAsOCwxMTMsIDAsOCw0OSwgMCw5LDE5NSxcbiAgICA4MCw3LDEwLCAwLDgsOTcsIDAsOCwzMywgMCw5LDE2MyxcbiAgICAwLDgsMSwgMCw4LDEyOSwgMCw4LDY1LCAwLDksMjI3LFxuICAgIDgwLDcsNiwgMCw4LDg5LCAwLDgsMjUsIDAsOSwxNDcsXG4gICAgODMsNyw1OSwgMCw4LDEyMSwgMCw4LDU3LCAwLDksMjExLFxuICAgIDgxLDcsMTcsIDAsOCwxMDUsIDAsOCw0MSwgMCw5LDE3OSxcbiAgICAwLDgsOSwgMCw4LDEzNywgMCw4LDczLCAwLDksMjQzLFxuICAgIDgwLDcsNCwgMCw4LDg1LCAwLDgsMjEsIDgwLDgsMjU4LFxuICAgIDgzLDcsNDMsIDAsOCwxMTcsIDAsOCw1MywgMCw5LDIwMyxcbiAgICA4MSw3LDEzLCAwLDgsMTAxLCAwLDgsMzcsIDAsOSwxNzEsXG4gICAgMCw4LDUsIDAsOCwxMzMsIDAsOCw2OSwgMCw5LDIzNSxcbiAgICA4MCw3LDgsIDAsOCw5MywgMCw4LDI5LCAwLDksMTU1LFxuICAgIDg0LDcsODMsIDAsOCwxMjUsIDAsOCw2MSwgMCw5LDIxOSxcbiAgICA4Miw3LDIzLCAwLDgsMTA5LCAwLDgsNDUsIDAsOSwxODcsXG4gICAgMCw4LDEzLCAwLDgsMTQxLCAwLDgsNzcsIDAsOSwyNTEsXG4gICAgODAsNywzLCAwLDgsODMsIDAsOCwxOSwgODUsOCwxOTUsXG4gICAgODMsNywzNSwgMCw4LDExNSwgMCw4LDUxLCAwLDksMTk5LFxuICAgIDgxLDcsMTEsIDAsOCw5OSwgMCw4LDM1LCAwLDksMTY3LFxuICAgIDAsOCwzLCAwLDgsMTMxLCAwLDgsNjcsIDAsOSwyMzEsXG4gICAgODAsNyw3LCAwLDgsOTEsIDAsOCwyNywgMCw5LDE1MSxcbiAgICA4NCw3LDY3LCAwLDgsMTIzLCAwLDgsNTksIDAsOSwyMTUsXG4gICAgODIsNywxOSwgMCw4LDEwNywgMCw4LDQzLCAwLDksMTgzLFxuICAgIDAsOCwxMSwgMCw4LDEzOSwgMCw4LDc1LCAwLDksMjQ3LFxuICAgIDgwLDcsNSwgMCw4LDg3LCAwLDgsMjMsIDE5Miw4LDAsXG4gICAgODMsNyw1MSwgMCw4LDExOSwgMCw4LDU1LCAwLDksMjA3LFxuICAgIDgxLDcsMTUsIDAsOCwxMDMsIDAsOCwzOSwgMCw5LDE3NSxcbiAgICAwLDgsNywgMCw4LDEzNSwgMCw4LDcxLCAwLDksMjM5LFxuICAgIDgwLDcsOSwgMCw4LDk1LCAwLDgsMzEsIDAsOSwxNTksXG4gICAgODQsNyw5OSwgMCw4LDEyNywgMCw4LDYzLCAwLDksMjIzLFxuICAgIDgyLDcsMjcsIDAsOCwxMTEsIDAsOCw0NywgMCw5LDE5MSxcbiAgICAwLDgsMTUsIDAsOCwxNDMsIDAsOCw3OSwgMCw5LDI1NVxuXTtcbnZhciBmaXhlZF90ZCA9IFtcbiAgICA4MCw1LDEsIDg3LDUsMjU3LCA4Myw1LDE3LCA5MSw1LDQwOTcsXG4gICAgODEsNSw1LCA4OSw1LDEwMjUsIDg1LDUsNjUsIDkzLDUsMTYzODUsXG4gICAgODAsNSwzLCA4OCw1LDUxMywgODQsNSwzMywgOTIsNSw4MTkzLFxuICAgIDgyLDUsOSwgOTAsNSwyMDQ5LCA4Niw1LDEyOSwgMTkyLDUsMjQ1NzcsXG4gICAgODAsNSwyLCA4Nyw1LDM4NSwgODMsNSwyNSwgOTEsNSw2MTQ1LFxuICAgIDgxLDUsNywgODksNSwxNTM3LCA4NSw1LDk3LCA5Myw1LDI0NTc3LFxuICAgIDgwLDUsNCwgODgsNSw3NjksIDg0LDUsNDksIDkyLDUsMTIyODksXG4gICAgODIsNSwxMywgOTAsNSwzMDczLCA4Niw1LDE5MywgMTkyLDUsMjQ1Nzdcbl07XG5cbiAgLy8gVGFibGVzIGZvciBkZWZsYXRlIGZyb20gUEtaSVAncyBhcHBub3RlLnR4dC5cbiAgdmFyIGNwbGVucyA9IFsgLy8gQ29weSBsZW5ndGhzIGZvciBsaXRlcmFsIGNvZGVzIDI1Ny4uMjg1XG4gICAgICAgIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gICAgICAgIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXG4gIF07XG5cbiAgLy8gc2VlIG5vdGUgIzEzIGFib3ZlIGFib3V0IDI1OFxuICB2YXIgY3BsZXh0ID0gWyAvLyBFeHRyYSBiaXRzIGZvciBsaXRlcmFsIGNvZGVzIDI1Ny4uMjg1XG4gICAgICAgIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDIsIDIsIDIsIDIsXG4gICAgICAgIDMsIDMsIDMsIDMsIDQsIDQsIDQsIDQsIDUsIDUsIDUsIDUsIDAsIDExMiwgMTEyICAvLyAxMTI9PWludmFsaWRcbiAgXTtcblxuIHZhciBjcGRpc3QgPSBbIC8vIENvcHkgb2Zmc2V0cyBmb3IgZGlzdGFuY2UgY29kZXMgMC4uMjlcbiAgICAgICAgMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLFxuICAgICAgICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG4gICAgICAgIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzdcbiAgXTtcblxuICB2YXIgY3BkZXh0ID0gWyAvLyBFeHRyYSBiaXRzIGZvciBkaXN0YW5jZSBjb2Rlc1xuICAgICAgICAwLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LFxuICAgICAgICA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLCAxMSxcbiAgICAgICAgMTIsIDEyLCAxMywgMTNdO1xuXG4vL1xuLy8gWlN0cmVhbS5qYXZhXG4vL1xuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xufVxuXG5cblpTdHJlYW0ucHJvdG90eXBlLmluZmxhdGVJbml0ID0gZnVuY3Rpb24odywgbm93cmFwKSB7XG4gICAgaWYgKCF3KSB7XG5cdHcgPSBERUZfV0JJVFM7XG4gICAgfVxuICAgIGlmIChub3dyYXApIHtcblx0bm93cmFwID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuaXN0YXRlID0gbmV3IEluZmxhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5pc3RhdGUuaW5mbGF0ZUluaXQodGhpcywgbm93cmFwPy13OncpO1xufVxuXG5aU3RyZWFtLnByb3RvdHlwZS5pbmZsYXRlID0gZnVuY3Rpb24oZikge1xuICAgIGlmKHRoaXMuaXN0YXRlPT1udWxsKSByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgcmV0dXJuIHRoaXMuaXN0YXRlLmluZmxhdGUodGhpcywgZik7XG59XG5cblpTdHJlYW0ucHJvdG90eXBlLmluZmxhdGVFbmQgPSBmdW5jdGlvbigpe1xuICAgIGlmKHRoaXMuaXN0YXRlPT1udWxsKSByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgdmFyIHJldD1pc3RhdGUuaW5mbGF0ZUVuZCh0aGlzKTtcbiAgICB0aGlzLmlzdGF0ZSA9IG51bGw7XG4gICAgcmV0dXJuIHJldDtcbn1cblpTdHJlYW0ucHJvdG90eXBlLmluZmxhdGVTeW5jID0gZnVuY3Rpb24oKXtcbiAgICAvLyBpZihpc3RhdGUgPT0gbnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiBpc3RhdGUuaW5mbGF0ZVN5bmModGhpcyk7XG59XG5aU3RyZWFtLnByb3RvdHlwZS5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpe1xuICAgIC8vIGlmKGlzdGF0ZSA9PSBudWxsKSByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgcmV0dXJuIGlzdGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTtcbn1cblxuLypcblxuICBwdWJsaWMgaW50IGRlZmxhdGVJbml0KGludCBsZXZlbCl7XG4gICAgcmV0dXJuIGRlZmxhdGVJbml0KGxldmVsLCBNQVhfV0JJVFMpO1xuICB9XG4gIHB1YmxpYyBpbnQgZGVmbGF0ZUluaXQoaW50IGxldmVsLCBib29sZWFuIG5vd3JhcCl7XG4gICAgcmV0dXJuIGRlZmxhdGVJbml0KGxldmVsLCBNQVhfV0JJVFMsIG5vd3JhcCk7XG4gIH1cbiAgcHVibGljIGludCBkZWZsYXRlSW5pdChpbnQgbGV2ZWwsIGludCBiaXRzKXtcbiAgICByZXR1cm4gZGVmbGF0ZUluaXQobGV2ZWwsIGJpdHMsIGZhbHNlKTtcbiAgfVxuICBwdWJsaWMgaW50IGRlZmxhdGVJbml0KGludCBsZXZlbCwgaW50IGJpdHMsIGJvb2xlYW4gbm93cmFwKXtcbiAgICBkc3RhdGU9bmV3IERlZmxhdGUoKTtcbiAgICByZXR1cm4gZHN0YXRlLmRlZmxhdGVJbml0KHRoaXMsIGxldmVsLCBub3dyYXA/LWJpdHM6Yml0cyk7XG4gIH1cbiAgcHVibGljIGludCBkZWZsYXRlKGludCBmbHVzaCl7XG4gICAgaWYoZHN0YXRlPT1udWxsKXtcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICB9XG4gICAgcmV0dXJuIGRzdGF0ZS5kZWZsYXRlKHRoaXMsIGZsdXNoKTtcbiAgfVxuICBwdWJsaWMgaW50IGRlZmxhdGVFbmQoKXtcbiAgICBpZihkc3RhdGU9PW51bGwpIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICBpbnQgcmV0PWRzdGF0ZS5kZWZsYXRlRW5kKCk7XG4gICAgZHN0YXRlPW51bGw7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBwdWJsaWMgaW50IGRlZmxhdGVQYXJhbXMoaW50IGxldmVsLCBpbnQgc3RyYXRlZ3kpe1xuICAgIGlmKGRzdGF0ZT09bnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiBkc3RhdGUuZGVmbGF0ZVBhcmFtcyh0aGlzLCBsZXZlbCwgc3RyYXRlZ3kpO1xuICB9XG4gIHB1YmxpYyBpbnQgZGVmbGF0ZVNldERpY3Rpb25hcnkgKGJ5dGVbXSBkaWN0aW9uYXJ5LCBpbnQgZGljdExlbmd0aCl7XG4gICAgaWYoZHN0YXRlID09IG51bGwpXG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgcmV0dXJuIGRzdGF0ZS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKTtcbiAgfVxuXG4qL1xuXG4vKlxuICAvLyBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG4gIC8vIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXRcbiAgLy8gdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm5leHRfb3V0IGJ1ZmZlciBhbmQgY29weWluZyBpbnRvIGl0LlxuICAvLyAoU2VlIGFsc28gcmVhZF9idWYoKSkuXG4gIHZvaWQgZmx1c2hfcGVuZGluZygpe1xuICAgIGludCBsZW49ZHN0YXRlLnBlbmRpbmc7XG5cbiAgICBpZihsZW4+YXZhaWxfb3V0KSBsZW49YXZhaWxfb3V0O1xuICAgIGlmKGxlbj09MCkgcmV0dXJuO1xuXG4gICAgaWYoZHN0YXRlLnBlbmRpbmdfYnVmLmxlbmd0aDw9ZHN0YXRlLnBlbmRpbmdfb3V0IHx8XG4gICAgICAgbmV4dF9vdXQubGVuZ3RoPD1uZXh0X291dF9pbmRleCB8fFxuICAgICAgIGRzdGF0ZS5wZW5kaW5nX2J1Zi5sZW5ndGg8KGRzdGF0ZS5wZW5kaW5nX291dCtsZW4pIHx8XG4gICAgICAgbmV4dF9vdXQubGVuZ3RoPChuZXh0X291dF9pbmRleCtsZW4pKXtcbiAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihkc3RhdGUucGVuZGluZ19idWYubGVuZ3RoK1wiLCBcIitkc3RhdGUucGVuZGluZ19vdXQrXG5cdFx0XHQgXCIsIFwiK25leHRfb3V0Lmxlbmd0aCtcIiwgXCIrbmV4dF9vdXRfaW5kZXgrXCIsIFwiK2xlbik7XG4gICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJhdmFpbF9vdXQ9XCIrYXZhaWxfb3V0KTtcbiAgICB9XG5cbiAgICBTeXN0ZW0uYXJyYXljb3B5KGRzdGF0ZS5wZW5kaW5nX2J1ZiwgZHN0YXRlLnBlbmRpbmdfb3V0LFxuXHRcdCAgICAgbmV4dF9vdXQsIG5leHRfb3V0X2luZGV4LCBsZW4pO1xuXG4gICAgbmV4dF9vdXRfaW5kZXgrPWxlbjtcbiAgICBkc3RhdGUucGVuZGluZ19vdXQrPWxlbjtcbiAgICB0b3RhbF9vdXQrPWxlbjtcbiAgICBhdmFpbF9vdXQtPWxlbjtcbiAgICBkc3RhdGUucGVuZGluZy09bGVuO1xuICAgIGlmKGRzdGF0ZS5wZW5kaW5nPT0wKXtcbiAgICAgIGRzdGF0ZS5wZW5kaW5nX291dD0wO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAgLy8gYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2hcbiAgLy8gdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcbiAgLy8gYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm5leHRfaW4gYnVmZmVyIGFuZCBjb3B5aW5nIGZyb20gaXQuXG4gIC8vIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuICBpbnQgcmVhZF9idWYoYnl0ZVtdIGJ1ZiwgaW50IHN0YXJ0LCBpbnQgc2l6ZSkge1xuICAgIGludCBsZW49YXZhaWxfaW47XG5cbiAgICBpZihsZW4+c2l6ZSkgbGVuPXNpemU7XG4gICAgaWYobGVuPT0wKSByZXR1cm4gMDtcblxuICAgIGF2YWlsX2luLT1sZW47XG5cbiAgICBpZihkc3RhdGUubm9oZWFkZXI9PTApIHtcbiAgICAgIGFkbGVyPV9hZGxlci5hZGxlcjMyKGFkbGVyLCBuZXh0X2luLCBuZXh0X2luX2luZGV4LCBsZW4pO1xuICAgIH1cbiAgICBTeXN0ZW0uYXJyYXljb3B5KG5leHRfaW4sIG5leHRfaW5faW5kZXgsIGJ1Ziwgc3RhcnQsIGxlbik7XG4gICAgbmV4dF9pbl9pbmRleCAgKz0gbGVuO1xuICAgIHRvdGFsX2luICs9IGxlbjtcbiAgICByZXR1cm4gbGVuO1xuICB9XG5cbiAgcHVibGljIHZvaWQgZnJlZSgpe1xuICAgIG5leHRfaW49bnVsbDtcbiAgICBuZXh0X291dD1udWxsO1xuICAgIG1zZz1udWxsO1xuICAgIF9hZGxlcj1udWxsO1xuICB9XG59XG4qL1xuXG5cbi8vXG4vLyBJbmZsYXRlLmphdmFcbi8vXG5cbmZ1bmN0aW9uIEluZmxhdGUoKSB7XG4gICAgdGhpcy53YXMgPSBbMF07XG59XG5cbkluZmxhdGUucHJvdG90eXBlLmluZmxhdGVSZXNldCA9IGZ1bmN0aW9uKHopIHtcbiAgICBpZih6ID09IG51bGwgfHwgei5pc3RhdGUgPT0gbnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIFxuICAgIHoudG90YWxfaW4gPSB6LnRvdGFsX291dCA9IDA7XG4gICAgei5tc2cgPSBudWxsO1xuICAgIHouaXN0YXRlLm1vZGUgPSB6LmlzdGF0ZS5ub3dyYXAhPTAgPyBCTE9DS1MgOiBNRVRIT0Q7XG4gICAgei5pc3RhdGUuYmxvY2tzLnJlc2V0KHosIG51bGwpO1xuICAgIHJldHVybiBaX09LO1xufVxuXG5JbmZsYXRlLnByb3RvdHlwZS5pbmZsYXRlRW5kID0gZnVuY3Rpb24oeil7XG4gICAgaWYodGhpcy5ibG9ja3MgIT0gbnVsbClcbiAgICAgIHRoaXMuYmxvY2tzLmZyZWUoeik7XG4gICAgdGhpcy5ibG9ja3M9bnVsbDtcbiAgICByZXR1cm4gWl9PSztcbn1cblxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZUluaXQgPSBmdW5jdGlvbih6LCB3KXtcbiAgICB6Lm1zZyA9IG51bGw7XG4gICAgdGhpcy5ibG9ja3MgPSBudWxsO1xuXG4gICAgLy8gaGFuZGxlIHVuZG9jdW1lbnRlZCBub3dyYXAgb3B0aW9uIChubyB6bGliIGhlYWRlciBvciBjaGVjaylcbiAgICBub3dyYXAgPSAwO1xuICAgIGlmKHcgPCAwKXtcbiAgICAgIHcgPSAtIHc7XG4gICAgICBub3dyYXAgPSAxO1xuICAgIH1cblxuICAgIC8vIHNldCB3aW5kb3cgc2l6ZVxuICAgIGlmKHc8OCB8fHc+MTUpe1xuICAgICAgdGhpcy5pbmZsYXRlRW5kKHopO1xuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIH1cbiAgICB0aGlzLndiaXRzPXc7XG5cbiAgICB6LmlzdGF0ZS5ibG9ja3M9bmV3IEluZkJsb2Nrcyh6LCBcblx0XHRcdFx0ICB6LmlzdGF0ZS5ub3dyYXAhPTAgPyBudWxsIDogdGhpcyxcblx0XHRcdFx0ICAxPDx3KTtcblxuICAgIC8vIHJlc2V0IHN0YXRlXG4gICAgdGhpcy5pbmZsYXRlUmVzZXQoeik7XG4gICAgcmV0dXJuIFpfT0s7XG4gIH1cblxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZSA9IGZ1bmN0aW9uKHosIGYpe1xuICAgIHZhciByLCBiO1xuXG4gICAgaWYoeiA9PSBudWxsIHx8IHouaXN0YXRlID09IG51bGwgfHwgei5uZXh0X2luID09IG51bGwpXG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgZiA9IGYgPT0gWl9GSU5JU0ggPyBaX0JVRl9FUlJPUiA6IFpfT0s7XG4gICAgciA9IFpfQlVGX0VSUk9SO1xuICAgIHdoaWxlICh0cnVlKXtcbiAgICAgIHN3aXRjaCAoei5pc3RhdGUubW9kZSl7XG4gICAgICBjYXNlIE1FVEhPRDpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgaWYoKCh6LmlzdGF0ZS5tZXRob2QgPSB6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdKSYweGYpIT1aX0RFRkxBVEVEKXtcbiAgICAgICAgICB6LmlzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIHoubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIjtcbiAgICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSA1OyAgICAgICAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZigoei5pc3RhdGUubWV0aG9kPj40KSs4PnouaXN0YXRlLndiaXRzKXtcbiAgICAgICAgICB6LmlzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIHoubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiO1xuICAgICAgICAgIHouaXN0YXRlLm1hcmtlciA9IDU7ICAgICAgIC8vIGNhbid0IHRyeSBpbmZsYXRlU3luY1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHouaXN0YXRlLm1vZGU9RkxBRztcbiAgICAgIGNhc2UgRkxBRzpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgYiA9ICh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdKSYweGZmO1xuXG4gICAgICAgIGlmKCgoKHouaXN0YXRlLm1ldGhvZCA8PCA4KStiKSAlIDMxKSE9MCl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICB6Lm1zZyA9IFwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiO1xuICAgICAgICAgIHouaXN0YXRlLm1hcmtlciA9IDU7ICAgICAgIC8vIGNhbid0IHRyeSBpbmZsYXRlU3luY1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoKGImUFJFU0VUX0RJQ1QpPT0wKXtcbiAgICAgICAgICB6LmlzdGF0ZS5tb2RlID0gQkxPQ0tTO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHouaXN0YXRlLm1vZGUgPSBESUNUNDtcbiAgICAgIGNhc2UgRElDVDQ6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIHouaXN0YXRlLm5lZWQ9KCh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpPDwyNCkmMHhmZjAwMDAwMDtcbiAgICAgICAgei5pc3RhdGUubW9kZT1ESUNUMztcbiAgICAgIGNhc2UgRElDVDM6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIHouaXN0YXRlLm5lZWQrPSgoei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSYweGZmKTw8MTYpJjB4ZmYwMDAwO1xuICAgICAgICB6LmlzdGF0ZS5tb2RlPURJQ1QyO1xuICAgICAgY2FzZSBESUNUMjpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZCs9KCh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpPDw4KSYweGZmMDA7XG4gICAgICAgIHouaXN0YXRlLm1vZGU9RElDVDE7XG4gICAgICBjYXNlIERJQ1QxOlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkICs9ICh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpO1xuICAgICAgICB6LmFkbGVyID0gei5pc3RhdGUubmVlZDtcbiAgICAgICAgei5pc3RhdGUubW9kZSA9IERJQ1QwO1xuICAgICAgICByZXR1cm4gWl9ORUVEX0RJQ1Q7XG4gICAgICBjYXNlIERJQ1QwOlxuICAgICAgICB6LmlzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICB6Lm1zZyA9IFwibmVlZCBkaWN0aW9uYXJ5XCI7XG4gICAgICAgIHouaXN0YXRlLm1hcmtlciA9IDA7ICAgICAgIC8vIGNhbiB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgICAgY2FzZSBCTE9DS1M6XG5cbiAgICAgICAgciA9IHouaXN0YXRlLmJsb2Nrcy5wcm9jKHosIHIpO1xuICAgICAgICBpZihyID09IFpfREFUQV9FUlJPUil7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSAwOyAgICAgLy8gY2FuIHRyeSBpbmZsYXRlU3luY1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHIgPT0gWl9PSyl7XG4gICAgICAgICAgciA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgaWYociAhPSBaX1NUUkVBTV9FTkQpe1xuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIHIgPSBmO1xuICAgICAgICB6LmlzdGF0ZS5ibG9ja3MucmVzZXQoeiwgei5pc3RhdGUud2FzKTtcbiAgICAgICAgaWYoei5pc3RhdGUubm93cmFwIT0wKXtcbiAgICAgICAgICB6LmlzdGF0ZS5tb2RlPURPTkU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgei5pc3RhdGUubW9kZT1DSEVDSzQ7XG4gICAgICBjYXNlIENIRUNLNDpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZD0oKHoubmV4dF9pblt6Lm5leHRfaW5faW5kZXgrK10mMHhmZik8PDI0KSYweGZmMDAwMDAwO1xuICAgICAgICB6LmlzdGF0ZS5tb2RlPUNIRUNLMztcbiAgICAgIGNhc2UgQ0hFQ0szOlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkKz0oKHoubmV4dF9pblt6Lm5leHRfaW5faW5kZXgrK10mMHhmZik8PDE2KSYweGZmMDAwMDtcbiAgICAgICAgei5pc3RhdGUubW9kZSA9IENIRUNLMjtcbiAgICAgIGNhc2UgQ0hFQ0syOlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkKz0oKHoubmV4dF9pblt6Lm5leHRfaW5faW5kZXgrK10mMHhmZik8PDgpJjB4ZmYwMDtcbiAgICAgICAgei5pc3RhdGUubW9kZSA9IENIRUNLMTtcbiAgICAgIGNhc2UgQ0hFQ0sxOlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkKz0oei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSYweGZmKTtcblxuICAgICAgICBpZigoKHouaXN0YXRlLndhc1swXSkpICE9ICgoei5pc3RhdGUubmVlZCkpKXtcbiAgICAgICAgICB6LmlzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIHoubXNnID0gXCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiO1xuICAgICAgICAgIHouaXN0YXRlLm1hcmtlciA9IDU7ICAgICAgIC8vIGNhbid0IHRyeSBpbmZsYXRlU3luY1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgei5pc3RhdGUubW9kZSA9IERPTkU7XG4gICAgICBjYXNlIERPTkU6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FTkQ7XG4gICAgICBjYXNlIEJBRDpcbiAgICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG5JbmZsYXRlLnByb3RvdHlwZS5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKHosICBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4PTA7XG4gICAgdmFyIGxlbmd0aCA9IGRpY3RMZW5ndGg7XG4gICAgaWYoej09bnVsbCB8fCB6LmlzdGF0ZSA9PSBudWxsfHwgei5pc3RhdGUubW9kZSAhPSBESUNUMClcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcblxuICAgIGlmKHouX2FkbGVyLmFkbGVyMzIoMSwgZGljdGlvbmFyeSwgMCwgZGljdExlbmd0aCkhPXouYWRsZXIpe1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG5cbiAgICB6LmFkbGVyID0gei5fYWRsZXIuYWRsZXIzMigwLCBudWxsLCAwLCAwKTtcblxuICAgIGlmKGxlbmd0aCA+PSAoMTw8ei5pc3RhdGUud2JpdHMpKXtcbiAgICAgIGxlbmd0aCA9ICgxPDx6LmlzdGF0ZS53Yml0cyktMTtcbiAgICAgIGluZGV4PWRpY3RMZW5ndGggLSBsZW5ndGg7XG4gICAgfVxuICAgIHouaXN0YXRlLmJsb2Nrcy5zZXRfZGljdGlvbmFyeShkaWN0aW9uYXJ5LCBpbmRleCwgbGVuZ3RoKTtcbiAgICB6LmlzdGF0ZS5tb2RlID0gQkxPQ0tTO1xuICAgIHJldHVybiBaX09LO1xuICB9XG5cbi8vICBzdGF0aWMgcHJpdmF0ZSBieXRlW10gbWFyayA9IHsoYnl0ZSkwLCAoYnl0ZSkwLCAoYnl0ZSkweGZmLCAoYnl0ZSkweGZmfTtcbnZhciBtYXJrID0gWzAsIDAsIDI1NSwgMjU1XVxuXG5JbmZsYXRlLnByb3RvdHlwZS5pbmZsYXRlU3luYyA9IGZ1bmN0aW9uKHope1xuICAgIHZhciBuOyAgICAgICAvLyBudW1iZXIgb2YgYnl0ZXMgdG8gbG9vayBhdFxuICAgIHZhciBwOyAgICAgICAvLyBwb2ludGVyIHRvIGJ5dGVzXG4gICAgdmFyIG07ICAgICAgIC8vIG51bWJlciBvZiBtYXJrZXIgYnl0ZXMgZm91bmQgaW4gYSByb3dcbiAgICB2YXIgciwgdzsgICAvLyB0ZW1wb3JhcmllcyB0byBzYXZlIHRvdGFsX2luIGFuZCB0b3RhbF9vdXRcblxuICAgIC8vIHNldCB1cFxuICAgIGlmKHogPT0gbnVsbCB8fCB6LmlzdGF0ZSA9PSBudWxsKVxuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIGlmKHouaXN0YXRlLm1vZGUgIT0gQkFEKXtcbiAgICAgIHouaXN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICB6LmlzdGF0ZS5tYXJrZXIgPSAwO1xuICAgIH1cbiAgICBpZigobj16LmF2YWlsX2luKT09MClcbiAgICAgIHJldHVybiBaX0JVRl9FUlJPUjtcbiAgICBwPXoubmV4dF9pbl9pbmRleDtcbiAgICBtPXouaXN0YXRlLm1hcmtlcjtcblxuICAgIC8vIHNlYXJjaFxuICAgIHdoaWxlIChuIT0wICYmIG0gPCA0KXtcbiAgICAgIGlmKHoubmV4dF9pbltwXSA9PSBtYXJrW21dKXtcbiAgICAgICAgbSsrO1xuICAgICAgfVxuICAgICAgZWxzZSBpZih6Lm5leHRfaW5bcF0hPTApe1xuICAgICAgICBtID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIG0gPSA0IC0gbTtcbiAgICAgIH1cbiAgICAgIHArKzsgbi0tO1xuICAgIH1cblxuICAgIC8vIHJlc3RvcmVcbiAgICB6LnRvdGFsX2luICs9IHAtei5uZXh0X2luX2luZGV4O1xuICAgIHoubmV4dF9pbl9pbmRleCA9IHA7XG4gICAgei5hdmFpbF9pbiA9IG47XG4gICAgei5pc3RhdGUubWFya2VyID0gbTtcblxuICAgIC8vIHJldHVybiBubyBqb3kgb3Igc2V0IHVwIHRvIHJlc3RhcnQgb24gYSBuZXcgYmxvY2tcbiAgICBpZihtICE9IDQpe1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG4gICAgcj16LnRvdGFsX2luOyAgdz16LnRvdGFsX291dDtcbiAgICB0aGlzLmluZmxhdGVSZXNldCh6KTtcbiAgICB6LnRvdGFsX2luPXI7ICB6LnRvdGFsX291dCA9IHc7XG4gICAgei5pc3RhdGUubW9kZSA9IEJMT0NLUztcbiAgICByZXR1cm4gWl9PSztcbn1cblxuICAvLyBSZXR1cm5zIHRydWUgaWYgaW5mbGF0ZSBpcyBjdXJyZW50bHkgYXQgdGhlIGVuZCBvZiBhIGJsb2NrIGdlbmVyYXRlZFxuICAvLyBieSBaX1NZTkNfRkxVU0ggb3IgWl9GVUxMX0ZMVVNILiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgb25lIFBQUFxuICAvLyBpbXBsZW1lbnRhdGlvbiB0byBwcm92aWRlIGFuIGFkZGl0aW9uYWwgc2FmZXR5IGNoZWNrLiBQUFAgdXNlcyBaX1NZTkNfRkxVU0hcbiAgLy8gYnV0IHJlbW92ZXMgdGhlIGxlbmd0aCBieXRlcyBvZiB0aGUgcmVzdWx0aW5nIGVtcHR5IHN0b3JlZCBibG9jay4gV2hlblxuICAvLyBkZWNvbXByZXNzaW5nLCBQUFAgY2hlY2tzIHRoYXQgYXQgdGhlIGVuZCBvZiBpbnB1dCBwYWNrZXQsIGluZmxhdGUgaXNcbiAgLy8gd2FpdGluZyBmb3IgdGhlc2UgbGVuZ3RoIGJ5dGVzLlxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZVN5bmNQb2ludCA9IGZ1bmN0aW9uKHope1xuICAgIGlmKHogPT0gbnVsbCB8fCB6LmlzdGF0ZSA9PSBudWxsIHx8IHouaXN0YXRlLmJsb2NrcyA9PSBudWxsKVxuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiB6LmlzdGF0ZS5ibG9ja3Muc3luY19wb2ludCgpO1xufVxuXG5cbi8vXG4vLyBJbmZCbG9ja3MuamF2YVxuLy9cblxudmFyIElORkJMT0NLU19CT1JERVIgPSBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07XG5cbmZ1bmN0aW9uIEluZkJsb2Nrcyh6LCBjaGVja2ZuLCB3KSB7XG4gICAgdGhpcy5odWZ0cz1uZXcgSW50MzJBcnJheShNQU5ZKjMpO1xuICAgIHRoaXMud2luZG93PW5ldyBVaW50OEFycmF5KHcpO1xuICAgIHRoaXMuZW5kPXc7XG4gICAgdGhpcy5jaGVja2ZuID0gY2hlY2tmbjtcbiAgICB0aGlzLm1vZGUgPSBJQl9UWVBFO1xuICAgIHRoaXMucmVzZXQoeiwgbnVsbCk7XG5cbiAgICB0aGlzLmxlZnQgPSAwOyAgICAgICAgICAgIC8vIGlmIFNUT1JFRCwgYnl0ZXMgbGVmdCB0byBjb3B5IFxuXG4gICAgdGhpcy50YWJsZSA9IDA7ICAgICAgICAgICAvLyB0YWJsZSBsZW5ndGhzICgxNCBiaXRzKSBcbiAgICB0aGlzLmluZGV4ID0gMDsgICAgICAgICAgIC8vIGluZGV4IGludG8gYmxlbnMgKG9yIGJvcmRlcikgXG4gICAgdGhpcy5ibGVucyA9IG51bGw7ICAgICAgICAgLy8gYml0IGxlbmd0aHMgb2YgY29kZXMgXG4gICAgdGhpcy5iYj1uZXcgSW50MzJBcnJheSgxKTsgLy8gYml0IGxlbmd0aCB0cmVlIGRlcHRoIFxuICAgIHRoaXMudGI9bmV3IEludDMyQXJyYXkoMSk7IC8vIGJpdCBsZW5ndGggZGVjb2RpbmcgdHJlZSBcblxuICAgIHRoaXMuY29kZXMgPSBuZXcgSW5mQ29kZXMoKTtcblxuICAgIHRoaXMubGFzdCA9IDA7ICAgICAgICAgICAgLy8gdHJ1ZSBpZiB0aGlzIGJsb2NrIGlzIHRoZSBsYXN0IGJsb2NrIFxuXG4gIC8vIG1vZGUgaW5kZXBlbmRlbnQgaW5mb3JtYXRpb24gXG4gICAgdGhpcy5iaXRrID0gMDsgICAgICAgICAgICAvLyBiaXRzIGluIGJpdCBidWZmZXIgXG4gICAgdGhpcy5iaXRiID0gMDsgICAgICAgICAgICAvLyBiaXQgYnVmZmVyIFxuICAgIHRoaXMucmVhZCA9IDA7ICAgICAgICAgICAgLy8gd2luZG93IHJlYWQgcG9pbnRlciBcbiAgICB0aGlzLndyaXRlID0gMDsgICAgICAgICAgIC8vIHdpbmRvdyB3cml0ZSBwb2ludGVyIFxuICAgIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAvLyBjaGVjayBvbiBvdXRwdXQgXG5cbiAgICB0aGlzLmluZnRyZWU9bmV3IEluZlRyZWUoKTtcbn1cblxuXG5cblxuSW5mQmxvY2tzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHosIGMpe1xuICAgIGlmKGMpIGNbMF09dGhpcy5jaGVjaztcbiAgICBpZih0aGlzLm1vZGU9PUlCX0NPREVTKXtcbiAgICAgIHRoaXMuY29kZXMuZnJlZSh6KTtcbiAgICB9XG4gICAgdGhpcy5tb2RlPUlCX1RZUEU7XG4gICAgdGhpcy5iaXRrPTA7XG4gICAgdGhpcy5iaXRiPTA7XG4gICAgdGhpcy5yZWFkPXRoaXMud3JpdGU9MDtcblxuICAgIGlmKHRoaXMuY2hlY2tmbilcbiAgICAgIHouYWRsZXI9dGhpcy5jaGVjaz16Ll9hZGxlci5hZGxlcjMyKDAsIG51bGwsIDAsIDApO1xuICB9XG5cbiBJbmZCbG9ja3MucHJvdG90eXBlLnByb2MgPSBmdW5jdGlvbih6LCByKXtcbiAgICB2YXIgdDsgICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBzdG9yYWdlXG4gICAgdmFyIGI7ICAgICAgICAgICAgICAvLyBiaXQgYnVmZmVyXG4gICAgdmFyIGs7ICAgICAgICAgICAgICAvLyBiaXRzIGluIGJpdCBidWZmZXJcbiAgICB2YXIgcDsgICAgICAgICAgICAgIC8vIGlucHV0IGRhdGEgcG9pbnRlclxuICAgIHZhciBuOyAgICAgICAgICAgICAgLy8gYnl0ZXMgYXZhaWxhYmxlIHRoZXJlXG4gICAgdmFyIHE7ICAgICAgICAgICAgICAvLyBvdXRwdXQgd2luZG93IHdyaXRlIHBvaW50ZXJcbiAgICB2YXIgbTsgICAgICAgICAgICAgIC8vIGJ5dGVzIHRvIGVuZCBvZiB3aW5kb3cgb3IgcmVhZCBwb2ludGVyXG5cbiAgICAvLyBjb3B5IGlucHV0L291dHB1dCBpbmZvcm1hdGlvbiB0byBsb2NhbHMgKFVQREFURSBtYWNybyByZXN0b3JlcylcbiAgICB7cD16Lm5leHRfaW5faW5kZXg7bj16LmF2YWlsX2luO2I9dGhpcy5iaXRiO2s9dGhpcy5iaXRrO31cbiAgICB7cT10aGlzLndyaXRlO209KHE8dGhpcy5yZWFkID8gdGhpcy5yZWFkLXEtMSA6IHRoaXMuZW5kLXEpO31cblxuICAgIC8vIHByb2Nlc3MgaW5wdXQgYmFzZWQgb24gY3VycmVudCBzdGF0ZVxuICAgIHdoaWxlKHRydWUpe1xuICAgICAgc3dpdGNoICh0aGlzLm1vZGUpe1xuICAgICAgY2FzZSBJQl9UWVBFOlxuXG5cdHdoaWxlKGs8KDMpKXtcblx0ICBpZihuIT0wKXtcblx0ICAgIHI9Wl9PSztcblx0ICB9XG5cdCAgZWxzZXtcblx0ICAgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgICB6LmF2YWlsX2luPW47XG5cdCAgICB6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgIHRoaXMud3JpdGU9cTtcblx0ICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICB9O1xuXHQgIG4tLTtcblx0ICBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgays9ODtcblx0fVxuXHR0ID0gKGIgJiA3KTtcblx0dGhpcy5sYXN0ID0gdCAmIDE7XG5cblx0c3dpdGNoICh0ID4+PiAxKXtcbiAgICAgICAgY2FzZSAwOiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZWQgXG4gICAgICAgICAge2I+Pj49KDMpO2stPSgzKTt9XG4gICAgICAgICAgdCA9IGsgJiA3OyAgICAgICAgICAgICAgICAgICAgLy8gZ28gdG8gYnl0ZSBib3VuZGFyeVxuXG4gICAgICAgICAge2I+Pj49KHQpO2stPSh0KTt9XG4gICAgICAgICAgdGhpcy5tb2RlID0gSUJfTEVOUzsgICAgICAgICAgICAgICAgICAvLyBnZXQgbGVuZ3RoIG9mIHN0b3JlZCBibG9ja1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpeGVkXG4gICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgYmw9bmV3IEludDMyQXJyYXkoMSk7XG5cdCAgICAgIHZhciBiZD1uZXcgSW50MzJBcnJheSgxKTtcbiAgICAgICAgICAgICAgdmFyIHRsPVtdO1xuXHQgICAgICB2YXIgdGQ9W107XG5cblx0ICAgICAgaW5mbGF0ZV90cmVlc19maXhlZChibCwgYmQsIHRsLCB0ZCwgeik7XG4gICAgICAgICAgICAgIHRoaXMuY29kZXMuaW5pdChibFswXSwgYmRbMF0sIHRsWzBdLCAwLCB0ZFswXSwgMCwgeik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAge2I+Pj49KDMpO2stPSgzKTt9XG5cbiAgICAgICAgICB0aGlzLm1vZGUgPSBJQl9DT0RFUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkeW5hbWljXG5cbiAgICAgICAgICB7Yj4+Pj0oMyk7ay09KDMpO31cblxuICAgICAgICAgIHRoaXMubW9kZSA9IElCX1RBQkxFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlsbGVnYWxcblxuICAgICAgICAgIHtiPj4+PSgzKTtrLT0oMyk7fVxuICAgICAgICAgIHRoaXMubW9kZSA9IEJBRDtcbiAgICAgICAgICB6Lm1zZyA9IFwiaW52YWxpZCBibG9jayB0eXBlXCI7XG4gICAgICAgICAgciA9IFpfREFUQV9FUlJPUjtcblxuXHQgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHRoaXMud3JpdGU9cTtcblx0ICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdH1cblx0YnJlYWs7XG4gICAgICBjYXNlIElCX0xFTlM6XG5cdHdoaWxlKGs8KDMyKSl7XG5cdCAgaWYobiE9MCl7XG5cdCAgICByPVpfT0s7XG5cdCAgfVxuXHQgIGVsc2V7XG5cdCAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgei5hdmFpbF9pbj1uO1xuXHQgICAgei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICB0aGlzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfTtcblx0ICBuLS07XG5cdCAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblxuXHRpZiAoKCgofmIpID4+PiAxNikgJiAweGZmZmYpICE9IChiICYgMHhmZmZmKSl7XG5cdCAgdGhpcy5tb2RlID0gQkFEO1xuXHQgIHoubXNnID0gXCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCI7XG5cdCAgciA9IFpfREFUQV9FUlJPUjtcblxuXHQgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHRoaXMud3JpdGU9cTtcblx0ICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdH1cblx0dGhpcy5sZWZ0ID0gKGIgJiAweGZmZmYpO1xuXHRiID0gayA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAvLyBkdW1wIGJpdHNcblx0dGhpcy5tb2RlID0gdGhpcy5sZWZ0IT0wID8gSUJfU1RPUkVEIDogKHRoaXMubGFzdCE9MCA/IElCX0RSWSA6IElCX1RZUEUpO1xuXHRicmVhaztcbiAgICAgIGNhc2UgSUJfU1RPUkVEOlxuXHRpZiAobiA9PSAwKXtcblx0ICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICB3cml0ZT1xO1xuXHQgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0fVxuXG5cdGlmKG09PTApe1xuXHQgIGlmKHE9PWVuZCYmcmVhZCE9MCl7XG5cdCAgICBxPTA7IG09KHE8dGhpcy5yZWFkID8gdGhpcy5yZWFkLXEtMSA6IHRoaXMuZW5kLXEpO1xuXHQgIH1cblx0ICBpZihtPT0wKXtcblx0ICAgIHRoaXMud3JpdGU9cTsgXG5cdCAgICByPXRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgcT10aGlzLndyaXRlOyBtID0gKHEgPCB0aGlzLnJlYWQgPyB0aGlzLnJlYWQtcS0xIDogdGhpcy5lbmQtcSk7XG5cdCAgICBpZihxPT10aGlzLmVuZCAmJiB0aGlzLnJlYWQgIT0gMCl7XG5cdCAgICAgIHE9MDsgbSA9IChxIDwgdGhpcy5yZWFkID8gdGhpcy5yZWFkLXEtMSA6IHRoaXMuZW5kLXEpO1xuXHQgICAgfVxuXHQgICAgaWYobT09MCl7XG5cdCAgICAgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgICAgdGhpcy53cml0ZT1xO1xuXHQgICAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdHI9Wl9PSztcblxuXHR0ID0gdGhpcy5sZWZ0O1xuXHRpZih0Pm4pIHQgPSBuO1xuXHRpZih0Pm0pIHQgPSBtO1xuXHRhcnJheUNvcHkoei5uZXh0X2luLCBwLCB0aGlzLndpbmRvdywgcSwgdCk7XG5cdHAgKz0gdDsgIG4gLT0gdDtcblx0cSArPSB0OyAgbSAtPSB0O1xuXHRpZiAoKHRoaXMubGVmdCAtPSB0KSAhPSAwKVxuXHQgIGJyZWFrO1xuXHR0aGlzLm1vZGUgPSAodGhpcy5sYXN0ICE9IDAgPyBJQl9EUlkgOiBJQl9UWVBFKTtcblx0YnJlYWs7XG4gICAgICBjYXNlIElCX1RBQkxFOlxuXG5cdHdoaWxlKGs8KDE0KSl7XG5cdCAgaWYobiE9MCl7XG5cdCAgICByPVpfT0s7XG5cdCAgfVxuXHQgIGVsc2V7XG5cdCAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgei5hdmFpbF9pbj1uO1xuXHQgICAgei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICB0aGlzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfTtcblx0ICBuLS07XG5cdCAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblxuXHR0aGlzLnRhYmxlID0gdCA9IChiICYgMHgzZmZmKTtcblx0aWYgKCh0ICYgMHgxZikgPiAyOSB8fCAoKHQgPj4gNSkgJiAweDFmKSA+IDI5KVxuXHQgIHtcblx0ICAgIHRoaXMubW9kZSA9IElCX0JBRDtcblx0ICAgIHoubXNnID0gXCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiO1xuXHQgICAgciA9IFpfREFUQV9FUlJPUjtcblxuXHQgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgIHRoaXMud3JpdGU9cTtcblx0ICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICB9XG5cdHQgPSAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZik7XG5cdGlmKHRoaXMuYmxlbnM9PW51bGwgfHwgdGhpcy5ibGVucy5sZW5ndGg8dCl7XG5cdCAgICB0aGlzLmJsZW5zPW5ldyBJbnQzMkFycmF5KHQpO1xuXHR9XG5cdGVsc2V7XG5cdCAgZm9yKHZhciBpPTA7IGk8dDsgaSsrKXtcbiAgICAgICAgICAgICAgdGhpcy5ibGVuc1tpXT0wO1xuICAgICAgICAgIH1cblx0fVxuXG5cdHtiPj4+PSgxNCk7ay09KDE0KTt9XG5cblx0dGhpcy5pbmRleCA9IDA7XG5cdG1vZGUgPSBJQl9CVFJFRTtcbiAgICAgIGNhc2UgSUJfQlRSRUU6XG5cdHdoaWxlICh0aGlzLmluZGV4IDwgNCArICh0aGlzLnRhYmxlID4+PiAxMCkpe1xuXHQgIHdoaWxlKGs8KDMpKXtcblx0ICAgIGlmKG4hPTApe1xuXHQgICAgICByPVpfT0s7XG5cdCAgICB9XG5cdCAgICBlbHNle1xuXHQgICAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgICB6LmF2YWlsX2luPW47XG5cdCAgICAgIHoudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgICB0aGlzLndyaXRlPXE7XG5cdCAgICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIH07XG5cdCAgICBuLS07XG5cdCAgICBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgICBrKz04O1xuXHQgIH1cblxuXHQgIHRoaXMuYmxlbnNbSU5GQkxPQ0tTX0JPUkRFUlt0aGlzLmluZGV4KytdXSA9IGImNztcblxuXHQgIHtiPj4+PSgzKTtrLT0oMyk7fVxuXHR9XG5cblx0d2hpbGUodGhpcy5pbmRleCA8IDE5KXtcblx0ICB0aGlzLmJsZW5zW0lORkJMT0NLU19CT1JERVJbdGhpcy5pbmRleCsrXV0gPSAwO1xuXHR9XG5cblx0dGhpcy5iYlswXSA9IDc7XG5cdHQgPSB0aGlzLmluZnRyZWUuaW5mbGF0ZV90cmVlc19iaXRzKHRoaXMuYmxlbnMsIHRoaXMuYmIsIHRoaXMudGIsIHRoaXMuaHVmdHMsIHopO1xuXHRpZiAodCAhPSBaX09LKXtcblx0ICByID0gdDtcblx0ICBpZiAociA9PSBaX0RBVEFfRVJST1Ipe1xuXHQgICAgdGhpcy5ibGVucz1udWxsO1xuXHQgICAgdGhpcy5tb2RlID0gSUJfQkFEO1xuXHQgIH1cblxuXHQgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHdyaXRlPXE7XG5cdCAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHR9XG5cblx0dGhpcy5pbmRleCA9IDA7XG5cdHRoaXMubW9kZSA9IElCX0RUUkVFO1xuICAgICAgY2FzZSBJQl9EVFJFRTpcblx0d2hpbGUgKHRydWUpe1xuXHQgIHQgPSB0aGlzLnRhYmxlO1xuXHQgIGlmKCEodGhpcy5pbmRleCA8IDI1OCArICh0ICYgMHgxZikgKyAoKHQgPj4gNSkgJiAweDFmKSkpe1xuXHQgICAgYnJlYWs7XG5cdCAgfVxuXG5cdCAgdmFyIGg7IC8vaW50W11cblx0ICB2YXIgaSwgaiwgYztcblxuXHQgIHQgPSB0aGlzLmJiWzBdO1xuXG5cdCAgd2hpbGUoazwodCkpe1xuXHQgICAgaWYobiE9MCl7XG5cdCAgICAgIHI9Wl9PSztcblx0ICAgIH1cblx0ICAgIGVsc2V7XG5cdCAgICAgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgICAgIHouYXZhaWxfaW49bjtcblx0ICAgICAgei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICAgIHRoaXMud3JpdGU9cTtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgfTtcblx0ICAgIG4tLTtcblx0ICAgIGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICAgIGsrPTg7XG5cdCAgfVxuXG4vL1x0ICBpZiAodGhpcy50YlswXT09LTEpe1xuLy8gICAgICAgICAgICBkbG9nKFwibnVsbC4uLlwiKTtcbi8vXHQgIH1cblxuXHQgIHQ9dGhpcy5odWZ0c1sodGhpcy50YlswXSsoYiAmIGluZmxhdGVfbWFza1t0XSkpKjMrMV07XG5cdCAgYz10aGlzLmh1ZnRzWyh0aGlzLnRiWzBdKyhiICYgaW5mbGF0ZV9tYXNrW3RdKSkqMysyXTtcblxuXHQgIGlmIChjIDwgMTYpe1xuXHQgICAgYj4+Pj0odCk7ay09KHQpO1xuXHQgICAgdGhpcy5ibGVuc1t0aGlzLmluZGV4KytdID0gYztcblx0ICB9XG5cdCAgZWxzZSB7IC8vIGMgPT0gMTYuLjE4XG5cdCAgICBpID0gYyA9PSAxOCA/IDcgOiBjIC0gMTQ7XG5cdCAgICBqID0gYyA9PSAxOCA/IDExIDogMztcblxuXHQgICAgd2hpbGUoazwodCtpKSl7XG5cdCAgICAgIGlmKG4hPTApe1xuXHRcdHI9Wl9PSztcblx0ICAgICAgfVxuXHQgICAgICBlbHNle1xuXHRcdHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdFx0ei5hdmFpbF9pbj1uO1xuXHRcdHoudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHRcdHRoaXMud3JpdGU9cTtcblx0XHRyZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICAgIH07XG5cdCAgICAgIG4tLTtcblx0ICAgICAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgICAgICBrKz04O1xuXHQgICAgfVxuXG5cdCAgICBiPj4+PSh0KTtrLT0odCk7XG5cblx0ICAgIGogKz0gKGIgJiBpbmZsYXRlX21hc2tbaV0pO1xuXG5cdCAgICBiPj4+PShpKTtrLT0oaSk7XG5cblx0ICAgIGkgPSB0aGlzLmluZGV4O1xuXHQgICAgdCA9IHRoaXMudGFibGU7XG5cdCAgICBpZiAoaSArIGogPiAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZikgfHxcblx0XHQoYyA9PSAxNiAmJiBpIDwgMSkpe1xuXHQgICAgICB0aGlzLmJsZW5zPW51bGw7XG5cdCAgICAgIHRoaXMubW9kZSA9IElCX0JBRDtcblx0ICAgICAgei5tc2cgPSBcImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIjtcblx0ICAgICAgciA9IFpfREFUQV9FUlJPUjtcblxuXHQgICAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICAgIHRoaXMud3JpdGU9cTtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgfVxuXG5cdCAgICBjID0gYyA9PSAxNiA/IHRoaXMuYmxlbnNbaS0xXSA6IDA7XG5cdCAgICBkb3tcblx0ICAgICAgdGhpcy5ibGVuc1tpKytdID0gYztcblx0ICAgIH1cblx0ICAgIHdoaWxlICgtLWohPTApO1xuXHQgICAgdGhpcy5pbmRleCA9IGk7XG5cdCAgfVxuXHR9XG5cblx0dGhpcy50YlswXT0tMTtcblx0e1xuXHQgICAgdmFyIGJsPW5ldyBJbnQzMkFycmF5KDEpO1xuXHQgICAgdmFyIGJkPW5ldyBJbnQzMkFycmF5KDEpO1xuXHQgICAgdmFyIHRsPW5ldyBJbnQzMkFycmF5KDEpO1xuXHQgICAgdmFyIHRkPW5ldyBJbnQzMkFycmF5KDEpO1xuXHQgICAgYmxbMF0gPSA5OyAgICAgICAgIC8vIG11c3QgYmUgPD0gOSBmb3IgbG9va2FoZWFkIGFzc3VtcHRpb25zXG5cdCAgICBiZFswXSA9IDY7ICAgICAgICAgLy8gbXVzdCBiZSA8PSA5IGZvciBsb29rYWhlYWQgYXNzdW1wdGlvbnNcblxuXHQgICAgdCA9IHRoaXMudGFibGU7XG5cdCAgICB0ID0gdGhpcy5pbmZ0cmVlLmluZmxhdGVfdHJlZXNfZHluYW1pYygyNTcgKyAodCAmIDB4MWYpLCBcblx0XHRcdFx0XHQgICAgICAxICsgKCh0ID4+IDUpICYgMHgxZiksXG5cdFx0XHRcdFx0ICAgICAgdGhpcy5ibGVucywgYmwsIGJkLCB0bCwgdGQsIHRoaXMuaHVmdHMsIHopO1xuXG5cdCAgICBpZiAodCAhPSBaX09LKXtcblx0ICAgICAgICBpZiAodCA9PSBaX0RBVEFfRVJST1Ipe1xuXHQgICAgICAgICAgICB0aGlzLmJsZW5zPW51bGw7XG5cdCAgICAgICAgICAgIHRoaXMubW9kZSA9IEJBRDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgciA9IHQ7XG5cblx0ICAgICAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgICAgICB0aGlzLndyaXRlPXE7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jb2Rlcy5pbml0KGJsWzBdLCBiZFswXSwgdGhpcy5odWZ0cywgdGxbMF0sIHRoaXMuaHVmdHMsIHRkWzBdLCB6KTtcblx0fVxuXHR0aGlzLm1vZGUgPSBJQl9DT0RFUztcbiAgICAgIGNhc2UgSUJfQ09ERVM6XG5cdHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9aztcblx0ei5hdmFpbF9pbj1uOyB6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0dGhpcy53cml0ZT1xO1xuXG5cdGlmICgociA9IHRoaXMuY29kZXMucHJvYyh0aGlzLCB6LCByKSkgIT0gWl9TVFJFQU1fRU5EKXtcblx0ICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHR9XG5cdHIgPSBaX09LO1xuXHR0aGlzLmNvZGVzLmZyZWUoeik7XG5cblx0cD16Lm5leHRfaW5faW5kZXg7IG49ei5hdmFpbF9pbjtiPXRoaXMuYml0YjtrPXRoaXMuYml0aztcblx0cT10aGlzLndyaXRlO20gPSAocSA8IHRoaXMucmVhZCA/IHRoaXMucmVhZC1xLTEgOiB0aGlzLmVuZC1xKTtcblxuXHRpZiAodGhpcy5sYXN0PT0wKXtcblx0ICB0aGlzLm1vZGUgPSBJQl9UWVBFO1xuXHQgIGJyZWFrO1xuXHR9XG5cdHRoaXMubW9kZSA9IElCX0RSWTtcbiAgICAgIGNhc2UgSUJfRFJZOlxuXHR0aGlzLndyaXRlPXE7IFxuXHRyID0gdGhpcy5pbmZsYXRlX2ZsdXNoKHosIHIpOyBcblx0cT10aGlzLndyaXRlOyBtID0gKHEgPCB0aGlzLnJlYWQgPyB0aGlzLnJlYWQtcS0xIDogdGhpcy5lbmQtcSk7XG5cdGlmICh0aGlzLnJlYWQgIT0gdGhpcy53cml0ZSl7XG5cdCAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgdGhpcy53cml0ZT1xO1xuXHQgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cdH1cblx0bW9kZSA9IERPTkU7XG4gICAgICBjYXNlIElCX0RPTkU6XG5cdHIgPSBaX1NUUkVBTV9FTkQ7XG5cblx0dGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHR0aGlzLndyaXRlPXE7XG5cdHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeiwgcik7XG4gICAgICBjYXNlIElCX0JBRDpcblx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHR0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHRoaXMud3JpdGU9cTtcblx0cmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblxuICAgICAgZGVmYXVsdDpcblx0ciA9IFpfU1RSRUFNX0VSUk9SO1xuXG5cdHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0dGhpcy53cml0ZT1xO1xuXHRyZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5JbmZCbG9ja3MucHJvdG90eXBlLmZyZWUgPSBmdW5jdGlvbih6KXtcbiAgICB0aGlzLnJlc2V0KHosIG51bGwpO1xuICAgIHRoaXMud2luZG93PW51bGw7XG4gICAgdGhpcy5odWZ0cz1udWxsO1xufVxuXG5JbmZCbG9ja3MucHJvdG90eXBlLnNldF9kaWN0aW9uYXJ5ID0gZnVuY3Rpb24oZCwgc3RhcnQsIG4pe1xuICAgIGFycmF5Q29weShkLCBzdGFydCwgd2luZG93LCAwLCBuKTtcbiAgICB0aGlzLnJlYWQgPSB0aGlzLndyaXRlID0gbjtcbn1cblxuICAvLyBSZXR1cm5zIHRydWUgaWYgaW5mbGF0ZSBpcyBjdXJyZW50bHkgYXQgdGhlIGVuZCBvZiBhIGJsb2NrIGdlbmVyYXRlZFxuICAvLyBieSBaX1NZTkNfRkxVU0ggb3IgWl9GVUxMX0ZMVVNILiBcbkluZkJsb2Nrcy5wcm90b3R5cGUuc3luY19wb2ludCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMubW9kZSA9PSBJQl9MRU5TO1xufVxuXG4gIC8vIGNvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBzbGlkaW5nIHdpbmRvdyB0byB0aGUgb3V0cHV0IGFyZWFcbkluZkJsb2Nrcy5wcm90b3R5cGUuaW5mbGF0ZV9mbHVzaCA9IGZ1bmN0aW9uKHosIHIpe1xuICAgIHZhciBuO1xuICAgIHZhciBwO1xuICAgIHZhciBxO1xuXG4gICAgLy8gbG9jYWwgY29waWVzIG9mIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gcG9pbnRlcnNcbiAgICBwID0gei5uZXh0X291dF9pbmRleDtcbiAgICBxID0gdGhpcy5yZWFkO1xuXG4gICAgLy8gY29tcHV0ZSBudW1iZXIgb2YgYnl0ZXMgdG8gY29weSBhcyBmYXIgYXMgZW5kIG9mIHdpbmRvd1xuICAgIG4gPSAoKHEgPD0gdGhpcy53cml0ZSA/IHRoaXMud3JpdGUgOiB0aGlzLmVuZCkgLSBxKTtcbiAgICBpZiAobiA+IHouYXZhaWxfb3V0KSBuID0gei5hdmFpbF9vdXQ7XG4gICAgaWYgKG4hPTAgJiYgciA9PSBaX0JVRl9FUlJPUikgciA9IFpfT0s7XG5cbiAgICAvLyB1cGRhdGUgY291bnRlcnNcbiAgICB6LmF2YWlsX291dCAtPSBuO1xuICAgIHoudG90YWxfb3V0ICs9IG47XG5cbiAgICAvLyB1cGRhdGUgY2hlY2sgaW5mb3JtYXRpb25cbiAgICBpZih0aGlzLmNoZWNrZm4gIT0gbnVsbClcbiAgICAgIHouYWRsZXI9dGhpcy5jaGVjaz16Ll9hZGxlci5hZGxlcjMyKHRoaXMuY2hlY2ssIHRoaXMud2luZG93LCBxLCBuKTtcblxuICAgIC8vIGNvcHkgYXMgZmFyIGFzIGVuZCBvZiB3aW5kb3dcbiAgICBhcnJheUNvcHkodGhpcy53aW5kb3csIHEsIHoubmV4dF9vdXQsIHAsIG4pO1xuICAgIHAgKz0gbjtcbiAgICBxICs9IG47XG5cbiAgICAvLyBzZWUgaWYgbW9yZSB0byBjb3B5IGF0IGJlZ2lubmluZyBvZiB3aW5kb3dcbiAgICBpZiAocSA9PSB0aGlzLmVuZCl7XG4gICAgICAvLyB3cmFwIHBvaW50ZXJzXG4gICAgICBxID0gMDtcbiAgICAgIGlmICh0aGlzLndyaXRlID09IHRoaXMuZW5kKVxuICAgICAgICB0aGlzLndyaXRlID0gMDtcblxuICAgICAgLy8gY29tcHV0ZSBieXRlcyB0byBjb3B5XG4gICAgICBuID0gdGhpcy53cml0ZSAtIHE7XG4gICAgICBpZiAobiA+IHouYXZhaWxfb3V0KSBuID0gei5hdmFpbF9vdXQ7XG4gICAgICBpZiAobiE9MCAmJiByID09IFpfQlVGX0VSUk9SKSByID0gWl9PSztcblxuICAgICAgLy8gdXBkYXRlIGNvdW50ZXJzXG4gICAgICB6LmF2YWlsX291dCAtPSBuO1xuICAgICAgei50b3RhbF9vdXQgKz0gbjtcblxuICAgICAgLy8gdXBkYXRlIGNoZWNrIGluZm9ybWF0aW9uXG4gICAgICBpZih0aGlzLmNoZWNrZm4gIT0gbnVsbClcblx0ei5hZGxlcj10aGlzLmNoZWNrPXouX2FkbGVyLmFkbGVyMzIodGhpcy5jaGVjaywgdGhpcy53aW5kb3csIHEsIG4pO1xuXG4gICAgICAvLyBjb3B5XG4gICAgICBhcnJheUNvcHkodGhpcy53aW5kb3csIHEsIHoubmV4dF9vdXQsIHAsIG4pO1xuICAgICAgcCArPSBuO1xuICAgICAgcSArPSBuO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBwb2ludGVyc1xuICAgIHoubmV4dF9vdXRfaW5kZXggPSBwO1xuICAgIHRoaXMucmVhZCA9IHE7XG5cbiAgICAvLyBkb25lXG4gICAgcmV0dXJuIHI7XG4gIH1cblxuLy9cbi8vIEluZkNvZGVzLmphdmFcbi8vXG5cbnZhciBJQ19TVEFSVD0wOyAgLy8geDogc2V0IHVwIGZvciBMRU5cbnZhciBJQ19MRU49MTsgICAgLy8gaTogZ2V0IGxlbmd0aC9saXRlcmFsL2VvYiBuZXh0XG52YXIgSUNfTEVORVhUPTI7IC8vIGk6IGdldHRpbmcgbGVuZ3RoIGV4dHJhIChoYXZlIGJhc2UpXG52YXIgSUNfRElTVD0zOyAgIC8vIGk6IGdldCBkaXN0YW5jZSBuZXh0XG52YXIgSUNfRElTVEVYVD00Oy8vIGk6IGdldHRpbmcgZGlzdGFuY2UgZXh0cmFcbnZhciBJQ19DT1BZPTU7ICAgLy8gbzogY29weWluZyBieXRlcyBpbiB3aW5kb3csIHdhaXRpbmcgZm9yIHNwYWNlXG52YXIgSUNfTElUPTY7ICAgIC8vIG86IGdvdCBsaXRlcmFsLCB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2VcbnZhciBJQ19XQVNIPTc7ICAgLy8gbzogZ290IGVvYiwgcG9zc2libHkgc3RpbGwgb3V0cHV0IHdhaXRpbmdcbnZhciBJQ19FTkQ9ODsgICAgLy8geDogZ290IGVvYiBhbmQgYWxsIGRhdGEgZmx1c2hlZFxudmFyIElDX0JBRENPREU9OTsvLyB4OiBnb3QgZXJyb3JcblxuZnVuY3Rpb24gSW5mQ29kZXMoKSB7XG59XG5cbkluZkNvZGVzLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oYmwsIGJkLCB0bCwgdGxfaW5kZXgsIHRkLCB0ZF9pbmRleCwgeikge1xuICAgIHRoaXMubW9kZT1JQ19TVEFSVDtcbiAgICB0aGlzLmxiaXRzPWJsO1xuICAgIHRoaXMuZGJpdHM9YmQ7XG4gICAgdGhpcy5sdHJlZT10bDtcbiAgICB0aGlzLmx0cmVlX2luZGV4PXRsX2luZGV4O1xuICAgIHRoaXMuZHRyZWUgPSB0ZDtcbiAgICB0aGlzLmR0cmVlX2luZGV4PXRkX2luZGV4O1xuICAgIHRoaXMudHJlZT1udWxsO1xufVxuXG5JbmZDb2Rlcy5wcm90b3R5cGUucHJvYyA9IGZ1bmN0aW9uKHMsIHosIHIpeyBcbiAgICB2YXIgajsgICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBzdG9yYWdlXG4gICAgdmFyIHQ7ICAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgcG9pbnRlciAoaW50W10pXG4gICAgdmFyIHRpbmRleDsgICAgICAgICAvLyB0ZW1wb3JhcnkgcG9pbnRlclxuICAgIHZhciBlOyAgICAgICAgICAgICAgLy8gZXh0cmEgYml0cyBvciBvcGVyYXRpb25cbiAgICB2YXIgYj0wOyAgICAgICAgICAgIC8vIGJpdCBidWZmZXJcbiAgICB2YXIgaz0wOyAgICAgICAgICAgIC8vIGJpdHMgaW4gYml0IGJ1ZmZlclxuICAgIHZhciBwPTA7ICAgICAgICAgICAgLy8gaW5wdXQgZGF0YSBwb2ludGVyXG4gICAgdmFyIG47ICAgICAgICAgICAgICAvLyBieXRlcyBhdmFpbGFibGUgdGhlcmVcbiAgICB2YXIgcTsgICAgICAgICAgICAgIC8vIG91dHB1dCB3aW5kb3cgd3JpdGUgcG9pbnRlclxuICAgIHZhciBtOyAgICAgICAgICAgICAgLy8gYnl0ZXMgdG8gZW5kIG9mIHdpbmRvdyBvciByZWFkIHBvaW50ZXJcbiAgICB2YXIgZjsgICAgICAgICAgICAgIC8vIHBvaW50ZXIgdG8gY29weSBzdHJpbmdzIGZyb21cblxuICAgIC8vIGNvcHkgaW5wdXQvb3V0cHV0IGluZm9ybWF0aW9uIHRvIGxvY2FscyAoVVBEQVRFIG1hY3JvIHJlc3RvcmVzKVxuICAgIHA9ei5uZXh0X2luX2luZGV4O249ei5hdmFpbF9pbjtiPXMuYml0YjtrPXMuYml0aztcbiAgICBxPXMud3JpdGU7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7XG5cbiAgICAvLyBwcm9jZXNzIGlucHV0IGFuZCBvdXRwdXQgYmFzZWQgb24gY3VycmVudCBzdGF0ZVxuICAgIHdoaWxlICh0cnVlKXtcbiAgICAgIHN3aXRjaCAodGhpcy5tb2RlKXtcblx0Ly8gd2FpdGluZyBmb3IgXCJpOlwiPWlucHV0LCBcIm86XCI9b3V0cHV0LCBcIng6XCI9bm90aGluZ1xuICAgICAgY2FzZSBJQ19TVEFSVDogICAgICAgICAvLyB4OiBzZXQgdXAgZm9yIExFTlxuXHRpZiAobSA+PSAyNTggJiYgbiA+PSAxMCl7XG5cblx0ICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgcy53cml0ZT1xO1xuXHQgIHIgPSB0aGlzLmluZmxhdGVfZmFzdCh0aGlzLmxiaXRzLCB0aGlzLmRiaXRzLCBcblx0XHRcdCAgIHRoaXMubHRyZWUsIHRoaXMubHRyZWVfaW5kZXgsIFxuXHRcdFx0ICAgdGhpcy5kdHJlZSwgdGhpcy5kdHJlZV9pbmRleCxcblx0XHRcdCAgIHMsIHopO1xuXG5cdCAgcD16Lm5leHRfaW5faW5kZXg7bj16LmF2YWlsX2luO2I9cy5iaXRiO2s9cy5iaXRrO1xuXHQgIHE9cy53cml0ZTttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTtcblxuXHQgIGlmIChyICE9IFpfT0spe1xuXHQgICAgdGhpcy5tb2RlID0gciA9PSBaX1NUUkVBTV9FTkQgPyBJQ19XQVNIIDogSUNfQkFEQ09ERTtcblx0ICAgIGJyZWFrO1xuXHQgIH1cblx0fVxuXHR0aGlzLm5lZWQgPSB0aGlzLmxiaXRzO1xuXHR0aGlzLnRyZWUgPSB0aGlzLmx0cmVlO1xuXHR0aGlzLnRyZWVfaW5kZXg9dGhpcy5sdHJlZV9pbmRleDtcblxuXHR0aGlzLm1vZGUgPSBJQ19MRU47XG4gICAgICBjYXNlIElDX0xFTjogICAgICAgICAgIC8vIGk6IGdldCBsZW5ndGgvbGl0ZXJhbC9lb2IgbmV4dFxuXHRqID0gdGhpcy5uZWVkO1xuXG5cdHdoaWxlKGs8KGopKXtcblx0ICBpZihuIT0wKXI9Wl9PSztcblx0ICBlbHNle1xuXG5cdCAgICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgIHMud3JpdGU9cTtcblx0ICAgIHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICB9XG5cdCAgbi0tO1xuXHQgIGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICBrKz04O1xuXHR9XG5cblx0dGluZGV4PSh0aGlzLnRyZWVfaW5kZXgrKGImaW5mbGF0ZV9tYXNrW2pdKSkqMztcblxuXHRiPj4+PSh0aGlzLnRyZWVbdGluZGV4KzFdKTtcblx0ay09KHRoaXMudHJlZVt0aW5kZXgrMV0pO1xuXG5cdGU9dGhpcy50cmVlW3RpbmRleF07XG5cblx0aWYoZSA9PSAwKXsgICAgICAgICAgICAgICAvLyBsaXRlcmFsXG5cdCAgdGhpcy5saXQgPSB0aGlzLnRyZWVbdGluZGV4KzJdO1xuXHQgIHRoaXMubW9kZSA9IElDX0xJVDtcblx0ICBicmVhaztcblx0fVxuXHRpZigoZSAmIDE2KSE9MCApeyAgICAgICAgICAvLyBsZW5ndGhcblx0ICB0aGlzLmdldCA9IGUgJiAxNTtcblx0ICB0aGlzLmxlbiA9IHRoaXMudHJlZVt0aW5kZXgrMl07XG5cdCAgdGhpcy5tb2RlID0gSUNfTEVORVhUO1xuXHQgIGJyZWFrO1xuXHR9XG5cdGlmICgoZSAmIDY0KSA9PSAwKXsgICAgICAgIC8vIG5leHQgdGFibGVcblx0ICB0aGlzLm5lZWQgPSBlO1xuXHQgIHRoaXMudHJlZV9pbmRleCA9IHRpbmRleC8zICsgdGhpcy50cmVlW3RpbmRleCsyXTtcblx0ICBicmVhaztcblx0fVxuXHRpZiAoKGUgJiAzMikhPTApeyAgICAgICAgICAgICAgIC8vIGVuZCBvZiBibG9ja1xuXHQgIHRoaXMubW9kZSA9IElDX1dBU0g7XG5cdCAgYnJlYWs7XG5cdH1cblx0dGhpcy5tb2RlID0gSUNfQkFEQ09ERTsgICAgICAgIC8vIGludmFsaWQgY29kZVxuXHR6Lm1zZyA9IFwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCI7XG5cdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0cy5iaXRiPWI7cy5iaXRrPWs7XG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0cy53cml0ZT1xO1xuXHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cbiAgICAgIGNhc2UgSUNfTEVORVhUOiAgICAgICAgLy8gaTogZ2V0dGluZyBsZW5ndGggZXh0cmEgKGhhdmUgYmFzZSlcblx0aiA9IHRoaXMuZ2V0O1xuXG5cdHdoaWxlKGs8KGopKXtcblx0ICBpZihuIT0wKXI9Wl9PSztcblx0ICBlbHNle1xuXG5cdCAgICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgIHMud3JpdGU9cTtcblx0ICAgIHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICB9XG5cdCAgbi0tOyBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgays9ODtcblx0fVxuXG5cdHRoaXMubGVuICs9IChiICYgaW5mbGF0ZV9tYXNrW2pdKTtcblxuXHRiPj49ajtcblx0ay09ajtcblxuXHR0aGlzLm5lZWQgPSB0aGlzLmRiaXRzO1xuXHR0aGlzLnRyZWUgPSB0aGlzLmR0cmVlO1xuXHR0aGlzLnRyZWVfaW5kZXggPSB0aGlzLmR0cmVlX2luZGV4O1xuXHR0aGlzLm1vZGUgPSBJQ19ESVNUO1xuICAgICAgY2FzZSBJQ19ESVNUOiAgICAgICAgICAvLyBpOiBnZXQgZGlzdGFuY2UgbmV4dFxuXHRqID0gdGhpcy5uZWVkO1xuXG5cdHdoaWxlKGs8KGopKXtcblx0ICBpZihuIT0wKXI9Wl9PSztcblx0ICBlbHNle1xuXG5cdCAgICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgIHMud3JpdGU9cTtcblx0ICAgIHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICB9XG5cdCAgbi0tOyBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgays9ODtcblx0fVxuXG5cdHRpbmRleD0odGhpcy50cmVlX2luZGV4KyhiICYgaW5mbGF0ZV9tYXNrW2pdKSkqMztcblxuXHRiPj49dGhpcy50cmVlW3RpbmRleCsxXTtcblx0ay09dGhpcy50cmVlW3RpbmRleCsxXTtcblxuXHRlID0gKHRoaXMudHJlZVt0aW5kZXhdKTtcblx0aWYoKGUgJiAxNikhPTApeyAgICAgICAgICAgICAgIC8vIGRpc3RhbmNlXG5cdCAgdGhpcy5nZXQgPSBlICYgMTU7XG5cdCAgdGhpcy5kaXN0ID0gdGhpcy50cmVlW3RpbmRleCsyXTtcblx0ICB0aGlzLm1vZGUgPSBJQ19ESVNURVhUO1xuXHQgIGJyZWFrO1xuXHR9XG5cdGlmICgoZSAmIDY0KSA9PSAwKXsgICAgICAgIC8vIG5leHQgdGFibGVcblx0ICB0aGlzLm5lZWQgPSBlO1xuXHQgIHRoaXMudHJlZV9pbmRleCA9IHRpbmRleC8zICsgdGhpcy50cmVlW3RpbmRleCsyXTtcblx0ICBicmVhaztcblx0fVxuXHR0aGlzLm1vZGUgPSBJQ19CQURDT0RFOyAgICAgICAgLy8gaW52YWxpZCBjb2RlXG5cdHoubXNnID0gXCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIjtcblx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRzLmJpdGI9YjtzLmJpdGs9aztcblx0ei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHRzLndyaXRlPXE7XG5cdHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblxuICAgICAgY2FzZSBJQ19ESVNURVhUOiAgICAgICAvLyBpOiBnZXR0aW5nIGRpc3RhbmNlIGV4dHJhXG5cdGogPSB0aGlzLmdldDtcblxuXHR3aGlsZShrPChqKSl7XG5cdCAgaWYobiE9MClyPVpfT0s7XG5cdCAgZWxzZXtcblxuXHQgICAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICBzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfVxuXHQgIG4tLTsgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblxuXHR0aGlzLmRpc3QgKz0gKGIgJiBpbmZsYXRlX21hc2tbal0pO1xuXG5cdGI+Pj1qO1xuXHRrLT1qO1xuXG5cdHRoaXMubW9kZSA9IElDX0NPUFk7XG4gICAgICBjYXNlIElDX0NPUFk6ICAgICAgICAgIC8vIG86IGNvcHlpbmcgYnl0ZXMgaW4gd2luZG93LCB3YWl0aW5nIGZvciBzcGFjZVxuICAgICAgICBmID0gcSAtIHRoaXMuZGlzdDtcbiAgICAgICAgd2hpbGUoZiA8IDApeyAgICAgLy8gbW9kdWxvIHdpbmRvdyBzaXplLVwid2hpbGVcIiBpbnN0ZWFkXG4gICAgICAgICAgZiArPSBzLmVuZDsgICAgIC8vIG9mIFwiaWZcIiBoYW5kbGVzIGludmFsaWQgZGlzdGFuY2VzXG5cdH1cblx0d2hpbGUgKHRoaXMubGVuIT0wKXtcblxuXHQgIGlmKG09PTApe1xuXHQgICAgaWYocT09cy5lbmQmJnMucmVhZCE9MCl7cT0wO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO31cblx0ICAgIGlmKG09PTApe1xuXHQgICAgICBzLndyaXRlPXE7IHI9cy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICAgIHE9cy53cml0ZTttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTtcblxuXHQgICAgICBpZihxPT1zLmVuZCYmcy5yZWFkIT0wKXtxPTA7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7fVxuXG5cdCAgICAgIGlmKG09PTApe1xuXHRcdHMuYml0Yj1iO3MuYml0az1rO1xuXHRcdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0XHRzLndyaXRlPXE7XG5cdFx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgICB9ICBcblx0ICAgIH1cblx0ICB9XG5cblx0ICBzLndpbmRvd1txKytdPXMud2luZG93W2YrK107IG0tLTtcblxuXHQgIGlmIChmID09IHMuZW5kKVxuICAgICAgICAgICAgZiA9IDA7XG5cdCAgdGhpcy5sZW4tLTtcblx0fVxuXHR0aGlzLm1vZGUgPSBJQ19TVEFSVDtcblx0YnJlYWs7XG4gICAgICBjYXNlIElDX0xJVDogICAgICAgICAgIC8vIG86IGdvdCBsaXRlcmFsLCB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2Vcblx0aWYobT09MCl7XG5cdCAgaWYocT09cy5lbmQmJnMucmVhZCE9MCl7cT0wO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO31cblx0ICBpZihtPT0wKXtcblx0ICAgIHMud3JpdGU9cTsgcj1zLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIHE9cy53cml0ZTttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTtcblxuXHQgICAgaWYocT09cy5lbmQmJnMucmVhZCE9MCl7cT0wO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO31cblx0ICAgIGlmKG09PTApe1xuXHQgICAgICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICAgICAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgICBzLndyaXRlPXE7XG5cdCAgICAgIHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0cj1aX09LO1xuXG5cdHMud2luZG93W3ErK109dGhpcy5saXQ7IG0tLTtcblxuXHR0aGlzLm1vZGUgPSBJQ19TVEFSVDtcblx0YnJlYWs7XG4gICAgICBjYXNlIElDX1dBU0g6ICAgICAgICAgICAvLyBvOiBnb3QgZW9iLCBwb3NzaWJseSBtb3JlIG91dHB1dFxuXHRpZiAoayA+IDcpeyAgICAgICAgLy8gcmV0dXJuIHVudXNlZCBieXRlLCBpZiBhbnlcblx0ICBrIC09IDg7XG5cdCAgbisrO1xuXHQgIHAtLTsgICAgICAgICAgICAgLy8gY2FuIGFsd2F5cyByZXR1cm4gb25lXG5cdH1cblxuXHRzLndyaXRlPXE7IHI9cy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdHE9cy53cml0ZTttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTtcblxuXHRpZiAocy5yZWFkICE9IHMud3JpdGUpe1xuXHQgIHMuYml0Yj1iO3MuYml0az1rO1xuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICBzLndyaXRlPXE7XG5cdCAgcmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHR9XG5cdHRoaXMubW9kZSA9IElDX0VORDtcbiAgICAgIGNhc2UgSUNfRU5EOlxuXHRyID0gWl9TVFJFQU1fRU5EO1xuXHRzLmJpdGI9YjtzLmJpdGs9aztcblx0ei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHRzLndyaXRlPXE7XG5cdHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblxuICAgICAgY2FzZSBJQ19CQURDT0RFOiAgICAgICAvLyB4OiBnb3QgZXJyb3JcblxuXHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdHMuYml0Yj1iO3MuYml0az1rO1xuXHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHMud3JpdGU9cTtcblx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXG4gICAgICBkZWZhdWx0OlxuXHRyID0gWl9TVFJFQU1fRVJST1I7XG5cblx0cy5iaXRiPWI7cy5iaXRrPWs7XG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0cy53cml0ZT1xO1xuXHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbkluZkNvZGVzLnByb3RvdHlwZS5mcmVlID0gZnVuY3Rpb24oeil7XG4gICAgLy8gIFpGUkVFKHosIGMpO1xufVxuXG4gIC8vIENhbGxlZCB3aXRoIG51bWJlciBvZiBieXRlcyBsZWZ0IHRvIHdyaXRlIGluIHdpbmRvdyBhdCBsZWFzdCAyNThcbiAgLy8gKHRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGgpIGFuZCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgYXZhaWxhYmxlXG4gIC8vIGF0IGxlYXN0IHRlbi4gIFRoZSB0ZW4gYnl0ZXMgYXJlIHNpeCBieXRlcyBmb3IgdGhlIGxvbmdlc3QgbGVuZ3RoL1xuICAvLyBkaXN0YW5jZSBwYWlyIHBsdXMgZm91ciBieXRlcyBmb3Igb3ZlcmxvYWRpbmcgdGhlIGJpdCBidWZmZXIuXG5cbkluZkNvZGVzLnByb3RvdHlwZS5pbmZsYXRlX2Zhc3QgPSBmdW5jdGlvbihibCwgYmQsIHRsLCB0bF9pbmRleCwgdGQsIHRkX2luZGV4LCBzLCB6KSB7XG4gICAgdmFyIHQ7ICAgICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBwb2ludGVyXG4gICAgdmFyICAgdHA7ICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBwb2ludGVyIChpbnRbXSlcbiAgICB2YXIgdHBfaW5kZXg7ICAgICAgICAgLy8gdGVtcG9yYXJ5IHBvaW50ZXJcbiAgICB2YXIgZTsgICAgICAgICAgICAgICAgLy8gZXh0cmEgYml0cyBvciBvcGVyYXRpb25cbiAgICB2YXIgYjsgICAgICAgICAgICAgICAgLy8gYml0IGJ1ZmZlclxuICAgIHZhciBrOyAgICAgICAgICAgICAgICAvLyBiaXRzIGluIGJpdCBidWZmZXJcbiAgICB2YXIgcDsgICAgICAgICAgICAgICAgLy8gaW5wdXQgZGF0YSBwb2ludGVyXG4gICAgdmFyIG47ICAgICAgICAgICAgICAgIC8vIGJ5dGVzIGF2YWlsYWJsZSB0aGVyZVxuICAgIHZhciBxOyAgICAgICAgICAgICAgICAvLyBvdXRwdXQgd2luZG93IHdyaXRlIHBvaW50ZXJcbiAgICB2YXIgbTsgICAgICAgICAgICAgICAgLy8gYnl0ZXMgdG8gZW5kIG9mIHdpbmRvdyBvciByZWFkIHBvaW50ZXJcbiAgICB2YXIgbWw7ICAgICAgICAgICAgICAgLy8gbWFzayBmb3IgbGl0ZXJhbC9sZW5ndGggdHJlZVxuICAgIHZhciBtZDsgICAgICAgICAgICAgICAvLyBtYXNrIGZvciBkaXN0YW5jZSB0cmVlXG4gICAgdmFyIGM7ICAgICAgICAgICAgICAgIC8vIGJ5dGVzIHRvIGNvcHlcbiAgICB2YXIgZDsgICAgICAgICAgICAgICAgLy8gZGlzdGFuY2UgYmFjayB0byBjb3B5IGZyb21cbiAgICB2YXIgcjsgICAgICAgICAgICAgICAgLy8gY29weSBzb3VyY2UgcG9pbnRlclxuXG4gICAgdmFyIHRwX2luZGV4X3RfMzsgICAgIC8vICh0cF9pbmRleCt0KSozXG5cbiAgICAvLyBsb2FkIGlucHV0LCBvdXRwdXQsIGJpdCB2YWx1ZXNcbiAgICBwPXoubmV4dF9pbl9pbmRleDtuPXouYXZhaWxfaW47Yj1zLmJpdGI7az1zLmJpdGs7XG4gICAgcT1zLndyaXRlO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBtYXNrc1xuICAgIG1sID0gaW5mbGF0ZV9tYXNrW2JsXTtcbiAgICBtZCA9IGluZmxhdGVfbWFza1tiZF07XG5cbiAgICAvLyBkbyB1bnRpbCBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dCBzcGFjZSBmb3IgZmFzdCBsb29wXG4gICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzdW1lIGNhbGxlZCB3aXRoIG0gPj0gMjU4ICYmIG4gPj0gMTBcbiAgICAgIC8vIGdldCBsaXRlcmFsL2xlbmd0aCBjb2RlXG4gICAgICB3aGlsZShrPCgyMCkpeyAgICAgICAgICAgICAgLy8gbWF4IGJpdHMgZm9yIGxpdGVyYWwvbGVuZ3RoIGNvZGVcblx0bi0tO1xuXHRifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7ays9ODtcbiAgICAgIH1cblxuICAgICAgdD0gYiZtbDtcbiAgICAgIHRwPXRsOyBcbiAgICAgIHRwX2luZGV4PXRsX2luZGV4O1xuICAgICAgdHBfaW5kZXhfdF8zPSh0cF9pbmRleCt0KSozO1xuICAgICAgaWYgKChlID0gdHBbdHBfaW5kZXhfdF8zXSkgPT0gMCl7XG5cdGI+Pj0odHBbdHBfaW5kZXhfdF8zKzFdKTsgay09KHRwW3RwX2luZGV4X3RfMysxXSk7XG5cblx0cy53aW5kb3dbcSsrXSA9IHRwW3RwX2luZGV4X3RfMysyXTtcblx0bS0tO1xuXHRjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGRvIHtcblxuXHRiPj49KHRwW3RwX2luZGV4X3RfMysxXSk7IGstPSh0cFt0cF9pbmRleF90XzMrMV0pO1xuXG5cdGlmKChlJjE2KSE9MCl7XG5cdCAgZSAmPSAxNTtcblx0ICBjID0gdHBbdHBfaW5kZXhfdF8zKzJdICsgKGIgJiBpbmZsYXRlX21hc2tbZV0pO1xuXG5cdCAgYj4+PWU7IGstPWU7XG5cblx0ICAvLyBkZWNvZGUgZGlzdGFuY2UgYmFzZSBvZiBibG9jayB0byBjb3B5XG5cdCAgd2hpbGUoazwoMTUpKXsgICAgICAgICAgIC8vIG1heCBiaXRzIGZvciBkaXN0YW5jZSBjb2RlXG5cdCAgICBuLS07XG5cdCAgICBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7ays9ODtcblx0ICB9XG5cblx0ICB0PSBiJm1kO1xuXHQgIHRwPXRkO1xuXHQgIHRwX2luZGV4PXRkX2luZGV4O1xuICAgICAgICAgIHRwX2luZGV4X3RfMz0odHBfaW5kZXgrdCkqMztcblx0ICBlID0gdHBbdHBfaW5kZXhfdF8zXTtcblxuXHQgIGRvIHtcblxuXHQgICAgYj4+PSh0cFt0cF9pbmRleF90XzMrMV0pOyBrLT0odHBbdHBfaW5kZXhfdF8zKzFdKTtcblxuXHQgICAgaWYoKGUmMTYpIT0wKXtcblx0ICAgICAgLy8gZ2V0IGV4dHJhIGJpdHMgdG8gYWRkIHRvIGRpc3RhbmNlIGJhc2Vcblx0ICAgICAgZSAmPSAxNTtcblx0ICAgICAgd2hpbGUoazwoZSkpeyAgICAgICAgIC8vIGdldCBleHRyYSBiaXRzICh1cCB0byAxMylcblx0XHRuLS07XG5cdFx0Ynw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO2srPTg7XG5cdCAgICAgIH1cblxuXHQgICAgICBkID0gdHBbdHBfaW5kZXhfdF8zKzJdICsgKGImaW5mbGF0ZV9tYXNrW2VdKTtcblxuXHQgICAgICBiPj49KGUpOyBrLT0oZSk7XG5cblx0ICAgICAgLy8gZG8gdGhlIGNvcHlcblx0ICAgICAgbSAtPSBjO1xuXHQgICAgICBpZiAocSA+PSBkKXsgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IGJlZm9yZSBkZXN0XG5cdFx0Ly8gIGp1c3QgY29weVxuXHRcdHI9cS1kO1xuXHRcdGlmKHEtcj4wICYmIDI+KHEtcikpeyAgICAgICAgICAgXG5cdFx0ICBzLndpbmRvd1txKytdPXMud2luZG93W3IrK107IC8vIG1pbmltdW0gY291bnQgaXMgdGhyZWUsXG5cdFx0ICBzLndpbmRvd1txKytdPXMud2luZG93W3IrK107IC8vIHNvIHVucm9sbCBsb29wIGEgbGl0dGxlXG5cdFx0ICBjLT0yO1xuXHRcdH1cblx0XHRlbHNle1xuXHRcdCAgcy53aW5kb3dbcSsrXT1zLndpbmRvd1tyKytdOyAvLyBtaW5pbXVtIGNvdW50IGlzIHRocmVlLFxuXHRcdCAgcy53aW5kb3dbcSsrXT1zLndpbmRvd1tyKytdOyAvLyBzbyB1bnJvbGwgbG9vcCBhIGxpdHRsZVxuXHRcdCAgYy09Mjtcblx0XHR9XG5cdCAgICAgIH1cblx0ICAgICAgZWxzZXsgICAgICAgICAgICAgICAgICAvLyBlbHNlIG9mZnNldCBhZnRlciBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgIHI9cS1kO1xuICAgICAgICAgICAgICAgIGRve1xuICAgICAgICAgICAgICAgICAgcis9cy5lbmQ7ICAgICAgICAgIC8vIGZvcmNlIHBvaW50ZXIgaW4gd2luZG93XG4gICAgICAgICAgICAgICAgfXdoaWxlKHI8MCk7ICAgICAgICAgLy8gY292ZXJzIGludmFsaWQgZGlzdGFuY2VzXG5cdFx0ZT1zLmVuZC1yO1xuXHRcdGlmKGM+ZSl7ICAgICAgICAgICAgIC8vIGlmIHNvdXJjZSBjcm9zc2VzLFxuXHRcdCAgYy09ZTsgICAgICAgICAgICAgIC8vIHdyYXBwZWQgY29weVxuXHRcdCAgaWYocS1yPjAgJiYgZT4ocS1yKSl7ICAgICAgICAgICBcblx0XHQgICAgZG97cy53aW5kb3dbcSsrXSA9IHMud2luZG93W3IrK107fVxuXHRcdCAgICB3aGlsZSgtLWUhPTApO1xuXHRcdCAgfVxuXHRcdCAgZWxzZXtcblx0XHQgICAgYXJyYXlDb3B5KHMud2luZG93LCByLCBzLndpbmRvdywgcSwgZSk7XG5cdFx0ICAgIHErPWU7IHIrPWU7IGU9MDtcblx0XHQgIH1cblx0XHQgIHIgPSAwOyAgICAgICAgICAgICAgICAgIC8vIGNvcHkgcmVzdCBmcm9tIHN0YXJ0IG9mIHdpbmRvd1xuXHRcdH1cblxuXHQgICAgICB9XG5cblx0ICAgICAgLy8gY29weSBhbGwgb3Igd2hhdCdzIGxlZnRcbiAgICAgICAgICAgICAgZG97cy53aW5kb3dbcSsrXSA9IHMud2luZG93W3IrK107fVxuXHRcdHdoaWxlKC0tYyE9MCk7XG5cdCAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZigoZSY2NCk9PTApe1xuXHQgICAgICB0Kz10cFt0cF9pbmRleF90XzMrMl07XG5cdCAgICAgIHQrPShiJmluZmxhdGVfbWFza1tlXSk7XG5cdCAgICAgIHRwX2luZGV4X3RfMz0odHBfaW5kZXgrdCkqMztcblx0ICAgICAgZT10cFt0cF9pbmRleF90XzNdO1xuXHQgICAgfVxuXHQgICAgZWxzZXtcblx0ICAgICAgei5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiO1xuXG5cdCAgICAgIGM9ei5hdmFpbF9pbi1uO2M9KGs+PjMpPGM/az4+MzpjO24rPWM7cC09YztrLT1jPDwzO1xuXG5cdCAgICAgIHMuYml0Yj1iO3MuYml0az1rO1xuXHQgICAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICAgIHMud3JpdGU9cTtcblxuXHQgICAgICByZXR1cm4gWl9EQVRBX0VSUk9SO1xuXHQgICAgfVxuXHQgIH1cblx0ICB3aGlsZSh0cnVlKTtcblx0ICBicmVhaztcblx0fVxuXG5cdGlmKChlJjY0KT09MCl7XG5cdCAgdCs9dHBbdHBfaW5kZXhfdF8zKzJdO1xuXHQgIHQrPShiJmluZmxhdGVfbWFza1tlXSk7XG5cdCAgdHBfaW5kZXhfdF8zPSh0cF9pbmRleCt0KSozO1xuXHQgIGlmKChlPXRwW3RwX2luZGV4X3RfM10pPT0wKXtcblxuXHQgICAgYj4+PSh0cFt0cF9pbmRleF90XzMrMV0pOyBrLT0odHBbdHBfaW5kZXhfdF8zKzFdKTtcblxuXHQgICAgcy53aW5kb3dbcSsrXT10cFt0cF9pbmRleF90XzMrMl07XG5cdCAgICBtLS07XG5cdCAgICBicmVhaztcblx0ICB9XG5cdH1cblx0ZWxzZSBpZigoZSYzMikhPTApe1xuXG5cdCAgYz16LmF2YWlsX2luLW47Yz0oaz4+Myk8Yz9rPj4zOmM7bis9YztwLT1jO2stPWM8PDM7XG4gXG5cdCAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHMud3JpdGU9cTtcblxuXHQgIHJldHVybiBaX1NUUkVBTV9FTkQ7XG5cdH1cblx0ZWxzZXtcblx0ICB6Lm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiO1xuXG5cdCAgYz16LmF2YWlsX2luLW47Yz0oaz4+Myk8Yz9rPj4zOmM7bis9YztwLT1jO2stPWM8PDM7XG5cblx0ICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgcy53cml0ZT1xO1xuXG5cdCAgcmV0dXJuIFpfREFUQV9FUlJPUjtcblx0fVxuICAgICAgfSBcbiAgICAgIHdoaWxlKHRydWUpO1xuICAgIH0gXG4gICAgd2hpbGUobT49MjU4ICYmIG4+PSAxMCk7XG5cbiAgICAvLyBub3QgZW5vdWdoIGlucHV0IG9yIG91dHB1dC0tcmVzdG9yZSBwb2ludGVycyBhbmQgcmV0dXJuXG4gICAgYz16LmF2YWlsX2luLW47Yz0oaz4+Myk8Yz9rPj4zOmM7bis9YztwLT1jO2stPWM8PDM7XG5cbiAgICBzLmJpdGI9YjtzLmJpdGs9aztcbiAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG4gICAgcy53cml0ZT1xO1xuXG4gICAgcmV0dXJuIFpfT0s7XG59XG5cbi8vXG4vLyBJbmZUcmVlLmphdmFcbi8vXG5cbmZ1bmN0aW9uIEluZlRyZWUoKSB7XG59XG5cbkluZlRyZWUucHJvdG90eXBlLmh1ZnRfYnVpbGQgPSBmdW5jdGlvbihiLCBiaW5kZXgsIG4sIHMsIGQsIGUsIHQsIG0sIGhwLCBobiwgdikge1xuXG4gICAgLy8gR2l2ZW4gYSBsaXN0IG9mIGNvZGUgbGVuZ3RocyBhbmQgYSBtYXhpbXVtIHRhYmxlIHNpemUsIG1ha2UgYSBzZXQgb2ZcbiAgICAvLyB0YWJsZXMgdG8gZGVjb2RlIHRoYXQgc2V0IG9mIGNvZGVzLiAgUmV0dXJuIFpfT0sgb24gc3VjY2VzcywgWl9CVUZfRVJST1JcbiAgICAvLyBpZiB0aGUgZ2l2ZW4gY29kZSBzZXQgaXMgaW5jb21wbGV0ZSAodGhlIHRhYmxlcyBhcmUgc3RpbGwgYnVpbHQgaW4gdGhpc1xuICAgIC8vIGNhc2UpLCBaX0RBVEFfRVJST1IgaWYgdGhlIGlucHV0IGlzIGludmFsaWQgKGFuIG92ZXItc3Vic2NyaWJlZCBzZXQgb2ZcbiAgICAvLyBsZW5ndGhzKSwgb3IgWl9NRU1fRVJST1IgaWYgbm90IGVub3VnaCBtZW1vcnkuXG5cbiAgICB2YXIgYTsgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvdW50ZXIgZm9yIGNvZGVzIG9mIGxlbmd0aCBrXG4gICAgdmFyIGY7ICAgICAgICAgICAgICAgICAgICAgICAvLyBpIHJlcGVhdHMgaW4gdGFibGUgZXZlcnkgZiBlbnRyaWVzXG4gICAgdmFyIGc7ICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXhpbXVtIGNvZGUgbGVuZ3RoXG4gICAgdmFyIGg7ICAgICAgICAgICAgICAgICAgICAgICAvLyB0YWJsZSBsZXZlbFxuICAgIHZhciBpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gY291bnRlciwgY3VycmVudCBjb2RlXG4gICAgdmFyIGo7ICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3VudGVyXG4gICAgdmFyIGs7ICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgYml0cyBpbiBjdXJyZW50IGNvZGVcbiAgICB2YXIgbDsgICAgICAgICAgICAgICAgICAgICAgIC8vIGJpdHMgcGVyIHRhYmxlIChyZXR1cm5lZCBpbiBtKVxuICAgIHZhciBtYXNrOyAgICAgICAgICAgICAgICAgICAgLy8gKDEgPDwgdykgLSAxLCB0byBhdm9pZCBjYyAtTyBidWcgb24gSFBcbiAgICB2YXIgcDsgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvaW50ZXIgaW50byBjW10sIGJbXSwgb3IgdltdXG4gICAgdmFyIHE7ICAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludHMgdG8gY3VycmVudCB0YWJsZVxuICAgIHZhciB3OyAgICAgICAgICAgICAgICAgICAgICAgLy8gYml0cyBiZWZvcmUgdGhpcyB0YWJsZSA9PSAobCAqIGgpXG4gICAgdmFyIHhwOyAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludGVyIGludG8geFxuICAgIHZhciB5OyAgICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGR1bW15IGNvZGVzIGFkZGVkXG4gICAgdmFyIHo7ICAgICAgICAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZW50cmllcyBpbiBjdXJyZW50IHRhYmxlXG5cbiAgICAvLyBHZW5lcmF0ZSBjb3VudHMgZm9yIGVhY2ggYml0IGxlbmd0aFxuXG4gICAgcCA9IDA7IGkgPSBuO1xuICAgIGRvIHtcbiAgICAgIHRoaXMuY1tiW2JpbmRleCtwXV0rKzsgcCsrOyBpLS07ICAgLy8gYXNzdW1lIGFsbCBlbnRyaWVzIDw9IEJNQVhcbiAgICB9d2hpbGUoaSE9MCk7XG5cbiAgICBpZih0aGlzLmNbMF0gPT0gbil7ICAgICAgICAgICAgICAgIC8vIG51bGwgaW5wdXQtLWFsbCB6ZXJvIGxlbmd0aCBjb2Rlc1xuICAgICAgdFswXSA9IC0xO1xuICAgICAgbVswXSA9IDA7XG4gICAgICByZXR1cm4gWl9PSztcbiAgICB9XG5cbiAgICAvLyBGaW5kIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoLCBib3VuZCAqbSBieSB0aG9zZVxuICAgIGwgPSBtWzBdO1xuICAgIGZvciAoaiA9IDE7IGogPD0gQk1BWDsgaisrKVxuICAgICAgaWYodGhpcy5jW2pdIT0wKSBicmVhaztcbiAgICBrID0gajsgICAgICAgICAgICAgICAgICAgICAgICAvLyBtaW5pbXVtIGNvZGUgbGVuZ3RoXG4gICAgaWYobCA8IGope1xuICAgICAgbCA9IGo7XG4gICAgfVxuICAgIGZvciAoaSA9IEJNQVg7IGkhPTA7IGktLSl7XG4gICAgICBpZih0aGlzLmNbaV0hPTApIGJyZWFrO1xuICAgIH1cbiAgICBnID0gaTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXhpbXVtIGNvZGUgbGVuZ3RoXG4gICAgaWYobCA+IGkpe1xuICAgICAgbCA9IGk7XG4gICAgfVxuICAgIG1bMF0gPSBsO1xuXG4gICAgLy8gQWRqdXN0IGxhc3QgbGVuZ3RoIGNvdW50IHRvIGZpbGwgb3V0IGNvZGVzLCBpZiBuZWVkZWRcbiAgICBmb3IgKHkgPSAxIDw8IGo7IGogPCBpOyBqKyssIHkgPDw9IDEpe1xuICAgICAgaWYgKCh5IC09IHRoaXMuY1tqXSkgPCAwKXtcbiAgICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCh5IC09IHRoaXMuY1tpXSkgPCAwKXtcbiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgfVxuICAgIHRoaXMuY1tpXSArPSB5O1xuXG4gICAgLy8gR2VuZXJhdGUgc3RhcnRpbmcgb2Zmc2V0cyBpbnRvIHRoZSB2YWx1ZSB0YWJsZSBmb3IgZWFjaCBsZW5ndGhcbiAgICB0aGlzLnhbMV0gPSBqID0gMDtcbiAgICBwID0gMTsgIHhwID0gMjtcbiAgICB3aGlsZSAoLS1pIT0wKSB7ICAgICAgICAgICAgICAgICAvLyBub3RlIHRoYXQgaSA9PSBnIGZyb20gYWJvdmVcbiAgICAgIHRoaXMueFt4cF0gPSAoaiArPSB0aGlzLmNbcF0pO1xuICAgICAgeHArKztcbiAgICAgIHArKztcbiAgICB9XG5cbiAgICAvLyBNYWtlIGEgdGFibGUgb2YgdmFsdWVzIGluIG9yZGVyIG9mIGJpdCBsZW5ndGhzXG4gICAgaSA9IDA7IHAgPSAwO1xuICAgIGRvIHtcbiAgICAgIGlmICgoaiA9IGJbYmluZGV4K3BdKSAhPSAwKXtcbiAgICAgICAgdGhpcy52W3RoaXMueFtqXSsrXSA9IGk7XG4gICAgICB9XG4gICAgICBwKys7XG4gICAgfVxuICAgIHdoaWxlICgrK2kgPCBuKTtcbiAgICBuID0gdGhpcy54W2ddOyAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBuIHRvIGxlbmd0aCBvZiB2XG5cbiAgICAvLyBHZW5lcmF0ZSB0aGUgSHVmZm1hbiBjb2RlcyBhbmQgZm9yIGVhY2gsIG1ha2UgdGhlIHRhYmxlIGVudHJpZXNcbiAgICB0aGlzLnhbMF0gPSBpID0gMDsgICAgICAgICAgICAgICAgIC8vIGZpcnN0IEh1ZmZtYW4gY29kZSBpcyB6ZXJvXG4gICAgcCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3JhYiB2YWx1ZXMgaW4gYml0IG9yZGVyXG4gICAgaCA9IC0xOyAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gdGFibGVzIHlldC0tbGV2ZWwgLTFcbiAgICB3ID0gLWw7ICAgICAgICAgICAgICAgICAgICAgICAvLyBiaXRzIGRlY29kZWQgPT0gKGwgKiBoKVxuICAgIHRoaXMudVswXSA9IDA7ICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCB0byBrZWVwIGNvbXBpbGVycyBoYXBweVxuICAgIHEgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpdHRvXG4gICAgeiA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGl0dG9cblxuICAgIC8vIGdvIHRocm91Z2ggdGhlIGJpdCBsZW5ndGhzIChrIGFscmVhZHkgaXMgYml0cyBpbiBzaG9ydGVzdCBjb2RlKVxuICAgIGZvciAoOyBrIDw9IGc7IGsrKyl7XG4gICAgICBhID0gdGhpcy5jW2tdO1xuICAgICAgd2hpbGUgKGEtLSE9MCl7XG5cdC8vIGhlcmUgaSBpcyB0aGUgSHVmZm1hbiBjb2RlIG9mIGxlbmd0aCBrIGJpdHMgZm9yIHZhbHVlICpwXG5cdC8vIG1ha2UgdGFibGVzIHVwIHRvIHJlcXVpcmVkIGxldmVsXG4gICAgICAgIHdoaWxlIChrID4gdyArIGwpe1xuICAgICAgICAgIGgrKztcbiAgICAgICAgICB3ICs9IGw7ICAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyB0YWJsZSBhbHdheXMgbCBiaXRzXG5cdCAgLy8gY29tcHV0ZSBtaW5pbXVtIHNpemUgdGFibGUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGwgYml0c1xuICAgICAgICAgIHogPSBnIC0gdztcbiAgICAgICAgICB6ID0gKHogPiBsKSA/IGwgOiB6OyAgICAgICAgLy8gdGFibGUgc2l6ZSB1cHBlciBsaW1pdFxuICAgICAgICAgIGlmKChmPTE8PChqPWstdykpPmErMSl7ICAgICAvLyB0cnkgYSBrLXcgYml0IHRhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvbyBmZXcgY29kZXMgZm9yIGstdyBiaXQgdGFibGVcbiAgICAgICAgICAgIGYgLT0gYSArIDE7ICAgICAgICAgICAgICAgLy8gZGVkdWN0IGNvZGVzIGZyb20gcGF0dGVybnMgbGVmdFxuICAgICAgICAgICAgeHAgPSBrO1xuICAgICAgICAgICAgaWYoaiA8IHope1xuICAgICAgICAgICAgICB3aGlsZSAoKytqIDwgeil7ICAgICAgICAvLyB0cnkgc21hbGxlciB0YWJsZXMgdXAgdG8geiBiaXRzXG4gICAgICAgICAgICAgICAgaWYoKGYgPDw9IDEpIDw9IHRoaXMuY1srK3hwXSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgLy8gZW5vdWdoIGNvZGVzIHRvIHVzZSB1cCBqIGJpdHNcbiAgICAgICAgICAgICAgICBmIC09IHRoaXMuY1t4cF07ICAgICAgICAgICAvLyBlbHNlIGRlZHVjdCBjb2RlcyBmcm9tIHBhdHRlcm5zXG4gICAgICAgICAgICAgIH1cblx0ICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgeiA9IDEgPDwgajsgICAgICAgICAgICAgICAgIC8vIHRhYmxlIGVudHJpZXMgZm9yIGotYml0IHRhYmxlXG5cblx0ICAvLyBhbGxvY2F0ZSBuZXcgdGFibGVcbiAgICAgICAgICBpZiAodGhpcy5oblswXSArIHogPiBNQU5ZKXsgICAgICAgLy8gKG5vdGU6IGRvZXNuJ3QgbWF0dGVyIGZvciBmaXhlZClcbiAgICAgICAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7ICAgICAgIC8vIG92ZXJmbG93IG9mIE1BTllcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy51W2hdID0gcSA9IC8qaHArKi8gdGhpcy5oblswXTsgICAvLyBERUJVR1xuICAgICAgICAgIHRoaXMuaG5bMF0gKz0gejtcbiBcblx0ICAvLyBjb25uZWN0IHRvIGxhc3QgdGFibGUsIGlmIHRoZXJlIGlzIG9uZVxuXHQgIGlmKGghPTApe1xuICAgICAgICAgICAgdGhpcy54W2hdPWk7ICAgICAgICAgICAvLyBzYXZlIHBhdHRlcm4gZm9yIGJhY2tpbmcgdXBcbiAgICAgICAgICAgIHRoaXMuclswXT1qOyAgICAgLy8gYml0cyBpbiB0aGlzIHRhYmxlXG4gICAgICAgICAgICB0aGlzLnJbMV09bDsgICAgIC8vIGJpdHMgdG8gZHVtcCBiZWZvcmUgdGhpcyB0YWJsZVxuICAgICAgICAgICAgaj1pPj4+KHcgLSBsKTtcbiAgICAgICAgICAgIHRoaXMuclsyXSA9IChxIC0gdGhpcy51W2gtMV0gLSBqKTsgICAgICAgICAgICAgICAvLyBvZmZzZXQgdG8gdGhpcyB0YWJsZVxuICAgICAgICAgICAgYXJyYXlDb3B5KHRoaXMuciwgMCwgaHAsICh0aGlzLnVbaC0xXStqKSozLCAzKTsgLy8gY29ubmVjdCB0byBsYXN0IHRhYmxlXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0WzBdID0gcTsgICAgICAgICAgICAgICAvLyBmaXJzdCB0YWJsZSBpcyByZXR1cm5lZCByZXN1bHRcblx0ICB9XG4gICAgICAgIH1cblxuXHQvLyBzZXQgdXAgdGFibGUgZW50cnkgaW4gclxuICAgICAgICB0aGlzLnJbMV0gPSAoayAtIHcpO1xuICAgICAgICBpZiAocCA+PSBuKXtcbiAgICAgICAgICB0aGlzLnJbMF0gPSAxMjggKyA2NDsgICAgICAvLyBvdXQgb2YgdmFsdWVzLS1pbnZhbGlkIGNvZGVcblx0fVxuICAgICAgICBlbHNlIGlmICh2W3BdIDwgcyl7XG4gICAgICAgICAgdGhpcy5yWzBdID0gKHRoaXMudltwXSA8IDI1NiA/IDAgOiAzMiArIDY0KTsgIC8vIDI1NiBpcyBlbmQtb2YtYmxvY2tcbiAgICAgICAgICB0aGlzLnJbMl0gPSB0aGlzLnZbcCsrXTsgICAgICAgICAgLy8gc2ltcGxlIGNvZGUgaXMganVzdCB0aGUgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIHRoaXMuclswXT0oZVt0aGlzLnZbcF0tc10rMTYrNjQpOyAvLyBub24tc2ltcGxlLS1sb29rIHVwIGluIGxpc3RzXG4gICAgICAgICAgdGhpcy5yWzJdPWRbdGhpcy52W3ArK10gLSBzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbGwgY29kZS1saWtlIGVudHJpZXMgd2l0aCByXG4gICAgICAgIGY9MTw8KGstdyk7XG4gICAgICAgIGZvciAoaj1pPj4+dztqPHo7ais9Zil7XG4gICAgICAgICAgYXJyYXlDb3B5KHRoaXMuciwgMCwgaHAsIChxK2opKjMsIDMpO1xuXHR9XG5cblx0Ly8gYmFja3dhcmRzIGluY3JlbWVudCB0aGUgay1iaXQgY29kZSBpXG4gICAgICAgIGZvciAoaiA9IDEgPDwgKGsgLSAxKTsgKGkgJiBqKSE9MDsgaiA+Pj49IDEpe1xuICAgICAgICAgIGkgXj0gajtcblx0fVxuICAgICAgICBpIF49IGo7XG5cblx0Ly8gYmFja3VwIG92ZXIgZmluaXNoZWQgdGFibGVzXG4gICAgICAgIG1hc2sgPSAoMSA8PCB3KSAtIDE7ICAgICAgLy8gbmVlZGVkIG9uIEhQLCBjYyAtTyBidWdcbiAgICAgICAgd2hpbGUgKChpICYgbWFzaykgIT0gdGhpcy54W2hdKXtcbiAgICAgICAgICBoLS07ICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBuZWVkIHRvIHVwZGF0ZSBxXG4gICAgICAgICAgdyAtPSBsO1xuICAgICAgICAgIG1hc2sgPSAoMSA8PCB3KSAtIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmV0dXJuIFpfQlVGX0VSUk9SIGlmIHdlIHdlcmUgZ2l2ZW4gYW4gaW5jb21wbGV0ZSB0YWJsZVxuICAgIHJldHVybiB5ICE9IDAgJiYgZyAhPSAxID8gWl9CVUZfRVJST1IgOiBaX09LO1xufVxuXG5JbmZUcmVlLnByb3RvdHlwZS5pbmZsYXRlX3RyZWVzX2JpdHMgPSBmdW5jdGlvbihjLCBiYiwgdGIsIGhwLCB6KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB0aGlzLmluaXRXb3JrQXJlYSgxOSk7XG4gICAgdGhpcy5oblswXT0wO1xuICAgIHJlc3VsdCA9IHRoaXMuaHVmdF9idWlsZChjLCAwLCAxOSwgMTksIG51bGwsIG51bGwsIHRiLCBiYiwgaHAsIHRoaXMuaG4sIHRoaXMudik7XG5cbiAgICBpZihyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKXtcbiAgICAgIHoubXNnID0gXCJvdmVyc3Vic2NyaWJlZCBkeW5hbWljIGJpdCBsZW5ndGhzIHRyZWVcIjtcbiAgICB9XG4gICAgZWxzZSBpZihyZXN1bHQgPT0gWl9CVUZfRVJST1IgfHwgYmJbMF0gPT0gMCl7XG4gICAgICB6Lm1zZyA9IFwiaW5jb21wbGV0ZSBkeW5hbWljIGJpdCBsZW5ndGhzIHRyZWVcIjtcbiAgICAgIHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuSW5mVHJlZS5wcm90b3R5cGUuaW5mbGF0ZV90cmVlc19keW5hbWljID0gZnVuY3Rpb24obmwsIG5kLCBjLCBibCwgYmQsIHRsLCB0ZCwgaHAsIHopIHtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgLy8gYnVpbGQgbGl0ZXJhbC9sZW5ndGggdHJlZVxuICAgIHRoaXMuaW5pdFdvcmtBcmVhKDI4OCk7XG4gICAgdGhpcy5oblswXT0wO1xuICAgIHJlc3VsdCA9IHRoaXMuaHVmdF9idWlsZChjLCAwLCBubCwgMjU3LCBjcGxlbnMsIGNwbGV4dCwgdGwsIGJsLCBocCwgdGhpcy5obiwgdGhpcy52KTtcbiAgICBpZiAocmVzdWx0ICE9IFpfT0sgfHwgYmxbMF0gPT0gMCl7XG4gICAgICBpZihyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKXtcbiAgICAgICAgei5tc2cgPSBcIm92ZXJzdWJzY3JpYmVkIGxpdGVyYWwvbGVuZ3RoIHRyZWVcIjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHJlc3VsdCAhPSBaX01FTV9FUlJPUil7XG4gICAgICAgIHoubXNnID0gXCJpbmNvbXBsZXRlIGxpdGVyYWwvbGVuZ3RoIHRyZWVcIjtcbiAgICAgICAgcmVzdWx0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBidWlsZCBkaXN0YW5jZSB0cmVlXG4gICAgdGhpcy5pbml0V29ya0FyZWEoMjg4KTtcbiAgICByZXN1bHQgPSB0aGlzLmh1ZnRfYnVpbGQoYywgbmwsIG5kLCAwLCBjcGRpc3QsIGNwZGV4dCwgdGQsIGJkLCBocCwgdGhpcy5obiwgdGhpcy52KTtcblxuICAgIGlmIChyZXN1bHQgIT0gWl9PSyB8fCAoYmRbMF0gPT0gMCAmJiBubCA+IDI1Nykpe1xuICAgICAgaWYgKHJlc3VsdCA9PSBaX0RBVEFfRVJST1Ipe1xuICAgICAgICB6Lm1zZyA9IFwib3ZlcnN1YnNjcmliZWQgZGlzdGFuY2UgdHJlZVwiO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocmVzdWx0ID09IFpfQlVGX0VSUk9SKSB7XG4gICAgICAgIHoubXNnID0gXCJpbmNvbXBsZXRlIGRpc3RhbmNlIHRyZWVcIjtcbiAgICAgICAgcmVzdWx0ID0gWl9EQVRBX0VSUk9SO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocmVzdWx0ICE9IFpfTUVNX0VSUk9SKXtcbiAgICAgICAgei5tc2cgPSBcImVtcHR5IGRpc3RhbmNlIHRyZWUgd2l0aCBsZW5ndGhzXCI7XG4gICAgICAgIHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFpfT0s7XG59XG4vKlxuICBzdGF0aWMgaW50IGluZmxhdGVfdHJlZXNfZml4ZWQoaW50W10gYmwsICAvL2xpdGVyYWwgZGVzaXJlZC9hY3R1YWwgYml0IGRlcHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRbXSBiZCwgIC8vZGlzdGFuY2UgZGVzaXJlZC9hY3R1YWwgYml0IGRlcHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRbXVtdIHRsLC8vbGl0ZXJhbC9sZW5ndGggdHJlZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludFtdW10gdGQsLy9kaXN0YW5jZSB0cmVlIHJlc3VsdCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFpTdHJlYW0geiAgLy9mb3IgbWVtb3J5IGFsbG9jYXRpb25cblx0XHRcdFx0ICl7XG5cbiovXG5cbmZ1bmN0aW9uIGluZmxhdGVfdHJlZXNfZml4ZWQoYmwsIGJkLCB0bCwgdGQsIHopIHtcbiAgICBibFswXT1maXhlZF9ibDtcbiAgICBiZFswXT1maXhlZF9iZDtcbiAgICB0bFswXT1maXhlZF90bDtcbiAgICB0ZFswXT1maXhlZF90ZDtcbiAgICByZXR1cm4gWl9PSztcbn1cblxuSW5mVHJlZS5wcm90b3R5cGUuaW5pdFdvcmtBcmVhID0gZnVuY3Rpb24odnNpemUpe1xuICAgIGlmKHRoaXMuaG49PW51bGwpe1xuICAgICAgICB0aGlzLmhuPW5ldyBJbnQzMkFycmF5KDEpO1xuICAgICAgICB0aGlzLnY9bmV3IEludDMyQXJyYXkodnNpemUpO1xuICAgICAgICB0aGlzLmM9bmV3IEludDMyQXJyYXkoQk1BWCsxKTtcbiAgICAgICAgdGhpcy5yPW5ldyBJbnQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLnU9bmV3IEludDMyQXJyYXkoQk1BWCk7XG4gICAgICAgIHRoaXMueD1uZXcgSW50MzJBcnJheShCTUFYKzEpO1xuICAgIH1cbiAgICBpZih0aGlzLnYubGVuZ3RoPHZzaXplKXsgXG4gICAgICAgIHRoaXMudj1uZXcgSW50MzJBcnJheSh2c2l6ZSk7IFxuICAgIH1cbiAgICBmb3IodmFyIGk9MDsgaTx2c2l6ZTsgaSsrKXt0aGlzLnZbaV09MDt9XG4gICAgZm9yKHZhciBpPTA7IGk8Qk1BWCsxOyBpKyspe3RoaXMuY1tpXT0wO31cbiAgICBmb3IodmFyIGk9MDsgaTwzOyBpKyspe3RoaXMucltpXT0wO31cbi8vICBmb3IoaW50IGk9MDsgaTxCTUFYOyBpKyspe3VbaV09MDt9XG4gICAgYXJyYXlDb3B5KHRoaXMuYywgMCwgdGhpcy51LCAwLCBCTUFYKTtcbi8vICBmb3IoaW50IGk9MDsgaTxCTUFYKzE7IGkrKyl7eFtpXT0wO31cbiAgICBhcnJheUNvcHkodGhpcy5jLCAwLCB0aGlzLngsIDAsIEJNQVgrMSk7XG59XG5cbnZhciB0ZXN0QXJyYXkgPSBuZXcgVWludDhBcnJheSgxKTtcbnZhciBoYXNTdWJhcnJheSA9ICh0eXBlb2YgdGVzdEFycmF5LnN1YmFycmF5ID09PSAnZnVuY3Rpb24nKTtcbnZhciBoYXNTbGljZSA9IGZhbHNlOyAvKiAodHlwZW9mIHRlc3RBcnJheS5zbGljZSA9PT0gJ2Z1bmN0aW9uJyk7ICovIC8vIENocm9tZSBzbGljZSBwZXJmb3JtYW5jZSBpcyBzbyBkaXJlIHRoYXQgd2UncmUgY3VycmVudGx5IG5vdCB1c2luZyBpdC4uLlxuXG5mdW5jdGlvbiBhcnJheUNvcHkoc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0gXG4gICAgaWYgKCFzcmMpIHtcbiAgICAgICAgdGhyb3cgXCJVbmRlZiBzcmNcIjtcbiAgICB9IGVsc2UgaWYgKCFkZXN0KSB7XG4gICAgICAgIHRocm93IFwiVW5kZWYgZGVzdFwiO1xuICAgIH1cblxuICAgIGlmIChzcmNPZmZzZXQgPT0gMCAmJiBjb3VudCA9PSBzcmMubGVuZ3RoKSB7XG4gICAgICAgIGFycmF5Q29weV9mYXN0KHNyYywgZGVzdCwgZGVzdE9mZnNldCk7XG4gICAgfSBlbHNlIGlmIChoYXNTdWJhcnJheSkge1xuICAgICAgICBhcnJheUNvcHlfZmFzdChzcmMuc3ViYXJyYXkoc3JjT2Zmc2V0LCBzcmNPZmZzZXQgKyBjb3VudCksIGRlc3QsIGRlc3RPZmZzZXQpOyBcbiAgICB9IGVsc2UgaWYgKHNyYy5CWVRFU19QRVJfRUxFTUVOVCA9PSAxICYmIGNvdW50ID4gMTAwKSB7XG4gICAgICAgIGFycmF5Q29weV9mYXN0KG5ldyBVaW50OEFycmF5KHNyYy5idWZmZXIsIHNyYy5ieXRlT2Zmc2V0ICsgc3JjT2Zmc2V0LCBjb3VudCksIGRlc3QsIGRlc3RPZmZzZXQpO1xuICAgIH0gZWxzZSB7IFxuICAgICAgICBhcnJheUNvcHlfc2xvdyhzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCwgY291bnQpO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBhcnJheUNvcHlfc2xvdyhzcmMsIHNyY09mZnNldCwgZGVzdCwgZGVzdE9mZnNldCwgY291bnQpIHtcblxuICAgIC8vIGRsb2coJ19zbG93IGNhbGw6IHNyY09mZnNldD0nICsgc3JjT2Zmc2V0ICsgJzsgZGVzdE9mZnNldD0nICsgZGVzdE9mZnNldCArICc7IGNvdW50PScgKyBjb3VudCk7XG5cbiAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIGRlc3RbZGVzdE9mZnNldCArIGldID0gc3JjW3NyY09mZnNldCArIGldO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXJyYXlDb3B5X2Zhc3Qoc3JjLCBkZXN0LCBkZXN0T2Zmc2V0KSB7XG4gICAgZGVzdC5zZXQoc3JjLCBkZXN0T2Zmc2V0KTtcbn1cblxuXG4gIC8vIGxhcmdlc3QgcHJpbWUgc21hbGxlciB0aGFuIDY1NTM2XG52YXIgQURMRVJfQkFTRT02NTUyMTsgXG4gIC8vIE5NQVggaXMgdGhlIGxhcmdlc3QgbiBzdWNoIHRoYXQgMjU1bihuKzEpLzIgKyAobisxKShCQVNFLTEpIDw9IDJeMzItMVxudmFyIEFETEVSX05NQVg9NTU1MjtcblxuZnVuY3Rpb24gYWRsZXIzMihhZGxlciwgLyogYnl0ZVtdICovIGJ1ZiwgIGluZGV4LCBsZW4pe1xuICAgIGlmKGJ1ZiA9PSBudWxsKXsgcmV0dXJuIDE7IH1cblxuICAgIHZhciBzMT1hZGxlciYweGZmZmY7XG4gICAgdmFyIHMyPShhZGxlcj4+MTYpJjB4ZmZmZjtcbiAgICB2YXIgaztcblxuICAgIHdoaWxlKGxlbiA+IDApIHtcbiAgICAgIGs9bGVuPEFETEVSX05NQVg/bGVuOkFETEVSX05NQVg7XG4gICAgICBsZW4tPWs7XG4gICAgICB3aGlsZShrPj0xNil7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBrLT0xNjtcbiAgICAgIH1cbiAgICAgIGlmKGshPTApe1xuICAgICAgICBkb3tcbiAgICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSgtLWshPTApO1xuICAgICAgfVxuICAgICAgczElPUFETEVSX0JBU0U7XG4gICAgICBzMiU9QURMRVJfQkFTRTtcbiAgICB9XG4gICAgcmV0dXJuIChzMjw8MTYpfHMxO1xufVxuXG5cblxuZnVuY3Rpb24ganN6bGliX2luZmxhdGVfYnVmZmVyKGJ1ZmZlciwgc3RhcnQsIGxlbmd0aCwgYWZ0ZXJVbmNPZmZzZXQpIHtcbiAgICBpZiAoIXN0YXJ0KSB7XG4gICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgc3RhcnQsIGJ1ZmZlci5ieXRlTGVuZ3RoIC0gc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgc3RhcnQsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIHogPSBuZXcgWlN0cmVhbSgpO1xuICAgIHouaW5mbGF0ZUluaXQoREVGX1dCSVRTLCB0cnVlKTtcbiAgICB6Lm5leHRfaW4gPSBidWZmZXI7XG4gICAgei5uZXh0X2luX2luZGV4ID0gMDtcbiAgICB6LmF2YWlsX2luID0gYnVmZmVyLmxlbmd0aDtcblxuICAgIHZhciBvQmxvY2tMaXN0ID0gW107XG4gICAgdmFyIHRvdGFsU2l6ZSA9IDA7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIG9idWYgPSBuZXcgVWludDhBcnJheSgzMjAwMCk7XG4gICAgICAgIHoubmV4dF9vdXQgPSBvYnVmO1xuICAgICAgICB6Lm5leHRfb3V0X2luZGV4ID0gMDtcbiAgICAgICAgei5hdmFpbF9vdXQgPSBvYnVmLmxlbmd0aDtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHouaW5mbGF0ZShaX05PX0ZMVVNIKTtcbiAgICAgICAgaWYgKHN0YXR1cyAhPSBaX09LICYmIHN0YXR1cyAhPSBaX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9IFpfQlVGX0VSUk9SKSB7XG4gICAgICAgICAgICB0aHJvdyB6Lm1zZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoei5hdmFpbF9vdXQgIT0gMCkge1xuICAgICAgICAgICAgdmFyIG5ld29iID0gbmV3IFVpbnQ4QXJyYXkob2J1Zi5sZW5ndGggLSB6LmF2YWlsX291dCk7XG4gICAgICAgICAgICBhcnJheUNvcHkob2J1ZiwgMCwgbmV3b2IsIDAsIChvYnVmLmxlbmd0aCAtIHouYXZhaWxfb3V0KSk7XG4gICAgICAgICAgICBvYnVmID0gbmV3b2I7XG4gICAgICAgIH1cbiAgICAgICAgb0Jsb2NrTGlzdC5wdXNoKG9idWYpO1xuICAgICAgICB0b3RhbFNpemUgKz0gb2J1Zi5sZW5ndGg7XG4gICAgICAgIGlmIChzdGF0dXMgPT0gWl9TVFJFQU1fRU5EIHx8IHN0YXR1cyA9PSBaX0JVRl9FUlJPUikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWZ0ZXJVbmNPZmZzZXQpIHtcbiAgICAgICAgYWZ0ZXJVbmNPZmZzZXRbMF0gPSAoc3RhcnQgfHwgMCkgKyB6Lm5leHRfaW5faW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKG9CbG9ja0xpc3QubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmV0dXJuIG9CbG9ja0xpc3RbMF0uYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh0b3RhbFNpemUpO1xuICAgICAgICB2YXIgY3Vyc29yID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvQmxvY2tMaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG9CbG9ja0xpc3RbaV07XG4gICAgICAgICAgICBhcnJheUNvcHkoYiwgMCwgb3V0LCBjdXJzb3IsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIGN1cnNvciArPSBiLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0LmJ1ZmZlcjtcbiAgICB9XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5mbGF0ZUJ1ZmZlcjoganN6bGliX2luZmxhdGVfYnVmZmVyLFxuICAgIGFycmF5Q29weTogYXJyYXlDb3B5XG4gIH07XG59XG4iXX0=
